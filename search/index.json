[{"content":"基本概念 SPA 和 MPA 单页应用应用（Single-Page Application，SPA），就是只有一张 Web 页面的应用，是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序。\n单页应用程序在切换功能页面的时候，如点击导航栏的时候，变化的只有主体内容，且页面不会刷新；多页应用程序（Multi-Page Application，MPA） 在点击导航栏时，会跳转到其他页面或刷新整个页面。\n对比项 SPA（Vue Router） MPA（传统 HTML） 页面结构 单个 HTML 文件，动态更新内容 多个独立 HTML 文件，完整刷新 加载方式 首次加载所有核心资源，后续仅更新变化部分 每次请求新页面时重新加载全部资源 路由实现 前端路由（通过 URL hash 或 History API）通过前端路由拦截，URL 变化但不触发服务器请求 后端路由（服务器根据 URL 返回对应页面）URL 变化会向服务器请求新页面 SEO 较差（需特殊处理，如 SSR 或预渲染） 较好（原生支持搜索引擎抓取） 用户体验 流畅无刷新，适合复杂交互场景 可能有明显加载延迟，适合内容型网站 开发难度 较高（需处理状态管理、路由、性能优化） 较低（传统开发模式，技术栈简单） 维护成本 大型项目可能复杂，需合理架构 页面间耦合度低，维护相对简单 适用场景 社交平台、管理后台、在线游戏等 新闻网站、博客、电商产品列表页等 搜索引擎优化，简称 SEO（Search Engine Optimization），是一种通过分析搜索引擎的排名规则，了解搜索引擎如何进行搜索、抓取网页以及如何确定特定关键词的排名的技术。\nSEO 通过采用易于被搜索引擎引用的方法，针对性地优化网站，从而提高其在搜索引擎中的自然排名。这样可以吸引更多用户访问网站，增加网站的流量，提升网站的销售和宣传能力，进而增强网站的品牌效应。\n代码示例 SPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // router/index.js (Vue Router配置) import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import Home from \u0026#39;../views/Home.vue\u0026#39; import About from \u0026#39;../views/About.vue\u0026#39; const routes = [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;Home\u0026#39;, component: Home }, { path: \u0026#39;/about\u0026#39;, name: \u0026#39;About\u0026#39;, component: About } ] const router = createRouter({ history: createWebHistory(), routes }) export default router MPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // server.js (Express路由) const express = require(\u0026#39;express\u0026#39;) const app = express() app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/index.html\u0026#39;) }) app.get(\u0026#39;/about\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/about.html\u0026#39;) }) app.listen(3000, () =\u0026gt; { console.log(\u0026#39;Server running on port 3000\u0026#39;) }) 路由 在 Vue 3 中，路由是实现单页应用（SPA）页面导航的核心机制。它允许用户在不刷新整个页面的情况下，通过 URL 变化切换视图内容。Vue Router 是 Vue.js 官方的路由管理器，专为 Vue 3 设计，提供了声明式导航、路由参数、路由守卫等高级功能。\nVue 中的路由：路径和组件之间的映射关系。\n在 Html 中，实现跳转时，都使用了 a 标签。标签中有一个属性 herf，为其赋一个网络地址或者一个路径后，它就会跳转对应的页面。\nVue.js 的路由和 a 标签实现的功能是一样的，都是实现一个对应的功能，只不过路由的性能更佳，a 标签不管单击多少次，都会发生对应的网络请求，页面会不断地进行刷新；但是使用路由机制，单击之后，不会出现网络请求页面刷新，而会直接跳转到要链接的地址，这是使用路由的好处。\n随着前后端分离开发模式的兴起，前端路由的概念出现：前端通过 AJAX 获取数据后通过一定的方式渲染到页面中，改变 url 不会向服务器发送请求，同时，前端可以监听 url 变化，可以解析 url 并执行相应的操作，而后端只负责提供 api 来返回数据，在 Vue中，通过路由跳转到不同的页面，实际上就是加载不同的组件。\n路由的安装和使用 路由的安装 Vue Router | The official Router for Vue.js\n在已经创建的 vue3 项目中，使用以下指令安装路由。\n1 npm install vue-router@4 路由基本配置 安装成功后，使用路由时需要经过以下几个步骤：\n（1）在 src 下创建路由文件夹 router，并在 index.js 文件中创建路由对象，并配置路由规则。\nindex.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; // 创建路由规则 const routes = [ { path:..., component:... } ] // 创建路由器 const router = createRouter({ history: createWebHashHistory(), routes }) // 导出路由器 export default router （2）安装路由插件。在 main.js 文件中使用 import router from './router' 导入需要使用的路由，导入后使用 app.use(router) 命令加载 router 插件用于安装插件挂载属性。\nmain.js\n1 2 3 4 5 6 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import router from \u0026#39;./router\u0026#39; createApp(App).use(router).mount(\u0026#39;#app\u0026#39;) （3）在 App 组件的 template 中使用路由挂载其他组件。\nApp.vue\n1 2 3 \u0026lt;template\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/template\u0026gt; 路由文件结构 在使用路由时，通常会将页面文件放在 src 下的 views 文件夹中而不是 components 文件夹中，views 文件夹通常用来存放页面级别的组件，也就是每个路由对应的页面。\n比如，首页、关于我们、用户个人资料这些页面应该放在 views 里，因为它们对应不同的路由路径。而 components 文件夹里的组件是更小的、可复用的 UI 部分，比如按钮、导航栏、卡片等，这些可能在多个页面中被使用。\n1. 功能与用途\n文件夹 用途 典型场景 views 存放页面级组件，对应路由路径，负责完整页面的布局和路由逻辑。 如 HomeView.vue（首页）、UserProfile.vue（用户资料页）、LoginView.vue（登录页）。 components 存放可复用 UI 组件，用于构建页面的局部功能，不直接绑定路由。 如 Button.vue（按钮）、Navbar.vue（导航栏）、Card.vue（卡片组件）。 2. 路由关联\nviews 中的组件：\n在路由配置文件（router/index.js）中直接引用。\n示例：\n1 2 3 4 5 6 // router/index.js import HomeView from \u0026#39;@/views/HomeView.vue\u0026#39;; const routes = [ { path: \u0026#39;/\u0026#39;, component: HomeView }, ]; components 中的组件：\n不会在路由配置中直接引用，而是在其他组件（包括 views）中通过 import 引入。\n示例：\n1 2 3 4 5 6 7 \u0026lt;!-- views/HomeView.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Navbar /\u0026gt; \u0026lt;!-- 来自 components/Navbar.vue --\u0026gt; \u0026lt;UserList /\u0026gt; \u0026lt;!-- 来自 components/UserList.vue --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 3. 组件职责\n文件夹 职责 views 处理路由参数、页面级状态（如 Vuex/Pinia）、路由守卫、页面布局组合。 components 实现特定 UI 功能（如表单验证、数据展示），保持无状态或局部状态。 4. 命名规范\nviews： 建议以 XxxView.vue 或 XxxPage.vue 命名（如 UserListView.vue）。 components： 使用功能明确的名称，可添加前缀表明用途（如 BaseButton.vue、AppHeader.vue）。 5. 项目结构示例\n1 2 3 4 5 6 7 8 9 src/ ├── router/ │ └── index.js # 路由配置，引用 views 中的组件 ├── views/ │ ├── HomeView.vue # 首页 │ └── UserProfile.vue # 用户资料页 └── components/ ├── BaseButton.vue # 基础按钮 └── UserCard.vue # 用户卡片组件 6. 边界情况处理\n共享的复杂组件： 如果某个组件在多个页面中使用且包含复杂逻辑，可以放在 components 中（如 ProductList.vue）。 子路由页面： 子路由对应的组件仍属于页面级，应放在 views 的子目录中（如 views/users/UserDetail.vue）。 跳转方式 router-link 在前面的实例中，如果用户需要跳转到不同的页面，则需要修改浏览器地址栏中的地址实现，而在网站中，用户通常需要通过超链接的文本或按钮进行跳转。\n在 Vue 中，用户通常是使用 router-link 渲染一个 a 标签来实现跳转的，例如，使用 \u0026lt;router-link to=/about'\u0026gt;\u0026lt;/router-link\u0026gt; 跳转到关于about 页面，其中，to 是一个属性，指向目标页面，可以使用 v-bind 进行动态设置。\nSign.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; Register.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; 之前的小米商场案例中，使用到了 v-for 循环渲染导航栏，此时如果需要为不同导航栏标题添加跳转，需要将渲染的导航栏数据修改为对象数组形式，存储导航栏标题和跳转路径。\nHeader.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; ... \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; ... \u0026lt;/li\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { ..., rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/sign\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], } }, ... } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; ... \u0026lt;/style\u0026gt; 通过事件调用函数 可以通过 v-on 指令绑定事件，在函数中使用 this.$router.push() 方法，传入指定地址即可实现页面跳转。\nSign.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/register\u0026#39;) } } } \u0026lt;/script\u0026gt; Register.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/sign\u0026#39;) } } } \u0026lt;/script\u0026gt; 商品页面切换 Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; ViewPhone 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Header\u0026gt;\u0026lt;/Header\u0026gt; \u0026lt;Tab\u0026gt;\u0026lt;/Tab\u0026gt; \u0026lt;Wrapper\u0026gt;\u0026lt;/Wrapper\u0026gt; \u0026lt;Banner\u0026gt;\u0026lt;/Banner\u0026gt; \u0026lt;PartPhone\u0026gt;\u0026lt;/PartPhone\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import PartPhone from \u0026#39;./PartPhone.vue\u0026#39;; import Footer from \u0026#39;./Footer.vue\u0026#39;; import Wrapper from \u0026#39;./Wrapper.vue\u0026#39;; import Banner from \u0026#39;./Banner.vue\u0026#39;; export default { components: { Header, Tab, PartPhone, Footer, Wrapper, Banner }, data() { return { } } } \u0026lt;/script\u0026gt; router 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; const routes = [ { path: \u0026#39;/\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/views/Page.vue\u0026#39;) }, { path: \u0026#39;/shop/phone\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPhone.vue\u0026#39;) }, { path: \u0026#39;/shop/pad\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPad.vue\u0026#39;) }, { path: \u0026#39;/shop/elec\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewElec.vue\u0026#39;) }, { path: \u0026#39;/shop/smart\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewSmart.vue\u0026#39;) } ] const router = createRouter({ history: createWebHashHistory(), routes }) export default router 模糊匹配和精确匹配 样式匹配 前面我们已经了解到，用户可以使用 router-link 渲染一个 a 标签来实现跳转，此时，点击标签 vue 会为当前被点击的 a 标签添加两个类，我们可以通过这两个类来为当前元素添加样式。\n1 2 3 4 5 \u0026lt;li data-v-a5978fdc=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a data-v-a5978fdc=\u0026#34;\u0026#34; aria-current=\u0026#34;page\u0026#34; href=\u0026#34;#/shop/pad\u0026#34; class=\u0026#34;router-link-active router-link-exact-active\u0026#34;\u0026gt; 电视 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; 可以发现，两个类分别为 router-link-active 和 router-link-exact-active ，可以直接通过 style 设置相关样式。\n1 2 3 ul li a.router-link-exact-active{ color: rgb(255, 128, 9); } 其中， router-link-active 表示模糊匹配，可以使对应样式在当前跳转目录，如 /shop 下的所有子页面中都生效，如 /shop/phone ，/shop/pad 等，适用于在切换子页面时不改变父元素样式的情况，使用相对较多。\nrouter-link-exact-active 表示精确匹配，即只有在目录完全与当前 a 标签跳转的位置完全相同时才使得相应的样式生效。\n自定义类名 可以在 router 中自定义模糊匹配和精确匹配对应的类名。\n1 2 3 4 5 6 const router = createRouter({ history: createWebHashHistory(), routes, linkActiveClass: \u0026#39;fuzzy-active\u0026#39;, linkExactActiveClass: \u0026#39;exact-active\u0026#39; }) ","date":"2025-03-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/","title":"第五章 路由"},{"content":"Vue 生命周期 生命周期的四个阶段 Vue 生命周期：一个 Vue 实例从创建到销毁的整个过程。\n组件每个阶段它的内部构造是不一样的，所以一般特定的钩子做特定的事，比如 Ajax 获取数据就可以在 mounted 阶段。\n从 Vue 实例被创建开始到该实例最终被销毁的整个过程叫做 VUE 的生命周期，在这个生命周期内发生了下面的事情：从 vue 实例被创建开始，首先 vue 实例被创建，之后开始数据的初始化，编译模板，挂载 dom，渲染 dom，更新对象属性，渲染 dom，解绑销毁。\n创建：const app = new Vue({ ... })\n销毁：关闭页面\n生命周期四个阶段：①创建\t②挂载\t③更新\t④销毁\n生命周期钩子函数 Vue 生命周期过程中，会自动运行一些函数，被称为生命周期钩子，让开发者可以在特定阶段运行自己的代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: 111 } }, beforeCreate() { console.log(\u0026#39;beforeCreate 响应式数据创建前\u0026#39;, this.m1); }, created() { console.log(\u0026#39;created 响应式数据创建后\u0026#39;, this.m1); }, beforeMount() { console.log(\u0026#39;beforeMount 模板渲染前\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, mounted() { console.log(\u0026#39;mounted 模板渲染后\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, beforeUpdate() { console.log(\u0026#39;beforeUpdate 数据修改视图未更新\u0026#39;); }, updated() { console.log(\u0026#39;updated 数据修改视图已更新\u0026#39;); }, beforeDestroy() { console.log(\u0026#39;beforeDestroy 卸载前\u0026#39;); }, destroyed() { console.log(\u0026#39;destroyed 卸载后\u0026#39;); }, methods: { change() { this.m1 = 222; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 自定义指令 基础语法 自定义指令 — Vue.js (vuejs.org)\n自定义指令：自己定义的指令，可以封装一些 dom 操作，扩展额外功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 局部注册 directives: { 自定义指令名: { 钩子函数: function (参数) { 执行内容 } }, 自定义指令名: function (参数) { 执行内容 } } // 全局注册 Vue.directive(\u0026#39;自定义指令名\u0026#39;, { 钩子函数: function (参数) { 执行内容 } }) // 自定义函数的使用 \u0026lt;标签名 v-自定义指令名 /\u0026gt; 自定义指令钩子函数 钩子函数 描述 bind 只调用一次，在指令第一次绑定到元素时触发。可以在这里进行初始设置、绑定事件监听器等操作。 inserted 在被绑定元素插入父节点时触发。如果指令绑定的元素是动态生成的，在插入后才会触发。 update 在指令所在模板更新时触发，不论绑定值是否发生变化。可以通过比较更新前后的绑定值，以便在需要时执行相应的操作。 componentUpdated 在被绑定元素所在模板完成一次更新周期时触发。如果需要在每次更新时执行操作，可以选择使用这个钩子函数。 unbind 只调用一次，在指令与元素解绑时触发。可以在这里进行清理工作、移除事件监听器等操作。 常用的自定义指令生命周期函数的参数：\n参数 说明 el 指令所绑定的元素，可以直接用于操作 dom 元素 binding 一个对象，包含多个属性，用于接收属性的参数值 vnode 代表绑定元素底层的虚拟节点 prevNode 之前页面渲染中指令所绑定元素的虚拟节点 在 Vue3 中，自定义指令的钩子函数名称更改为：\n- beforeMount：代替 bind\n- mounted：代替 inserted\n- beforeUpdate：新\n- updated：代替 componentUpdated\n- beforeUnmount：新\n- unmounted：代替 unbind\n钩子函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Vue.directive(\u0026#39;my-directive\u0026#39;, { bind: function(el, binding, vnode, oldVnode) { // 指令绑定时执行的操作 }, inserted: function(el, binding) { // 元素插入父节点时执行的操作 }, update: function(el, binding) { // 指令所在模板更新时执行的操作 }, componentUpdated: function(el, binding) { // 模板完成一次更新周期时执行的操作 }, unbind: function(el, binding) { // 指令与元素解绑时执行的操作 } }) 编写代码，创建自定义指令，通过自定义指令能够让文字颜色变为红色。\n使用 directives: { 方法名: { 钩子函数: function(形参){ 执行的代码}}}\n在标签中使用 v-方法名 调用 Vue 指令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-red\u0026gt;使用自定义指令让这段文字变为红色\u0026lt;/div\u0026gt; \u0026lt;div v-cyan\u0026gt;使用自定义指令让这段文字变为青色\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, directives: { red: function (el){ el.style.color = \u0026#39;red\u0026#39; }, cyan: function (el){ el.style.color = \u0026#39;cyan\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在 vue3 中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;template\u0026gt; \u0026lt;div v-test v-red v-green v-blue\u0026gt;{{ msg }}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;改变div中的文字\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ return{ msg: \u0026#39;测试\u0026#39; } }, directives: { test: { beforeMount: function (el, binding) { console.log(111); console.log(el); console.log(binding); } }, red: { mounted: function (el) { el.style.color = \u0026#39;red\u0026#39; } }, green: function (el) { el.style.color = \u0026#39;green\u0026#39; }, blue: { updated: function (el) { el.style.color = \u0026#39;blue\u0026#39; } }, }, methods: { change() { this.msg = \u0026#39;改变后的文字\u0026#39; } } }; \u0026lt;/script\u0026gt; 插槽 默认插槽 作用：让组件内部的一些结构支持自定义。\n封装组件后，希望组件中的部分内容能够动态修改，可以使用插槽。\n组件内需要定制的结构部分，改用 \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; 占位。\n使用组件时，\u0026lt;MyDialog\u0026gt;\u0026lt;/MyDialog\u0026gt; 标签内部，传入结构替换 slot。\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- 1. 在需要修改的位置使用 slot 标签占位 --\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 后背内容（默认值） 插槽后备内容：封装组件时，可以为预留的 \u0026lt;slot\u0026gt; 插槽提供后备内容（默认内容)。\n语法：在 \u0026lt;slot\u0026gt; 标签内，放置内容，作为默认显示内容，如果组件标签中有内容，则默认内容不显示。\n1 2 3 \u0026lt;slot\u0026gt;\u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;Video\u0026gt;\u0026lt;/Video\u0026gt; 具名插槽 默认插槽只能定制一个位置的内容，如果在组件中，有多个地方需要改变内容，此时需要使用具名插槽，即具有名字的插槽，通过 name 属性为插槽命名，再进行区分。\n使用方法：\n多个 slot 使用 name 属性区分名字\ntemplate 配合 v-slot:name 来分发对应标签\n插槽添加 name 属性后，就是具名插槽，只支持定向分发。此外，v-slot:name 可以简写为 #name\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ border: 2px solid black; width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template #img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 作用域插槽 作用域插槽是插槽的一个传参语法。\n作用域插槽：定义 slot 插槽的同时是可以传值的。给插槽上可以绑定数据，将来使用组件时可以调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- 基本使用步骤: --\u0026gt; \u0026lt;!-- 1. 给 slot 标签，以添加属性的方式传值 --\u0026gt; \u0026lt;slot :id=\u0026#34;item.id\u0026#34; :msg=\u0026#34;测试文本\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- 2. 所有添加的属性，都会被收集到一个对象中 --\u0026gt; { id: 3， msg:\u0026#39;测试文本\u0026#39;} \u0026lt;!-- 3. 在 template 中，通过 `#插槽名= \u0026#34;obj\u0026#34;` 接收，默认插槽名为 default --\u0026gt; \u0026lt;Table :list=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;template #default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; 案例：表格业务动态变化\n插槽渲染的不只有数据，也有可能需要动态渲染方法的时候，此时方法无法直接调用父组件中的数据，需要使用作用域插槽进行数据传递。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;小米\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;华为\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;8866\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;苹果\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;9998\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;vivo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6688\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;oppo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5888\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;meizu\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;4999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; 需求：\n① 能够根据不同数组渲染列表\n② 操作分为两种：删除和修改（slot）\n③ 点击删除/修改时对数据进行操作，此时在父组件中无法使用 item.id 传值，需要使用作用域插槽\n④ 为 slot 添加属性，在父组件中使用 template 标签和 #default=\u0026quot;obj\u0026quot; 属性接收传值\n将上方代码改为组件+插槽的形式：\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 此时尝试在 App.vue 当中为 button 添加删除逻辑，如下：\n1 2 3 4 5 6 7 8 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; 在 Table.vue 当中添加删除方法，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;script\u0026gt; export default { props: { dataList: Array }, methods: { del(id){ for (let i = 0; i \u0026lt; this.dataList.length; i++) { if(id == this.dataList[i].id){ this.dataList.splice[i, 1] } } } } } \u0026lt;/script\u0026gt; 显示的报错信息为：\n需要在子组件的 slot 标签中使用 v-bind 绑定属性传值，vue 会将 slot 标签中传递的值保存在一个数组当中，在父组件引用的子组件标签中使用 template+v-slot:插槽名=\u0026quot;自定义对象\u0026quot; 即可将子组件中所有传递的数据存储在该对象中。\n此时在父组件中即可通过 自定义对象.传递数据 的方法获取到子组件的数据，从而调用方法。\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot :item=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array }, } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;template v-slot:default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list2.length; i++) { if (id == this.list2[i].id) { this.list2.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 动态组件 定义动态组件 利用动态组件可以动态切换页面中显示的组件。使用 \u0026lt;component\u0026gt; 标签可以定义动态组件，\u0026lt;component\u0026gt; 标签必须配合 is 属性一起使用，is 属性的属性值表示要渲染的组件。\n在 vue3 中，使用 setup 语法糖配合 shallowRef() 函数可以将组件保存为响应式数据。shallowRef() 函数只处理对象最外层属性的响应，它比 ref() 函数更适合将组件保存为响应式数据。\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Main\u0026#34;\u0026gt;显示Main组件\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Header\u0026#34;\u0026gt;显示Header组件\u0026lt;/button\u0026gt; \u0026lt;component :is=\u0026#34;showComponent\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import Main from \u0026#39;./components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;./components/xiaomi/Header.vue\u0026#39;; import { shallowRef } from \u0026#39;vue\u0026#39;; const showComponent = shallowRef(Main); \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; button { width: 100px; height: 50px; margin: 30px; position: absolute; top: 20px; } button:first-child { top: 100px; } \u0026lt;/style\u0026gt; 根据元素类型动态渲染组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; style=\u0026#34;text-align: center;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Vue 中动态组件的使用\u0026lt;/h1\u0026gt; \u0026lt;div v-for=\u0026#34;item in modules\u0026#34; :id=\u0026#34;item.id\u0026#34; style=\u0026#34;margin: 10px 0;\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;item.type\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ item.type }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Image from \u0026#39;./components/activeComponents/Image.vue\u0026#39;; import Text from \u0026#39;./components/activeComponents/Text.vue\u0026#39;; import Video from \u0026#39;./components/activeComponents/Video.vue\u0026#39;; export default { data() { return { modules: [ { id: 1, type: \u0026#39;text\u0026#39; }, { id: 2, type: \u0026#39;video\u0026#39; }, { id: 3, type: \u0026#39;image\u0026#39; }, { id: 4, type: \u0026#39;image\u0026#39; }, { id: 5, type: \u0026#39;text\u0026#39; } ], // news: \u0026#39;Image\u0026#39; } }, components: { Image, Text, Video }, // computed:{ // getType(){ // return this.modules.map(item =\u0026gt; { // return { // ...item, // type: \u0026#39;news-\u0026#39; + item.type, // } // }) // } // } } \u0026lt;/script\u0026gt; 实战案例 基础样式 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;1999元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 0; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 使用具名插槽 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi Turbo 3\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;性能旋风，席卷而来\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi Civi 4 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi Civi 4 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Ultra.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Ultra\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;6499\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70 Pro.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第三代骁龙8 年度旗舰平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3299\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第二代骁龙8 旗舰芯\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2399\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70E.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70E\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;新一代旗舰焊门员\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1799\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;4599\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; v-for 循环 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { data(){ return{ dataList: [ {id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999}, {id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999}, {id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499}, {id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299}, {id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399}, {id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799}, {id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599}, {id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999}, ] } }, components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 插槽嵌套 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], } }, components: { Part, Goods, } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 按需修改 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Extra\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;extra\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;etc\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;etc-img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;more-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/more.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more-text\u0026#34;\u0026gt; \u0026lt;div\u0026gt;浏览更多\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;slot name=\u0026#34;type\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .extra { width: 240px; height: 300px; box-sizing: border-box; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; float: left; margin: 0 7px 14px 7px; user-select: none; } .etc, .more { width: 240px; height: 143px; background-color: white; margin: 0 0 14px 0; transition: 0.5s; cursor: pointer; } .etc:hover, .more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .etc img { width: 80px; height: 80px; float: right; margin: 31.5px 30px 0 0; } .extra h3, .extra p { font-weight: 100; font-size: 14px; margin: 0; padding-left: 30px; } .extra .price { color: rgb(255, 103, 0); } .extra h3 { padding: 45px 0 15px 30px; } .more .more-icon img{ width: 52px; height: 52px; float: right; margin: 45.5px 45px 0 0; } .more .more-text div:nth-child(1){ font-size: 18px; padding: 49px 0 5px 30px; } .more .more-text div:nth-child(2){ font-size: 12px; padding: 0 0 0 30px; color: rgb(117, 117, 117); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiwatch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList2\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Extra v-show=\u0026#34;dataList2.length \u0026lt; 8\u0026#34;\u0026gt; \u0026lt;template v-slot:etc-img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;小米手环8\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;209\u0026lt;/template\u0026gt; \u0026lt;template v-slot:type\u0026gt;穿戴\u0026lt;/template\u0026gt; \u0026lt;/Extra\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; import Extra from \u0026#39;./components/xiaomi/Extra.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], dataList2: [ { id: 1, url: \u0026#39;../../../img/小米手环8 Pro 原神定制版.jpg\u0026#39;, title: \u0026#39;小米手环8 Pro 原神定制版\u0026#39;, desc: \u0026#39;达达利亚主题定制手环 | 主题定制充电底座 | 专属定制礼盒\u0026#39;, price: 549 }, { id: 2, url: \u0026#39;../../../img/Redmi Watch 4.jpg\u0026#39;, title: \u0026#39;Redmi Watch 4\u0026#39;, desc: \u0026#39;1.97英寸AMOLED大屏丨潮流金属表框丨20天超长续航\u0026#39;, price: 499 }, { id: 3, url: \u0026#39;../../../img/Xiaomi Watch S3.jpg\u0026#39;, title: \u0026#39;Xiaomi Watch S3\u0026#39;, desc: \u0026#39;百变表圈 | 小米澎湃OS | 12通道心率检测模组\u0026#39;, price: 799 }, { id: 4, url: \u0026#39;../../../img/小米腕部心电血压记录仪.png\u0026#39;, title: \u0026#39;小米腕部心电血压记录仪\u0026#39;, desc: \u0026#39;血压测量｜心电采集｜跌倒检测 紧急呼救｜蓝牙通话\u0026#39;, price: 1999 }, { id: 5, url: \u0026#39;../../../img/小米手环 8 Pro.jpg\u0026#39;, title: \u0026#39;小米手环 8 Pro\u0026#39;, desc: \u0026#39;1.74″AMOLED炫彩大屏 | 手表级健康监测 | 独立GNSS定位\u0026#39;, price: 379 }, { id: 6, url: \u0026#39;../../../img/Redmi Watch 3 青春版.png\u0026#39;, title: \u0026#39;Redmi Watch 3 青春版\u0026#39;, desc: \u0026#39;1.83\u0026#34;超大屏幕｜腕上蓝牙通话｜全天候血氧监测\u0026#39;, price: 329 }, { id: 7, url: \u0026#39;../../../img/小米手环8 NFC版.jpg\u0026#39;, title: \u0026#39;小米手环8 NFC版\u0026#39;, desc: \u0026#39;多样快拆时尚腕带 | 跑步豆\u0026amp;体感互动多模式 | 多功能NFC\u0026#39;, price: 249 }, // { id: 8, url: \u0026#39;../../../img/米兔儿童学习手表5 Pro.jpg\u0026#39;, title: \u0026#39;img/米兔儿童学习手表5 Pro\u0026#39;, desc: \u0026#39;12重安全定位 | 3D楼层定位 | 高清双摄 | AI拍照识物 | NFC公交卡 | 实时心率监测 | 20米防水 | 儿童微信 | QQ | 支付宝 | 小爱同学\u0026#39;, price: 999 }, ] } }, components: { Part, Goods, Extra } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 练习 可以通过（）标签为组件添加插槽？\n如果要把内容填充到指定名称的插槽中，可以通过一个包含（）指令的 \u0026lt;template\u0026gt; 标签来实现。\n如果一个组件没有预留任何插槽，则组件的使用者提供的任何插槽内容同样会起作用。（）\n添加 name 属性的 \u0026lt;slot\u0026gt; 标签用来定义具名插槽。（）\ndom 元素在哪个生命周期后才能后被调用？\n​\tA. onActived()\tB. mounted()\tC. beforeCreate()\tD. beforeMount()\n下列说法，关于自定义指令说法错误的是。（） ​\tA. 插槽是组件封装期间为组件的使用者预留的占位符。\n​\tB. 在定义插槽时，直接写一个 \u0026lt;slot\u0026gt; 标签，它属于默认插槽。\n​\tC. 如果组件的使用者为插槽提供内容，则默认内容生效。\n​\tD. 当需要使用多个插槽时，则需要为每个 \u0026lt;slot\u0026gt; 插槽指定具体的 name 属性。\n下列选项中，关于自定义指令说法错误的是。（） ​\tA. 全局自定义指令可以在全局进行使用。\n​\tB. 私有自定义指令只能够在声明该指令的组件中使用。\n​\tC. 在 Vue 中，可以通过 app.directive() 函数声明全局自定义指令。\n​\tD. 在 Vue 中，不能为自定义指令绑定参数。\n下列选项中，关于自定义指令常用声明周期函数及传入参数说法错误的是。（） ​\tA. mounted() 函数在绑定元素的父组件及自身的所有子节点都挂在完成后调用。\n​\tB. value 为参数 binding 中的属性，表示传递给指令的值。\n​\tC. beforeUpdate() 函数在绑定的父组件卸载前调用。\n​\tD. el 参数表示当前指令所绑定到的元素。\n","date":"2025-02-28T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/","title":"第四章 组件基础（下）"},{"content":"Vue API 风格 组合式 API 和选项式 API 各有优缺点，组合式 API 的主要优势在于更强的逻辑复用和组合能力、更好的类型推导和类型安全、更清晰的逻辑隔离、灵活的逻辑组合和嵌套，以及更方便的测试。选项式 API 在 Vue 2 中广泛使用，仍然是一个强大和有效的选择，但对于复杂逻辑的管理和复用，组合式 API 提供了更现代化的解决方案。\n选项式 API（Vue2） 使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，如 data、methods 和 mounted。选项所定义的属性都会暴露在函数内部的 this 上，它会指向当前的组件实例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 2 Options API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 2 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { count: 0 }; }, methods: { increment() { this.count++; } } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 组合式 API（Vue3） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 3 Composition API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 3 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/vue@3/dist/vue.global.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 从 Vue 全局对象中解构出 createApp 和 ref 函数 const { createApp, ref } = Vue; // 使用 createApp 函数创建一个 Vue 应用实例 const app = createApp({ // setup 函数是 Vue 3 组合式 API 的入口点 setup() { // 使用 ref 函数创建一个响应式变量 count，初始值为 0 const count = ref(0); // 定义一个箭头函数 increment，用于增加 count 的值 const increment = () =\u0026gt; { // 通过 count.value 访问和修改 ref 包装的值 count.value++; }; // setup 函数返回一个对象，将响应式变量和方法暴露给模板使用 return { count, increment }; } }); // 调用 app.mount 方法将 Vue 应用挂载到 id 为 app 的 DOM 元素上 app.mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 两种API风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。\n当你不需要使用构建工具，或者打算主要在低复杂度的场景中使用 Vue，例如渐进增强的应用场景，推荐采用选项式 API。 当你打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件。 创建 Vue 工程 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\n​\tnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n​\t查看 npm 代理 → npm config get registry\n​\t更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \u0026#34;name\u0026#34;: \u0026#34;vue-study\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;vue\u0026#34;: \u0026#34;^3.4.21\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vitejs/plugin-vue\u0026#34;: \u0026#34;^5.0.4\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^5.1.6\u0026#34; } } 观察 main.ts 文件：\n1 2 3 4 5 6 7 8 9 10 11 import \u0026#39;./assets/main.css\u0026#39; // 这行代码从 vue 库中导入了 createApp 函数。在 Vue 3 里，createApp 是创建 Vue 应用实例的核心函数，借助它可以初始化一个新的 Vue 应用。 import { createApp } from \u0026#39;vue\u0026#39; // 此代码导入了根组件 App.vue。App.vue 一般是 Vue 项目的根组件，它包含了整个应用的基本结构与布局。 import App from \u0026#39;./App.vue\u0026#39; // createApp(App)：调用 createApp 函数，把 App 组件当作参数传入，从而创建一个新的 Vue 应用实例。 // .mount(\u0026#39;#app\u0026#39;)：调用 mount 方法，将创建好的 Vue 应用实例挂载到 HTML 文件里 id 为 app 的 DOM 元素上。通常，这个 id 为 app 的元素是在 index.html 文件中定义的。 createApp(App).mount(\u0026#39;#app\u0026#39;) 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 **中是通过 **createApp 函数创建一个应用实例。 项目内语法 export default 在 Vue 3 里，export default 是 ES6 模块语法的一部分，其用途是从一个模块里导出一个默认的值。在 Vue 组件里，它通常用来导出组件的配置对象。\n在 Vue 3 的单文件组件（.vue 文件）里，export default 用于导出组件的配置对象，此对象包含组件的选项，像 data、methods、computed 等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ message }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;changeMessage\u0026#34;\u0026gt;修改消息\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;欢迎使用 Vue 3\u0026#39; }; }, methods: { changeMessage() { this.message = \u0026#39;消息已更新\u0026#39;; } } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; h1 { color: blue; } \u0026lt;/style\u0026gt; 插值表达式 删除 src 文件夹下 components 文件夹中的所有文件，清空 App.vue 中所有内容，删除 main.js 文件中语句 import './assets/main.css'。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: \u0026#39;插值表达式\u0026#39;, count: 0 } } } \u0026lt;/script\u0026gt; 属性绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;c1\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img2\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;{ active1: true, active2: false }\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img6\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;[\u0026#39;active1\u0026#39;, \u0026#39;active2\u0026#39;]\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, c1: \u0026#34;active1\u0026#34;, c2: \u0026#34;active2\u0026#34; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; img{ margin: 20px; box-sizing: border-box; } .active1 { width: 300px; } .active2 { width: 500px; border: 20px solid black; } \u0026lt;/style\u0026gt; 条件渲染和列表渲染 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 的索引号是 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, flag: true, list: [ \u0026#39;111\u0026#39;, \u0026#39;222\u0026#39;, \u0026#39;333\u0026#39;, \u0026#39;444\u0026#39; ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 事件和计算属性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;add($event)\u0026#34;\u0026gt;{{ count }}\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;{{ getSum }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { count: 0, list: [1, 2, 3, 4, 5] } }, methods: { add(e) { this.count++; console.log(e); } }, computed: { getSum() { let sum = 0; for (let i = 0; i \u0026lt; this.list.length; i++) { sum += this.list[i]; } return sum; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 侦听器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;旧消息\u0026#39; } }, methods: { reset() { this.message = \u0026#39;新消息\u0026#39; } }, watch: { message(newValue, oldValue) { console.log(newValue, oldValue) }, // message(m1, m2) { // console.log(m1, m2) // } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 拓展：如果希望点击按钮能够在 “旧消息” 和 “新消息” 之间来回切换，怎样实现？\n阶段案例 参照以下图片，完成 \u0026ldquo;学习计划表\u0026rdquo; 案例，页面中会展示学生的学习计划，包括学习科目、学习内容、学习地点、完成状态等。\n使用 vue + html + css 完成案例，实现添加、删除、完成状态变化等功能。\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, methods: { add() { this.list.unshift({ id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) console.log(this.list); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } \u0026lt;/style\u0026gt; 获取 dom 元素 虽然 Vue 的声明性渲染模型为我们抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref 属性。\n1 2 3 \u0026lt;div id=\u0026#34;d1\u0026#34; ref=\u0026#34;d2\u0026#34;\u0026gt;这是一个div标签\u0026lt;/div\u0026gt; console.log(this.$refs.d2); 挂载结束后引用都会被暴露在 this.$refs 之上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;template\u0026gt; \u0026lt;p ref=\u0026#34;p1\u0026#34;\u0026gt;p标签\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;getRef\u0026#34;\u0026gt;获取dom元素\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;reSet\u0026#34;\u0026gt;更改元素内容\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; ref=\u0026#34;i1\u0026#34; @focus=\u0026#34;setValue\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { } }, methods: { getRef() { console.log(this.$refs) console.log(this.$refs.p1) }, reSet() { this.$refs.p1.innerHTML = \u0026#39;2\u0026#39;; }, setValue() { this.$refs.i1.value = \u0026#39;1111\u0026#39;; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p{ font-size: 30px; } \u0026lt;/style\u0026gt; 组件基础 组件组成 组件最大的优势就是可复用性。当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件（简称 SFC）。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;承载标签\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 其中，scoped 表示让该样式只在当前组件中生效。\n组件引用（局部注册） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;MyComponent\u0026gt;\u0026lt;/MyComponent\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import MyComponent from \u0026#34;./components/MyComponent.vue\u0026#34;; export default { components:{ MyComponent, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 练习：创建两个组件，其中，第一个组件中有一个 h1 标签和一个图片标签，文字颜色为黑色，当点击图片时，图片和标题都能够循环切换；第二个组件中有一个 p 标签，文字颜色为灰色，在 App 文件中引用这两个组件，具体实现效果如下图所示。\n中国34个省级2022年高清行政地图和名称来源解读（值得收藏） - 知乎\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;C1 /\u0026gt; \u0026lt;C2 /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import C1 from \u0026#34;./components/C1.vue\u0026#34;; import C2 from \u0026#34;./components/C2.vue\u0026#34;; export default { components: { C1, C2, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; C1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; C2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; 组件嵌套关系 组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构，这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。\n组件注册 当在 Vue 项目中定义了一个新的组件后，想要在其他组件中引用这个新的组件，需要对新的组件进行注册。Vue 提供了两种注册组件的方式，分别是全局注册和局部注册。\n在实际开发中，如果某些组件只在特定情况下被用到，推荐进行局部注册，即在某个组件中注册。被局部注册的组件只能在当前注册范围内使用。例如：在组件 A 中注册了组件 B，则组件 B 只能在组件 A 中使用，不能在组件 C 中使用。\n在实际开发中，如果某个组件使用频率很高，许多组件都会引用这个新的组件，则推荐将该组件全局注册。被全局注册的组件可以在当前 Vue 项目的任何一个组件内引用。\n在 Vue 项目 src\\main.js 文件中，通过 Vue 应用实例的 component() 方法可以全局注册组件，语法如下：\n1 component(\u0026#39;组件名称\u0026#39;, 需要被注册的组件) 在 src\\main.js 中注册一个全局组件 MyComponent，示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import MyComponent from \u0026#39;./components/MyComponent.vue\u0026#39; // createApp(App).mount(\u0026#39;#app\u0026#39;) const app = createApp(App) // 一定要在 const app = createApp(App) 和 app.mount(\u0026#39;#app\u0026#39;) 两行代码中间注册组件 app.component(\u0026#39;MyComponent\u0026#39;, MyComponent) app.mount(\u0026#39;#app\u0026#39;) 全局注册虽然很方便，但有以下几个问题:\n全局注册，但并没有被使用的组件无法在生产打包时被自动移除（也叫 \u0026ldquo;tree-shaking\u0026quot;）。如果你全局注册了—个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。\n全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。\nprops 传递数据 组件与组件之间不是完全独立的，而是有交集的，有时候会遇到同一个模块中的多个子组件请求同一份数据的情况，如果在子组件中逐个进行网络请求，会造成代码冗余。Vue 提供了 props 语法，可以让父组件为子组件提供要展示的数据，即在父组件中请求该模块下所有子组件中的网络请求，然后通过 props 将数据传递给子组件。\n声明 props 在不使用 setup 语法糖的情况下，可以使用 props 选项声明 props，形式可以使对象或者字符串数组，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; export default { props: { 自定义属性 A: 类型, 自定义属性 B: 类型, str: String, num: Number, bol: Boolean, arr: Array, obj: Object, ... } } \u0026lt;/script\u0026gt; 如果不需要限制 props 的类型，可以直接声明 props，语法格式如下：\n1 2 3 export default { props: [\u0026#39;自定义属性 A\u0026#39;, \u0026#39;自定义属性 B\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;...] } 当使用 setup 语法糖时，可以使用 defineProps() 函数声明 props，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;script setup\u0026gt; const props = defineProps( {\u0026#39;自定义属性 A\u0026#39;: 类型}, {\u0026#39;自定义属性 B\u0026#39;: 类型}, {\u0026#39;str\u0026#39;: String}, {\u0026#39;num\u0026#39;: Number}, {\u0026#39;bol\u0026#39;: Boolean}, {\u0026#39;arr\u0026#39;: Array}, {\u0026#39;obj\u0026#39;: Object}, ... ) \u0026lt;/script\u0026gt; 静态绑定 props 1 \u0026lt;子组件标签名 自定义属性 A = \u0026#34;数据\u0026#34; 自定属性 B = \u0026#34;数据\u0026#34; /\u0026gt; Parent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;!-- \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; :num=\u0026#34;111\u0026#34; :arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; :obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; --\u0026gt; \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; num=\u0026#34;111\u0026#34; bol=\u0026#34;true\u0026#34; arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { // props: { // str: String, // num: Number, // bol: Boolean, // arr: Array, // obj: Object // } props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 动态绑定 props 使用 v-bind 动态绑定 props，任意类型的值都可以传给子组件的 props。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :str=\u0026#34;m0\u0026#34; :num=\u0026#34;m1\u0026#34; :bol=\u0026#34;m2\u0026#34; :arr=\u0026#34;m3\u0026#34; :obj=\u0026#34;m4\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m0: \u0026#39;你好\u0026#39;, m1: 111, m2: true, m3: [\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;], m4: {name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}, } }, components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 子传父 $emit 在子元素中添加按钮，点击按钮时触发事件，使用 this.$emit('方法名'，'值') 向父组件请求修改数据。 1 2 3 4 5 6 7 8 \u0026lt;!-- 在子组件中需要写在方法里：--\u0026gt; methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, 300) } } \u0026lt;!-- 在父组件中需要接收相应的事件：--\u0026gt; \u0026lt;Child @aaa=\u0026#34;change(a)\u0026#34;\u0026gt;\u0026lt;/Child\u0026gt; 父组件需要监听子组件传递过来的方法名，监听到后执行父组件内的方法。\n在父组件的 methods 中提供处理函数，在形参中可以获取到子组件传递过来的值，用于修改数据。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :msg=\u0026#34;m1\u0026#34; @changeData=\u0026#34;change\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m1: \u0026#39;尝试修改这条信息\u0026#39;, } }, components: { Child }, methods: { change(newData){ this.m1 = newData; } } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ msg }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;modify\u0026#34;\u0026gt;修改数据\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;msg\u0026#39;], methods: { modify(){ this.$emit(\u0026#39;changeData\u0026#39;, \u0026#39;修改后的信息\u0026#39;) } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;地图切换\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // --------------c1 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; // --------------c2 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; // --------------app \u0026lt;template\u0026gt; \u0026lt;c1 :count=\u0026#34;num\u0026#34; @aaa=\u0026#34;me\u0026#34;\u0026gt;\u0026lt;/c1\u0026gt; \u0026lt;c2 :count=\u0026#34;num\u0026#34;\u0026gt;\u0026lt;/c2\u0026gt; \u0026lt;!-- \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;11\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import c1 from \u0026#39;./components/c1.vue\u0026#39; import c2 from \u0026#39;./components/c2.vue\u0026#39; export default { data() { return { num: 0 } }, components: { c1, c2 }, methods:{ // change(){ // this.num++; // }, me(a){ this.num = a; } } } \u0026lt;/script\u0026gt; 学习计划表传递 Top\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, props: { spaceList: Array }, methods: { add() { this.$emit(\u0026#39;aaa\u0026#39;, { id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) } } } \u0026lt;/script\u0026gt; Bottom\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { list: Array }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 \u0026lt;template\u0026gt; \u0026lt;top :spaceList=\u0026#34;spaceList\u0026#34; @aaa=\u0026#34;add\u0026#34;\u0026gt;\u0026lt;/top\u0026gt; \u0026lt;bottom :list=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/bottom\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import top from \u0026#39;./components/studyCard/top.vue\u0026#39; import bottom from \u0026#39;./components/studyCard/bottom.vue\u0026#39; export default { components: { top, bottom }, data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], } }, methods:{ add(e){ this.list.unshift(e) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 50px 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } textarea{ overflow-y: hidden; } \u0026lt;/style\u0026gt; 跨级组件之间的数据传递 父子关系组件之间的数据传递主要通过 props、$emit 实现，非父子关系组件之间，通过 provide、inject 或者 eventbus 传递数据，在复杂的 vue 项目中，使用 vuex 实现组件之间数据传递。\nprovide() \u0026amp; inject() 父组件provide提供数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 export default { provide() { return { \u0026lt;!-- 可以包含普通数据类型或者复杂数据类型 --\u0026gt; c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, \u0026lt;!-- c1为字符串类型，c2为对象类型 --\u0026gt; c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } } } 子 / 孙组件 inject 取值使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { \u0026lt;!-- 在后代组件中使用inject数组的形式取值 --\u0026gt; inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; APP\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;changeAll\u0026#34;\u0026gt;改变数据\u0026lt;/button\u0026gt; \u0026lt;ProvideChild :n1=\u0026#34;m1\u0026#34; :n2=\u0026#34;m2\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideChild from \u0026#34;./components/ProvideChild.vue\u0026#34;; export default { provide() { return { c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } }, methods: { changeAll() { this.c1 = \u0026#39;changedc1\u0026#39;; this.c2 = { name: \u0026#39;xiaozhang\u0026#39;, age: 17, gender: \u0026#39;nv\u0026#39; }; }, changeData() { this.c2.name = \u0026#39;xiaozhang\u0026#39;; this.c2.age = 17; this.c2.gender = \u0026#39;nv\u0026#39; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; div { width: 800px; height: 800px; border: 2px solid black; } \u0026lt;/style\u0026gt; ProvideChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .child{ width: 500px; height: 500px; border: 2px solid black; margin: 30px; } \u0026lt;/style\u0026gt; ProvideGrandChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;grandchild\u0026#34;\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, // props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .grandchild{ margin: 30px; width: 300px; height: 300px; border: 2px solid black; } \u0026lt;/style\u0026gt; 练习 选择题 创建 Vue 项目的命令是什么？ A. npm create-vue project\tB. npm create vue project\nC. npm create-react project\tD. npm create vue@latest\n下列哪个语句可以作为插值表达式中的语句？ A. {{ var a = 1 }}\tB. {{ if (ok) { return message } }}\nC. {{ message.split(\u0026rsquo;\u0026rsquo;).reverse().join(\u0026rsquo;\u0026rsquo;) }}\tD. {{ if (ok) { } else { } }}\n下列哪个是侦听器关键字？ A. data\tB. methods\tC. computed\tD. watch\n在 Vue 中，传递参数过程中获取 event 对象的写法正确的是？ A. @click = \u0026ldquo;getNameHandle(item)\u0026rdquo;\nB. @click = \u0026ldquo;getNameHandle(item, $event)\u0026rdquo;\nC. @click = \u0026ldquo;getNameHandle(item, e)\u0026rdquo;\nD. @click = \u0026ldquo;getNameHandle(e)\u0026rdquo;\n案例——学习计划表u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026lt;strong\u0026gt;学习计划表\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习科目 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;subject\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习内容 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt; \u0026lt;span\u0026gt;学习地点 \u0026lt;select v-model=\u0026#34;location\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;图书馆\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;自习室\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;3\u0026#34;\u0026gt;宿舍\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;4\u0026#34;\u0026gt;咖啡厅\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;5\u0026#34;\u0026gt;办公室\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in lists\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.location }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;check\u0026#34; @click=\u0026#34;finish(item.id)\u0026#34;\u0026gt;\u0026lt;span\u0026gt;{{ item.status }}\u0026lt;/span\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { lists: [ { id: 1, subject: \u0026#39;vue.js\u0026#39;, content: \u0026#39;vue指令\u0026#39;, location: \u0026#39;图书馆\u0026#39;, status: \u0026#39;未完成\u0026#39; }, ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, location: \u0026#39;1\u0026#39;, status: \u0026#39;未完成\u0026#39; } }, methods: { add() { if (!this.subject) { alert(\u0026#39;学习科目不能为空！\u0026#39;); return; } if (!this.content) { alert(\u0026#39;学习内容不能为空！\u0026#39;); return; } this.lists.push({ id: +new Date(), subject: this.subject, content: this.content, location: document.querySelectorAll(\u0026#39;option\u0026#39;)[this.location - 1].innerHTML, status: this.status }) this.subject = \u0026#39;\u0026#39; this.content = \u0026#39;\u0026#39; console.log(this.lists); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } if(document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == false){ alert(\u0026#39;请先完成计划再删除！\u0026#39;); return; } // console.log(this.list) this.lists.splice(index, 1); // console.log(this.list) }, finish(id){ let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } // document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == true; document.querySelectorAll(\u0026#39;td span\u0026#39;)[index].innerHTML = \u0026#39;已完成\u0026#39;; document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].disabled = true; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; * { font-size: 24px; } .card { width: 100%; height: 200px; border: 2px solid gray; } .card-header { height: 50px; background-color: lightgray; line-height: 50px; border-bottom: 2px solid gray; } .card-header span { margin-left: 20px; } .card-body button { float: left; margin: 50px 20px; height: 50px; } .mod { float: left; margin: 50px 20px; background-color: lightgray; height: 48px; border: 2px solid gray; } .mod input { height: 44px; margin-top: -1px; margin-right: -2px; outline: none; } .mod select { height: 50px; margin-top: -1px; margin-right: -2px; width: 150px; text-align: center; outline: none; } .mod span { margin-left: 5px; } .list { width: 100%; } .list table { width: 100%; border-spacing: 0; border-top: 2px solid gray; border-left: 2px solid gray; } .list table th { background: lightgray; } .list table td:hover { background: #f5f5f5; } .list table th, .list table td { border-bottom: 2px solid gray; border-right: 2px solid gray; text-align: center; padding: 10px; } input[type=\u0026#34;checkbox\u0026#34;] { width: 20px; height: 20px; } \u0026lt;/style\u0026gt; 案例——百度热搜u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in lis\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;head\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../img/baidu.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;百度热搜 \u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;span class=\u0026#34;next-icon\u0026#34; @click=\u0026#34;next\u0026#34;\u0026gt;↻ 换一换\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tab\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tab-item active\u0026#34; @click=\u0026#34;show(0)\u0026#34;\u0026gt;热搜榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(1)\u0026#34;\u0026gt;长沙榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(2)\u0026#34;\u0026gt;民生榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(3)\u0026#34;\u0026gt;财经榜\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 1 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis2\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 0 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;s3\u0026#34;\u0026gt;{{ index + 10 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab2lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab3lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab4lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { tab1lis1: [ { id: 1, title: \u0026#39;风好正是扬帆时\u0026#39; }, { id: 2, title: \u0026#39;住建部：防止房地产市场大起大落热\u0026#39; }, { id: 3, title: \u0026#39;美国共产主义者宣布成立政党\u0026#39; }, { id: 4, title: \u0026#39;2024年全国两会新闻中心启用\u0026#39; }, { id: 5, title: \u0026#39;上海到北京仅需2.5小时\u0026#39; }, { id: 6, title: \u0026#39;爆火的秦岭隧道视频系拼接 作者道歉\u0026#39; }, { id: 7, title: \u0026#39;贵州省长：全面清理拖欠企业账款\u0026#39; }, { id: 8, title: \u0026#39;理想市值一天涨了1个小鹏\u0026#39; }, { id: 9, title: \u0026#39;#张雪峰称想出国读书先看这本书#\u0026#39; }, { id: 10, title: \u0026#39;河南多地发生山火？\u0026#39; }, ], tab1lis2: [ { id: 11, title: \u0026#39;演唱会黄牛煽动粉丝冲卡被行拘\u0026#39; }, { id: 12, title: \u0026#39;端午节放3天不调休\u0026#39; }, { id: 13, title: \u0026#39;美媒称拜登支持率与特朗普仅差1%\u0026#39; }, { id: 14, title: \u0026#39;澳亿万富豪之女在悉尼袭击案中遇害\u0026#39; }, { id: 15, title: \u0026#39;华为P系列升级为华为Pura\u0026#39; }, { id: 16, title: \u0026#39;老板掉进化粪池6人施救不幸全遇难\u0026#39; }, { id: 17, title: \u0026#39;阿根廷总统米莱宣布与女友分手\u0026#39; }, { id: 18, title: \u0026#39;我国已记录660多种外来入侵物种\u0026#39; }, { id: 19, title: \u0026#39;官方回应128元千人宴全是花生毛豆\u0026#39; }, { id: 20, title: \u0026#39;副县长妻子为出轨对象做间谍17年\u0026#39; }, ], tab2lis1: [ { id: 1, title: \u0026#39;民生项目落地 长沙幸福“加码”\u0026#39; }, { id: 2, title: \u0026#39;发展新质生产力，长沙瞄准有生力“量”\u0026#39; }, { id: 3, title: \u0026#39;长沙：未经业主同意，不得擅自涨物业费\u0026#39; }, { id: 4, title: \u0026#39;长沙望城区：调解劳资纠纷工会“快”字当头\u0026#39; }, { id: 5, title: \u0026#39;长沙诚邀您用镜头寻最美“乡”味\u0026#39; }, { id: 6, title: \u0026#39;2024中部（长沙）糖酒会将启幕\u0026#39; }, { id: 7, title: \u0026#39;2024长沙马栏山花朝节开幕\u0026#39; }, { id: 8, title: \u0026#39;2028年通车！长沙城南将新增一座过江大桥\u0026#39; }, { id: 9, title: \u0026#39;长沙量子测量产业技术研究院揭牌\u0026#39; }, { id: 10, title: \u0026#39;听说，五一广场成了长沙“粤语区”\u0026#39; }, ], tab3lis1: [ { id: 1, title: \u0026#39;翻船目击者称因吃饭躲过一劫\u0026#39; }, { id: 2, title: \u0026#39;35辆车高速集体爆胎\u0026#39; }, { id: 3, title: \u0026#39;北大凌晨讣告:大师辞世\u0026#39; }, { id: 4, title: \u0026#39;墨西哥城一直升机坠毁\u0026#39; }, { id: 5, title: \u0026#39;南京司机拒载日本乘客系谣言\u0026#39; }, { id: 6, title: \u0026#39;重庆辟谣“一家人上吊而死”\u0026#39; }, { id: 7, title: \u0026#39;1735名村民起诉区政府\u0026#39; }, { id: 8, title: \u0026#39;26岁男生失联家属发声\u0026#39; }, { id: 9, title: \u0026#39;国家某部委翻译驻外期被策反\u0026#39; }, { id: 10, title: \u0026#39;炸串奶奶摊前排起长队\u0026#39; }, ], tab4lis1: [ { id: 1, title: \u0026#39;章泽天自曝家族有帕金森基因\u0026#39; }, { id: 2, title: \u0026#39;油价明天预计上调\u0026#39; }, { id: 3, title: \u0026#39;周鸿祎等企业家在飞机上掼蛋\u0026#39; }, { id: 4, title: \u0026#39;万科承认遇到经营困难\u0026#39; }, { id: 5, title: \u0026#39;我国人均存款约10.8万\u0026#39; }, { id: 6, title: \u0026#39;高盛上调年底金价预测\u0026#39; }, { id: 7, title: \u0026#39;章泽天现身美国参加名流晚宴\u0026#39; }, { id: 8, title: \u0026#39;科大讯飞与华中师范大学合作\u0026#39; }, { id: 9, title: \u0026#39;苹果面临日本加重罚款\u0026#39; }, { id: 10, title: \u0026#39;1-3月中国进口钢材减少\u0026#39; }, ], page: 1, tab: 0 } }, methods: { next() { this.page++; }, show(index) { const items = document.querySelectorAll(\u0026#39;.tab-item\u0026#39;); const active = document.querySelector(\u0026#39;.active\u0026#39;); active.classList.remove(\u0026#39;active\u0026#39;); items[index].classList.add(\u0026#39;active\u0026#39;); this.tab = index; this.page = 1; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .main-box { width: 300px; text-wrap: nowrap; overflow-x: hidden; /* text-overflow: ellipsis; */ overflow-y: hidden; position: absolute; top: 30%; left: 50%; /* 往上（x轴）、左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */ transform: translate(-50%, -50%); } img { width: 101px; height: 33px; margin-bottom: -2.5px; } .list { height: 35px; padding: 5px 0; box-sizing: border-box; } a { text-decoration: none; color: rgb(36, 64, 179); font-size: 16px; } a:hover { color: rgb(41, 91, 255); text-decoration: underline; } .title { margin: 15px 0; } .title strong { width: 150px; font-size: 22px; cursor: pointer; } .title strong:hover { color: rgb(41, 91, 255); } .next-icon { margin-left: 120px; color: rgb(98, 102, 117); cursor: pointer; } .next-icon:hover { color: rgb(41, 91, 255); } .tab { margin: 15px 0; } .tab-item { background-color: rgb(238, 238, 238); margin-left: 20px; width: 60px; height: 28px; /* border: 1px solid black; */ border-radius: 5px; display: inline-block; text-align: center; line-height: 28px; color: rgb(36, 64, 179); cursor: pointer; } .tab-item:hover { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .tab-item:nth-child(1) { margin-left: 0; } .active { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .s0 { color: rgb(255, 0, 0); } .s1 { color: rgb(255, 102, 0); } .s2 { color: rgb(250, 169, 14); } .s3 { color: rgb(145, 149, 163); } .list .news span { border-radius: 50%; width: 20px; height: 20px; margin-right: 10px; font-size: 16px; display: inline-block; } \u0026lt;/style\u0026gt; 案例——小米商场 练习：仿照小米官网，思考如何划分组件，编写样式，引入组件完成页面设计。\nHeader 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in leftList\u0026#34;\u0026gt; {{ item }} \u0026lt;span v-if=\u0026#34;index != leftList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;span v-if=\u0026#34;index != rightList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;router-link to=\u0026#34;/shop\u0026#34;\u0026gt; --\u0026gt; \u0026lt;li class=\u0026#34;shop\u0026#34; ref=\u0026#34;shopItem\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745197484153\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1028 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2689\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.8 790.528q19.456 0 36.864 7.168t30.208 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.208 20.48-36.864 7.68q-20.48 0-37.888-7.68t-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 37.888-7.168zM758.784 792.576q19.456 0 37.376 7.168t30.72 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.72 20.48-37.376 7.68-36.864-7.68-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 36.864-7.168zM930.816 210.944q28.672 0 44.544 7.68t22.528 18.944 6.144 24.064-3.584 22.016-13.312 37.888-22.016 62.976-23.552 68.096-18.944 53.248q-13.312 40.96-33.28 56.832t-49.664 15.872l-35.84 0-65.536 0-86.016 0-96.256 0-253.952 0 14.336 92.16 517.12 0q49.152 0 49.152 41.984 0 20.48-9.728 35.84t-38.4 14.336l-49.152 0-94.208 0-118.784 0-119.808 0-99.328 0-55.296 0q-20.48 0-34.304-9.216t-23.04-24.064-14.848-32.256-8.704-32.768q-1.024-6.144-5.632-29.696t-11.264-58.88-14.848-78.848-16.384-87.552q-19.456-103.424-44.032-230.4l-76.8 0q-15.36 0-25.6-7.68t-16.896-18.432-9.216-23.04-2.56-22.528q0-20.48 13.824-33.792t37.376-12.288l103.424 0q20.48 0 32.768 6.144t19.456 15.36 10.24 18.944 5.12 16.896q2.048 8.192 4.096 23.04t4.096 30.208q3.072 18.432 6.144 38.912l700.416 0zM892.928 302.08l-641.024-2.048 35.84 185.344 535.552 1.024z\u0026#34; p-id=\u0026#34;2690\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 购物车 \u0026lt;span class=\u0026#34;shopCount\u0026#34;\u0026gt;({{ count }})\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;!-- 方法1：router-link + to 跳转到指定地址 --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { leftList: [ \u0026#39;小米官网\u0026#39;, \u0026#39;小米商场\u0026#39;, \u0026#39;小米澎湃 OS\u0026#39;, \u0026#39;IOT\u0026#39;, \u0026#39;云服务\u0026#39;, \u0026#39;天星数科\u0026#39;, \u0026#39;有品\u0026#39;, \u0026#39;小爱开放平台\u0026#39;, \u0026#39;资质证照\u0026#39;, \u0026#39;协议规则\u0026#39;, \u0026#39;下载 APP\u0026#39;, \u0026#39;Select Location\u0026#39; ], // rightList: [ // \u0026#39;登录\u0026#39;, \u0026#39;注册\u0026#39;, \u0026#39;消息通知\u0026#39; // ], rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/login\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], count: 0, } }, mounted() { // console.log(this.$refs.shopItem); let shop = document.querySelector(\u0026#39;.shop\u0026#39;); shop.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;rgb(255, 103, 0)\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;rgb(255, 103, 0)\u0026#39;; shop.classList.add(\u0026#39;active\u0026#39;) }) shop.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;#b0b0b0\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;#b0b0b0\u0026#39;; shop.classList.remove(\u0026#39;active\u0026#39;) }) }, // 方法2：使用 method 处理事件实现跳转 // methods: { // toShop(){ // this.$router.push(\u0026#39;/shop\u0026#39;) // } // } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .bg { min-width: 1226px; background-color: rgb(51, 51, 51); } .container { width: 1226px; margin: 0 auto; height: 40px; } ul { height: 40px; line-height: 40px; font-size: 12px; } .left { float: left; } .right { float: right; } ul li { float: left; list-style: none; /* margin: 0 10px; */ padding: 0 5px; color: rgb(176, 176, 176); } span { /* margin-left: 16px; */ position: relative; left: 4px; color: rgb(114, 114, 114); } .shop { width: 110px; background-color: rgb(66, 66, 66); text-align: center; margin-left: 25px; } .shop.active { background-color: rgb(255, 255, 255); color: rgb(255, 103, 0); } .shopCount { color: rgb(176, 176, 176); } ul li:hover { color: white; cursor: pointer; } svg { position: relative; top: 5px; left: -5px; } .title { color: rgb(176, 176, 176); text-decoration: none; } .title:hover { color: white; } \u0026lt;/style\u0026gt; Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } ul li a.fuzzy-active{ color: rgb(255, 128, 9); } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; Wrapperu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;nextImg\u0026#34; ref=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;count++\u0026#34; ref=\u0026#34;bg\u0026#34; :style=\u0026#34;{ backgroundImage: test[count % test.length]}\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- :class=\u0026#34;{ bg1: count % bgList.length == 0, bg2: count % bgList.length == 1, bg3: count % bgList.length == 2, bg4: count % bgList.length == 3, bg5: count % bgList.length == 4, bg6: count % bgList.length == 5 }\u0026#34; --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; {{ item }} \u0026lt;span\u0026gt; \u0026lt;svg t=\u0026#34;1745202463487\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4940\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.501333 183.168a42.666667 42.666667 0 0 1 57.621334-2.496l2.709333 2.496 298.666667 298.666667a42.666667 42.666667 0 0 1 2.496 57.621333l-2.496 2.709333-298.666667 298.666667a42.666667 42.666667 0 0 1-62.826667-57.621333l2.496-2.709334L600.96 512 332.501333 243.498667a42.666667 42.666667 0 0 1-2.496-57.621334l2.496-2.709333z\u0026#34; fill=\u0026#34;#ffffff\u0026#34; p-id=\u0026#34;4941\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207869866\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;6132\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M300 511.4l363 436.1c12.2 14.6 33.9 16.6 48.5 4.4 14.6-12.2 16.6-33.9 4.4-48.5l-326.2-392L716 120.5c12.2-14.6 10.2-36.3-4.4-48.5-14.6-12.2-36.4-10.2-48.6 4.4l-363 435z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;6133\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207985607\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;10595\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M680.96 536.32L294.826667 149.76C281.6 136.533333 281.6 115.2 294.826667 101.546667c13.226667-13.226667 34.986667-13.226667 48.213333 0l386.133333 386.133333c13.226667 13.226667 13.226667 34.986667 0 48.213333-13.226667 13.653333-34.986667 13.653333-48.213333 0.426667z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10596\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M294.826667 874.24l386.133333-386.133333c13.226667-13.226667 34.986667-13.226667 48.213333 0 13.226667 13.226667 13.226667 34.986667 0 48.213333l-386.133333 386.133333c-13.226667 13.226667-34.986667 13.226667-48.213333 0-13.226667-13.653333-13.226667-34.986667 0-48.213333z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10597\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ \u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;笔记本 平板\u0026#39;, \u0026#39;出行 穿戴\u0026#39;, \u0026#39;耳机 音箱\u0026#39;, \u0026#39;健康 儿童\u0026#39;, \u0026#39;生活 箱包\u0026#39;, \u0026#39;智能 路由器\u0026#39;, \u0026#39;电源 配件\u0026#39; ], // bgList: [ // \u0026#39;../../../images/xiaomi/i1.jpg\u0026#39;, // \u0026#39;../../../images/xiaomi/i2.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i3.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i4.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i5.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i6.webp\u0026#39;, // ], test: [ \u0026#39;url(../../../images/xiaomi/i1.jpg)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i2.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i3.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i4.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i5.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i6.webp)\u0026#39; ], count: 4 } }, mounted() { this.$refs.bg.style.backgroundImage = this.test[4] }, methods: { nextImg() { this.count++; this.$refs.bg.style.backgroundImage = this.test[this.count % this.test.length] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; /* .bg1 { background-image: url(../../../images/xiaomi/i1.jpg); } .bg2 { background-image: url(../../../images/xiaomi/i2.webp); } .bg3 { background-image: url(../../../images/xiaomi/i3.webp); } .bg4 { background-image: url(../../../images/xiaomi/i4.webp); } .bg5 { background-image: url(../../../images/xiaomi/i5.webp); } .bg6 { background-image: url(../../../images/xiaomi/i6.webp); } */ .container { width: 1226px; margin: 0 auto; /* background-image: url(../../../images/xiaomi/i5.webp); */ height: 460px; background-size: contain; overflow: hidden; position: relative; } ul { width: 234px; height: 420px; padding: 20px 0; background-color: rgba(105, 101, 101, 0.6); } ul li { list-style: none; font-size: 14px; line-height: 42px; height: 42px; cursor: pointer; } a { display: inline-block; box-sizing: border-box; width: 234px; line-height: 42px; text-decoration: none; color: white; padding-left: 30px; } ul li:hover { background-color: rgb(255, 103, 0); } span { float: right; position: relative; right: 20px; top: 5px; } .left, .right { width: 40px; height: 70px; /* background-color: aqua; */ background-color: rgba(0, 0, 0, 0); cursor: pointer; } .left { float: left; position: absolute; top: 195px; left: 234px; } .left svg { position: relative; left: -6px; top: 10px; } .right { float: right; position: absolute; top: 195px; right: 0px; /* left: 900px; */ } .right svg { position: relative; left: -1px; top: 10px; } .left:hover { background-color: rgb(51, 51, 51); } .right:hover { background-color: rgb(51, 51, 51); } \u0026lt;/style\u0026gt; Banner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;span4\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-channel-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 保障服务 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 企业团购 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; F码通道 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner4.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 米粉卡 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner5.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 以旧换新 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner6.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 话费充值 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;span16\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-promo-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; .container { width: 1226px; height: 170px; margin: 0 auto; margin-top: 14px; margin-bottom: 20px; display: flex; } .span4 { width: 234px; height: 170px; } .home-channel-list { width: 234px; height: 170px; background-color: rgb(95, 87, 80); padding: 3px; box-sizing: border-box } .home-channel-list li { width: 70px; height: 82px; padding: 0 3px; float: left; list-style: none; font-size: 12px; color: white; text-align: center; } .home-channel-list li img{ width: 24px; height: 24px; margin: 0 23px; padding-top: 18px; } .home-promo-list li { list-style: none; float: left; margin-left: 15px; } .home-promo-list li:first-child{ margin-left: 0; } .home-promo-list li img { width: 316px; height: 170px; } .span16 { margin-left: 14px; } \u0026lt;/style\u0026gt; Item 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 234px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 0 14px 14px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; MoreItem\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;more-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Xiaomi 开放式耳机 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;599元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/mini-Xiaomi 开放式耳机.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;see-more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; 浏览更多 \u0026lt;slot name=\u0026#34;more-small\u0026#34;\u0026gt; \u0026lt;small\u0026gt;耳机\u0026lt;/small\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;svg t=\u0026#34;1745805142422\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;12820\u0026#34; width=\u0026#34;60\u0026#34; height=\u0026#34;60\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M510.247 959.053c238.627 0 432.77-196.2 432.77-437.351 0-241.153-194.143-437.353-432.77-437.353-238.627 0-432.772 196.202-432.772 437.353 0 241.15 194.143 437.351 432.772 437.351z m0-820.035c208.804 0 378.675 171.665 378.675 382.684 0 211.013-169.871 382.68-378.675 382.68S131.57 732.715 131.57 521.702c0-211.02 169.871-382.684 378.677-382.684zM293.862 549.035h367.472L545.218 666.38c-10.563 10.677-10.563 27.976 0 38.654a26.849 26.849 0 0 0 38.251 0l162.288-164.01c10.567-10.675 10.567-27.975 0-38.651L583.469 338.361c-5.283-5.337-12.205-8.004-19.124-8.004-6.924 0-13.841 2.667-19.127 8.004-10.563 10.679-10.563 27.974 0 38.654l116.116 117.35H293.862c-14.953 0-27.047 12.225-27.047 27.336 0 15.107 12.092 27.333 27.047 27.333z\u0026#34; p-id=\u0026#34;12821\u0026#34; fill=\u0026#34;#FF6700\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .more-item { width: 234px; height: 300px; float: left; margin-left: 14px; } .more-item .mini-img img { width: 80px; height: 80px; position: relative; top: -90px; left: 130px; } .mini-item, .see-more { width: 234px; height: 143px; margin-bottom: 14px; background-color: #fff; transition: 0.5s; cursor: pointer; padding: 50px 0; box-sizing: border-box; } .mini-item .title { font-size: 14px; font-weight: 400; width: 94px; height: 42px; margin: 0 110px 0 30px; line-height: 21px; } .mini-item .price { color: rgb(255, 103, 0); width: 91px; height: 21px; margin: 5px 110px 0 30px; font-size: 14px; } .mini-item:hover, .see-more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .see-more .title { width: 94px; height: 45px; margin: 0 110px 0 30px; font-size: 18px; line-height: 27px; } .see-more small { display: block; color: rgb(117, 117, 117); font-size: 12px; height: 18px; line-height: 18px; } .see-more svg { position: relative; top: -55px; left: 140px; } \u0026lt;/style\u0026gt; Goods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box-hd\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;手机\u0026lt;/h2\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; 查看更多 \u0026lt;svg t=\u0026#34;1745725757152\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4256\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M512 102.4a422.912 422.912 0 1 0 422.570667 423.936A422.570667 422.570667 0 0 0 512 102.4z m117.418667 446.805333L462.506667 716.8a34.133333 34.133333 0 0 1-48.469334-48.128l143.018667-143.018667-143.018667-143.018666a34.133333 34.133333 0 0 1 0-48.128 34.133333 34.133333 0 0 1 48.469334 0l166.912 166.912a34.133333 34.133333 0 0 1 0 49.152z\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34; p-id=\u0026#34;4257\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/phone/left-phone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;Item v-for=\u0026#34;(item, index) in itemList\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;right-goods\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Item from \u0026#39;./Item.vue\u0026#39; export default { components: { Item }, // data() { // return { // itemList: [ // { id: 1, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, // { id: 2, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39; 徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, // { id: 3, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, // { id: 4, src: \u0026#39;../../../images/xiaomi/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, // { id: 5, src: \u0026#39;../../../images/xiaomi/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, // { id: 6, src: \u0026#39;../../../images/xiaomi/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, // { id: 7, src: \u0026#39;../../../images/xiaomi/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39; 徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, // { id: 8, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, // ] // } // } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 686px; } .box-hd { height: 58px; width: 1226px; color: rgb(51, 51, 51); display: flex; justify-content: space-between; } .box-hd h2 { font-size: 22px; font-weight: 200; line-height: 58px } .box-hd .more { line-height: 58px; } .box-hd .more a { color: rgb(51, 51, 51); text-decoration: none; } .main-box { width: 1226px; display: flex; } .left-img { /* float: left; */ cursor: pointer; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .right-goods { width: 992px; height: 614px; } svg { position: relative; top: 4px; } .left-img li{ list-style: none; margin-bottom: 14px; } .left-img .top-img img, .left-img .bottom-img img{ width: 234px; height: 300px; } \u0026lt;/style\u0026gt; Main 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 \u0026lt;template\u0026gt; \u0026lt;main\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-top.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #left-img\u0026gt;\u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPhone\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能穿戴\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;耳机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;穿戴\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/left-watch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListBud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt;\u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;笔记本 | 平板\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/left-pad.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPad\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi Book Pro 14 2024 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;4999元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/mini-Redmi Book Pro 14 2024.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;家电\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电视影音\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空调\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListElec\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 迷你波轮洗衣机 3kg \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;799元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/mini-米家迷你波轮洗衣机Pro 3kg.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;生活电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;风扇\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;扫地机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空净\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;清洁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;环境\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListCleaner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家直流变频台式循环扇 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/mini-米家直流变频台式循环扇.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;风扇\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;厨房电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;净水器\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;烟灶\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电饭煲\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;微蒸烤\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListKitchen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家智能净烟机P2 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/mini-米家智能净烟机P2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;烟灶\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能家居\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;小爱音箱\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;门锁门铃\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;路由器\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;智能设备\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListSmart\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi小爱触屏音箱 8英寸 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/mini-Redmi小爱触屏音箱 8英寸.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;小爱音箱\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-bottom.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; import Item from \u0026#39;./Item.vue\u0026#39;; import MoreItem from \u0026#39;./MoreItem.vue\u0026#39;; export default { components: { Goods, Item, MoreItem }, data() { return { itemListPhone: [ { id: 1, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39;徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/phone/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, { id: 8, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, ], itemListBud: [ { id: 1, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5 Pro\u0026#39;, desc: \u0026#39;小米首发双功放三单元｜55dB 深度降噪｜哈曼联合调音\u0026#39;, price: \u0026#39;1299元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/REDMI Buds 6 Pro.webp\u0026#39;, title: \u0026#39;REDMI Buds 6 Pro\u0026#39;, desc: \u0026#39;小米首发圈瓷同轴三单元 | 55dB深度降噪 | 无级动态降噪技术\u0026#39;, price: \u0026#39;399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 青春版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 青春版\u0026#39;, desc: \u0026#39;42dB深度主动降噪 | 双麦AI通话抗风噪 | 12.4mm超大镀钛动圈\u0026#39;, price: \u0026#39;139元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6.webp\u0026#39;, title: \u0026#39;Redmi Buds 6\u0026#39;, desc: \u0026#39;旗舰双单元架构 | 49dB深度降噪 | 42h超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5\u0026#39;, desc: \u0026#39;舒适无感佩戴｜高通全链路无损音频｜哈曼 AudioEFX 联合调音\u0026#39;, price: \u0026#39;679元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6S.webp\u0026#39;, title: \u0026#39;Redmi Buds 6S\u0026#39;, desc: \u0026#39;14.2mm超大动圈单元 | 半入耳主动降噪 | 33小时超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 活力版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 活力版\u0026#39;, desc: \u0026#39;14.2mm超大动圈 | 内置五种调音模式 | 30小时长续航\u0026#39;, price: \u0026#39;99元起\u0026#39; }, ], itemListPad: [ { id: 1, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 14 2024\u0026#39;, desc: \u0026#39;65W 满血性能｜全新酷睿 Ultra 处理器\u0026#39;, price: \u0026#39;4899元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 16 2024\u0026#39;, desc: \u0026#39;70W 狂暴性能｜3.1K 165Hz 高刷高亮屏\u0026#39;, price: \u0026#39;6399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 16 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 14 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;4499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad Pro系列.webp\u0026#39;, title: \u0026#39;Redmi Pad Pro系列\u0026#39;, desc: \u0026#39;12.1英寸2.5K旗舰机大屏 | 10000mAh超大电池\u0026#39;, price: \u0026#39;1499元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Xiaomi Pad 6S Pro 12.4.webp\u0026#39;, title: \u0026#39;Xiaomi Pad 6S Pro 12.4\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰处理器 | 小米澎湃OS\u0026#39;, price: \u0026#39;2799元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad SE.webp\u0026#39;, title: \u0026#39;Redmi Pad SE\u0026#39;, desc: \u0026#39;高性价比千元平板｜11英寸高刷护眼大屏｜全金属一体机身｜73.2天超长待机\u0026#39;, price: \u0026#39;849元起\u0026#39; }, ], itemListElec: [ { id: 1, src: \u0026#39;../../../images/xiaomi/elec/小米电视S系列.webp\u0026#39;, title: \u0026#39;小米电视S系列\u0026#39;, desc: \u0026#39;144HZ超高刷 3+32G 多色温色彩还原技术\u0026#39;, price: \u0026#39;2599元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/elec/小米电视S Pro Mini LED系列.webp\u0026#39;, title: \u0026#39;小米电视S Pro Mini LED系列\u0026#39;, desc: \u0026#39;144Hz超高刷、4+64G大存储\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/elec/小米电视 S Mini LED 系列.webp\u0026#39;, title: \u0026#39;小米电视 S Mini LED 系列\u0026#39;, desc: \u0026#39;Mini LED 高分区背光、1200nits峰值亮度\u0026#39;, price: \u0026#39;2999元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/elec/巨省电 小米空调 1.5匹新1级能效.webp\u0026#39;, title: \u0026#39;巨省电 小米空调 1.5匹新1级能效\u0026#39;, desc: \u0026#39;强劲制冷 | 高效节能 | 智能互联\u0026#39;, price: \u0026#39;1899元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/elec/米家新风空调 立式3匹.webp\u0026#39;, title: \u0026#39;米家新风空调 立式3匹\u0026#39;, desc: \u0026#39;全屋快通风，就要大新风\u0026#39;, price: \u0026#39;6799元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/elec/米家分区洗烘一体机 15kg.webp\u0026#39;, title: \u0026#39;米家分区洗烘一体机 15kg\u0026#39;, desc: \u0026#39;健康分开洗 一台就够了\u0026#39;, price: \u0026#39;5499元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/elec/米家波轮洗衣机 10kg.webp\u0026#39;, title: \u0026#39;米家波轮洗衣机 10kg\u0026#39;, desc: \u0026#39;全景玻璃阻尼上盖 防夹手\u0026#39;, price: \u0026#39;999元\u0026#39; }, ], itemListCleaner: [ { id: 1, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频落地扇1X 升级版.webp\u0026#39;, title: \u0026#39;米家智能直流变频落地扇1X 升级版\u0026#39;, desc: \u0026#39;静音舒适自然风，支持充电宝供电，随处可用， 小爱语音控制\u0026#39;, price: \u0026#39;299元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/cleaner/米家循环扇.webp\u0026#39;, title: \u0026#39;米家循环扇\u0026#39;, desc: \u0026#39;风量强劲，广域覆盖\u0026#39;, price: \u0026#39;319元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/cleaner/米家直流变频落地扇 Pro.webp\u0026#39;, title: \u0026#39;米家直流变频落地扇 Pro\u0026#39;, desc: \u0026#39;收纳有序，与自然风同行\u0026#39;, price: \u0026#39;399元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/cleaner/米家落地扇.webp\u0026#39;, title: \u0026#39;米家落地扇\u0026#39;, desc: \u0026#39;静享智能轻风\u0026#39;, price: \u0026#39;219元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频循环扇 落地式.webp\u0026#39;, title: \u0026#39;米家智能直流变频循环扇 落地式\u0026#39;, desc: \u0026#39;智能温湿度控风，超广域空气循环\u0026#39;, price: \u0026#39;429元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频塔扇2.webp\u0026#39;, title: \u0026#39;米家智能直流变频塔扇2\u0026#39;, desc: \u0026#39;DIY自然风 ，环抱式柔和送风 ，儿童安全防护\u0026#39;, price: \u0026#39;329元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/cleaner/米家桌面移动风扇.webp\u0026#39;, title: \u0026#39;米家桌面移动风扇\u0026#39;, desc: \u0026#39;无线长续航，随处享清凉\u0026#39;, price: \u0026#39;129元\u0026#39; }, ], itemListKitchen: [ { id: 1, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能燃气灶S2.webp\u0026#39;, title: \u0026#39;米家智能燃气灶S2 5200W/4800W\u0026#39;, desc: \u0026#39;5200W/4800W猛火 | 双环聚能火焰 | 可调节\u0026#39;, price: \u0026#39;699元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能定时灶S2.webp\u0026#39;, title: \u0026#39;米家智能定时灶S2 5200W /4800W\u0026#39;, desc: \u0026#39;5200W/4800W爆炒大火才够味 | 68%超高热效\u0026#39;, price: \u0026#39;1099元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能平嵌侧吸油烟机S1.webp\u0026#39;, title: \u0026#39;米家智能平嵌侧吸油烟机S1\u0026#39;, desc: \u0026#39;小巧机身 | 25立方大吸力 | 烟灶联动\u0026#39;, price: \u0026#39;1799元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能顶侧双吸油烟机S2.webp\u0026#39;, title: \u0026#39;米家智能顶侧双吸油烟机S2\u0026#39;, desc: \u0026#39;25m³/min大风量 | 1000Pa大静压\u0026#39;, price: \u0026#39;2099元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能欧式烟机S2.webp\u0026#39;, title: \u0026#39;米家智能欧式烟机S2\u0026#39;, desc: \u0026#39;23m³/min大吸力｜500pa静压｜智能干洗\u0026#39;, price: \u0026#39;1499元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机S2 白色.webp\u0026#39;, title: \u0026#39;米家智能净烟机S2 白色\u0026#39;, desc: \u0026#39;下厨不留味｜无油网免拆洗｜真白不惧黄\u0026#39;, price: \u0026#39;2699元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机P1.webp\u0026#39;, title: \u0026#39;米家智能净烟机P1\u0026#39;, desc: \u0026#39;高速气旋强锁烟， 劲速气流高效净吸，无油网设计免拆洗\u0026#39;, price: \u0026#39;2999元\u0026#39; }, ], itemListSmart: [ { id: 1, src: \u0026#39;../../../images/xiaomi/smart/Xiaomi智能家庭屏 10.webp\u0026#39;, title: \u0026#39;Xiaomi智能家庭屏 10\u0026#39;, desc: \u0026#39;MIUI Home｜10.1\u0026#34; 高清大屏｜115°超广角摄像头｜儿童模式｜家庭 KTV｜小爱同学\u0026#39;, price: \u0026#39;899元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱Play 增强版.webp\u0026#39;, title: \u0026#39;小米小爱音箱Play 增强版\u0026#39;, desc: \u0026#39;LED时钟显示，语音控制传统家电\u0026#39;, price: \u0026#39;129元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Play.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Play\u0026#39;, desc: \u0026#39;听音乐、语音遥控家电\u0026#39;, price: \u0026#39;99元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Pro.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Pro\u0026#39;, desc: \u0026#39;澎湃低音，语音遥控传统家电\u0026#39;, price: \u0026#39;269元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/smart/小米AI音箱（第二代）.webp\u0026#39;, title: \u0026#39;小米AI音箱（第二代）\u0026#39;, desc: \u0026#39;低频饱满有深度，人声清晰有细节\u0026#39;, price: \u0026#39;179元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱.webp\u0026#39;, title: \u0026#39;小米小爱音箱\u0026#39;, desc: \u0026#39;Hi-Fi级音频芯片，支持AUX IN接口，你桌面的有源音箱\u0026#39;, price: \u0026#39;199元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/smart/Redmi小爱触屏音箱 8英寸.webp\u0026#39;, title: \u0026#39;Redmi小爱触屏音箱 8英寸\u0026#39;, desc: \u0026#39;8英寸高清大屏，海量优质影音资源\u0026#39;, price: \u0026#39;349元\u0026#39; }, ], } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; main { height: 5194px; width: 100%; background-color: rgb(245, 245, 245); } .container { width: 1226px; margin: 0 auto; } .home-banner-box { padding: 22px 0; } .home-banner-box img { width: 1226px; } .tab-list { height: 58px; padding: 14px 0; box-sizing: border-box; } .tab-list li { list-style: none; float: left; margin-left: 30px; height: 30px; line-height: 30px; cursor: pointer; } .tab-list .active { border-bottom: 2px solid rgb(255, 103, 0); color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; Footeru0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;footer-services\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810757451\u0026#34; class=\u0026#34;icon tool\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;15017\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M373.91591769 722.85439369c-19.74602377 0-39.49204754-1.65700898-59.23807131-5.10911106-70.00862973-12.15139925-133.66539167-45.15349491-184.0660817-95.55418494-51.09111045-51.09111045-84.23129021-115.57637689-95.96843721-186.5515952-11.46097883-69.4562934-1.79509307-139.7410913 28.1691528-203.12168507l12.56565148-26.65022789L287.61336625 418.10282403l124.8280104-124.8280104-212.2352345-212.37331858 26.65022789-12.5656515c63.38059378-29.96424587 133.66539167-39.63013162 203.12168507-28.16915279 70.97521831 11.737147 135.59856882 44.87732675 186.5515952 95.96843721 50.40069004 50.40069004 83.40278572 114.05745199 95.55418494 184.06608172 11.87523108 68.48970482 3.0378498 137.94599822-25.54555522 200.91233974l-37.69695446-17.1224262c51.64344678-113.9193679 26.92639605-250.07027305-61.58550071-338.58216981-82.85044939-82.85044939-206.15953488-109.77684543-314.96979174-71.1133024l198.70299443 198.70299445-183.3756613 183.65182946-198.84107852-198.84107851c-38.66354305 108.81025686-11.737147 232.11934237 71.1133024 314.96979173 88.51189675 88.51189675 224.52471783 113.22894749 338.58216981 61.58550071l17.12242619 37.69695446c-44.87732675 20.43644418-92.9305874 30.79275037-141.67426844 30.79275037z\u0026#34; p-id=\u0026#34;15018\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M813.989888 980.65737535c-17.81284661 0-35.62569324-6.76612003-49.1579333-20.2983601L492.3920603 687.91912086c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382545 8.14696086-8.14696086 21.26494868-8.14696086 29.27382546 0l272.43989439 272.43989438c10.90864251 10.90864251 28.72148912 10.90864251 39.63013162 0l91.68783065-91.68783065c5.24719513-5.24719513 8.14696086-12.28948332 8.14696084-19.88410784 0-7.45654045-2.89976573-14.49882864-8.14696084-19.88410787L653.12193212 527.32733314c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382544 8.14696086-8.14696086 21.26494868-8.14696086 29.27382545 0l272.43989438 272.43989438c13.11798782 13.11798782 20.2983601 30.5165822 20.2983601 49.15793329s-7.18037229 36.03994548-20.2983601 49.15793331l-91.68783065 91.68783064c-13.67032415 13.39415599-31.34508668 20.16027601-49.1579333 20.16027603z\u0026#34; p-id=\u0026#34;15019\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 预约维修服务 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810998229\u0026#34; class=\u0026#34;icon circle-7\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;17244\u0026#34; width=\u0026#34;30\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;path d=\u0026#34;M952.46 31.5H31.5v961h961v-961h-40.04z m0 920.96H71.54V71.54h880.915l0.005 880.92z\u0026#34; p-id=\u0026#34;17245\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; --\u0026gt; \u0026lt;path d=\u0026#34;M512 872.375c188.197 0 340.353-152.16 340.353-340.353S700.198 191.664 512 191.664h-60.063L512 131.601h-60.063l-80.085 80.085 80.085 80.085H512l-60.063-60.062H512c166.172 0 300.313 134.141 300.313 300.313S678.172 832.335 512 832.335 211.687 698.194 211.687 532.022h-40.04c0 188.192 152.155 340.353 340.353 340.353z\u0026#34; p-id=\u0026#34;17246\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M450.319 720.834l45.638 0.13L631.544 414.53v-53.834H390.761v41.89h200.695l-141.137 318.25z\u0026#34; p-id=\u0026#34;17247\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 7天无理由退货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811204525\u0026#34; class=\u0026#34;icon circle-15\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;18507\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M511.00672 1003.52c247.75168 0 448.07168-200.30976 448.07168-448.07168 0-247.75168-200.32-448.06656-448.07168-448.06656H431.93344L511.00672 28.3136H431.93344L326.50752 133.74464l105.43104 105.43104h79.06816L431.93344 160.10752h79.06816c218.76736 0 395.35104 176.59392 395.35104 395.35104 0 218.76736-176.58368 395.35616-395.35104 395.35616-218.76224 0-395.35104-176.5888-395.35104-395.35616H62.94016c0 247.75168 200.30976 448.06144 448.06656 448.06144z\u0026#34; p-id=\u0026#34;18508\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M430.52544 739.95264h-50.07872V344.6016h-105.4208V397.312h52.7104v342.64064H272.384v52.70528h158.14144v-52.70528zM630.84032 739.95264H485.87264v52.70528h144.96256c79.06816 0 144.96256-65.88416 144.96256-144.95744s-65.88928-144.96256-144.96256-144.96256h-92.25728v-105.4208h210.86208V344.6016H485.87264v210.85184h144.96256c50.0736 0 92.25728 42.17856 92.25728 92.25728s-42.17856 92.24192-92.25216 92.24192z\u0026#34; p-id=\u0026#34;18509\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 15天免费换货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811426127\u0026#34; class=\u0026#34;icon gift\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;21679\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M195.58025 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21680\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M775.5183125 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21681\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21682\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M828.39359375 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21683\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 353.8019375l737.4375 0 0 52.3125-737.4375 0 0-52.3125Z\u0026#34; p-id=\u0026#34;21684\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M172.51803125 511.86415625l657.00028125 0 0 53.43721875-657.00028125 0 0-53.43721875Z\u0026#34; p-id=\u0026#34;21685\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M205.141625 881.009l591.75225 0 0 53.4380625-591.75225 0 0-53.4380625Z\u0026#34; p-id=\u0026#34;21686\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M458.97115625 385.3008125l105.0485625 0 0 520.87471875-105.0485625 0 0-520.87471875Z\u0026#34; p-id=\u0026#34;21687\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M523.1931875 354.40353125C518.73734375 125.9725625 343.40103125 30.28203125 269.13584375 129.761 180.1784375 248.9204375 357.58025 357.73971875 357.58025 357.73971875s4.9528125 11.39990625 60.4546875 19.86440625C450.07128125 382.49028125 524.82415625 438.00228125 523.1931875 354.40353125zM448.14246875 355.4894375c-36.56221875 0-91.843875-45.98859375-91.843875-45.98859375s-73.98253125-75.57215625-39.77015625-129.28865625c31.48875-49.44121875 146.1661875-4.13690625 148.74890625 128.25421875C466.2231875 356.9170625 466.9251875 355.4894375 448.14246875 355.4894375z\u0026#34; p-id=\u0026#34;21688\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M601.90325 377.604125c55.501875-8.46534375 60.4546875-19.86440625 60.4546875-19.86440625s183.9324375-105.2780625 86.4405-226.96875C671.18103125 33.8856875 501.20253125 125.9725625 496.74584375 354.40353125 495.114875 438.00228125 569.86775 382.49028125 601.90325 377.604125zM554.66084375 308.46640625C557.24440625 176.0744375 673.8936875 133.18240625 703.41059375 180.21134375c33.5761875 53.49628125-39.77015625 129.28865625-39.77015625 129.28865625s-55.2825 45.98859375-91.84471875 45.98859375C553.01384375 355.4894375 553.71584375 356.9170625 554.66084375 308.46640625z\u0026#34; p-id=\u0026#34;21689\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 满69包邮 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811515464\u0026#34; class=\u0026#34;icon location\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;22794\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M503.23456 885.82144l-14.04928-14.15168C478.02368 860.38528 215.49056 593.92 215.49056 434.7904c0-163.55328 129.29024-296.61184 288.21504-296.61184 158.90432 0 288.21504 132.28032 288.256 294.87104 0.04096 159.0272-271.4624 436.51072-274.20672 439.07072l-14.52032 13.70112z m0.49152-706.6624c-136.33536 0-247.25504 114.688-247.25504 255.65184 0 122.79808 192.7168 335.21664 247.48032 393.09312C563.2 765.62432 751.06304 549.4784 751.02208 433.07008c-0.04096-140.00128-110.98112-253.91104-247.296-253.91104z m1.88416 360.83712c-68.9152 0-125.00992-57.79456-125.00992-128.83968s56.07424-128.8192 125.00992-128.8192c68.89472 0 124.96896 57.79456 124.96896 128.8192s-56.05376 128.83968-124.96896 128.83968z m0-216.6784c-46.34624 0-84.04992 39.40352-84.04992 87.8592s37.70368 87.8592 84.04992 87.8592c46.32576 0 84.00896-39.40352 84.00896-87.8592s-37.6832-87.8592-84.00896-87.8592z\u0026#34; fill=\u0026#34;#616161\u0026#34; p-id=\u0026#34;22795\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 1100余家售后网点 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer-links\u0026#34;\u0026gt; \u0026lt;dl v-for=\u0026#34;item1 in linkList\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ item1.title }}\u0026lt;/dt\u0026gt; \u0026lt;dd v-for=\u0026#34;item2 in item1.ddList\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;{{ item2 }}\u0026lt;/a\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;div class=\u0026#34;right-contact\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-contact\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34;\u0026gt;950816\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34; style=\u0026#34;margin-top: 25px;\u0026#34;\u0026gt;950818\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;width: 200px; text-align: left; margin-left: 52px;\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;手机适用于：Xiaomi MIX Fold系列、MIX Flip系列、数字12系列及以上\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;电视适用于：98寸、100寸电视\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { linkList: [ { title: \u0026#39;\u0026#39;, ddList: [] }, { title: \u0026#39;选购指南\u0026#39;, ddList: [\u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;穿戴\u0026#39;, \u0026#39;耳机\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;音箱\u0026#39;, \u0026#39;配件\u0026#39;] }, { title: \u0026#39;服务中心\u0026#39;, ddList: [\u0026#39;申请售后\u0026#39;, \u0026#39;售后政策\u0026#39;, \u0026#39;维修服务价格\u0026#39;, \u0026#39;订单查询\u0026#39;, \u0026#39;以旧换新\u0026#39;, \u0026#39;保障服务\u0026#39;, \u0026#39;防伪查询\u0026#39;, \u0026#39;F码通道\u0026#39;] }, { title: \u0026#39;线下门店\u0026#39;, ddList: [\u0026#39;小米之家\u0026#39;, \u0026#39;服务网点\u0026#39;, \u0026#39;授权体验店/专区\u0026#39;] }, { title: \u0026#39;关于小米\u0026#39;, ddList: [\u0026#39;了解小米\u0026#39;, \u0026#39;加入小米\u0026#39;, \u0026#39;投资者关系\u0026#39;, \u0026#39;可持续发展\u0026#39;, \u0026#39;廉洁举报\u0026#39;] }, { title: \u0026#39;关注我们\u0026#39;, ddList: [\u0026#39;新浪微博\u0026#39;, \u0026#39;官方微信\u0026#39;, \u0026#39;联系我们\u0026#39;, \u0026#39;公益基金会\u0026#39;] }, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .container { width: 1226px; margin: 0 auto; } .container .footer-services { border-bottom: 1px solid rgb(224, 224, 224); } .container .footer-services ul { padding: 27px 0; /* display: flex; */ /* justify-content: space-around; */ height: 79px; box-sizing: border-box; } .container .footer-services li { list-style: none; height: 25px; color: rgb(97, 97, 97); line-height: 25px; cursor: pointer; border-left: 1px solid rgb(224, 224, 224); width: 243px; text-align: center; float: left; line-height: 25px; } .container .footer-services li:first-child { border: 0; } .container .footer-services li svg { float: left; position: relative; } .container .footer-services li svg.tool { left: 56px; top: 0; } .container .footer-services li svg.circle-7 { left: 50px; top: -3px; } .container .footer-services li svg.circle-15 { left: 54px; top: 0; } .container .footer-services li svg.gift { left: 70px; top: 0; } .container .footer-services li svg.location { left: 40px; top: 0; } .container .footer-services li a { height: 25px; line-height: 25px; color: rgb(97, 97, 97); text-decoration: none; } .container .footer-links { height: 392.5px; box-sizing: border-box; padding: 40px 0; } .footer-links dl { width: 160px; height: 25px; float: left; } .footer-links dl dt { height: 17.5px; line-height: 17.5px; font-size: 14px; margin-top: -1px; margin-bottom: 26px; color: rgb(66, 66, 66); } .footer-links dl dd { color: rgb(117, 117, 117); font-size: 12px; margin-top: 10px; line-height: 18px; /* cursor: pointer; */ } .footer-links dl dd a { color: rgb(117, 117, 117); text-decoration: none; } .footer-links dl dd a:hover { color: rgb(255, 103, 0); } .footer-links .right-contact { width: 251px; float: right; text-align: center; } .footer-links .right-contact .col-contact { width: 251px; height: 80px; border-left: 1px solid rgb(224, 224, 224); } .right-contact .phone { height: 22px; margin-bottom: 5px; color: rgb(255, 103, 0); font-size: 22px; line-height: 22px; } .right-contact .time { font-size: 12px; color: rgb(97, 97, 97); height: 18px; line-height: 18px; margin-bottom: 5px; } .right-contact .btn { width: 120px; height: 30px; border: 1px solid rgb(255, 103, 0); display: inline-block; font-size: 12px; line-height: 30px; color: #FF6700; } .right-contact .notice { font-size: 12px; color: rgb(97, 97, 97); /* height: 18px; */ line-height: 18px; margin-bottom: 5px; margin-top: 3px; } \u0026lt;/style\u0026gt; App 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;Tab /\u0026gt; \u0026lt;Wrapper /\u0026gt; \u0026lt;Main\u0026gt;\u0026lt;/Main\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Main from \u0026#39;@/components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import Wrapper from \u0026#39;@/components/xiaomi/Wrapper.vue\u0026#39;; import Footer from \u0026#39;./components/xiaomi/Footer.vue\u0026#39;; export default { components: { Header, Tab, Wrapper, Main, Footer, } } \u0026lt;/script\u0026gt; ","date":"2025-02-21T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/","title":"第三章 组件基础（上）"},{"content":"Vue 指令 指令修饰符 通过 . 指明一些指令后缀，不同后缀封装了不同的处理操作\t→\t简化代码\n① 按键修饰符\n@keyup.enter\t→\t键盘回车监听 ② v-model修饰符\nv-model.trim\t→\t去除首尾空格\nv-model.number →\t转数字\n③ 事件修饰符\n@事件名.stop\t→\t阻止冒泡\n@事件名.prevent →\t阻止默认行为\n1 \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; @keyup.enter=\u0026#34;add\u0026#34; /\u0026gt; .enter 等价于 if 判断事件触发时 key 的值（addEventListener）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;@keyup.enter → 监听键盘回车事件\u0026lt;/h3\u0026gt; \u0026lt;input @keyup=\u0026#34;fn\u0026#34; v-model=\u0026#34;username\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39; }, methods: { fn(e) { if (e.key === \u0026#39;Enter\u0026#39;) { console.log(\u0026#39;键盘回车的时候触发\u0026#39;, this.username) this.username = \u0026#39;\u0026#39; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind 对于样式控制的增强 操作 class 语法：v-bind:class = \u0026quot;对象 / 数组\u0026quot;\n① 对象 → 键就是类名，值是布尔值。如果值为 true，有这个类，否则没有这个类。(一个类来回切换)\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{类名1:布尔值，类名2:布尔值}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; ② 数组 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表。（多个类批量添加或删除）\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;类名1\u0026#39;，\u0026#39;类名2\u0026#39;，\u0026#39;类名3\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 300px; height: 300px; margin: 30px 0px 30px 200px; border: 5px solid black; border-radius: 10px; } .pink { background-color: rgb(255, 236, 239); } .big { width: 500px; height: 300px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{ pink: false, big: false }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;pink\u0026#39;, \u0026#39;big\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：导航栏高亮效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #e01222; padding: 0 10px; } li { width: 100px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #e01222; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;京东秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;每日特价\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;品类秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 基于数据动态渲染页面。\n记录导航栏下标，用于标记 class 为 active，以显示高亮。\n使用 @ 或 v-on: 监听事件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #3ea1e4; padding: 0 10px; } li { width: 200px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #3ea1e4; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34; @mouseenter=\u0026#34;activeIndex=item.id-1\u0026#34;\u0026gt; \u0026lt;a :class=\u0026#34;{active: index === activeIndex}\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;{{item.name}}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;专栏\u0026#39; }, { id: 2, name: \u0026#39;活动\u0026#39; }, { id: 3, name: \u0026#39;直播\u0026#39; }, { id: 4, name: \u0026#39;课堂\u0026#39; }, { id: 5, name: \u0026#39;社区中心\u0026#39; }, { id: 6, name: \u0026#39;游戏中心\u0026#39; } ], activeIndex: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 操作 style 语法：style = \u0026quot;样式对象\u0026quot;\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{CSS属性名1: CSS属性值, CSS属性名2: CSS属性值} \u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; background-color: gainsboro; margin: 5px; } .bigger{ width: 400px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{backgroundColor: \u0026#39;pink\u0026#39;}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; v-bind:class=\u0026#34;[\u0026#39;bigger\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;../vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：进度条变化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; \u0026lt;span\u0026gt;50%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-bind: 或 : 操作 style。\n为 button 添加点击事件，改变进度条长度。\n动态渲染长度显示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 外层盒子底色 （黑色） --\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;!-- 内层盒子 - 进度（蓝色） --\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34; :style=\u0026#34;{ width: percent + \u0026#39;%\u0026#39; }\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ percent }}%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;percent = 25\u0026#34;\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 50\u0026#34;\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 75\u0026#34;\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 100\u0026#34;\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { percent: 30 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-model 应用于其他表单元素 v-model 可以快速获取或设置表单元素的值，且能够根据控件类型自动选取正确的方法来更新元素。\n表单元素：\n① 输入框 input:text\t→\tvalue\n② 文本域 textarea\t→\tvalue\n③ 复选框 input:checkbox\t→\tchecked\n④ 单选框 input:radio →\tchecked\n⑤ 下拉菜单 select\t→\tvalue\t\u0026hellip;\n案例：个人信息档案。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; textarea { display: block; width: 395px; height: 100px; margin: 10px 0; } .info { width: 400px; height: 500px; border: solid rgb(0, 0, 0); padding-left: 20px; padding-right: 20px; border-radius: 20px; box-shadow: 5px 5px #ccc; ; } .study { width: 20px; margin: 0 5px 0 5px; } .study:first-child { width: 50px; } .necc { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;个人信息档案\u0026lt;/h3\u0026gt; \u0026lt;span\u0026gt; 姓名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34; style=\u0026#34;width: 80px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 20px;\u0026#34;\u0026gt; 学号：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;stuId\u0026#34; style=\u0026#34;width: 120px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; \u0026lt;!-- name 属性使得单选框互斥，当选择其中一个的时候，另外的则取消勾选 --\u0026gt; \u0026lt;!-- value 向后台提交数据 --\u0026gt; 性别： \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;男 \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;2\u0026#34;\u0026gt;女 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 籍贯： \u0026lt;select v-model=\u0026#34;cityId\u0026#34;\u0026gt; \u0026lt;!-- option 需要设置 value 值，且 select 框的 value 值与选中的 option 的 value 值关联 --\u0026gt; \u0026lt;option value=\u0026#34;001\u0026#34;\u0026gt;北京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;002\u0026#34;\u0026gt;上海\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;003\u0026#34;\u0026gt;成都\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;004\u0026#34;\u0026gt;南京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;005\u0026#34;\u0026gt;长沙\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;006\u0026#34;\u0026gt;武汉\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;007\u0026#34;\u0026gt;...\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 是否为共产党员： \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;isStar\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 入学时间：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;year\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;年\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;month\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;月\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;day\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;日 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 自我评价： \u0026lt;textarea v-model=\u0026#34;desc\u0026#34; placeholder=\u0026#34;本人积极向上...\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;保存\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, isStar: false, gender: \u0026#34;2\u0026#34;, cityId: \u0026#39;002\u0026#39;, desc: \u0026#34;\u0026#34;, stuId: \u0026#39;\u0026#39;, year: \u0026#39;2023\u0026#39;, month: \u0026#39;\u0026#39;, day: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 计算属性 基础语法 概念：基于现有的数据，计算出来的新属性。依赖的数据变化，自动重新计算。\n语法：① 声明在 computed 配置项中，一个计算属性对应一个函数。\n​\t② 使用起来和普通属性一样使用 {{ 计算属性名 }}。\n注意：计算属性本质上是属性，因此在使用时不能加 ()，如 {{ getCount() }} 是错误的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 240px; } th,td { border: 1px solid #000; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;分数\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}分\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;总分 {{ getCount }} 分\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;英语\u0026#39;, num: 67 }, { id: 2, name: \u0026#39;数学\u0026#39;, num: 82 }, { id: 3, name: \u0026#39;语文\u0026#39;, num: 75 }, ] }, computed:{ getCount(){ // 遍历数组求和 let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 和 methods ​\tmethods 侧重于处理业务，使用几次就需要计算几次；computed 侧重于求得结果，具有缓存特性，性能更好。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 300px; } th,td { border: 1px solid #000; } h3 { position: relative; margin-left: 120px; } span { position: absolute; left: 70px; top: -4px; width: 16px; height: 16px; color: white; font-size: 12px; text-align: center; border-radius: 50%; background-color: #e63f32; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;购物车🛒\u0026lt;span\u0026gt;{{ getCount() }}\u0026lt;/span\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;名字\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;数量\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}个\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;礼物总数：{{ getCount() }} 个\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // 现有的数据 list: [ { id: 1, name: \u0026#39;篮球\u0026#39;, num: 3 }, { id: 2, name: \u0026#39;玩具\u0026#39;, num: 2 }, { id: 3, name: \u0026#39;铅笔\u0026#39;, num: 5 }, ] }, methods: { getCount() { console.log(\u0026#39;methods方法执行了\u0026#39;) let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } }, computed: { // 计算属性：有缓存的，一旦计算出来结果，就会立刻缓存 // 下一次读取 → 直接读缓存就行 → 性能特别高 // getCount() { // console.log(\u0026#39;计算属性执行了\u0026#39;) // let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) // return count // } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 修改计算属性 计算属性默认的简写，只能读取访问，不能修改；如果要修改，则需要写计算属性的完整写法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 computed: { 计算属性名() { 一段代码逻辑 (计算逻辑) return 结果 } } ------------------------------------------------------------------------ computed: { 计算属性名: { get() { 一段代码逻辑 (计算逻辑) return 结果 }, set(修改的值) { 一段代码逻辑 (修改逻辑) } } } 案例：改名卡。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39; }, computed: { fullName() { return this.firstName + \u0026#34;·\u0026#34; + this.lastName } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = \u0026#39;迈克尔杰克逊\u0026#39; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t如果使用 computed 计算完整姓名，直接修改 fullName 时提示 computed 没有配置 setter 逻辑，[Vue warn]: Computed property \u0026quot;fullName\u0026quot; was assigned to but it has no setter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;change\u0026#34;\u0026gt;\u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39;, }, computed: { // fullName() { // return this.firstName + \u0026#34;·\u0026#34; + this.lastName // } fullName: { get: function(){ return this.firstName + \u0026#34;·\u0026#34; + this.lastName }, set: function(a){ this.firstName = a.slice(0, 3) this.lastName = a.slice(3) } } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = document.querySelector(\u0026#39;.change\u0026#39;).value; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 成绩案例 ​\t编写程序，使得页面在没有数据时显示 \u0026ldquo;暂无数据\u0026rdquo;，有数据时，显示数据并将未及格的成绩标红，实现添加、删除、求总分及平均分等功能。\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./styles/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;语文\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;red\u0026#34;\u0026gt;46\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;英语\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;80\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;数学\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;100\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：246\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：79\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-if v-else 判断条件渲染或删除 tbody。\nv-for 动态渲染tbody 中的数据， v-bind 控制不及格科目成绩的颜色。\nv-on 绑定删除事件，filter 覆盖数组，v-model 双向绑定数据，unshfit 更新视图。\ncomputed 计算属性求总分及平均分。\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody v-if=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{index+1}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{item.subject}}\u0026lt;/td\u0026gt; \u0026lt;td :class=\u0026#34;{red:item.score\u0026lt;60}\u0026#34;\u0026gt;{{item.score}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; @click.prevent=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody v-else\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：{{getSum}}\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：{{getAvg}}\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; v-model.trim=\u0026#34;subject\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; v-model.number=\u0026#34;score\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; }, methods: { del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ if(this.list[i].id === id){ index = i; } } // console.log(this.list) this.list.splice(index, 1); // console.log(this.list) }, add() { if (!this.subject) { alert(\u0026#39;科目不能为空！\u0026#39;) return } if (typeof this.score !== \u0026#39;number\u0026#39;) { alert(\u0026#39;成绩输入格式错误！\u0026#39;) return } // push 在最后添加，unshift 在前面插入 this.list.unshift({ id: +new Date(), subject: this.subject, score: this.score }) this.subject = \u0026#39;\u0026#39; this.score = \u0026#39;\u0026#39; } }, computed: { getSum() { // return this.list.reduce((sum, item) =\u0026gt; sum + item.score, 0) let sum = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ sum += this.list[i].score; } return sum; }, getAvg() { if (this.list.length === 0) { return 0 } return (this.getSum / this.list.length).toFixed(2) } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue 生命周期钩子函数 每个 Vue 实例在创建过程中都有一系列的初始化步骤。例如，创建函数绑定、编译模板、将实例挂在到 DOM 并在数据变化时触发 DOM 更新、销毁实例等。\n通俗的说，Vue 实例从创建到销毁的过程，就是生命周期。在这个过程中会运行一些叫做生命周期钩子的函数，通过这些钩子函数可以定义业务逻辑。\n（1）beforeCreate：在 Vue 实例开始初始化时调用。\n（2）created：在实例创建之后，DOM 编译之前调用。\n（3）beforeMount：在 DOM 渲染前调用。\n（4）mounted：在 DOM 渲染后调用，等于 window.onload() 方法。\n（5）beforeUpdate()：在组件更新前调用。\n（6）updated()：在组件中的任意 DOM 元素更新后调用。\n（7）beforeDestory：在销毁实例前调用，此时实例仍有效。\n（8）destoryed：在实例销毁后调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, beforeCreate() { console.log(\u0026#39;beforeCreate\u0026#39;); }, created() { console.log(\u0026#39;created\u0026#39;); }, beforeMount() { console.log(\u0026#39;beforeMount\u0026#39;); }, mounted() { console.log(\u0026#39;mounted\u0026#39;); }, beforeDestory() { console.log(\u0026#39;beforeDestory\u0026#39;); }, destoryed() { console.log(\u0026#39;destoryed\u0026#39;); }, }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; watch 侦听器 基础语法 作用：监听数据变化，执行一些业务逻辑或异步操作。\n语法：① 简单写法\t→\t简单类型数据，直接监视。\n1 2 3 4 5 6 7 8 watch: { 数据属性名(newValue, oldValue) { 一些业务逻辑或异步操作。 }, \u0026#39;对象.属性名\u0026#39;(newValue, oldvalue) { 一些业务逻辑或异步操作。 } } 注意：watch 中函数的名称需要与在 data 中定义的属性名称一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ user.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ user.age }}\u0026lt;/p\u0026gt; \u0026lt;textarea name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;msg\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { user: { name: \u0026#39;John\u0026#39;, age: 30 }, msg: \u0026#39;\u0026#39; } }, watch: { user(newValue, oldValue) { console.log(\u0026#39;user changed\u0026#39;); console.log(oldValue); console.log(newValue); }, msg(newValue, oldValue) { console.log(`${oldValue} changed to ${newValue}`); } }, mounted() { // 这会触发上面的 watch 回调，因为 user 的引用改变了 this.user = { name: \u0026#39;Doe\u0026#39;, age: 32 }; // 这不会触发上面的 watch 回调，因为 user 的引用没有改变 this.user.name = \u0026#39;Jane\u0026#39;; this.user.age = 31; } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：模拟实时翻译。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 接口地址：https://applet-base-api-t.itheima.net/api/translate // 请求方式：get // 请求参数： // （1）words：需要被翻译的文本（必传） // （2）lang： 需要被翻译成的语言（可选）默认值-意大利 // ----------------------------------------------- const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { words: \u0026#39;\u0026#39;, obj: { w1: \u0026#39;\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // 检测 words 的变化，一般只使用新值，因此 oldValue 可以省略 // words(newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.ne s.data.data // }, 300) // }, // 如果检测某个对象里面的子属性，只需要改名字就可以了，但在 js 中不能出现.-等符号，因此需要用 \u0026#39;\u0026#39; 包裹 \u0026#39;obj.w1\u0026#39;(newValue, oldValue) { console.log(newValue, oldValue); }, async words(newValue, oldValue) { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: { words: newValue } }) this.result = res.data.data; console.log(res.data.data); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 完整写法 语法：② 完整写法\t→\t添加额外配置项。\n(1) deep: true 对复杂类型深度监视\n(2) immediate: true 初始化立刻执行一次 handler 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 data: { obj: { words:‘苹果, lang: \u0026#39;italy\u0026#39; } }, watch: { 数据属性名: { deep: true, handler (newValue) { console.log(newValue)} } } } 完整写法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select v-model=\u0026#34;obj.lang\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;obj.words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { obj: { words: \u0026#39;\u0026#39;, lang: \u0026#39;italy\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // \u0026#39;obj.words\u0026#39; (newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, // params: { // words: newValue // } // }) // this.result = res.data.data // }, 300) // }, obj: { deep: true, // immediate: true, handler(newValue, oldValue) { console.log(newValue, oldValue); clearTimeout(this.timer); this.timer = setTimeout(async () =\u0026gt; { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: newValue }) this.result = res.data.data }, 300) } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 过滤器 对于一些需要经过复杂计算的数据绑定，简单的表达式可能无法实现，这时可以使用 vue.js 的过滤器进行处理，通过自定义过滤器可以对文本进行格式化。\n过滤器可以用在插值表达式和 v-bind 指令中，其需要在被添加在 JavaScript 表达式的尾部，由符号 | 表示，格式如下：\n1 2 3 4 \u0026lt;!-- 在插值表达式中 --\u0026gt; {{ msg | filter }} \u0026lt;!-- 在 v-bind 中 --\u0026gt; \u0026lt;div v-bind:id=\u0026#34;msg | filter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 定义过滤器有两种方式，第一种是通过全局方法 Vue.filter() 进行定义；第二种是应用选项对象中的 filters 选项进行定义。\n全局过滤器 1 2 3 4 5 Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) }); 该方法定义了一个名为 capitalize 的全局过滤器，其中，Vue.filter 方法接受两个参数，第一个参数 capitalize 是过滤器的名称，第二个参数是一个函数，这个函数会接收从模板传递过来的值，并对其进行处理。\n在该过滤器中，如果传入的 value 是假值（比如 null、undefined、空字符串等），则直接返回一个空字符串。这是为了防止在调用 toUpperCase() 方法时出现错误。\n该过滤器将传入的值转换为一个字符串，将第一个字母大写并与剩余的字符串片段拼接起来，形成一个新的字符串。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ name | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() // 将其转换为一个字符串。 return value.charAt(0).toUpperCase() + value.slice(1) // value.charAt(0) 获取字符串的第一个字符。 // toUpperCase() 将第一个字符转换为大写。 // value.slice(1) 获取除了第一个字符之外的所有字符。 }); const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { name: \u0026#39;bob\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 局部过滤器 这个局部过滤器 capitalize 只能在定义它的组件内部使用。\n1 2 3 4 5 6 7 8 9 filters: { capitalize: function (value) { // 这是定义在组件的 `filters` 选项中的一个过滤器。 // `filters` 是一个对象，其中的每个属性都是一个过滤器函数。 if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) } } 过滤器串联 1 {{ msg | filterA | filterB }} 多个过滤器可以串联使用，在串联使用过滤器时，先调用左边的过滤器，再依次往右调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ str | lowercase | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { str: \u0026#39;hElLoW woRlD!\u0026#39; }, filters: { lowercase: (str)=\u0026gt;{ return str.toLowerCase(); }, capitalize: (str)=\u0026gt;{ return str.charAt(0).toUpperCase() + str.slice(1); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：定义两个过滤器，第一个过滤器用来区分信息类别，使得不同标题的颜色不同，第二个过滤器用来将超出 15 个字符的新闻内容截取，以省略号结尾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 实现方法：\n观察代码可发现，标题颜色通过不同类来实现，因此可以使用 v-bind 绑定 class ，并使用过滤器对标题内容进行判断从而改变标题颜色。\n新闻内容可以直接使用插值表达式加过滤器的方式修改，即判断字符串的长度大于 15 时，截取字符串内容，str.slice(0, 15)，再在末尾加上 \u0026hellip;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } .omit{ width: 200px; text-overflow: ellipsis; text-wrap: nowrap; overflow: hidden; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; class=\u0026#34;omit\u0026#34;\u0026gt; \u0026lt;span :class=\u0026#34;item.title | hot\u0026#34;\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] }, filters: { hot: function (str) { switch (str) { case \u0026#39;【公告】\u0026#39;: return \u0026#39;blue\u0026#39;; case \u0026#39;【头条】\u0026#39;: return \u0026#39;red\u0026#39;; case \u0026#39;【热点】\u0026#39;: return \u0026#39;orange\u0026#39;; default: return \u0026#39;gray\u0026#39;; } }, omit: (str)=\u0026gt;{ if(str.length \u0026gt; 15){ return str.slice(0, 15) + \u0026#39;...\u0026#39;; }else{ return str; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习 创建一个数组，当点击页面内按钮时，为数组添加一个 1-100 的随机整数，并在页面内显示数组中所有元素。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;span v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/span\u0026gt; --\u0026gt; \u0026lt;button @click=\u0026#34;addRandom\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;span\u0026gt;{{list.toString()}}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // list: [15, 61, 16, 18, 65, 95] list: [] }, methods: { addRandom() { const random = Math.floor(Math.random() * 100) + 1; this.list.push(random); } } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; 随机给出一个 0 ~ 99（包括 0 和 99）的数字，然后让用户在规定的次数内猜出是什么数字。当用户随便猜一个数字输入后，游戏会提示该数字太大或太小，然后缩小结果范围，最终得出正确结果。界面设计如实验图 2-1 所示。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div { text-align: center; margin: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;猜数字游戏\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;请输入一个0-99之间的随机整数\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model.number=\u0026#34;guess\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;submit\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled v-model=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;start\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;当前还可以猜测次数：\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled :value=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;restart\u0026#34;\u0026gt;再来一局\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { random: 0, flag: true, count: 3, msg: \u0026#39;点击按钮开始游戏！\u0026#39;, guess: \u0026#39;\u0026#39;, subFlag: false }, methods: { start() { this.flag = false; this.random = Math.floor(Math.random() * 100) this.msg = \u0026#39;请输入数字！\u0026#39; }, submit() { if(this.flag == true){ alert(\u0026#39;请先点击开始按钮！\u0026#39;); return; } if (this.count == 1) { console.log(111); this.count--; this.msg = \u0026#39;次数用尽，请重新开始游戏！\u0026#39;; this.subFlag = true; return; } if (this.guess \u0026gt; this.random) { this.msg = \u0026#39;猜大了！\u0026#39;; this.count--; } if (this.guess \u0026lt; this.random) { this.msg = \u0026#39;猜小了！\u0026#39;; this.count--; } if (this.guess == this.random) { this.msg = \u0026#39;猜对了！要再来一局吗？\u0026#39;; this.subFlag = true; } }, restart(){ this.flag = true; this.count = 3; this.msg = \u0026#39;点击按钮开始游戏！\u0026#39; this.guess = \u0026#39;\u0026#39;; this.subFlag = false; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 指令输出九九乘法表。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;a in b\u0026#34;\u0026gt; \u0026lt;span v-for=\u0026#34;b in a\u0026#34;\u0026gt; {{a}} * {{b}} = {{a*b}} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { a: 9, b: 9, }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-14T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/","title":"第二章 Vue 延伸"},{"content":"Vue 简介 ​\tVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面（基于数据渲染出用户所看到的页面）的渐进式（使用核心包进行局部模块设计改造，或利用构建工具及插件等进行工程化开发）框架（快速开发中大型项目）。\n​\t与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n1 2 3 4 5 6 title: \u0026#39;清仓大促\u0026#39;, products: [ { id: 1, name: \u0026#39;手机\u0026#39;, price: \u0026#39;1999元\u0026#39; }, { id: 2, name: \u0026#39;平板\u0026#39;, price: \u0026#39;2999元\u0026#39; }, { id: 3, name: \u0026#39;电脑\u0026#39;, price: \u0026#39;3999元\u0026#39; } ] 软件工具 VScode 下载：Visual Studio Code - Code Editing. Redefined\nNode.js Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境（后端）node.js 详解_nodejs-CSDN博客\n下载：Node.js 中文网 (nodejs.com.cn) 或 Node.js (nodejs.org)\nVue.js Vue2官网：Vue2.js (v2.cn.vuejs.org)\nVue3官网：Vue3.js - 渐进式 JavaScript 框架 | Vue3.js (cn.vuejs.org)\n引入 实例 ① 准备容器（Vue所管理的范围）\n1 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\t\u0026lt;/div\u0026gt; ② 引包（开发环境版本 ✔ / 生产环境版本）https://v2.cn.vuejs.org\n③ 创建实例\n1 const app = new Vue({}) ④ 添加配置项=\u0026gt;完成渲染\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; // 插值表达式 {{ msg }} \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 编写用于渲染的代码 --\u0026gt; {{ msg }} \u0026lt;h5\u0026gt; {{m1}} \u0026lt;/h5\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 一旦引入VueJS核心包，在全局环境，就有了Vue构造函数 const app = new Vue({ // el建立关联 el: \u0026#39;#app\u0026#39;, // data提供数据 data: { msg: \u0026#39;Hello World\u0026#39;, m1: \u0026#39;this is m1\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 插值表达式 ⭐ 插值表达式是一种 Vue 的模板语法\n① 作用： 利用表达式进行插值，渲染到页面中\n​\t表达式：是可以被求值的代码，JS 引擎会将其计算出一个结果\n② 语法： {{ 表达式 }}\n1 2 3 4 5 6 7 8 9 10 11 12 13 ## 下列差值表达式，书写正确的有哪些？ \u0026lt;h3\u0026gt;{{ title }}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{ nickname.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ age \u0026gt;= 18 ? \u0026#39;成年\u0026#39; : \u0026#39;未成年\u0026#39; }}\u0026lt;/P\u0026gt; \u0026lt;p\u0026gt;{{ obj.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; \u0026lt;p title=\u0026#34;{{ uesrname }}\u0026#34;\u0026gt;HelloWorld\u0026lt;/p\u0026gt; ③ 注意点：\n​\t(1) 使用的数据必须存在\n​\t(2) 支持的是表达式，而非语句，比如：if 或 for 等\n​\t(3) 不能在标签属性中使用 {{ }} 插值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;app\u0026#39;\u0026gt; \u0026lt;p\u0026gt;{{ m1.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ m1 + \u0026#34; and green\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.age - age }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ name + \u0026#39;和\u0026#39; + friend.name + \u0026#39;是朋友\u0026#39; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.gender }}\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;red\u0026#39;, age: \u0026#39;17\u0026#39;, name: \u0026#39;张三\u0026#39;, friend: { name: \u0026#39;李四\u0026#39;, age: \u0026#39;18\u0026#39;, hobby: \u0026#39;篮球\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t练习差值表达式。\nVue 响应式特性 响应式：数据发生变化，视图自动更新\n​\t① 访问数据：\u0026ldquo;实例.属性名\u0026rdquo;\n​\t② 修改数据：\u0026ldquo;实例.属性名\u0026rdquo; = \u0026ldquo;值\u0026rdquo;\n当我们修改数据时，Vue 监听到数据修改，在底层进行 Dom 操自动更新视图。\n开发者工具安装 极简插件官网_Chrome插件下载_Chrome浏览器应用商店 (zzzmh.cn)\n创建 Vue 工程（废案） 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\n​\tnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n​\t查看 npm 代理 → npm config get registry\n​\t更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n自己动手编写一个 App 组件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;你好啊！\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; export default { name:\u0026#39;App\u0026#39; //组件名 } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .app { background-color: #ddd; box-shadow: 0 0 10px; border-radius: 10px; padding: 20px; } \u0026lt;/style\u0026gt; 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 中是通过 createApp 函数创建一个应用实例。 Vue 指令 Vue 会根据不同的 【指令】（带有 v- 前缀的特殊标签属性。），针对标签实现不同的 【功能】。\nv-html 插值表达式不具备解析标签的能力，v-html 相当于动态的设置元素的 innerHTML。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; {{m1}} {{m2}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;\u0026lt;a href=\u0026#34;https://www.baidu.com/\u0026#34;\u0026gt;百度官网\u0026lt;/a\u0026gt;\u0026#39;, m2: \u0026#39;\u0026lt;p\u0026gt;这是一个段落\u0026lt;/p\u0026gt;\u0026#39; } }) \u0026lt;/script\u0026gt; ------------------------------------------------------------------------------------- \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; \u0026lt;div v-html=\u0026#34;m1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div v-html=\u0026#34;m2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; v-show 和 v-if ⭐ 作用：控制元素显示或者隐藏，其中 v-show 仅控制显示隐藏，而 v-if 本质上为条件渲染。\n语法：v-show/v-if = \u0026quot;表达式\u0026quot;\t表达式的值为 true 则显示该元素，为 false 则隐藏。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 500px; height: 300px; line-height: 300px; text-align: center; margin: 30px 0px 30px 200px; border: 5px solid black; font-size: 50px } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;div v-show=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-show\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-if\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const test = new Vue({ el: \u0026#39;#test\u0026#39;, data: { m1: false, m2: true } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\tv-show 通过切换 css 中的 display：none 来控制元素显示或隐藏，v-if 根据判断条件渲染或者销毁元素；由于渲染元素需要消耗资源，因此 v-show 适用于频繁切换显示隐藏效果的场景，如购物车列表，下拉栏等，v-if 适用于广告栏，提示登录或注册等情况。\nv-else 和 v-else-if 作用：辅助 v-if 进行判断渲染。\n语法： v-else\tv-else-if = \u0026quot;表达式\u0026quot;，需要紧挨着 v-if 一起使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;姓名：{{name}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;gender === 1\u0026#34;\u0026gt;性别：♂ 男\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;性别：♀ 女\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;年龄：{{age + \u0026#39;岁\u0026#39;}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;math + chinese + english \u0026gt;= 270\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩优秀\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 240\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较好\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 210\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩一般\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 180\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较差\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;完了\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { name: \u0026#39;张三\u0026#39;, age: 19, gender: 1, math: 95, chinese: 75, english: 86 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on ⭐ 缩写：@\n预期：Function | Inline Statement | Object\n参数：event\n修饰符：\n.stop - 调用 event.stopPropagation()。 .prevent - 调用 event.preventDefault()。 .capture - 添加事件侦听器时使用 capture 模式。 .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。 .native - 监听组件根元素的原生事件。 .once - 只触发一次回调。 .left - (2.2.0) 只当点击鼠标左键时触发。 .right - (2.2.0) 只当点击鼠标右键时触发。 .middle - (2.2.0) 只当点击鼠标中键时触发。 .passive - (2.3.0) 以 { passive: true } 模式添加侦听器 用法：\n绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。\n用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。\n在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event property：v-on:click=\u0026quot;handle('ok', $event)\u0026quot;。\n从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。\n语法：\n① 事件名 = \u0026ldquo;内联语句\u0026rdquo;（添加监听）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @mouseenter=\u0026#34;count--\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{{ count }}\u0026lt;/span\u0026gt; \u0026lt;button v-on:click=\u0026#34;count++\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { count: 100 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：使用 v-on 写一个抽取随机数字的程序。\n​int randomInt = (int)(Math.random() * (35 - 10 + 1)) + 10;\n// 输出结果为：10 到 34 的随机整数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34; @click=\u0026#34;count = Math.floor(Math.random() * (35 - 1 + 1)) + 1;\u0026#34;\u0026gt;抽取一个幸运同学\u0026lt;/button\u0026gt; {{count}} \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t = new Vue({ el: \u0026#39;#test\u0026#39;, data: { count: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t② 事件名 = \u0026ldquo;methods中的函数名\u0026rdquo;（提供处理逻辑）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { color: rgb(50, 209, 50); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;func\u0026#34;\u0026gt;切换显示隐藏\u0026lt;/button\u0026gt; \u0026lt;h1 v-show=\u0026#34;flag\u0026#34;\u0026gt;Vue\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app4 = new Vue({ el: \u0026#39;#app\u0026#39;, data: { flag: true }, methods: { func() { console.log(\u0026#39;执行函数func\u0026#39;) this.flag = !this.flag } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on 调用传参 在 mothods 中创建带参方法，使用 v-on 绑定点击事件，完成自动贩售机案例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { border: 3px solid #000000; border-radius: 10px; padding: 20px; margin: 20px; width: 200px; text-align: center; } h3 { margin: 10px 0 20px 0; } p { margin-left: 70px; } button { margin: 5px 1px 0px 0px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;24小时自动贩售机\u0026lt;/h3\u0026gt; \u0026lt;button @click=\u0026#34;buy(3)\u0026#34;\u0026gt;可口可乐3元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(7)\u0026#34;\u0026gt;雀巢咖啡7元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(6)\u0026#34;\u0026gt;光明牛奶6元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(9)\u0026#34;\u0026gt;珍珠奶茶9元\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;当前余额：{{ money }}元\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { money: 100 }, methods: { buy(price) { this.money -= price } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind ⭐ 缩写：:\n预期：any (with argument) | Object (without argument)\n参数：attrOrProp (optional)\n修饰符：\n.prop - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(差别在哪里？) .camel - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持) .sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。 用法：\n动态的设置 html 的标签属性，如 src，url，title 等。\n在绑定 class 或 style attribute 时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。\n在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。\n没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。\n语法：\nv-bind : 属性名 = \u0026ldquo;表达式\u0026rdquo;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;img v-bind:src=\u0026#34;url\u0026#34; :title=\u0026#34;title\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t1 = new Vue({ el: \u0026#39;#test\u0026#39;, data: { url: \u0026#39;/MyPra/img/4f385747a4a5f33cbd1ee49224725e42a69dfd2852e57-BI49c0.png\u0026#39;, title: \u0026#39;水滴\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习：编写程序，通过按钮来切换图片。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img { height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026gt; 0\u0026#34; @click=\u0026#34;index--\u0026#34;\u0026gt;上一页\u0026lt;/button\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img :src=\u0026#34;list[index]\u0026#34; :title=\u0026#34;desc\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026lt; list.length - 1\u0026#34; @click=\u0026#34;index++\u0026#34;\u0026gt;下一页\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc: \u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 作用：基于数据循环，多次渲染整个元素，如数组、对象、数字等。\n语法：v-for = \u0026quot;(item, index) in 数组\u0026quot;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 索引号为 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [15, 64, 32, 48, 29] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：使用 v-for 渲染书籍列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div li span { line-height: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.name}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{book[index].author}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { book: [ { id: 1, name: \u0026#39;《红楼梦》\u0026#39;, author: \u0026#39;曹雪芹\u0026#39; }, { id: 2, name: \u0026#39;《西游记》\u0026#39;, author: \u0026#39;吴承恩\u0026#39; }, { id: 3, name: \u0026#39;《水浒传》\u0026#39;, author: \u0026#39;施耐庵\u0026#39; }, { id: 4, name: \u0026#39;《三国演义》\u0026#39;, author: \u0026#39;罗贯中\u0026#39; } ] }, methods: { del(id) { // 优先使用id来删除 console.log(\u0026#39;删除id为\u0026#39; + id + \u0026#39;的元素\u0026#39;); this.book = this.book.filter(item =\u0026gt; item.id !== id); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 的默认行为会尝试原地修改元素（就地复用)。\n可以使用 key 属性给列表项添加的唯一标识，便于 Vue 进行列表项的正确排序复用。\n​\t① key 的值只能是字符串或数字类型\n​\t② key 的值必须具有唯一性\n​\t③ 推荐使用 id 作为 key (唯一)，不推荐使用 index 作为 key (会变化，不对应)\nv-for 中的 key\n​\t语法：key = \u0026quot;唯一标识\n​\t在上述案例中，为第一个 li 元素加上 background: pink ，删除 li 元素，添加 key 属性进行比较。\n1 \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; v-model ⭐ 作用：给表单元素使用，双向数据绑定（视图变化数据自动更新），可以快速获取或设置表单元素内容。\n语法：v-model = '变量'\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; 账户：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;input type=\u0026#34;password\u0026#34; v-model=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;login\u0026#34;\u0026gt;登录\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, password: \u0026#39;\u0026#39; }, methods: { login() { console.log(this.username, this.password) }, reset() { this.username = \u0026#39;\u0026#39; this.password = \u0026#39;\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例练习 图片切换 编写程序，当鼠标滑入图片时切换图片，且能够循环切换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img{ height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;list[index%5]\u0026#34; @mouseenter=\u0026#34;index++\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc:\u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 备忘录 案例模板：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;1.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;周三下午开会\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; 1 \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 编写程序，完成数据显示、数据统计、添加、删除、清空等功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;noteMain\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34; v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;{{index+1}}.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;{{item.name}}\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34; v-show=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; {{list.length}} \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34; @click=\u0026#34;clear\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;周三下午开会\u0026#39; }, { id: 2, name: \u0026#39;周末出去吃火锅\u0026#39; }, { id: 3, name: \u0026#39;周五前提交作业\u0026#39; }, { id: 4, name: \u0026#39;放假期间完成三门功课预习\u0026#39; } ], input:\u0026#39;\u0026#39; }, methods:{ del(id){ console.log(id) this.list = this.list.filter(item =\u0026gt; item.id !== id) }, add(){ if(this.input === \u0026#39;\u0026#39;){ alert(\u0026#39;请输入正确的内容\u0026#39;) return } this.list.unshift({ id: +new Date(), name: this.input }) this.input = \u0026#39;\u0026#39; }, clear(){ this.list = [] } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 选择题 在 Vue 中，被用来响应地更新 HTML 属性的指令是（）。\nA. v-on B. v-if C. v-bind D. v-model 在 Vue 中，下列不属于条件渲染指令的是（）。\nA. v-if B. v-else C. v-show D. v-on 在Vue中，下列关于Vue实例对象说法不正确的是（）。\nA. Vue 实例对象是通过 new Vue({ }) 方式创建的。 B. Vue 实例对象只允许有唯一的一个根标签。 C. 通过 methods 参数可以定义事件处理函数。 D. Vue 实例对象中 data 数据不具有响应特性。 Vue中表单元素上数据双向绑定的指令是（）。\nA. v-if B. v-show C. v-model D. v-for 在Vue中，以下表达式正确的是（）。\nA. {{ if(ok) return msg }} B. {{ var str = \u0026ldquo;你好\u0026rdquo; }} C. {{ ok ? \u0026ldquo;Yes\u0026rdquo; : \u0026ldquo;No\u0026rdquo; }} D. {{ msg, num }} 在Vue中，以下关于 Vue 插值下列说法错误的是（）。\nA. {{ 文本 }} 用于插入与绑定文本。 B. {{ 表达式 }} 可以使用 JavaScript 表达式进行简单的运算。 C. {{ }} 中只支持单个表达式。 D. {{ }} 支持语句和流控制。 在Vue中，当遍历大数组或者做大量计算时，使用一下哪个选项效率最高。\nA. methods B. computed C. components D. data Vue常用选项参数中必须的参数是（）。\nA. data B. el C. mothods D. filters 在Vue中，下列说法正确的是（）。\nA. vue 是后端框架。 B. vue 是基于 jQuery 开发的框架。 C. vue 是前端框架。 D. 以上说法都不对。 在Vue中，下列说法错误的是（）。\n1 2 3 \u0026lt;div v-show=\u0026#39;flag\u0026#39;\u0026gt;使用v-show控制\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#39;flag\u0026#39;\u0026gt;使用v-if控制\u0026lt;/div\u0026gt; A. 当 flag 是 true 时，两个 div 都能显示出来。\nB. 当 flag 是 false 时，第一个 div 进行了渲染。\nC. 当 flag 是 false 时，第一个 div 设置了 display: none。\nD. 当 flag 是 false 时，第二个 div 设置了 visible: hidden。\n在 HTML 页面中，下列选项不属于键盘相关事件的是（）。\nA. onkeyup。 B. onkeydown。 C. oncontextmenu。 D. onkeypress。 在 Vue 中，能够实现页面单击事件绑定的代码是（ ）。\nA. v-on:enter。 B. v-on:click。 C. v-on:mouseenter。 D. v-on:doubleclick。 vue 实现随机抽题 见 JavaScript 第二章 WebAPI（二）2.1.1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 800px; height: 400px; border: 2px solid black; text-align: center; font-size: 36px; position: absolute; } .msg { height: 150px; } button { width: 100px; height: 50px; font-size: 30px; position: relative; top: 100px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{msg}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;start\u0026#34; @click=\u0026#34;b1\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;end\u0026#34; @click=\u0026#34;b2\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;结束\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { ques: [ \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, \u0026#39;v-on 的作用是什么？缩写是什么？\u0026#39;, \u0026#39;v-for 多次渲染元素的语法是？\u0026#39;, \u0026#39;:src=\u0026#34;list[index]\u0026#34; 使用的是哪个 vue 指令？\u0026#39;, \u0026#39;vue 中哪个指令可以实现数据双向绑定？\u0026#39;, ], random: 0, s1: 0, msg: \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, }, methods: { b1() { console.log(this.ques[2]); const start = document.querySelector(\u0026#39;.start\u0026#39;); const end = document.querySelector(\u0026#39;.end\u0026#39;); s1 = setInterval(this.r1, 30); }, b2() { clearInterval(s1); this.ques.splice(this.random, 1); }, r1(){ const p = document.querySelector(\u0026#39;p\u0026#39;); this.random = Math.floor(Math.random() * this.ques.length); this.msg = this.ques[this.random]; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/","title":"第一章 Vue 基础"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","permalink":"https://YeYingQingYu.github.io/p/markdown-%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/","title":"Markdown 语法示例"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://YeYingQingYu.github.io/p/katex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/","title":"KaTeX 数学公式"}]