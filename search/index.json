[{"content":"基本概念 SPA 和 MPA 单页应用应用（Single-Page Application，SPA），就是只有一张 Web 页面的应用，是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序。\n单页应用程序在切换功能页面的时候，如点击导航栏的时候，变化的只有主体内容，且页面不会刷新；多页应用程序（Multi-Page Application，MPA） 在点击导航栏时，会跳转到其他页面或刷新整个页面。\n对比项 SPA（Vue Router） MPA（传统 HTML） 页面结构 单个 HTML 文件，动态更新内容 多个独立 HTML 文件，完整刷新 加载方式 首次加载所有核心资源，后续仅更新变化部分 每次请求新页面时重新加载全部资源 路由实现 前端路由（通过 URL hash 或 History API）通过前端路由拦截，URL 变化但不触发服务器请求 后端路由（服务器根据 URL 返回对应页面）URL 变化会向服务器请求新页面 SEO 较差（需特殊处理，如 SSR 或预渲染） 较好（原生支持搜索引擎抓取） 用户体验 流畅无刷新，适合复杂交互场景 可能有明显加载延迟，适合内容型网站 开发难度 较高（需处理状态管理、路由、性能优化） 较低（传统开发模式，技术栈简单） 维护成本 大型项目可能复杂，需合理架构 页面间耦合度低，维护相对简单 适用场景 社交平台、管理后台、在线游戏等 新闻网站、博客、电商产品列表页等 搜索引擎优化，简称 SEO（Search Engine Optimization），是一种通过分析搜索引擎的排名规则，了解搜索引擎如何进行搜索、抓取网页以及如何确定特定关键词的排名的技术。\nSEO 通过采用易于被搜索引擎引用的方法，针对性地优化网站，从而提高其在搜索引擎中的自然排名。这样可以吸引更多用户访问网站，增加网站的流量，提升网站的销售和宣传能力，进而增强网站的品牌效应。\n代码示例 SPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // router/index.js (Vue Router配置) import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import Home from \u0026#39;../views/Home.vue\u0026#39; import About from \u0026#39;../views/About.vue\u0026#39; const routes = [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;Home\u0026#39;, component: Home }, { path: \u0026#39;/about\u0026#39;, name: \u0026#39;About\u0026#39;, component: About } ] const router = createRouter({ history: createWebHistory(), routes }) export default router MPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // server.js (Express路由) const express = require(\u0026#39;express\u0026#39;) const app = express() app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/index.html\u0026#39;) }) app.get(\u0026#39;/about\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/about.html\u0026#39;) }) app.listen(3000, () =\u0026gt; { console.log(\u0026#39;Server running on port 3000\u0026#39;) }) 路由 在 Vue 3 中，路由是实现单页应用（SPA）页面导航的核心机制。它允许用户在不刷新整个页面的情况下，通过 URL 变化切换视图内容。Vue Router 是 Vue.js 官方的路由管理器，专为 Vue 3 设计，提供了声明式导航、路由参数、路由守卫等高级功能。\nVue 中的路由：路径和组件之间的映射关系。\n在 Html 中，实现跳转时，都使用了 a 标签。标签中有一个属性 herf，为其赋一个网络地址或者一个路径后，它就会跳转对应的页面。\nVue.js 的路由和 a 标签实现的功能是一样的，都是实现一个对应的功能，只不过路由的性能更佳，a 标签不管单击多少次，都会发生对应的网络请求，页面会不断地进行刷新；但是使用路由机制，单击之后，不会出现网络请求页面刷新，而会直接跳转到要链接的地址，这是使用路由的好处。\n随着前后端分离开发模式的兴起，前端路由的概念出现：前端通过 AJAX 获取数据后通过一定的方式渲染到页面中，改变 url 不会向服务器发送请求，同时，前端可以监听 url 变化，可以解析 url 并执行相应的操作，而后端只负责提供 api 来返回数据，在 Vue中，通过路由跳转到不同的页面，实际上就是加载不同的组件。\n路由的安装和使用 路由的安装 Vue Router | The official Router for Vue.js\n在已经创建的 vue3 项目中，使用以下指令安装路由。\n1 npm install vue-router@4 路由基本配置 安装成功后，使用路由时需要经过以下几个步骤：\n（1）在 src 下创建路由文件夹 router，并在 index.js 文件中创建路由对象，并配置路由规则。\nindex.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; // 创建路由规则 const routes = [ { path:..., component:... } ] // 创建路由器 const router = createRouter({ history: createWebHashHistory(), routes }) // 导出路由器 export default router （2）安装路由插件。在 main.js 文件中使用 import router from './router' 导入需要使用的路由，导入后使用 app.use(router) 命令加载 router 插件用于安装插件挂载属性。\nmain.js\n1 2 3 4 5 6 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import router from \u0026#39;./router\u0026#39; createApp(App).use(router).mount(\u0026#39;#app\u0026#39;) （3）在 App 组件的 template 中使用路由挂载其他组件。\nApp.vue\n1 2 3 \u0026lt;template\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/template\u0026gt; 路由文件结构 在使用路由时，通常会将页面文件放在 src 下的 views 文件夹中而不是 components 文件夹中，views 文件夹通常用来存放页面级别的组件，也就是每个路由对应的页面。\n比如，首页、关于我们、用户个人资料这些页面应该放在 views 里，因为它们对应不同的路由路径。而 components 文件夹里的组件是更小的、可复用的 UI 部分，比如按钮、导航栏、卡片等，这些可能在多个页面中被使用。\n1. 功能与用途\n文件夹 用途 典型场景 views 存放页面级组件，对应路由路径，负责完整页面的布局和路由逻辑。 如 HomeView.vue（首页）、UserProfile.vue（用户资料页）、LoginView.vue（登录页）。 components 存放可复用 UI 组件，用于构建页面的局部功能，不直接绑定路由。 如 Button.vue（按钮）、Navbar.vue（导航栏）、Card.vue（卡片组件）。 2. 路由关联\nviews 中的组件：\n在路由配置文件（router/index.js）中直接引用。\n示例：\n1 2 3 4 5 6 // router/index.js import HomeView from \u0026#39;@/views/HomeView.vue\u0026#39;; const routes = [ { path: \u0026#39;/\u0026#39;, component: HomeView }, ]; components 中的组件：\n不会在路由配置中直接引用，而是在其他组件（包括 views）中通过 import 引入。\n示例：\n1 2 3 4 5 6 7 \u0026lt;!-- views/HomeView.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Navbar /\u0026gt; \u0026lt;!-- 来自 components/Navbar.vue --\u0026gt; \u0026lt;UserList /\u0026gt; \u0026lt;!-- 来自 components/UserList.vue --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 3. 组件职责\n文件夹 职责 views 处理路由参数、页面级状态（如 Vuex/Pinia）、路由守卫、页面布局组合。 components 实现特定 UI 功能（如表单验证、数据展示），保持无状态或局部状态。 4. 命名规范\nviews： 建议以 XxxView.vue 或 XxxPage.vue 命名（如 UserListView.vue）。 components： 使用功能明确的名称，可添加前缀表明用途（如 BaseButton.vue、AppHeader.vue）。 5. 项目结构示例\n1 2 3 4 5 6 7 8 9 src/ ├── router/ │ └── index.js # 路由配置，引用 views 中的组件 ├── views/ │ ├── HomeView.vue # 首页 │ └── UserProfile.vue # 用户资料页 └── components/ ├── BaseButton.vue # 基础按钮 └── UserCard.vue # 用户卡片组件 6. 边界情况处理\n共享的复杂组件： 如果某个组件在多个页面中使用且包含复杂逻辑，可以放在 components 中（如 ProductList.vue）。 子路由页面： 子路由对应的组件仍属于页面级，应放在 views 的子目录中（如 views/users/UserDetail.vue）。 跳转方式 router-link 在前面的实例中，如果用户需要跳转到不同的页面，则需要修改浏览器地址栏中的地址实现，而在网站中，用户通常需要通过超链接的文本或按钮进行跳转。\n在 Vue 中，用户通常是使用 router-link 渲染一个 a 标签来实现跳转的，例如，使用 \u0026lt;router-link to=/about'\u0026gt;\u0026lt;/router-link\u0026gt; 跳转到关于about 页面，其中，to 是一个属性，指向目标页面，可以使用 v-bind 进行动态设置。\nSign.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; Register.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; 之前的小米商场案例中，使用到了 v-for 循环渲染导航栏，此时如果需要为不同导航栏标题添加跳转，需要将渲染的导航栏数据修改为对象数组形式，存储导航栏标题和跳转路径。\nHeader.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; ... \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; ... \u0026lt;/li\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { ..., rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/sign\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], } }, ... } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; ... \u0026lt;/style\u0026gt; 通过事件调用函数 可以通过 v-on 指令绑定事件，在函数中使用 this.$router.push() 方法，传入指定地址即可实现页面跳转。\nSign.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/register\u0026#39;) } } } \u0026lt;/script\u0026gt; Register.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/sign\u0026#39;) } } } \u0026lt;/script\u0026gt; 商品页面切换 Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; ViewPhone 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Header\u0026gt;\u0026lt;/Header\u0026gt; \u0026lt;Tab\u0026gt;\u0026lt;/Tab\u0026gt; \u0026lt;Wrapper\u0026gt;\u0026lt;/Wrapper\u0026gt; \u0026lt;Banner\u0026gt;\u0026lt;/Banner\u0026gt; \u0026lt;PartPhone\u0026gt;\u0026lt;/PartPhone\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import PartPhone from \u0026#39;./PartPhone.vue\u0026#39;; import Footer from \u0026#39;./Footer.vue\u0026#39;; import Wrapper from \u0026#39;./Wrapper.vue\u0026#39;; import Banner from \u0026#39;./Banner.vue\u0026#39;; export default { components: { Header, Tab, PartPhone, Footer, Wrapper, Banner }, data() { return { } } } \u0026lt;/script\u0026gt; router 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; const routes = [ { path: \u0026#39;/\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/views/Page.vue\u0026#39;) }, { path: \u0026#39;/shop/phone\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPhone.vue\u0026#39;) }, { path: \u0026#39;/shop/pad\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPad.vue\u0026#39;) }, { path: \u0026#39;/shop/elec\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewElec.vue\u0026#39;) }, { path: \u0026#39;/shop/smart\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewSmart.vue\u0026#39;) } ] const router = createRouter({ history: createWebHashHistory(), routes }) export default router 模糊匹配和精确匹配 样式匹配 前面我们已经了解到，用户可以使用 router-link 渲染一个 a 标签来实现跳转，此时，点击标签 vue 会为当前被点击的 a 标签添加两个类，我们可以通过这两个类来为当前元素添加样式。\n1 2 3 4 5 \u0026lt;li data-v-a5978fdc=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a data-v-a5978fdc=\u0026#34;\u0026#34; aria-current=\u0026#34;page\u0026#34; href=\u0026#34;#/shop/pad\u0026#34; class=\u0026#34;router-link-active router-link-exact-active\u0026#34;\u0026gt; 电视 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; 可以发现，两个类分别为 router-link-active 和 router-link-exact-active ，可以直接通过 style 设置相关样式。\n1 2 3 ul li a.router-link-exact-active{ color: rgb(255, 128, 9); } 其中， router-link-active 表示模糊匹配，可以使对应样式在当前跳转目录，如 /shop 下的所有子页面中都生效，如 /shop/phone ，/shop/pad 等，适用于在切换子页面时不改变父元素样式的情况，使用相对较多。\nrouter-link-exact-active 表示精确匹配，即只有在目录完全与当前 a 标签跳转的位置完全相同时才使得相应的样式生效。\n自定义类名 可以在 router 中自定义模糊匹配和精确匹配对应的类名。\n1 2 3 4 5 6 const router = createRouter({ history: createWebHashHistory(), routes, linkActiveClass: \u0026#39;fuzzy-active\u0026#39;, linkExactActiveClass: \u0026#39;exact-active\u0026#39; }) ","date":"2025-03-07T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/","title":"第五章 路由"},{"content":"Vue 生命周期 生命周期的四个阶段 Vue 生命周期：一个 Vue 实例从创建到销毁的整个过程。\n组件每个阶段它的内部构造是不一样的，所以一般特定的钩子做特定的事，比如 Ajax 获取数据就可以在 mounted 阶段。\n从 Vue 实例被创建开始到该实例最终被销毁的整个过程叫做 VUE 的生命周期，在这个生命周期内发生了下面的事情：从 vue 实例被创建开始，首先 vue 实例被创建，之后开始数据的初始化，编译模板，挂载 dom，渲染 dom，更新对象属性，渲染 dom，解绑销毁。\n创建：const app = new Vue({ ... })\n销毁：关闭页面\n生命周期四个阶段：①创建\t②挂载\t③更新\t④销毁\n生命周期钩子函数 Vue 生命周期过程中，会自动运行一些函数，被称为生命周期钩子，让开发者可以在特定阶段运行自己的代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: 111 } }, beforeCreate() { console.log(\u0026#39;beforeCreate 响应式数据创建前\u0026#39;, this.m1); }, created() { console.log(\u0026#39;created 响应式数据创建后\u0026#39;, this.m1); }, beforeMount() { console.log(\u0026#39;beforeMount 模板渲染前\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, mounted() { console.log(\u0026#39;mounted 模板渲染后\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, beforeUpdate() { console.log(\u0026#39;beforeUpdate 数据修改视图未更新\u0026#39;); }, updated() { console.log(\u0026#39;updated 数据修改视图已更新\u0026#39;); }, beforeDestroy() { console.log(\u0026#39;beforeDestroy 卸载前\u0026#39;); }, destroyed() { console.log(\u0026#39;destroyed 卸载后\u0026#39;); }, methods: { change() { this.m1 = 222; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 自定义指令 基础语法 自定义指令 — Vue.js (vuejs.org)\n自定义指令：自己定义的指令，可以封装一些 dom 操作，扩展额外功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 局部注册 directives: { 自定义指令名: { 钩子函数: function (参数) { 执行内容 } }, 自定义指令名: function (参数) { 执行内容 } } // 全局注册 Vue.directive(\u0026#39;自定义指令名\u0026#39;, { 钩子函数: function (参数) { 执行内容 } }) // 自定义函数的使用 \u0026lt;标签名 v-自定义指令名 /\u0026gt; 自定义指令钩子函数 钩子函数 描述 bind 只调用一次，在指令第一次绑定到元素时触发。可以在这里进行初始设置、绑定事件监听器等操作。 inserted 在被绑定元素插入父节点时触发。如果指令绑定的元素是动态生成的，在插入后才会触发。 update 在指令所在模板更新时触发，不论绑定值是否发生变化。可以通过比较更新前后的绑定值，以便在需要时执行相应的操作。 componentUpdated 在被绑定元素所在模板完成一次更新周期时触发。如果需要在每次更新时执行操作，可以选择使用这个钩子函数。 unbind 只调用一次，在指令与元素解绑时触发。可以在这里进行清理工作、移除事件监听器等操作。 常用的自定义指令生命周期函数的参数：\n参数 说明 el 指令所绑定的元素，可以直接用于操作 dom 元素 binding 一个对象，包含多个属性，用于接收属性的参数值 vnode 代表绑定元素底层的虚拟节点 prevNode 之前页面渲染中指令所绑定元素的虚拟节点 在 Vue3 中，自定义指令的钩子函数名称更改为：\n- beforeMount：代替 bind\n- mounted：代替 inserted\n- beforeUpdate：新\n- updated：代替 componentUpdated\n- beforeUnmount：新\n- unmounted：代替 unbind\n钩子函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Vue.directive(\u0026#39;my-directive\u0026#39;, { bind: function(el, binding, vnode, oldVnode) { // 指令绑定时执行的操作 }, inserted: function(el, binding) { // 元素插入父节点时执行的操作 }, update: function(el, binding) { // 指令所在模板更新时执行的操作 }, componentUpdated: function(el, binding) { // 模板完成一次更新周期时执行的操作 }, unbind: function(el, binding) { // 指令与元素解绑时执行的操作 } }) 编写代码，创建自定义指令，通过自定义指令能够让文字颜色变为红色。\n使用 directives: { 方法名: { 钩子函数: function(形参){ 执行的代码}}}\n在标签中使用 v-方法名 调用 Vue 指令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-red\u0026gt;使用自定义指令让这段文字变为红色\u0026lt;/div\u0026gt; \u0026lt;div v-cyan\u0026gt;使用自定义指令让这段文字变为青色\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, directives: { red: function (el){ el.style.color = \u0026#39;red\u0026#39; }, cyan: function (el){ el.style.color = \u0026#39;cyan\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在 vue3 中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;template\u0026gt; \u0026lt;div v-test v-red v-green v-blue\u0026gt;{{ msg }}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;改变div中的文字\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ return{ msg: \u0026#39;测试\u0026#39; } }, directives: { test: { beforeMount: function (el, binding) { console.log(111); console.log(el); console.log(binding); } }, red: { mounted: function (el) { el.style.color = \u0026#39;red\u0026#39; } }, green: function (el) { el.style.color = \u0026#39;green\u0026#39; }, blue: { updated: function (el) { el.style.color = \u0026#39;blue\u0026#39; } }, }, methods: { change() { this.msg = \u0026#39;改变后的文字\u0026#39; } } }; \u0026lt;/script\u0026gt; 插槽 默认插槽 作用：让组件内部的一些结构支持自定义。\n封装组件后，希望组件中的部分内容能够动态修改，可以使用插槽。\n组件内需要定制的结构部分，改用 \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; 占位。\n使用组件时，\u0026lt;MyDialog\u0026gt;\u0026lt;/MyDialog\u0026gt; 标签内部，传入结构替换 slot。\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- 1. 在需要修改的位置使用 slot 标签占位 --\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 后背内容（默认值） 插槽后备内容：封装组件时，可以为预留的 \u0026lt;slot\u0026gt; 插槽提供后备内容（默认内容)。\n语法：在 \u0026lt;slot\u0026gt; 标签内，放置内容，作为默认显示内容，如果组件标签中有内容，则默认内容不显示。\n1 2 3 \u0026lt;slot\u0026gt;\u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;Video\u0026gt;\u0026lt;/Video\u0026gt; 具名插槽 默认插槽只能定制一个位置的内容，如果在组件中，有多个地方需要改变内容，此时需要使用具名插槽，即具有名字的插槽，通过 name 属性为插槽命名，再进行区分。\n使用方法：\n多个 slot 使用 name 属性区分名字\ntemplate 配合 v-slot:name 来分发对应标签\n插槽添加 name 属性后，就是具名插槽，只支持定向分发。此外，v-slot:name 可以简写为 #name\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ border: 2px solid black; width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template #img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 作用域插槽 作用域插槽是插槽的一个传参语法。\n作用域插槽：定义 slot 插槽的同时是可以传值的。给插槽上可以绑定数据，将来使用组件时可以调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- 基本使用步骤: --\u0026gt; \u0026lt;!-- 1. 给 slot 标签，以添加属性的方式传值 --\u0026gt; \u0026lt;slot :id=\u0026#34;item.id\u0026#34; :msg=\u0026#34;测试文本\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- 2. 所有添加的属性，都会被收集到一个对象中 --\u0026gt; { id: 3， msg:\u0026#39;测试文本\u0026#39;} \u0026lt;!-- 3. 在 template 中，通过 `#插槽名= \u0026#34;obj\u0026#34;` 接收，默认插槽名为 default --\u0026gt; \u0026lt;Table :list=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;template #default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; 案例：表格业务动态变化\n插槽渲染的不只有数据，也有可能需要动态渲染方法的时候，此时方法无法直接调用父组件中的数据，需要使用作用域插槽进行数据传递。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;小米\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;华为\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;8866\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;苹果\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;9998\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;vivo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6688\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;oppo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5888\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;meizu\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;4999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; 需求：\n① 能够根据不同数组渲染列表\n② 操作分为两种：删除和修改（slot）\n③ 点击删除/修改时对数据进行操作，此时在父组件中无法使用 item.id 传值，需要使用作用域插槽\n④ 为 slot 添加属性，在父组件中使用 template 标签和 #default=\u0026quot;obj\u0026quot; 属性接收传值\n将上方代码改为组件+插槽的形式：\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 此时尝试在 App.vue 当中为 button 添加删除逻辑，如下：\n1 2 3 4 5 6 7 8 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; 在 Table.vue 当中添加删除方法，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;script\u0026gt; export default { props: { dataList: Array }, methods: { del(id){ for (let i = 0; i \u0026lt; this.dataList.length; i++) { if(id == this.dataList[i].id){ this.dataList.splice[i, 1] } } } } } \u0026lt;/script\u0026gt; 显示的报错信息为：\n需要在子组件的 slot 标签中使用 v-bind 绑定属性传值，vue 会将 slot 标签中传递的值保存在一个数组当中，在父组件引用的子组件标签中使用 template+v-slot:插槽名=\u0026quot;自定义对象\u0026quot; 即可将子组件中所有传递的数据存储在该对象中。\n此时在父组件中即可通过 自定义对象.传递数据 的方法获取到子组件的数据，从而调用方法。\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot :item=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array }, } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;template v-slot:default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list2.length; i++) { if (id == this.list2[i].id) { this.list2.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 动态组件 定义动态组件 利用动态组件可以动态切换页面中显示的组件。使用 \u0026lt;component\u0026gt; 标签可以定义动态组件，\u0026lt;component\u0026gt; 标签必须配合 is 属性一起使用，is 属性的属性值表示要渲染的组件。\n在 vue3 中，使用 setup 语法糖配合 shallowRef() 函数可以将组件保存为响应式数据。shallowRef() 函数只处理对象最外层属性的响应，它比 ref() 函数更适合将组件保存为响应式数据。\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Main\u0026#34;\u0026gt;显示Main组件\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Header\u0026#34;\u0026gt;显示Header组件\u0026lt;/button\u0026gt; \u0026lt;component :is=\u0026#34;showComponent\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import Main from \u0026#39;./components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;./components/xiaomi/Header.vue\u0026#39;; import { shallowRef } from \u0026#39;vue\u0026#39;; const showComponent = shallowRef(Main); \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; button { width: 100px; height: 50px; margin: 30px; position: absolute; top: 20px; } button:first-child { top: 100px; } \u0026lt;/style\u0026gt; 根据元素类型动态渲染组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; style=\u0026#34;text-align: center;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Vue 中动态组件的使用\u0026lt;/h1\u0026gt; \u0026lt;div v-for=\u0026#34;item in modules\u0026#34; :id=\u0026#34;item.id\u0026#34; style=\u0026#34;margin: 10px 0;\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;item.type\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ item.type }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Image from \u0026#39;./components/activeComponents/Image.vue\u0026#39;; import Text from \u0026#39;./components/activeComponents/Text.vue\u0026#39;; import Video from \u0026#39;./components/activeComponents/Video.vue\u0026#39;; export default { data() { return { modules: [ { id: 1, type: \u0026#39;text\u0026#39; }, { id: 2, type: \u0026#39;video\u0026#39; }, { id: 3, type: \u0026#39;image\u0026#39; }, { id: 4, type: \u0026#39;image\u0026#39; }, { id: 5, type: \u0026#39;text\u0026#39; } ], // news: \u0026#39;Image\u0026#39; } }, components: { Image, Text, Video }, // computed:{ // getType(){ // return this.modules.map(item =\u0026gt; { // return { // ...item, // type: \u0026#39;news-\u0026#39; + item.type, // } // }) // } // } } \u0026lt;/script\u0026gt; 实战案例 基础样式 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;1999元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 0; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 使用具名插槽 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi Turbo 3\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;性能旋风，席卷而来\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi Civi 4 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi Civi 4 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Ultra.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Ultra\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;6499\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70 Pro.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第三代骁龙8 年度旗舰平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3299\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第二代骁龙8 旗舰芯\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2399\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70E.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70E\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;新一代旗舰焊门员\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1799\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;4599\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; v-for 循环 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { data(){ return{ dataList: [ {id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999}, {id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999}, {id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499}, {id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299}, {id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399}, {id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799}, {id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599}, {id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999}, ] } }, components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 插槽嵌套 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], } }, components: { Part, Goods, } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 按需修改 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Extra\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;extra\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;etc\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;etc-img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;more-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/more.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more-text\u0026#34;\u0026gt; \u0026lt;div\u0026gt;浏览更多\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;slot name=\u0026#34;type\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .extra { width: 240px; height: 300px; box-sizing: border-box; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; float: left; margin: 0 7px 14px 7px; user-select: none; } .etc, .more { width: 240px; height: 143px; background-color: white; margin: 0 0 14px 0; transition: 0.5s; cursor: pointer; } .etc:hover, .more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .etc img { width: 80px; height: 80px; float: right; margin: 31.5px 30px 0 0; } .extra h3, .extra p { font-weight: 100; font-size: 14px; margin: 0; padding-left: 30px; } .extra .price { color: rgb(255, 103, 0); } .extra h3 { padding: 45px 0 15px 30px; } .more .more-icon img{ width: 52px; height: 52px; float: right; margin: 45.5px 45px 0 0; } .more .more-text div:nth-child(1){ font-size: 18px; padding: 49px 0 5px 30px; } .more .more-text div:nth-child(2){ font-size: 12px; padding: 0 0 0 30px; color: rgb(117, 117, 117); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiwatch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList2\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Extra v-show=\u0026#34;dataList2.length \u0026lt; 8\u0026#34;\u0026gt; \u0026lt;template v-slot:etc-img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;小米手环8\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;209\u0026lt;/template\u0026gt; \u0026lt;template v-slot:type\u0026gt;穿戴\u0026lt;/template\u0026gt; \u0026lt;/Extra\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; import Extra from \u0026#39;./components/xiaomi/Extra.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], dataList2: [ { id: 1, url: \u0026#39;../../../img/小米手环8 Pro 原神定制版.jpg\u0026#39;, title: \u0026#39;小米手环8 Pro 原神定制版\u0026#39;, desc: \u0026#39;达达利亚主题定制手环 | 主题定制充电底座 | 专属定制礼盒\u0026#39;, price: 549 }, { id: 2, url: \u0026#39;../../../img/Redmi Watch 4.jpg\u0026#39;, title: \u0026#39;Redmi Watch 4\u0026#39;, desc: \u0026#39;1.97英寸AMOLED大屏丨潮流金属表框丨20天超长续航\u0026#39;, price: 499 }, { id: 3, url: \u0026#39;../../../img/Xiaomi Watch S3.jpg\u0026#39;, title: \u0026#39;Xiaomi Watch S3\u0026#39;, desc: \u0026#39;百变表圈 | 小米澎湃OS | 12通道心率检测模组\u0026#39;, price: 799 }, { id: 4, url: \u0026#39;../../../img/小米腕部心电血压记录仪.png\u0026#39;, title: \u0026#39;小米腕部心电血压记录仪\u0026#39;, desc: \u0026#39;血压测量｜心电采集｜跌倒检测 紧急呼救｜蓝牙通话\u0026#39;, price: 1999 }, { id: 5, url: \u0026#39;../../../img/小米手环 8 Pro.jpg\u0026#39;, title: \u0026#39;小米手环 8 Pro\u0026#39;, desc: \u0026#39;1.74″AMOLED炫彩大屏 | 手表级健康监测 | 独立GNSS定位\u0026#39;, price: 379 }, { id: 6, url: \u0026#39;../../../img/Redmi Watch 3 青春版.png\u0026#39;, title: \u0026#39;Redmi Watch 3 青春版\u0026#39;, desc: \u0026#39;1.83\u0026#34;超大屏幕｜腕上蓝牙通话｜全天候血氧监测\u0026#39;, price: 329 }, { id: 7, url: \u0026#39;../../../img/小米手环8 NFC版.jpg\u0026#39;, title: \u0026#39;小米手环8 NFC版\u0026#39;, desc: \u0026#39;多样快拆时尚腕带 | 跑步豆\u0026amp;体感互动多模式 | 多功能NFC\u0026#39;, price: 249 }, // { id: 8, url: \u0026#39;../../../img/米兔儿童学习手表5 Pro.jpg\u0026#39;, title: \u0026#39;img/米兔儿童学习手表5 Pro\u0026#39;, desc: \u0026#39;12重安全定位 | 3D楼层定位 | 高清双摄 | AI拍照识物 | NFC公交卡 | 实时心率监测 | 20米防水 | 儿童微信 | QQ | 支付宝 | 小爱同学\u0026#39;, price: 999 }, ] } }, components: { Part, Goods, Extra } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 练习 可以通过（）标签为组件添加插槽？\n如果要把内容填充到指定名称的插槽中，可以通过一个包含（）指令的 \u0026lt;template\u0026gt; 标签来实现。\n如果一个组件没有预留任何插槽，则组件的使用者提供的任何插槽内容同样会起作用。（）\n添加 name 属性的 \u0026lt;slot\u0026gt; 标签用来定义具名插槽。（）\ndom 元素在哪个生命周期后才能后被调用？\n​\tA. onActived()\tB. mounted()\tC. beforeCreate()\tD. beforeMount()\n下列说法，关于自定义指令说法错误的是。（） ​\tA. 插槽是组件封装期间为组件的使用者预留的占位符。\n​\tB. 在定义插槽时，直接写一个 \u0026lt;slot\u0026gt; 标签，它属于默认插槽。\n​\tC. 如果组件的使用者为插槽提供内容，则默认内容生效。\n​\tD. 当需要使用多个插槽时，则需要为每个 \u0026lt;slot\u0026gt; 插槽指定具体的 name 属性。\n下列选项中，关于自定义指令说法错误的是。（） ​\tA. 全局自定义指令可以在全局进行使用。\n​\tB. 私有自定义指令只能够在声明该指令的组件中使用。\n​\tC. 在 Vue 中，可以通过 app.directive() 函数声明全局自定义指令。\n​\tD. 在 Vue 中，不能为自定义指令绑定参数。\n下列选项中，关于自定义指令常用声明周期函数及传入参数说法错误的是。（） ​\tA. mounted() 函数在绑定元素的父组件及自身的所有子节点都挂在完成后调用。\n​\tB. value 为参数 binding 中的属性，表示传递给指令的值。\n​\tC. beforeUpdate() 函数在绑定的父组件卸载前调用。\n​\tD. el 参数表示当前指令所绑定到的元素。\n","date":"2025-02-28T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"http://localhost:1313/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/","title":"第四章 组件基础（下）"},{"content":"Vue API 风格 组合式 API 和选项式 API 各有优缺点，组合式 API 的主要优势在于更强的逻辑复用和组合能力、更好的类型推导和类型安全、更清晰的逻辑隔离、灵活的逻辑组合和嵌套，以及更方便的测试。选项式 API 在 Vue 2 中广泛使用，仍然是一个强大和有效的选择，但对于复杂逻辑的管理和复用，组合式 API 提供了更现代化的解决方案。\n选项式 API（Vue2） 使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，如 data、methods 和 mounted。选项所定义的属性都会暴露在函数内部的 this 上，它会指向当前的组件实例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 2 Options API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 2 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { count: 0 }; }, methods: { increment() { this.count++; } } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 组合式 API（Vue3） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 3 Composition API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 3 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/vue@3/dist/vue.global.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 从 Vue 全局对象中解构出 createApp 和 ref 函数 const { createApp, ref } = Vue; // 使用 createApp 函数创建一个 Vue 应用实例 const app = createApp({ // setup 函数是 Vue 3 组合式 API 的入口点 setup() { // 使用 ref 函数创建一个响应式变量 count，初始值为 0 const count = ref(0); // 定义一个箭头函数 increment，用于增加 count 的值 const increment = () =\u0026gt; { // 通过 count.value 访问和修改 ref 包装的值 count.value++; }; // setup 函数返回一个对象，将响应式变量和方法暴露给模板使用 return { count, increment }; } }); // 调用 app.mount 方法将 Vue 应用挂载到 id 为 app 的 DOM 元素上 app.mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 两种API风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。\n当你不需要使用构建工具，或者打算主要在低复杂度的场景中使用 Vue，例如渐进增强的应用场景，推荐采用选项式 API。 当你打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件。 创建 Vue 工程 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\n​\tnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n​\t查看 npm 代理 → npm config get registry\n​\t更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \u0026#34;name\u0026#34;: \u0026#34;vue-study\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;vue\u0026#34;: \u0026#34;^3.4.21\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vitejs/plugin-vue\u0026#34;: \u0026#34;^5.0.4\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^5.1.6\u0026#34; } } 观察 main.ts 文件：\n1 2 3 4 5 6 7 8 9 10 11 import \u0026#39;./assets/main.css\u0026#39; // 这行代码从 vue 库中导入了 createApp 函数。在 Vue 3 里，createApp 是创建 Vue 应用实例的核心函数，借助它可以初始化一个新的 Vue 应用。 import { createApp } from \u0026#39;vue\u0026#39; // 此代码导入了根组件 App.vue。App.vue 一般是 Vue 项目的根组件，它包含了整个应用的基本结构与布局。 import App from \u0026#39;./App.vue\u0026#39; // createApp(App)：调用 createApp 函数，把 App 组件当作参数传入，从而创建一个新的 Vue 应用实例。 // .mount(\u0026#39;#app\u0026#39;)：调用 mount 方法，将创建好的 Vue 应用实例挂载到 HTML 文件里 id 为 app 的 DOM 元素上。通常，这个 id 为 app 的元素是在 index.html 文件中定义的。 createApp(App).mount(\u0026#39;#app\u0026#39;) 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 **中是通过 **createApp 函数创建一个应用实例。 项目内语法 export default 在 Vue 3 里，export default 是 ES6 模块语法的一部分，其用途是从一个模块里导出一个默认的值。在 Vue 组件里，它通常用来导出组件的配置对象。\n在 Vue 3 的单文件组件（.vue 文件）里，export default 用于导出组件的配置对象，此对象包含组件的选项，像 data、methods、computed 等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ message }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;changeMessage\u0026#34;\u0026gt;修改消息\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;欢迎使用 Vue 3\u0026#39; }; }, methods: { changeMessage() { this.message = \u0026#39;消息已更新\u0026#39;; } } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; h1 { color: blue; } \u0026lt;/style\u0026gt; 插值表达式 删除 src 文件夹下 components 文件夹中的所有文件，清空 App.vue 中所有内容，删除 main.js 文件中语句 import './assets/main.css'。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: \u0026#39;插值表达式\u0026#39;, count: 0 } } } \u0026lt;/script\u0026gt; 属性绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;c1\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img2\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;{ active1: true, active2: false }\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img6\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;[\u0026#39;active1\u0026#39;, \u0026#39;active2\u0026#39;]\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, c1: \u0026#34;active1\u0026#34;, c2: \u0026#34;active2\u0026#34; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; img{ margin: 20px; box-sizing: border-box; } .active1 { width: 300px; } .active2 { width: 500px; border: 20px solid black; } \u0026lt;/style\u0026gt; 条件渲染和列表渲染 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 的索引号是 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, flag: true, list: [ \u0026#39;111\u0026#39;, \u0026#39;222\u0026#39;, \u0026#39;333\u0026#39;, \u0026#39;444\u0026#39; ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 事件和计算属性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;add($event)\u0026#34;\u0026gt;{{ count }}\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;{{ getSum }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { count: 0, list: [1, 2, 3, 4, 5] } }, methods: { add(e) { this.count++; console.log(e); } }, computed: { getSum() { let sum = 0; for (let i = 0; i \u0026lt; this.list.length; i++) { sum += this.list[i]; } return sum; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 侦听器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;旧消息\u0026#39; } }, methods: { reset() { this.message = \u0026#39;新消息\u0026#39; } }, watch: { message(newValue, oldValue) { console.log(newValue, oldValue) }, // message(m1, m2) { // console.log(m1, m2) // } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 拓展：如果希望点击按钮能够在 “旧消息” 和 “新消息” 之间来回切换，怎样实现？\n阶段案例 参照以下图片，完成 \u0026ldquo;学习计划表\u0026rdquo; 案例，页面中会展示学生的学习计划，包括学习科目、学习内容、学习地点、完成状态等。\n使用 vue + html + css 完成案例，实现添加、删除、完成状态变化等功能。\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, methods: { add() { this.list.unshift({ id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) console.log(this.list); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } \u0026lt;/style\u0026gt; 获取 dom 元素 虽然 Vue 的声明性渲染模型为我们抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref 属性。\n1 2 3 \u0026lt;div id=\u0026#34;d1\u0026#34; ref=\u0026#34;d2\u0026#34;\u0026gt;这是一个div标签\u0026lt;/div\u0026gt; console.log(this.$refs.d2); 挂载结束后引用都会被暴露在 this.$refs 之上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;template\u0026gt; \u0026lt;p ref=\u0026#34;p1\u0026#34;\u0026gt;p标签\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;getRef\u0026#34;\u0026gt;获取dom元素\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;reSet\u0026#34;\u0026gt;更改元素内容\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; ref=\u0026#34;i1\u0026#34; @focus=\u0026#34;setValue\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { } }, methods: { getRef() { console.log(this.$refs) console.log(this.$refs.p1) }, reSet() { this.$refs.p1.innerHTML = \u0026#39;2\u0026#39;; }, setValue() { this.$refs.i1.value = \u0026#39;1111\u0026#39;; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p{ font-size: 30px; } \u0026lt;/style\u0026gt; 组件基础 组件组成 组件最大的优势就是可复用性。当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件（简称 SFC）。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;承载标签\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 其中，scoped 表示让该样式只在当前组件中生效。\n组件引用（局部注册） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;MyComponent\u0026gt;\u0026lt;/MyComponent\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import MyComponent from \u0026#34;./components/MyComponent.vue\u0026#34;; export default { components:{ MyComponent, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 练习：创建两个组件，其中，第一个组件中有一个 h1 标签和一个图片标签，文字颜色为黑色，当点击图片时，图片和标题都能够循环切换；第二个组件中有一个 p 标签，文字颜色为灰色，在 App 文件中引用这两个组件，具体实现效果如下图所示。\n中国34个省级2022年高清行政地图和名称来源解读（值得收藏） - 知乎\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;C1 /\u0026gt; \u0026lt;C2 /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import C1 from \u0026#34;./components/C1.vue\u0026#34;; import C2 from \u0026#34;./components/C2.vue\u0026#34;; export default { components: { C1, C2, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; C1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; C2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; 组件嵌套关系 组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构，这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。\n组件注册 当在 Vue 项目中定义了一个新的组件后，想要在其他组件中引用这个新的组件，需要对新的组件进行注册。Vue 提供了两种注册组件的方式，分别是全局注册和局部注册。\n在实际开发中，如果某些组件只在特定情况下被用到，推荐进行局部注册，即在某个组件中注册。被局部注册的组件只能在当前注册范围内使用。例如：在组件 A 中注册了组件 B，则组件 B 只能在组件 A 中使用，不能在组件 C 中使用。\n在实际开发中，如果某个组件使用频率很高，许多组件都会引用这个新的组件，则推荐将该组件全局注册。被全局注册的组件可以在当前 Vue 项目的任何一个组件内引用。\n在 Vue 项目 src\\main.js 文件中，通过 Vue 应用实例的 component() 方法可以全局注册组件，语法如下：\n1 component(\u0026#39;组件名称\u0026#39;, 需要被注册的组件) 在 src\\main.js 中注册一个全局组件 MyComponent，示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import MyComponent from \u0026#39;./components/MyComponent.vue\u0026#39; // createApp(App).mount(\u0026#39;#app\u0026#39;) const app = createApp(App) // 一定要在 const app = createApp(App) 和 app.mount(\u0026#39;#app\u0026#39;) 两行代码中间注册组件 app.component(\u0026#39;MyComponent\u0026#39;, MyComponent) app.mount(\u0026#39;#app\u0026#39;) 全局注册虽然很方便，但有以下几个问题:\n全局注册，但并没有被使用的组件无法在生产打包时被自动移除（也叫 \u0026ldquo;tree-shaking\u0026quot;）。如果你全局注册了—个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。\n全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。\nprops 传递数据 组件与组件之间不是完全独立的，而是有交集的，有时候会遇到同一个模块中的多个子组件请求同一份数据的情况，如果在子组件中逐个进行网络请求，会造成代码冗余。Vue 提供了 props 语法，可以让父组件为子组件提供要展示的数据，即在父组件中请求该模块下所有子组件中的网络请求，然后通过 props 将数据传递给子组件。\n声明 props 在不使用 setup 语法糖的情况下，可以使用 props 选项声明 props，形式可以使对象或者字符串数组，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; export default { props: { 自定义属性 A: 类型, 自定义属性 B: 类型, str: String, num: Number, bol: Boolean, arr: Array, obj: Object, ... } } \u0026lt;/script\u0026gt; 如果不需要限制 props 的类型，可以直接声明 props，语法格式如下：\n1 2 3 export default { props: [\u0026#39;自定义属性 A\u0026#39;, \u0026#39;自定义属性 B\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;...] } 当使用 setup 语法糖时，可以使用 defineProps() 函数声明 props，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;script setup\u0026gt; const props = defineProps( {\u0026#39;自定义属性 A\u0026#39;: 类型}, {\u0026#39;自定义属性 B\u0026#39;: 类型}, {\u0026#39;str\u0026#39;: String}, {\u0026#39;num\u0026#39;: Number}, {\u0026#39;bol\u0026#39;: Boolean}, {\u0026#39;arr\u0026#39;: Array}, {\u0026#39;obj\u0026#39;: Object}, ... ) \u0026lt;/script\u0026gt; 静态绑定 props 1 \u0026lt;子组件标签名 自定义属性 A = \u0026#34;数据\u0026#34; 自定属性 B = \u0026#34;数据\u0026#34; /\u0026gt; Parent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;!-- \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; :num=\u0026#34;111\u0026#34; :arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; :obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; --\u0026gt; \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; num=\u0026#34;111\u0026#34; bol=\u0026#34;true\u0026#34; arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { // props: { // str: String, // num: Number, // bol: Boolean, // arr: Array, // obj: Object // } props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 动态绑定 props 使用 v-bind 动态绑定 props，任意类型的值都可以传给子组件的 props。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :str=\u0026#34;m0\u0026#34; :num=\u0026#34;m1\u0026#34; :bol=\u0026#34;m2\u0026#34; :arr=\u0026#34;m3\u0026#34; :obj=\u0026#34;m4\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m0: \u0026#39;你好\u0026#39;, m1: 111, m2: true, m3: [\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;], m4: {name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}, } }, components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 子传父 $emit 在子元素中添加按钮，点击按钮时触发事件，使用 this.$emit('方法名'，'值') 向父组件请求修改数据。 1 2 3 4 5 6 7 8 \u0026lt;!-- 在子组件中需要写在方法里：--\u0026gt; methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, 300) } } \u0026lt;!-- 在父组件中需要接收相应的事件：--\u0026gt; \u0026lt;Child @aaa=\u0026#34;change(a)\u0026#34;\u0026gt;\u0026lt;/Child\u0026gt; 父组件需要监听子组件传递过来的方法名，监听到后执行父组件内的方法。\n在父组件的 methods 中提供处理函数，在形参中可以获取到子组件传递过来的值，用于修改数据。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :msg=\u0026#34;m1\u0026#34; @changeData=\u0026#34;change\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m1: \u0026#39;尝试修改这条信息\u0026#39;, } }, components: { Child }, methods: { change(newData){ this.m1 = newData; } } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ msg }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;modify\u0026#34;\u0026gt;修改数据\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;msg\u0026#39;], methods: { modify(){ this.$emit(\u0026#39;changeData\u0026#39;, \u0026#39;修改后的信息\u0026#39;) } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;地图切换\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // --------------c1 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; // --------------c2 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; // --------------app \u0026lt;template\u0026gt; \u0026lt;c1 :count=\u0026#34;num\u0026#34; @aaa=\u0026#34;me\u0026#34;\u0026gt;\u0026lt;/c1\u0026gt; \u0026lt;c2 :count=\u0026#34;num\u0026#34;\u0026gt;\u0026lt;/c2\u0026gt; \u0026lt;!-- \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;11\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import c1 from \u0026#39;./components/c1.vue\u0026#39; import c2 from \u0026#39;./components/c2.vue\u0026#39; export default { data() { return { num: 0 } }, components: { c1, c2 }, methods:{ // change(){ // this.num++; // }, me(a){ this.num = a; } } } \u0026lt;/script\u0026gt; 学习计划表传递 Top\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, props: { spaceList: Array }, methods: { add() { this.$emit(\u0026#39;aaa\u0026#39;, { id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) } } } \u0026lt;/script\u0026gt; Bottom\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { list: Array }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 \u0026lt;template\u0026gt; \u0026lt;top :spaceList=\u0026#34;spaceList\u0026#34; @aaa=\u0026#34;add\u0026#34;\u0026gt;\u0026lt;/top\u0026gt; \u0026lt;bottom :list=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/bottom\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import top from \u0026#39;./components/studyCard/top.vue\u0026#39; import bottom from \u0026#39;./components/studyCard/bottom.vue\u0026#39; export default { components: { top, bottom }, data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], } }, methods:{ add(e){ this.list.unshift(e) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 50px 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } textarea{ overflow-y: hidden; } \u0026lt;/style\u0026gt; 跨级组件之间的数据传递 父子关系组件之间的数据传递主要通过 props、$emit 实现，非父子关系组件之间，通过 provide、inject 或者 eventbus 传递数据，在复杂的 vue 项目中，使用 vuex 实现组件之间数据传递。\nprovide() \u0026amp; inject() 父组件provide提供数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 export default { provide() { return { \u0026lt;!-- 可以包含普通数据类型或者复杂数据类型 --\u0026gt; c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, \u0026lt;!-- c1为字符串类型，c2为对象类型 --\u0026gt; c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } } } 子 / 孙组件 inject 取值使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { \u0026lt;!-- 在后代组件中使用inject数组的形式取值 --\u0026gt; inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; APP\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;changeAll\u0026#34;\u0026gt;改变数据\u0026lt;/button\u0026gt; \u0026lt;ProvideChild :n1=\u0026#34;m1\u0026#34; :n2=\u0026#34;m2\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideChild from \u0026#34;./components/ProvideChild.vue\u0026#34;; export default { provide() { return { c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } }, methods: { changeAll() { this.c1 = \u0026#39;changedc1\u0026#39;; this.c2 = { name: \u0026#39;xiaozhang\u0026#39;, age: 17, gender: \u0026#39;nv\u0026#39; }; }, changeData() { this.c2.name = \u0026#39;xiaozhang\u0026#39;; this.c2.age = 17; this.c2.gender = \u0026#39;nv\u0026#39; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; div { width: 800px; height: 800px; border: 2px solid black; } \u0026lt;/style\u0026gt; ProvideChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .child{ width: 500px; height: 500px; border: 2px solid black; margin: 30px; } \u0026lt;/style\u0026gt; ProvideGrandChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;grandchild\u0026#34;\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, // props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .grandchild{ margin: 30px; width: 300px; height: 300px; border: 2px solid black; } \u0026lt;/style\u0026gt; 练习 选择题 创建 Vue 项目的命令是什么？ A. npm create-vue project\tB. npm create vue project\nC. npm create-react project\tD. npm create vue@latest\n下列哪个语句可以作为插值表达式中的语句？ A. {{ var a = 1 }}\tB. {{ if (ok) { return message } }}\nC. {{ message.split(\u0026rsquo;\u0026rsquo;).reverse().join(\u0026rsquo;\u0026rsquo;) }}\tD. {{ if (ok) { } else { } }}\n下列哪个是侦听器关键字？ A. data\tB. methods\tC. computed\tD. watch\n在 Vue 中，传递参数过程中获取 event 对象的写法正确的是？ A. @click = \u0026ldquo;getNameHandle(item)\u0026rdquo;\nB. @click = \u0026ldquo;getNameHandle(item, $event)\u0026rdquo;\nC. @click = \u0026ldquo;getNameHandle(item, e)\u0026rdquo;\nD. @click = \u0026ldquo;getNameHandle(e)\u0026rdquo;\n案例——学习计划表u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026lt;strong\u0026gt;学习计划表\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习科目 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;subject\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习内容 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt; \u0026lt;span\u0026gt;学习地点 \u0026lt;select v-model=\u0026#34;location\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;图书馆\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;自习室\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;3\u0026#34;\u0026gt;宿舍\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;4\u0026#34;\u0026gt;咖啡厅\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;5\u0026#34;\u0026gt;办公室\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in lists\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.location }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;check\u0026#34; @click=\u0026#34;finish(item.id)\u0026#34;\u0026gt;\u0026lt;span\u0026gt;{{ item.status }}\u0026lt;/span\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { lists: [ { id: 1, subject: \u0026#39;vue.js\u0026#39;, content: \u0026#39;vue指令\u0026#39;, location: \u0026#39;图书馆\u0026#39;, status: \u0026#39;未完成\u0026#39; }, ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, location: \u0026#39;1\u0026#39;, status: \u0026#39;未完成\u0026#39; } }, methods: { add() { if (!this.subject) { alert(\u0026#39;学习科目不能为空！\u0026#39;); return; } if (!this.content) { alert(\u0026#39;学习内容不能为空！\u0026#39;); return; } this.lists.push({ id: +new Date(), subject: this.subject, content: this.content, location: document.querySelectorAll(\u0026#39;option\u0026#39;)[this.location - 1].innerHTML, status: this.status }) this.subject = \u0026#39;\u0026#39; this.content = \u0026#39;\u0026#39; console.log(this.lists); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } if(document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == false){ alert(\u0026#39;请先完成计划再删除！\u0026#39;); return; } // console.log(this.list) this.lists.splice(index, 1); // console.log(this.list) }, finish(id){ let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } // document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == true; document.querySelectorAll(\u0026#39;td span\u0026#39;)[index].innerHTML = \u0026#39;已完成\u0026#39;; document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].disabled = true; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; * { font-size: 24px; } .card { width: 100%; height: 200px; border: 2px solid gray; } .card-header { height: 50px; background-color: lightgray; line-height: 50px; border-bottom: 2px solid gray; } .card-header span { margin-left: 20px; } .card-body button { float: left; margin: 50px 20px; height: 50px; } .mod { float: left; margin: 50px 20px; background-color: lightgray; height: 48px; border: 2px solid gray; } .mod input { height: 44px; margin-top: -1px; margin-right: -2px; outline: none; } .mod select { height: 50px; margin-top: -1px; margin-right: -2px; width: 150px; text-align: center; outline: none; } .mod span { margin-left: 5px; } .list { width: 100%; } .list table { width: 100%; border-spacing: 0; border-top: 2px solid gray; border-left: 2px solid gray; } .list table th { background: lightgray; } .list table td:hover { background: #f5f5f5; } .list table th, .list table td { border-bottom: 2px solid gray; border-right: 2px solid gray; text-align: center; padding: 10px; } input[type=\u0026#34;checkbox\u0026#34;] { width: 20px; height: 20px; } \u0026lt;/style\u0026gt; 案例——百度热搜u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in lis\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;head\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../img/baidu.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;百度热搜 \u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;span class=\u0026#34;next-icon\u0026#34; @click=\u0026#34;next\u0026#34;\u0026gt;↻ 换一换\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tab\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tab-item active\u0026#34; @click=\u0026#34;show(0)\u0026#34;\u0026gt;热搜榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(1)\u0026#34;\u0026gt;长沙榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(2)\u0026#34;\u0026gt;民生榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(3)\u0026#34;\u0026gt;财经榜\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 1 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis2\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 0 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;s3\u0026#34;\u0026gt;{{ index + 10 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab2lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab3lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab4lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { tab1lis1: [ { id: 1, title: \u0026#39;风好正是扬帆时\u0026#39; }, { id: 2, title: \u0026#39;住建部：防止房地产市场大起大落热\u0026#39; }, { id: 3, title: \u0026#39;美国共产主义者宣布成立政党\u0026#39; }, { id: 4, title: \u0026#39;2024年全国两会新闻中心启用\u0026#39; }, { id: 5, title: \u0026#39;上海到北京仅需2.5小时\u0026#39; }, { id: 6, title: \u0026#39;爆火的秦岭隧道视频系拼接 作者道歉\u0026#39; }, { id: 7, title: \u0026#39;贵州省长：全面清理拖欠企业账款\u0026#39; }, { id: 8, title: \u0026#39;理想市值一天涨了1个小鹏\u0026#39; }, { id: 9, title: \u0026#39;#张雪峰称想出国读书先看这本书#\u0026#39; }, { id: 10, title: \u0026#39;河南多地发生山火？\u0026#39; }, ], tab1lis2: [ { id: 11, title: \u0026#39;演唱会黄牛煽动粉丝冲卡被行拘\u0026#39; }, { id: 12, title: \u0026#39;端午节放3天不调休\u0026#39; }, { id: 13, title: \u0026#39;美媒称拜登支持率与特朗普仅差1%\u0026#39; }, { id: 14, title: \u0026#39;澳亿万富豪之女在悉尼袭击案中遇害\u0026#39; }, { id: 15, title: \u0026#39;华为P系列升级为华为Pura\u0026#39; }, { id: 16, title: \u0026#39;老板掉进化粪池6人施救不幸全遇难\u0026#39; }, { id: 17, title: \u0026#39;阿根廷总统米莱宣布与女友分手\u0026#39; }, { id: 18, title: \u0026#39;我国已记录660多种外来入侵物种\u0026#39; }, { id: 19, title: \u0026#39;官方回应128元千人宴全是花生毛豆\u0026#39; }, { id: 20, title: \u0026#39;副县长妻子为出轨对象做间谍17年\u0026#39; }, ], tab2lis1: [ { id: 1, title: \u0026#39;民生项目落地 长沙幸福“加码”\u0026#39; }, { id: 2, title: \u0026#39;发展新质生产力，长沙瞄准有生力“量”\u0026#39; }, { id: 3, title: \u0026#39;长沙：未经业主同意，不得擅自涨物业费\u0026#39; }, { id: 4, title: \u0026#39;长沙望城区：调解劳资纠纷工会“快”字当头\u0026#39; }, { id: 5, title: \u0026#39;长沙诚邀您用镜头寻最美“乡”味\u0026#39; }, { id: 6, title: \u0026#39;2024中部（长沙）糖酒会将启幕\u0026#39; }, { id: 7, title: \u0026#39;2024长沙马栏山花朝节开幕\u0026#39; }, { id: 8, title: \u0026#39;2028年通车！长沙城南将新增一座过江大桥\u0026#39; }, { id: 9, title: \u0026#39;长沙量子测量产业技术研究院揭牌\u0026#39; }, { id: 10, title: \u0026#39;听说，五一广场成了长沙“粤语区”\u0026#39; }, ], tab3lis1: [ { id: 1, title: \u0026#39;翻船目击者称因吃饭躲过一劫\u0026#39; }, { id: 2, title: \u0026#39;35辆车高速集体爆胎\u0026#39; }, { id: 3, title: \u0026#39;北大凌晨讣告:大师辞世\u0026#39; }, { id: 4, title: \u0026#39;墨西哥城一直升机坠毁\u0026#39; }, { id: 5, title: \u0026#39;南京司机拒载日本乘客系谣言\u0026#39; }, { id: 6, title: \u0026#39;重庆辟谣“一家人上吊而死”\u0026#39; }, { id: 7, title: \u0026#39;1735名村民起诉区政府\u0026#39; }, { id: 8, title: \u0026#39;26岁男生失联家属发声\u0026#39; }, { id: 9, title: \u0026#39;国家某部委翻译驻外期被策反\u0026#39; }, { id: 10, title: \u0026#39;炸串奶奶摊前排起长队\u0026#39; }, ], tab4lis1: [ { id: 1, title: \u0026#39;章泽天自曝家族有帕金森基因\u0026#39; }, { id: 2, title: \u0026#39;油价明天预计上调\u0026#39; }, { id: 3, title: \u0026#39;周鸿祎等企业家在飞机上掼蛋\u0026#39; }, { id: 4, title: \u0026#39;万科承认遇到经营困难\u0026#39; }, { id: 5, title: \u0026#39;我国人均存款约10.8万\u0026#39; }, { id: 6, title: \u0026#39;高盛上调年底金价预测\u0026#39; }, { id: 7, title: \u0026#39;章泽天现身美国参加名流晚宴\u0026#39; }, { id: 8, title: \u0026#39;科大讯飞与华中师范大学合作\u0026#39; }, { id: 9, title: \u0026#39;苹果面临日本加重罚款\u0026#39; }, { id: 10, title: \u0026#39;1-3月中国进口钢材减少\u0026#39; }, ], page: 1, tab: 0 } }, methods: { next() { this.page++; }, show(index) { const items = document.querySelectorAll(\u0026#39;.tab-item\u0026#39;); const active = document.querySelector(\u0026#39;.active\u0026#39;); active.classList.remove(\u0026#39;active\u0026#39;); items[index].classList.add(\u0026#39;active\u0026#39;); this.tab = index; this.page = 1; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .main-box { width: 300px; text-wrap: nowrap; overflow-x: hidden; /* text-overflow: ellipsis; */ overflow-y: hidden; position: absolute; top: 30%; left: 50%; /* 往上（x轴）、左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */ transform: translate(-50%, -50%); } img { width: 101px; height: 33px; margin-bottom: -2.5px; } .list { height: 35px; padding: 5px 0; box-sizing: border-box; } a { text-decoration: none; color: rgb(36, 64, 179); font-size: 16px; } a:hover { color: rgb(41, 91, 255); text-decoration: underline; } .title { margin: 15px 0; } .title strong { width: 150px; font-size: 22px; cursor: pointer; } .title strong:hover { color: rgb(41, 91, 255); } .next-icon { margin-left: 120px; color: rgb(98, 102, 117); cursor: pointer; } .next-icon:hover { color: rgb(41, 91, 255); } .tab { margin: 15px 0; } .tab-item { background-color: rgb(238, 238, 238); margin-left: 20px; width: 60px; height: 28px; /* border: 1px solid black; */ border-radius: 5px; display: inline-block; text-align: center; line-height: 28px; color: rgb(36, 64, 179); cursor: pointer; } .tab-item:hover { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .tab-item:nth-child(1) { margin-left: 0; } .active { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .s0 { color: rgb(255, 0, 0); } .s1 { color: rgb(255, 102, 0); } .s2 { color: rgb(250, 169, 14); } .s3 { color: rgb(145, 149, 163); } .list .news span { border-radius: 50%; width: 20px; height: 20px; margin-right: 10px; font-size: 16px; display: inline-block; } \u0026lt;/style\u0026gt; 案例——小米商场 练习：仿照小米官网，思考如何划分组件，编写样式，引入组件完成页面设计。\nHeader 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in leftList\u0026#34;\u0026gt; {{ item }} \u0026lt;span v-if=\u0026#34;index != leftList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;span v-if=\u0026#34;index != rightList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;router-link to=\u0026#34;/shop\u0026#34;\u0026gt; --\u0026gt; \u0026lt;li class=\u0026#34;shop\u0026#34; ref=\u0026#34;shopItem\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745197484153\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1028 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2689\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.8 790.528q19.456 0 36.864 7.168t30.208 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.208 20.48-36.864 7.68q-20.48 0-37.888-7.68t-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 37.888-7.168zM758.784 792.576q19.456 0 37.376 7.168t30.72 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.72 20.48-37.376 7.68-36.864-7.68-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 36.864-7.168zM930.816 210.944q28.672 0 44.544 7.68t22.528 18.944 6.144 24.064-3.584 22.016-13.312 37.888-22.016 62.976-23.552 68.096-18.944 53.248q-13.312 40.96-33.28 56.832t-49.664 15.872l-35.84 0-65.536 0-86.016 0-96.256 0-253.952 0 14.336 92.16 517.12 0q49.152 0 49.152 41.984 0 20.48-9.728 35.84t-38.4 14.336l-49.152 0-94.208 0-118.784 0-119.808 0-99.328 0-55.296 0q-20.48 0-34.304-9.216t-23.04-24.064-14.848-32.256-8.704-32.768q-1.024-6.144-5.632-29.696t-11.264-58.88-14.848-78.848-16.384-87.552q-19.456-103.424-44.032-230.4l-76.8 0q-15.36 0-25.6-7.68t-16.896-18.432-9.216-23.04-2.56-22.528q0-20.48 13.824-33.792t37.376-12.288l103.424 0q20.48 0 32.768 6.144t19.456 15.36 10.24 18.944 5.12 16.896q2.048 8.192 4.096 23.04t4.096 30.208q3.072 18.432 6.144 38.912l700.416 0zM892.928 302.08l-641.024-2.048 35.84 185.344 535.552 1.024z\u0026#34; p-id=\u0026#34;2690\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 购物车 \u0026lt;span class=\u0026#34;shopCount\u0026#34;\u0026gt;({{ count }})\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;!-- 方法1：router-link + to 跳转到指定地址 --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { leftList: [ \u0026#39;小米官网\u0026#39;, \u0026#39;小米商场\u0026#39;, \u0026#39;小米澎湃 OS\u0026#39;, \u0026#39;IOT\u0026#39;, \u0026#39;云服务\u0026#39;, \u0026#39;天星数科\u0026#39;, \u0026#39;有品\u0026#39;, \u0026#39;小爱开放平台\u0026#39;, \u0026#39;资质证照\u0026#39;, \u0026#39;协议规则\u0026#39;, \u0026#39;下载 APP\u0026#39;, \u0026#39;Select Location\u0026#39; ], // rightList: [ // \u0026#39;登录\u0026#39;, \u0026#39;注册\u0026#39;, \u0026#39;消息通知\u0026#39; // ], rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/login\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], count: 0, } }, mounted() { // console.log(this.$refs.shopItem); let shop = document.querySelector(\u0026#39;.shop\u0026#39;); shop.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;rgb(255, 103, 0)\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;rgb(255, 103, 0)\u0026#39;; shop.classList.add(\u0026#39;active\u0026#39;) }) shop.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;#b0b0b0\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;#b0b0b0\u0026#39;; shop.classList.remove(\u0026#39;active\u0026#39;) }) }, // 方法2：使用 method 处理事件实现跳转 // methods: { // toShop(){ // this.$router.push(\u0026#39;/shop\u0026#39;) // } // } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .bg { min-width: 1226px; background-color: rgb(51, 51, 51); } .container { width: 1226px; margin: 0 auto; height: 40px; } ul { height: 40px; line-height: 40px; font-size: 12px; } .left { float: left; } .right { float: right; } ul li { float: left; list-style: none; /* margin: 0 10px; */ padding: 0 5px; color: rgb(176, 176, 176); } span { /* margin-left: 16px; */ position: relative; left: 4px; color: rgb(114, 114, 114); } .shop { width: 110px; background-color: rgb(66, 66, 66); text-align: center; margin-left: 25px; } .shop.active { background-color: rgb(255, 255, 255); color: rgb(255, 103, 0); } .shopCount { color: rgb(176, 176, 176); } ul li:hover { color: white; cursor: pointer; } svg { position: relative; top: 5px; left: -5px; } .title { color: rgb(176, 176, 176); text-decoration: none; } .title:hover { color: white; } \u0026lt;/style\u0026gt; Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } ul li a.fuzzy-active{ color: rgb(255, 128, 9); } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; Wrapperu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;nextImg\u0026#34; ref=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;count++\u0026#34; ref=\u0026#34;bg\u0026#34; :style=\u0026#34;{ backgroundImage: test[count % test.length]}\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- :class=\u0026#34;{ bg1: count % bgList.length == 0, bg2: count % bgList.length == 1, bg3: count % bgList.length == 2, bg4: count % bgList.length == 3, bg5: count % bgList.length == 4, bg6: count % bgList.length == 5 }\u0026#34; --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; {{ item }} \u0026lt;span\u0026gt; \u0026lt;svg t=\u0026#34;1745202463487\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4940\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.501333 183.168a42.666667 42.666667 0 0 1 57.621334-2.496l2.709333 2.496 298.666667 298.666667a42.666667 42.666667 0 0 1 2.496 57.621333l-2.496 2.709333-298.666667 298.666667a42.666667 42.666667 0 0 1-62.826667-57.621333l2.496-2.709334L600.96 512 332.501333 243.498667a42.666667 42.666667 0 0 1-2.496-57.621334l2.496-2.709333z\u0026#34; fill=\u0026#34;#ffffff\u0026#34; p-id=\u0026#34;4941\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207869866\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;6132\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M300 511.4l363 436.1c12.2 14.6 33.9 16.6 48.5 4.4 14.6-12.2 16.6-33.9 4.4-48.5l-326.2-392L716 120.5c12.2-14.6 10.2-36.3-4.4-48.5-14.6-12.2-36.4-10.2-48.6 4.4l-363 435z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;6133\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207985607\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;10595\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M680.96 536.32L294.826667 149.76C281.6 136.533333 281.6 115.2 294.826667 101.546667c13.226667-13.226667 34.986667-13.226667 48.213333 0l386.133333 386.133333c13.226667 13.226667 13.226667 34.986667 0 48.213333-13.226667 13.653333-34.986667 13.653333-48.213333 0.426667z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10596\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M294.826667 874.24l386.133333-386.133333c13.226667-13.226667 34.986667-13.226667 48.213333 0 13.226667 13.226667 13.226667 34.986667 0 48.213333l-386.133333 386.133333c-13.226667 13.226667-34.986667 13.226667-48.213333 0-13.226667-13.653333-13.226667-34.986667 0-48.213333z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10597\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ \u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;笔记本 平板\u0026#39;, \u0026#39;出行 穿戴\u0026#39;, \u0026#39;耳机 音箱\u0026#39;, \u0026#39;健康 儿童\u0026#39;, \u0026#39;生活 箱包\u0026#39;, \u0026#39;智能 路由器\u0026#39;, \u0026#39;电源 配件\u0026#39; ], // bgList: [ // \u0026#39;../../../images/xiaomi/i1.jpg\u0026#39;, // \u0026#39;../../../images/xiaomi/i2.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i3.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i4.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i5.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i6.webp\u0026#39;, // ], test: [ \u0026#39;url(../../../images/xiaomi/i1.jpg)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i2.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i3.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i4.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i5.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i6.webp)\u0026#39; ], count: 4 } }, mounted() { this.$refs.bg.style.backgroundImage = this.test[4] }, methods: { nextImg() { this.count++; this.$refs.bg.style.backgroundImage = this.test[this.count % this.test.length] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; /* .bg1 { background-image: url(../../../images/xiaomi/i1.jpg); } .bg2 { background-image: url(../../../images/xiaomi/i2.webp); } .bg3 { background-image: url(../../../images/xiaomi/i3.webp); } .bg4 { background-image: url(../../../images/xiaomi/i4.webp); } .bg5 { background-image: url(../../../images/xiaomi/i5.webp); } .bg6 { background-image: url(../../../images/xiaomi/i6.webp); } */ .container { width: 1226px; margin: 0 auto; /* background-image: url(../../../images/xiaomi/i5.webp); */ height: 460px; background-size: contain; overflow: hidden; position: relative; } ul { width: 234px; height: 420px; padding: 20px 0; background-color: rgba(105, 101, 101, 0.6); } ul li { list-style: none; font-size: 14px; line-height: 42px; height: 42px; cursor: pointer; } a { display: inline-block; box-sizing: border-box; width: 234px; line-height: 42px; text-decoration: none; color: white; padding-left: 30px; } ul li:hover { background-color: rgb(255, 103, 0); } span { float: right; position: relative; right: 20px; top: 5px; } .left, .right { width: 40px; height: 70px; /* background-color: aqua; */ background-color: rgba(0, 0, 0, 0); cursor: pointer; } .left { float: left; position: absolute; top: 195px; left: 234px; } .left svg { position: relative; left: -6px; top: 10px; } .right { float: right; position: absolute; top: 195px; right: 0px; /* left: 900px; */ } .right svg { position: relative; left: -1px; top: 10px; } .left:hover { background-color: rgb(51, 51, 51); } .right:hover { background-color: rgb(51, 51, 51); } \u0026lt;/style\u0026gt; Banner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;span4\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-channel-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 保障服务 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 企业团购 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; F码通道 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner4.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 米粉卡 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner5.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 以旧换新 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner6.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 话费充值 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;span16\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-promo-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; .container { width: 1226px; height: 170px; margin: 0 auto; margin-top: 14px; margin-bottom: 20px; display: flex; } .span4 { width: 234px; height: 170px; } .home-channel-list { width: 234px; height: 170px; background-color: rgb(95, 87, 80); padding: 3px; box-sizing: border-box } .home-channel-list li { width: 70px; height: 82px; padding: 0 3px; float: left; list-style: none; font-size: 12px; color: white; text-align: center; } .home-channel-list li img{ width: 24px; height: 24px; margin: 0 23px; padding-top: 18px; } .home-promo-list li { list-style: none; float: left; margin-left: 15px; } .home-promo-list li:first-child{ margin-left: 0; } .home-promo-list li img { width: 316px; height: 170px; } .span16 { margin-left: 14px; } \u0026lt;/style\u0026gt; Item 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 234px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 0 14px 14px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; MoreItem\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;more-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Xiaomi 开放式耳机 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;599元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/mini-Xiaomi 开放式耳机.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;see-more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; 浏览更多 \u0026lt;slot name=\u0026#34;more-small\u0026#34;\u0026gt; \u0026lt;small\u0026gt;耳机\u0026lt;/small\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;svg t=\u0026#34;1745805142422\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;12820\u0026#34; width=\u0026#34;60\u0026#34; height=\u0026#34;60\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M510.247 959.053c238.627 0 432.77-196.2 432.77-437.351 0-241.153-194.143-437.353-432.77-437.353-238.627 0-432.772 196.202-432.772 437.353 0 241.15 194.143 437.351 432.772 437.351z m0-820.035c208.804 0 378.675 171.665 378.675 382.684 0 211.013-169.871 382.68-378.675 382.68S131.57 732.715 131.57 521.702c0-211.02 169.871-382.684 378.677-382.684zM293.862 549.035h367.472L545.218 666.38c-10.563 10.677-10.563 27.976 0 38.654a26.849 26.849 0 0 0 38.251 0l162.288-164.01c10.567-10.675 10.567-27.975 0-38.651L583.469 338.361c-5.283-5.337-12.205-8.004-19.124-8.004-6.924 0-13.841 2.667-19.127 8.004-10.563 10.679-10.563 27.974 0 38.654l116.116 117.35H293.862c-14.953 0-27.047 12.225-27.047 27.336 0 15.107 12.092 27.333 27.047 27.333z\u0026#34; p-id=\u0026#34;12821\u0026#34; fill=\u0026#34;#FF6700\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .more-item { width: 234px; height: 300px; float: left; margin-left: 14px; } .more-item .mini-img img { width: 80px; height: 80px; position: relative; top: -90px; left: 130px; } .mini-item, .see-more { width: 234px; height: 143px; margin-bottom: 14px; background-color: #fff; transition: 0.5s; cursor: pointer; padding: 50px 0; box-sizing: border-box; } .mini-item .title { font-size: 14px; font-weight: 400; width: 94px; height: 42px; margin: 0 110px 0 30px; line-height: 21px; } .mini-item .price { color: rgb(255, 103, 0); width: 91px; height: 21px; margin: 5px 110px 0 30px; font-size: 14px; } .mini-item:hover, .see-more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .see-more .title { width: 94px; height: 45px; margin: 0 110px 0 30px; font-size: 18px; line-height: 27px; } .see-more small { display: block; color: rgb(117, 117, 117); font-size: 12px; height: 18px; line-height: 18px; } .see-more svg { position: relative; top: -55px; left: 140px; } \u0026lt;/style\u0026gt; Goods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box-hd\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;手机\u0026lt;/h2\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; 查看更多 \u0026lt;svg t=\u0026#34;1745725757152\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4256\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M512 102.4a422.912 422.912 0 1 0 422.570667 423.936A422.570667 422.570667 0 0 0 512 102.4z m117.418667 446.805333L462.506667 716.8a34.133333 34.133333 0 0 1-48.469334-48.128l143.018667-143.018667-143.018667-143.018666a34.133333 34.133333 0 0 1 0-48.128 34.133333 34.133333 0 0 1 48.469334 0l166.912 166.912a34.133333 34.133333 0 0 1 0 49.152z\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34; p-id=\u0026#34;4257\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/phone/left-phone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;Item v-for=\u0026#34;(item, index) in itemList\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;right-goods\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Item from \u0026#39;./Item.vue\u0026#39; export default { components: { Item }, // data() { // return { // itemList: [ // { id: 1, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, // { id: 2, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39; 徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, // { id: 3, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, // { id: 4, src: \u0026#39;../../../images/xiaomi/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, // { id: 5, src: \u0026#39;../../../images/xiaomi/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, // { id: 6, src: \u0026#39;../../../images/xiaomi/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, // { id: 7, src: \u0026#39;../../../images/xiaomi/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39; 徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, // { id: 8, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, // ] // } // } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 686px; } .box-hd { height: 58px; width: 1226px; color: rgb(51, 51, 51); display: flex; justify-content: space-between; } .box-hd h2 { font-size: 22px; font-weight: 200; line-height: 58px } .box-hd .more { line-height: 58px; } .box-hd .more a { color: rgb(51, 51, 51); text-decoration: none; } .main-box { width: 1226px; display: flex; } .left-img { /* float: left; */ cursor: pointer; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .right-goods { width: 992px; height: 614px; } svg { position: relative; top: 4px; } .left-img li{ list-style: none; margin-bottom: 14px; } .left-img .top-img img, .left-img .bottom-img img{ width: 234px; height: 300px; } \u0026lt;/style\u0026gt; Mainu0026lt;template\u0026gt; \u0026lt;main\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-top.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #left-img\u0026gt;\u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPhone\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能穿戴\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;耳机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;穿戴\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/left-watch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListBud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt;\u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;笔记本 | 平板\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/left-pad.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPad\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi Book Pro 14 2024 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;4999元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/mini-Redmi Book Pro 14 2024.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;家电\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电视影音\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空调\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListElec\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 迷你波轮洗衣机 3kg \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;799元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/mini-米家迷你波轮洗衣机Pro 3kg.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;生活电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;风扇\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;扫地机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空净\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;清洁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;环境\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListCleaner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家直流变频台式循环扇 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/mini-米家直流变频台式循环扇.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;风扇\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;厨房电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;净水器\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;烟灶\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电饭煲\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;微蒸烤\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListKitchen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家智能净烟机P2 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/mini-米家智能净烟机P2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;烟灶\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能家居\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;小爱音箱\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;门锁门铃\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;路由器\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;智能设备\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListSmart\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi小爱触屏音箱 8英寸 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/mini-Redmi小爱触屏音箱 8英寸.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;小爱音箱\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-bottom.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; import Item from \u0026#39;./Item.vue\u0026#39;; import MoreItem from \u0026#39;./MoreItem.vue\u0026#39;; export default { components: { Goods, Item, MoreItem }, data() { return { itemListPhone: [ { id: 1, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39;徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/phone/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, { id: 8, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, ], itemListBud: [ { id: 1, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5 Pro\u0026#39;, desc: \u0026#39;小米首发双功放三单元｜55dB 深度降噪｜哈曼联合调音\u0026#39;, price: \u0026#39;1299元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/REDMI Buds 6 Pro.webp\u0026#39;, title: \u0026#39;REDMI Buds 6 Pro\u0026#39;, desc: \u0026#39;小米首发圈瓷同轴三单元 | 55dB深度降噪 | 无级动态降噪技术\u0026#39;, price: \u0026#39;399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 青春版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 青春版\u0026#39;, desc: \u0026#39;42dB深度主动降噪 | 双麦AI通话抗风噪 | 12.4mm超大镀钛动圈\u0026#39;, price: \u0026#39;139元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6.webp\u0026#39;, title: \u0026#39;Redmi Buds 6\u0026#39;, desc: \u0026#39;旗舰双单元架构 | 49dB深度降噪 | 42h超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5\u0026#39;, desc: \u0026#39;舒适无感佩戴｜高通全链路无损音频｜哈曼 AudioEFX 联合调音\u0026#39;, price: \u0026#39;679元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6S.webp\u0026#39;, title: \u0026#39;Redmi Buds 6S\u0026#39;, desc: \u0026#39;14.2mm超大动圈单元 | 半入耳主动降噪 | 33小时超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 活力版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 活力版\u0026#39;, desc: \u0026#39;14.2mm超大动圈 | 内置五种调音模式 | 30小时长续航\u0026#39;, price: \u0026#39;99元起\u0026#39; }, ], itemListPad: [ { id: 1, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 14 2024\u0026#39;, desc: \u0026#39;65W 满血性能｜全新酷睿 Ultra 处理器\u0026#39;, price: \u0026#39;4899元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 16 2024\u0026#39;, desc: \u0026#39;70W 狂暴性能｜3.1K 165Hz 高刷高亮屏\u0026#39;, price: \u0026#39;6399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 16 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 14 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;4499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad Pro系列.webp\u0026#39;, title: \u0026#39;Redmi Pad Pro系列\u0026#39;, desc: \u0026#39;12.1英寸2.5K旗舰机大屏 | 10000mAh超大电池\u0026#39;, price: \u0026#39;1499元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Xiaomi Pad 6S Pro 12.4.webp\u0026#39;, title: \u0026#39;Xiaomi Pad 6S Pro 12.4\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰处理器 | 小米澎湃OS\u0026#39;, price: \u0026#39;2799元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad SE.webp\u0026#39;, title: \u0026#39;Redmi Pad SE\u0026#39;, desc: \u0026#39;高性价比千元平板｜11英寸高刷护眼大屏｜全金属一体机身｜73.2天超长待机\u0026#39;, price: \u0026#39;849元起\u0026#39; }, ], itemListElec: [ { id: 1, src: \u0026#39;../../../images/xiaomi/elec/小米电视S系列.webp\u0026#39;, title: \u0026#39;小米电视S系列\u0026#39;, desc: \u0026#39;144HZ超高刷 3+32G 多色温色彩还原技术\u0026#39;, price: \u0026#39;2599元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/elec/小米电视S Pro Mini LED系列.webp\u0026#39;, title: \u0026#39;小米电视S Pro Mini LED系列\u0026#39;, desc: \u0026#39;144Hz超高刷、4+64G大存储\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/elec/小米电视 S Mini LED 系列.webp\u0026#39;, title: \u0026#39;小米电视 S Mini LED 系列\u0026#39;, desc: \u0026#39;Mini LED 高分区背光、1200nits峰值亮度\u0026#39;, price: \u0026#39;2999元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/elec/巨省电 小米空调 1.5匹新1级能效.webp\u0026#39;, title: \u0026#39;巨省电 小米空调 1.5匹新1级能效\u0026#39;, desc: \u0026#39;强劲制冷 | 高效节能 | 智能互联\u0026#39;, price: \u0026#39;1899元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/elec/米家新风空调 立式3匹.webp\u0026#39;, title: \u0026#39;米家新风空调 立式3匹\u0026#39;, desc: \u0026#39;全屋快通风，就要大新风\u0026#39;, price: \u0026#39;6799元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/elec/米家分区洗烘一体机 15kg.webp\u0026#39;, title: \u0026#39;米家分区洗烘一体机 15kg\u0026#39;, desc: \u0026#39;健康分开洗 一台就够了\u0026#39;, price: \u0026#39;5499元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/elec/米家波轮洗衣机 10kg.webp\u0026#39;, title: \u0026#39;米家波轮洗衣机 10kg\u0026#39;, desc: \u0026#39;全景玻璃阻尼上盖 防夹手\u0026#39;, price: \u0026#39;999元\u0026#39; }, ], itemListCleaner: [ { id: 1, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频落地扇1X 升级版.webp\u0026#39;, title: \u0026#39;米家智能直流变频落地扇1X 升级版\u0026#39;, desc: \u0026#39;静音舒适自然风，支持充电宝供电，随处可用， 小爱语音控制\u0026#39;, price: \u0026#39;299元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/cleaner/米家循环扇.webp\u0026#39;, title: \u0026#39;米家循环扇\u0026#39;, desc: \u0026#39;风量强劲，广域覆盖\u0026#39;, price: \u0026#39;319元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/cleaner/米家直流变频落地扇 Pro.webp\u0026#39;, title: \u0026#39;米家直流变频落地扇 Pro\u0026#39;, desc: \u0026#39;收纳有序，与自然风同行\u0026#39;, price: \u0026#39;399元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/cleaner/米家落地扇.webp\u0026#39;, title: \u0026#39;米家落地扇\u0026#39;, desc: \u0026#39;静享智能轻风\u0026#39;, price: \u0026#39;219元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频循环扇 落地式.webp\u0026#39;, title: \u0026#39;米家智能直流变频循环扇 落地式\u0026#39;, desc: \u0026#39;智能温湿度控风，超广域空气循环\u0026#39;, price: \u0026#39;429元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频塔扇2.webp\u0026#39;, title: \u0026#39;米家智能直流变频塔扇2\u0026#39;, desc: \u0026#39;DIY自然风 ，环抱式柔和送风 ，儿童安全防护\u0026#39;, price: \u0026#39;329元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/cleaner/米家桌面移动风扇.webp\u0026#39;, title: \u0026#39;米家桌面移动风扇\u0026#39;, desc: \u0026#39;无线长续航，随处享清凉\u0026#39;, price: \u0026#39;129元\u0026#39; }, ], itemListKitchen: [ { id: 1, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能燃气灶S2.webp\u0026#39;, title: \u0026#39;米家智能燃气灶S2 5200W/4800W\u0026#39;, desc: \u0026#39;5200W/4800W猛火 | 双环聚能火焰 | 可调节\u0026#39;, price: \u0026#39;699元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能定时灶S2.webp\u0026#39;, title: \u0026#39;米家智能定时灶S2 5200W /4800W\u0026#39;, desc: \u0026#39;5200W/4800W爆炒大火才够味 | 68%超高热效\u0026#39;, price: \u0026#39;1099元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能平嵌侧吸油烟机S1.webp\u0026#39;, title: \u0026#39;米家智能平嵌侧吸油烟机S1\u0026#39;, desc: \u0026#39;小巧机身 | 25立方大吸力 | 烟灶联动\u0026#39;, price: \u0026#39;1799元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能顶侧双吸油烟机S2.webp\u0026#39;, title: \u0026#39;米家智能顶侧双吸油烟机S2\u0026#39;, desc: \u0026#39;25m³/min大风量 | 1000Pa大静压\u0026#39;, price: \u0026#39;2099元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能欧式烟机S2.webp\u0026#39;, title: \u0026#39;米家智能欧式烟机S2\u0026#39;, desc: \u0026#39;23m³/min大吸力｜500pa静压｜智能干洗\u0026#39;, price: \u0026#39;1499元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机S2 白色.webp\u0026#39;, title: \u0026#39;米家智能净烟机S2 白色\u0026#39;, desc: \u0026#39;下厨不留味｜无油网免拆洗｜真白不惧黄\u0026#39;, price: \u0026#39;2699元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机P1.webp\u0026#39;, title: \u0026#39;米家智能净烟机P1\u0026#39;, desc: \u0026#39;高速气旋强锁烟， 劲速气流高效净吸，无油网设计免拆洗\u0026#39;, price: \u0026#39;2999元\u0026#39; }, ], itemListSmart: [ { id: 1, src: \u0026#39;../../../images/xiaomi/smart/Xiaomi智能家庭屏 10.webp\u0026#39;, title: \u0026#39;Xiaomi智能家庭屏 10\u0026#39;, desc: \u0026#39;MIUI Home｜10.1\u0026#34; 高清大屏｜115°超广角摄像头｜儿童模式｜家庭 KTV｜小爱同学\u0026#39;, price: \u0026#39;899元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱Play 增强版.webp\u0026#39;, title: \u0026#39;小米小爱音箱Play 增强版\u0026#39;, desc: \u0026#39;LED时钟显示，语音控制传统家电\u0026#39;, price: \u0026#39;129元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Play.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Play\u0026#39;, desc: \u0026#39;听音乐、语音遥控家电\u0026#39;, price: \u0026#39;99元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Pro.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Pro\u0026#39;, desc: \u0026#39;澎湃低音，语音遥控传统家电\u0026#39;, price: \u0026#39;269元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/smart/小米AI音箱（第二代）.webp\u0026#39;, title: \u0026#39;小米AI音箱（第二代）\u0026#39;, desc: \u0026#39;低频饱满有深度，人声清晰有细节\u0026#39;, price: \u0026#39;179元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱.webp\u0026#39;, title: \u0026#39;小米小爱音箱\u0026#39;, desc: \u0026#39;Hi-Fi级音频芯片，支持AUX IN接口，你桌面的有源音箱\u0026#39;, price: \u0026#39;199元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/smart/Redmi小爱触屏音箱 8英寸.webp\u0026#39;, title: \u0026#39;Redmi小爱触屏音箱 8英寸\u0026#39;, desc: \u0026#39;8英寸高清大屏，海量优质影音资源\u0026#39;, price: \u0026#39;349元\u0026#39; }, ], } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; main { height: 5194px; width: 100%; background-color: rgb(245, 245, 245); } .container { width: 1226px; margin: 0 auto; } .home-banner-box { padding: 22px 0; } .home-banner-box img { width: 1226px; } .tab-list { height: 58px; padding: 14px 0; box-sizing: border-box; } .tab-list li { list-style: none; float: left; margin-left: 30px; height: 30px; line-height: 30px; cursor: pointer; } .tab-list .active { border-bottom: 2px solid rgb(255, 103, 0); color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; Footeru0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;footer-services\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810757451\u0026#34; class=\u0026#34;icon tool\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;15017\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M373.91591769 722.85439369c-19.74602377 0-39.49204754-1.65700898-59.23807131-5.10911106-70.00862973-12.15139925-133.66539167-45.15349491-184.0660817-95.55418494-51.09111045-51.09111045-84.23129021-115.57637689-95.96843721-186.5515952-11.46097883-69.4562934-1.79509307-139.7410913 28.1691528-203.12168507l12.56565148-26.65022789L287.61336625 418.10282403l124.8280104-124.8280104-212.2352345-212.37331858 26.65022789-12.5656515c63.38059378-29.96424587 133.66539167-39.63013162 203.12168507-28.16915279 70.97521831 11.737147 135.59856882 44.87732675 186.5515952 95.96843721 50.40069004 50.40069004 83.40278572 114.05745199 95.55418494 184.06608172 11.87523108 68.48970482 3.0378498 137.94599822-25.54555522 200.91233974l-37.69695446-17.1224262c51.64344678-113.9193679 26.92639605-250.07027305-61.58550071-338.58216981-82.85044939-82.85044939-206.15953488-109.77684543-314.96979174-71.1133024l198.70299443 198.70299445-183.3756613 183.65182946-198.84107852-198.84107851c-38.66354305 108.81025686-11.737147 232.11934237 71.1133024 314.96979173 88.51189675 88.51189675 224.52471783 113.22894749 338.58216981 61.58550071l17.12242619 37.69695446c-44.87732675 20.43644418-92.9305874 30.79275037-141.67426844 30.79275037z\u0026#34; p-id=\u0026#34;15018\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M813.989888 980.65737535c-17.81284661 0-35.62569324-6.76612003-49.1579333-20.2983601L492.3920603 687.91912086c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382545 8.14696086-8.14696086 21.26494868-8.14696086 29.27382546 0l272.43989439 272.43989438c10.90864251 10.90864251 28.72148912 10.90864251 39.63013162 0l91.68783065-91.68783065c5.24719513-5.24719513 8.14696086-12.28948332 8.14696084-19.88410784 0-7.45654045-2.89976573-14.49882864-8.14696084-19.88410787L653.12193212 527.32733314c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382544 8.14696086-8.14696086 21.26494868-8.14696086 29.27382545 0l272.43989438 272.43989438c13.11798782 13.11798782 20.2983601 30.5165822 20.2983601 49.15793329s-7.18037229 36.03994548-20.2983601 49.15793331l-91.68783065 91.68783064c-13.67032415 13.39415599-31.34508668 20.16027601-49.1579333 20.16027603z\u0026#34; p-id=\u0026#34;15019\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 预约维修服务 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810998229\u0026#34; class=\u0026#34;icon circle-7\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;17244\u0026#34; width=\u0026#34;30\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;path d=\u0026#34;M952.46 31.5H31.5v961h961v-961h-40.04z m0 920.96H71.54V71.54h880.915l0.005 880.92z\u0026#34; p-id=\u0026#34;17245\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; --\u0026gt; \u0026lt;path d=\u0026#34;M512 872.375c188.197 0 340.353-152.16 340.353-340.353S700.198 191.664 512 191.664h-60.063L512 131.601h-60.063l-80.085 80.085 80.085 80.085H512l-60.063-60.062H512c166.172 0 300.313 134.141 300.313 300.313S678.172 832.335 512 832.335 211.687 698.194 211.687 532.022h-40.04c0 188.192 152.155 340.353 340.353 340.353z\u0026#34; p-id=\u0026#34;17246\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M450.319 720.834l45.638 0.13L631.544 414.53v-53.834H390.761v41.89h200.695l-141.137 318.25z\u0026#34; p-id=\u0026#34;17247\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 7天无理由退货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811204525\u0026#34; class=\u0026#34;icon circle-15\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;18507\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M511.00672 1003.52c247.75168 0 448.07168-200.30976 448.07168-448.07168 0-247.75168-200.32-448.06656-448.07168-448.06656H431.93344L511.00672 28.3136H431.93344L326.50752 133.74464l105.43104 105.43104h79.06816L431.93344 160.10752h79.06816c218.76736 0 395.35104 176.59392 395.35104 395.35104 0 218.76736-176.58368 395.35616-395.35104 395.35616-218.76224 0-395.35104-176.5888-395.35104-395.35616H62.94016c0 247.75168 200.30976 448.06144 448.06656 448.06144z\u0026#34; p-id=\u0026#34;18508\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M430.52544 739.95264h-50.07872V344.6016h-105.4208V397.312h52.7104v342.64064H272.384v52.70528h158.14144v-52.70528zM630.84032 739.95264H485.87264v52.70528h144.96256c79.06816 0 144.96256-65.88416 144.96256-144.95744s-65.88928-144.96256-144.96256-144.96256h-92.25728v-105.4208h210.86208V344.6016H485.87264v210.85184h144.96256c50.0736 0 92.25728 42.17856 92.25728 92.25728s-42.17856 92.24192-92.25216 92.24192z\u0026#34; p-id=\u0026#34;18509\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 15天免费换货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811426127\u0026#34; class=\u0026#34;icon gift\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;21679\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M195.58025 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21680\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M775.5183125 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21681\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21682\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M828.39359375 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21683\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 353.8019375l737.4375 0 0 52.3125-737.4375 0 0-52.3125Z\u0026#34; p-id=\u0026#34;21684\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M172.51803125 511.86415625l657.00028125 0 0 53.43721875-657.00028125 0 0-53.43721875Z\u0026#34; p-id=\u0026#34;21685\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M205.141625 881.009l591.75225 0 0 53.4380625-591.75225 0 0-53.4380625Z\u0026#34; p-id=\u0026#34;21686\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M458.97115625 385.3008125l105.0485625 0 0 520.87471875-105.0485625 0 0-520.87471875Z\u0026#34; p-id=\u0026#34;21687\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M523.1931875 354.40353125C518.73734375 125.9725625 343.40103125 30.28203125 269.13584375 129.761 180.1784375 248.9204375 357.58025 357.73971875 357.58025 357.73971875s4.9528125 11.39990625 60.4546875 19.86440625C450.07128125 382.49028125 524.82415625 438.00228125 523.1931875 354.40353125zM448.14246875 355.4894375c-36.56221875 0-91.843875-45.98859375-91.843875-45.98859375s-73.98253125-75.57215625-39.77015625-129.28865625c31.48875-49.44121875 146.1661875-4.13690625 148.74890625 128.25421875C466.2231875 356.9170625 466.9251875 355.4894375 448.14246875 355.4894375z\u0026#34; p-id=\u0026#34;21688\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M601.90325 377.604125c55.501875-8.46534375 60.4546875-19.86440625 60.4546875-19.86440625s183.9324375-105.2780625 86.4405-226.96875C671.18103125 33.8856875 501.20253125 125.9725625 496.74584375 354.40353125 495.114875 438.00228125 569.86775 382.49028125 601.90325 377.604125zM554.66084375 308.46640625C557.24440625 176.0744375 673.8936875 133.18240625 703.41059375 180.21134375c33.5761875 53.49628125-39.77015625 129.28865625-39.77015625 129.28865625s-55.2825 45.98859375-91.84471875 45.98859375C553.01384375 355.4894375 553.71584375 356.9170625 554.66084375 308.46640625z\u0026#34; p-id=\u0026#34;21689\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 满69包邮 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811515464\u0026#34; class=\u0026#34;icon location\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;22794\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M503.23456 885.82144l-14.04928-14.15168C478.02368 860.38528 215.49056 593.92 215.49056 434.7904c0-163.55328 129.29024-296.61184 288.21504-296.61184 158.90432 0 288.21504 132.28032 288.256 294.87104 0.04096 159.0272-271.4624 436.51072-274.20672 439.07072l-14.52032 13.70112z m0.49152-706.6624c-136.33536 0-247.25504 114.688-247.25504 255.65184 0 122.79808 192.7168 335.21664 247.48032 393.09312C563.2 765.62432 751.06304 549.4784 751.02208 433.07008c-0.04096-140.00128-110.98112-253.91104-247.296-253.91104z m1.88416 360.83712c-68.9152 0-125.00992-57.79456-125.00992-128.83968s56.07424-128.8192 125.00992-128.8192c68.89472 0 124.96896 57.79456 124.96896 128.8192s-56.05376 128.83968-124.96896 128.83968z m0-216.6784c-46.34624 0-84.04992 39.40352-84.04992 87.8592s37.70368 87.8592 84.04992 87.8592c46.32576 0 84.00896-39.40352 84.00896-87.8592s-37.6832-87.8592-84.00896-87.8592z\u0026#34; fill=\u0026#34;#616161\u0026#34; p-id=\u0026#34;22795\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 1100余家售后网点 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer-links\u0026#34;\u0026gt; \u0026lt;dl v-for=\u0026#34;item1 in linkList\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ item1.title }}\u0026lt;/dt\u0026gt; \u0026lt;dd v-for=\u0026#34;item2 in item1.ddList\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;{{ item2 }}\u0026lt;/a\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;div class=\u0026#34;right-contact\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-contact\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34;\u0026gt;950816\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34; style=\u0026#34;margin-top: 25px;\u0026#34;\u0026gt;950818\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;width: 200px; text-align: left; margin-left: 52px;\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;手机适用于：Xiaomi MIX Fold系列、MIX Flip系列、数字12系列及以上\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;电视适用于：98寸、100寸电视\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { linkList: [ { title: \u0026#39;\u0026#39;, ddList: [] }, { title: \u0026#39;选购指南\u0026#39;, ddList: [\u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;穿戴\u0026#39;, \u0026#39;耳机\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;音箱\u0026#39;, \u0026#39;配件\u0026#39;] }, { title: \u0026#39;服务中心\u0026#39;, ddList: [\u0026#39;申请售后\u0026#39;, \u0026#39;售后政策\u0026#39;, \u0026#39;维修服务价格\u0026#39;, \u0026#39;订单查询\u0026#39;, \u0026#39;以旧换新\u0026#39;, \u0026#39;保障服务\u0026#39;, \u0026#39;防伪查询\u0026#39;, \u0026#39;F码通道\u0026#39;] }, { title: \u0026#39;线下门店\u0026#39;, ddList: [\u0026#39;小米之家\u0026#39;, \u0026#39;服务网点\u0026#39;, \u0026#39;授权体验店/专区\u0026#39;] }, { title: \u0026#39;关于小米\u0026#39;, ddList: [\u0026#39;了解小米\u0026#39;, \u0026#39;加入小米\u0026#39;, \u0026#39;投资者关系\u0026#39;, \u0026#39;可持续发展\u0026#39;, \u0026#39;廉洁举报\u0026#39;] }, { title: \u0026#39;关注我们\u0026#39;, ddList: [\u0026#39;新浪微博\u0026#39;, \u0026#39;官方微信\u0026#39;, \u0026#39;联系我们\u0026#39;, \u0026#39;公益基金会\u0026#39;] }, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .container { width: 1226px; margin: 0 auto; } .container .footer-services { border-bottom: 1px solid rgb(224, 224, 224); } .container .footer-services ul { padding: 27px 0; /* display: flex; */ /* justify-content: space-around; */ height: 79px; box-sizing: border-box; } .container .footer-services li { list-style: none; height: 25px; color: rgb(97, 97, 97); line-height: 25px; cursor: pointer; border-left: 1px solid rgb(224, 224, 224); width: 243px; text-align: center; float: left; line-height: 25px; } .container .footer-services li:first-child { border: 0; } .container .footer-services li svg { float: left; position: relative; } .container .footer-services li svg.tool { left: 56px; top: 0; } .container .footer-services li svg.circle-7 { left: 50px; top: -3px; } .container .footer-services li svg.circle-15 { left: 54px; top: 0; } .container .footer-services li svg.gift { left: 70px; top: 0; } .container .footer-services li svg.location { left: 40px; top: 0; } .container .footer-services li a { height: 25px; line-height: 25px; color: rgb(97, 97, 97); text-decoration: none; } .container .footer-links { height: 392.5px; box-sizing: border-box; padding: 40px 0; } .footer-links dl { width: 160px; height: 25px; float: left; } .footer-links dl dt { height: 17.5px; line-height: 17.5px; font-size: 14px; margin-top: -1px; margin-bottom: 26px; color: rgb(66, 66, 66); } .footer-links dl dd { color: rgb(117, 117, 117); font-size: 12px; margin-top: 10px; line-height: 18px; /* cursor: pointer; */ } .footer-links dl dd a { color: rgb(117, 117, 117); text-decoration: none; } .footer-links dl dd a:hover { color: rgb(255, 103, 0); } .footer-links .right-contact { width: 251px; float: right; text-align: center; } .footer-links .right-contact .col-contact { width: 251px; height: 80px; border-left: 1px solid rgb(224, 224, 224); } .right-contact .phone { height: 22px; margin-bottom: 5px; color: rgb(255, 103, 0); font-size: 22px; line-height: 22px; } .right-contact .time { font-size: 12px; color: rgb(97, 97, 97); height: 18px; line-height: 18px; margin-bottom: 5px; } .right-contact .btn { width: 120px; height: 30px; border: 1px solid rgb(255, 103, 0); display: inline-block; font-size: 12px; line-height: 30px; color: #FF6700; } .right-contact .notice { font-size: 12px; color: rgb(97, 97, 97); /* height: 18px; */ line-height: 18px; margin-bottom: 5px; margin-top: 3px; } \u0026lt;/style\u0026gt; App 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;Tab /\u0026gt; \u0026lt;Wrapper /\u0026gt; \u0026lt;Main\u0026gt;\u0026lt;/Main\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Main from \u0026#39;@/components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import Wrapper from \u0026#39;@/components/xiaomi/Wrapper.vue\u0026#39;; import Footer from \u0026#39;./components/xiaomi/Footer.vue\u0026#39;; export default { components: { Header, Tab, Wrapper, Main, Footer, } } \u0026lt;/script\u0026gt; ","date":"2025-02-21T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/","title":"第三章 组件基础（上）"},{"content":"Vue 指令 指令修饰符 通过 . 指明一些指令后缀，不同后缀封装了不同的处理操作\t→\t简化代码\n① 按键修饰符\n@keyup.enter\t→\t键盘回车监听 ② v-model修饰符\nv-model.trim\t→\t去除首尾空格\nv-model.number →\t转数字\n③ 事件修饰符\n@事件名.stop\t→\t阻止冒泡\n@事件名.prevent →\t阻止默认行为\n1 \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; @keyup.enter=\u0026#34;add\u0026#34; /\u0026gt; .enter 等价于 if 判断事件触发时 key 的值（addEventListener）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;@keyup.enter → 监听键盘回车事件\u0026lt;/h3\u0026gt; \u0026lt;input @keyup=\u0026#34;fn\u0026#34; v-model=\u0026#34;username\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39; }, methods: { fn(e) { if (e.key === \u0026#39;Enter\u0026#39;) { console.log(\u0026#39;键盘回车的时候触发\u0026#39;, this.username) this.username = \u0026#39;\u0026#39; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind 对于样式控制的增强 操作 class 语法：v-bind:class = \u0026quot;对象 / 数组\u0026quot;\n① 对象 → 键就是类名，值是布尔值。如果值为 true，有这个类，否则没有这个类。(一个类来回切换)\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{类名1:布尔值，类名2:布尔值}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; ② 数组 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表。（多个类批量添加或删除）\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;类名1\u0026#39;，\u0026#39;类名2\u0026#39;，\u0026#39;类名3\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 300px; height: 300px; margin: 30px 0px 30px 200px; border: 5px solid black; border-radius: 10px; } .pink { background-color: rgb(255, 236, 239); } .big { width: 500px; height: 300px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{ pink: false, big: false }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;pink\u0026#39;, \u0026#39;big\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：导航栏高亮效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #e01222; padding: 0 10px; } li { width: 100px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #e01222; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;京东秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;每日特价\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;品类秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 基于数据动态渲染页面。\n记录导航栏下标，用于标记 class 为 active，以显示高亮。\n使用 @ 或 v-on: 监听事件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #3ea1e4; padding: 0 10px; } li { width: 200px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #3ea1e4; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34; @mouseenter=\u0026#34;activeIndex=item.id-1\u0026#34;\u0026gt; \u0026lt;a :class=\u0026#34;{active: index === activeIndex}\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;{{item.name}}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;专栏\u0026#39; }, { id: 2, name: \u0026#39;活动\u0026#39; }, { id: 3, name: \u0026#39;直播\u0026#39; }, { id: 4, name: \u0026#39;课堂\u0026#39; }, { id: 5, name: \u0026#39;社区中心\u0026#39; }, { id: 6, name: \u0026#39;游戏中心\u0026#39; } ], activeIndex: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 操作 style 语法：style = \u0026quot;样式对象\u0026quot;\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{CSS属性名1: CSS属性值, CSS属性名2: CSS属性值} \u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; background-color: gainsboro; margin: 5px; } .bigger{ width: 400px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{backgroundColor: \u0026#39;pink\u0026#39;}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; v-bind:class=\u0026#34;[\u0026#39;bigger\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;../vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：进度条变化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; \u0026lt;span\u0026gt;50%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-bind: 或 : 操作 style。\n为 button 添加点击事件，改变进度条长度。\n动态渲染长度显示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 外层盒子底色 （黑色） --\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;!-- 内层盒子 - 进度（蓝色） --\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34; :style=\u0026#34;{ width: percent + \u0026#39;%\u0026#39; }\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ percent }}%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;percent = 25\u0026#34;\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 50\u0026#34;\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 75\u0026#34;\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 100\u0026#34;\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { percent: 30 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-model 应用于其他表单元素 v-model 可以快速获取或设置表单元素的值，且能够根据控件类型自动选取正确的方法来更新元素。\n表单元素：\n① 输入框 input:text\t→\tvalue\n② 文本域 textarea\t→\tvalue\n③ 复选框 input:checkbox\t→\tchecked\n④ 单选框 input:radio →\tchecked\n⑤ 下拉菜单 select\t→\tvalue\t\u0026hellip;\n案例：个人信息档案。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; textarea { display: block; width: 395px; height: 100px; margin: 10px 0; } .info { width: 400px; height: 500px; border: solid rgb(0, 0, 0); padding-left: 20px; padding-right: 20px; border-radius: 20px; box-shadow: 5px 5px #ccc; ; } .study { width: 20px; margin: 0 5px 0 5px; } .study:first-child { width: 50px; } .necc { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;个人信息档案\u0026lt;/h3\u0026gt; \u0026lt;span\u0026gt; 姓名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34; style=\u0026#34;width: 80px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 20px;\u0026#34;\u0026gt; 学号：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;stuId\u0026#34; style=\u0026#34;width: 120px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; \u0026lt;!-- name 属性使得单选框互斥，当选择其中一个的时候，另外的则取消勾选 --\u0026gt; \u0026lt;!-- value 向后台提交数据 --\u0026gt; 性别： \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;男 \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;2\u0026#34;\u0026gt;女 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 籍贯： \u0026lt;select v-model=\u0026#34;cityId\u0026#34;\u0026gt; \u0026lt;!-- option 需要设置 value 值，且 select 框的 value 值与选中的 option 的 value 值关联 --\u0026gt; \u0026lt;option value=\u0026#34;001\u0026#34;\u0026gt;北京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;002\u0026#34;\u0026gt;上海\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;003\u0026#34;\u0026gt;成都\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;004\u0026#34;\u0026gt;南京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;005\u0026#34;\u0026gt;长沙\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;006\u0026#34;\u0026gt;武汉\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;007\u0026#34;\u0026gt;...\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 是否为共产党员： \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;isStar\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 入学时间：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;year\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;年\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;month\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;月\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;day\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;日 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 自我评价： \u0026lt;textarea v-model=\u0026#34;desc\u0026#34; placeholder=\u0026#34;本人积极向上...\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;保存\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, isStar: false, gender: \u0026#34;2\u0026#34;, cityId: \u0026#39;002\u0026#39;, desc: \u0026#34;\u0026#34;, stuId: \u0026#39;\u0026#39;, year: \u0026#39;2023\u0026#39;, month: \u0026#39;\u0026#39;, day: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 计算属性 基础语法 概念：基于现有的数据，计算出来的新属性。依赖的数据变化，自动重新计算。\n语法：① 声明在 computed 配置项中，一个计算属性对应一个函数。\n​\t② 使用起来和普通属性一样使用 {{ 计算属性名 }}。\n注意：计算属性本质上是属性，因此在使用时不能加 ()，如 {{ getCount() }} 是错误的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 240px; } th,td { border: 1px solid #000; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;分数\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}分\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;总分 {{ getCount }} 分\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;英语\u0026#39;, num: 67 }, { id: 2, name: \u0026#39;数学\u0026#39;, num: 82 }, { id: 3, name: \u0026#39;语文\u0026#39;, num: 75 }, ] }, computed:{ getCount(){ // 遍历数组求和 let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 和 methods ​\tmethods 侧重于处理业务，使用几次就需要计算几次；computed 侧重于求得结果，具有缓存特性，性能更好。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 300px; } th,td { border: 1px solid #000; } h3 { position: relative; margin-left: 120px; } span { position: absolute; left: 70px; top: -4px; width: 16px; height: 16px; color: white; font-size: 12px; text-align: center; border-radius: 50%; background-color: #e63f32; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;购物车🛒\u0026lt;span\u0026gt;{{ getCount() }}\u0026lt;/span\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;名字\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;数量\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}个\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;礼物总数：{{ getCount() }} 个\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // 现有的数据 list: [ { id: 1, name: \u0026#39;篮球\u0026#39;, num: 3 }, { id: 2, name: \u0026#39;玩具\u0026#39;, num: 2 }, { id: 3, name: \u0026#39;铅笔\u0026#39;, num: 5 }, ] }, methods: { getCount() { console.log(\u0026#39;methods方法执行了\u0026#39;) let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } }, computed: { // 计算属性：有缓存的，一旦计算出来结果，就会立刻缓存 // 下一次读取 → 直接读缓存就行 → 性能特别高 // getCount() { // console.log(\u0026#39;计算属性执行了\u0026#39;) // let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) // return count // } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 修改计算属性 计算属性默认的简写，只能读取访问，不能修改；如果要修改，则需要写计算属性的完整写法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 computed: { 计算属性名() { 一段代码逻辑 (计算逻辑) return 结果 } } ------------------------------------------------------------------------ computed: { 计算属性名: { get() { 一段代码逻辑 (计算逻辑) return 结果 }, set(修改的值) { 一段代码逻辑 (修改逻辑) } } } 案例：改名卡。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39; }, computed: { fullName() { return this.firstName + \u0026#34;·\u0026#34; + this.lastName } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = \u0026#39;迈克尔杰克逊\u0026#39; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t如果使用 computed 计算完整姓名，直接修改 fullName 时提示 computed 没有配置 setter 逻辑，[Vue warn]: Computed property \u0026quot;fullName\u0026quot; was assigned to but it has no setter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;change\u0026#34;\u0026gt;\u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39;, }, computed: { // fullName() { // return this.firstName + \u0026#34;·\u0026#34; + this.lastName // } fullName: { get: function(){ return this.firstName + \u0026#34;·\u0026#34; + this.lastName }, set: function(a){ this.firstName = a.slice(0, 3) this.lastName = a.slice(3) } } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = document.querySelector(\u0026#39;.change\u0026#39;).value; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 成绩案例 ​\t编写程序，使得页面在没有数据时显示 \u0026ldquo;暂无数据\u0026rdquo;，有数据时，显示数据并将未及格的成绩标红，实现添加、删除、求总分及平均分等功能。\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./styles/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;语文\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;red\u0026#34;\u0026gt;46\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;英语\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;80\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;数学\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;100\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：246\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：79\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-if v-else 判断条件渲染或删除 tbody。\nv-for 动态渲染tbody 中的数据， v-bind 控制不及格科目成绩的颜色。\nv-on 绑定删除事件，filter 覆盖数组，v-model 双向绑定数据，unshfit 更新视图。\ncomputed 计算属性求总分及平均分。\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody v-if=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{index+1}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{item.subject}}\u0026lt;/td\u0026gt; \u0026lt;td :class=\u0026#34;{red:item.score\u0026lt;60}\u0026#34;\u0026gt;{{item.score}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; @click.prevent=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody v-else\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：{{getSum}}\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：{{getAvg}}\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; v-model.trim=\u0026#34;subject\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; v-model.number=\u0026#34;score\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; }, methods: { del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ if(this.list[i].id === id){ index = i; } } // console.log(this.list) this.list.splice(index, 1); // console.log(this.list) }, add() { if (!this.subject) { alert(\u0026#39;科目不能为空！\u0026#39;) return } if (typeof this.score !== \u0026#39;number\u0026#39;) { alert(\u0026#39;成绩输入格式错误！\u0026#39;) return } // push 在最后添加，unshift 在前面插入 this.list.unshift({ id: +new Date(), subject: this.subject, score: this.score }) this.subject = \u0026#39;\u0026#39; this.score = \u0026#39;\u0026#39; } }, computed: { getSum() { // return this.list.reduce((sum, item) =\u0026gt; sum + item.score, 0) let sum = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ sum += this.list[i].score; } return sum; }, getAvg() { if (this.list.length === 0) { return 0 } return (this.getSum / this.list.length).toFixed(2) } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue 生命周期钩子函数 每个 Vue 实例在创建过程中都有一系列的初始化步骤。例如，创建函数绑定、编译模板、将实例挂在到 DOM 并在数据变化时触发 DOM 更新、销毁实例等。\n通俗的说，Vue 实例从创建到销毁的过程，就是生命周期。在这个过程中会运行一些叫做生命周期钩子的函数，通过这些钩子函数可以定义业务逻辑。\n（1）beforeCreate：在 Vue 实例开始初始化时调用。\n（2）created：在实例创建之后，DOM 编译之前调用。\n（3）beforeMount：在 DOM 渲染前调用。\n（4）mounted：在 DOM 渲染后调用，等于 window.onload() 方法。\n（5）beforeUpdate()：在组件更新前调用。\n（6）updated()：在组件中的任意 DOM 元素更新后调用。\n（7）beforeDestory：在销毁实例前调用，此时实例仍有效。\n（8）destoryed：在实例销毁后调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, beforeCreate() { console.log(\u0026#39;beforeCreate\u0026#39;); }, created() { console.log(\u0026#39;created\u0026#39;); }, beforeMount() { console.log(\u0026#39;beforeMount\u0026#39;); }, mounted() { console.log(\u0026#39;mounted\u0026#39;); }, beforeDestory() { console.log(\u0026#39;beforeDestory\u0026#39;); }, destoryed() { console.log(\u0026#39;destoryed\u0026#39;); }, }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; watch 侦听器 基础语法 作用：监听数据变化，执行一些业务逻辑或异步操作。\n语法：① 简单写法\t→\t简单类型数据，直接监视。\n1 2 3 4 5 6 7 8 watch: { 数据属性名(newValue, oldValue) { 一些业务逻辑或异步操作。 }, \u0026#39;对象.属性名\u0026#39;(newValue, oldvalue) { 一些业务逻辑或异步操作。 } } 注意：watch 中函数的名称需要与在 data 中定义的属性名称一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ user.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ user.age }}\u0026lt;/p\u0026gt; \u0026lt;textarea name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;msg\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { user: { name: \u0026#39;John\u0026#39;, age: 30 }, msg: \u0026#39;\u0026#39; } }, watch: { user(newValue, oldValue) { console.log(\u0026#39;user changed\u0026#39;); console.log(oldValue); console.log(newValue); }, msg(newValue, oldValue) { console.log(`${oldValue} changed to ${newValue}`); } }, mounted() { // 这会触发上面的 watch 回调，因为 user 的引用改变了 this.user = { name: \u0026#39;Doe\u0026#39;, age: 32 }; // 这不会触发上面的 watch 回调，因为 user 的引用没有改变 this.user.name = \u0026#39;Jane\u0026#39;; this.user.age = 31; } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：模拟实时翻译。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 接口地址：https://applet-base-api-t.itheima.net/api/translate // 请求方式：get // 请求参数： // （1）words：需要被翻译的文本（必传） // （2）lang： 需要被翻译成的语言（可选）默认值-意大利 // ----------------------------------------------- const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { words: \u0026#39;\u0026#39;, obj: { w1: \u0026#39;\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // 检测 words 的变化，一般只使用新值，因此 oldValue 可以省略 // words(newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.ne s.data.data // }, 300) // }, // 如果检测某个对象里面的子属性，只需要改名字就可以了，但在 js 中不能出现.-等符号，因此需要用 \u0026#39;\u0026#39; 包裹 \u0026#39;obj.w1\u0026#39;(newValue, oldValue) { console.log(newValue, oldValue); }, async words(newValue, oldValue) { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: { words: newValue } }) this.result = res.data.data; console.log(res.data.data); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 完整写法 语法：② 完整写法\t→\t添加额外配置项。\n(1) deep: true 对复杂类型深度监视\n(2) immediate: true 初始化立刻执行一次 handler 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 data: { obj: { words:‘苹果, lang: \u0026#39;italy\u0026#39; } }, watch: { 数据属性名: { deep: true, handler (newValue) { console.log(newValue)} } } } 完整写法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select v-model=\u0026#34;obj.lang\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;obj.words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { obj: { words: \u0026#39;\u0026#39;, lang: \u0026#39;italy\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // \u0026#39;obj.words\u0026#39; (newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, // params: { // words: newValue // } // }) // this.result = res.data.data // }, 300) // }, obj: { deep: true, // immediate: true, handler(newValue, oldValue) { console.log(newValue, oldValue); clearTimeout(this.timer); this.timer = setTimeout(async () =\u0026gt; { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: newValue }) this.result = res.data.data }, 300) } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 过滤器 对于一些需要经过复杂计算的数据绑定，简单的表达式可能无法实现，这时可以使用 vue.js 的过滤器进行处理，通过自定义过滤器可以对文本进行格式化。\n过滤器可以用在插值表达式和 v-bind 指令中，其需要在被添加在 JavaScript 表达式的尾部，由符号 | 表示，格式如下：\n1 2 3 4 \u0026lt;!-- 在插值表达式中 --\u0026gt; {{ msg | filter }} \u0026lt;!-- 在 v-bind 中 --\u0026gt; \u0026lt;div v-bind:id=\u0026#34;msg | filter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 定义过滤器有两种方式，第一种是通过全局方法 Vue.filter() 进行定义；第二种是应用选项对象中的 filters 选项进行定义。\n全局过滤器 1 2 3 4 5 Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) }); 该方法定义了一个名为 capitalize 的全局过滤器，其中，Vue.filter 方法接受两个参数，第一个参数 capitalize 是过滤器的名称，第二个参数是一个函数，这个函数会接收从模板传递过来的值，并对其进行处理。\n在该过滤器中，如果传入的 value 是假值（比如 null、undefined、空字符串等），则直接返回一个空字符串。这是为了防止在调用 toUpperCase() 方法时出现错误。\n该过滤器将传入的值转换为一个字符串，将第一个字母大写并与剩余的字符串片段拼接起来，形成一个新的字符串。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ name | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() // 将其转换为一个字符串。 return value.charAt(0).toUpperCase() + value.slice(1) // value.charAt(0) 获取字符串的第一个字符。 // toUpperCase() 将第一个字符转换为大写。 // value.slice(1) 获取除了第一个字符之外的所有字符。 }); const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { name: \u0026#39;bob\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 局部过滤器 这个局部过滤器 capitalize 只能在定义它的组件内部使用。\n1 2 3 4 5 6 7 8 9 filters: { capitalize: function (value) { // 这是定义在组件的 `filters` 选项中的一个过滤器。 // `filters` 是一个对象，其中的每个属性都是一个过滤器函数。 if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) } } 过滤器串联 1 {{ msg | filterA | filterB }} 多个过滤器可以串联使用，在串联使用过滤器时，先调用左边的过滤器，再依次往右调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ str | lowercase | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { str: \u0026#39;hElLoW woRlD!\u0026#39; }, filters: { lowercase: (str)=\u0026gt;{ return str.toLowerCase(); }, capitalize: (str)=\u0026gt;{ return str.charAt(0).toUpperCase() + str.slice(1); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：定义两个过滤器，第一个过滤器用来区分信息类别，使得不同标题的颜色不同，第二个过滤器用来将超出 15 个字符的新闻内容截取，以省略号结尾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 实现方法：\n观察代码可发现，标题颜色通过不同类来实现，因此可以使用 v-bind 绑定 class ，并使用过滤器对标题内容进行判断从而改变标题颜色。\n新闻内容可以直接使用插值表达式加过滤器的方式修改，即判断字符串的长度大于 15 时，截取字符串内容，str.slice(0, 15)，再在末尾加上 \u0026hellip;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } .omit{ width: 200px; text-overflow: ellipsis; text-wrap: nowrap; overflow: hidden; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; class=\u0026#34;omit\u0026#34;\u0026gt; \u0026lt;span :class=\u0026#34;item.title | hot\u0026#34;\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] }, filters: { hot: function (str) { switch (str) { case \u0026#39;【公告】\u0026#39;: return \u0026#39;blue\u0026#39;; case \u0026#39;【头条】\u0026#39;: return \u0026#39;red\u0026#39;; case \u0026#39;【热点】\u0026#39;: return \u0026#39;orange\u0026#39;; default: return \u0026#39;gray\u0026#39;; } }, omit: (str)=\u0026gt;{ if(str.length \u0026gt; 15){ return str.slice(0, 15) + \u0026#39;...\u0026#39;; }else{ return str; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习 创建一个数组，当点击页面内按钮时，为数组添加一个 1-100 的随机整数，并在页面内显示数组中所有元素。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;span v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/span\u0026gt; --\u0026gt; \u0026lt;button @click=\u0026#34;addRandom\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;span\u0026gt;{{list.toString()}}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // list: [15, 61, 16, 18, 65, 95] list: [] }, methods: { addRandom() { const random = Math.floor(Math.random() * 100) + 1; this.list.push(random); } } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; 随机给出一个 0 ~ 99（包括 0 和 99）的数字，然后让用户在规定的次数内猜出是什么数字。当用户随便猜一个数字输入后，游戏会提示该数字太大或太小，然后缩小结果范围，最终得出正确结果。界面设计如实验图 2-1 所示。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div { text-align: center; margin: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;猜数字游戏\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;请输入一个0-99之间的随机整数\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model.number=\u0026#34;guess\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;submit\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled v-model=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;start\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;当前还可以猜测次数：\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled :value=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;restart\u0026#34;\u0026gt;再来一局\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { random: 0, flag: true, count: 3, msg: \u0026#39;点击按钮开始游戏！\u0026#39;, guess: \u0026#39;\u0026#39;, subFlag: false }, methods: { start() { this.flag = false; this.random = Math.floor(Math.random() * 100) this.msg = \u0026#39;请输入数字！\u0026#39; }, submit() { if(this.flag == true){ alert(\u0026#39;请先点击开始按钮！\u0026#39;); return; } if (this.count == 1) { console.log(111); this.count--; this.msg = \u0026#39;次数用尽，请重新开始游戏！\u0026#39;; this.subFlag = true; return; } if (this.guess \u0026gt; this.random) { this.msg = \u0026#39;猜大了！\u0026#39;; this.count--; } if (this.guess \u0026lt; this.random) { this.msg = \u0026#39;猜小了！\u0026#39;; this.count--; } if (this.guess == this.random) { this.msg = \u0026#39;猜对了！要再来一局吗？\u0026#39;; this.subFlag = true; } }, restart(){ this.flag = true; this.count = 3; this.msg = \u0026#39;点击按钮开始游戏！\u0026#39; this.guess = \u0026#39;\u0026#39;; this.subFlag = false; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 指令输出九九乘法表。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;a in b\u0026#34;\u0026gt; \u0026lt;span v-for=\u0026#34;b in a\u0026#34;\u0026gt; {{a}} * {{b}} = {{a*b}} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { a: 9, b: 9, }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-14T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/","title":"第二章 Vue 延伸"},{"content":"Vue 简介 ​\tVue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面（基于数据渲染出用户所看到的页面）的渐进式（使用核心包进行局部模块设计改造，或利用构建工具及插件等进行工程化开发）框架（快速开发中大型项目）。\n​\t与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n1 2 3 4 5 6 title: \u0026#39;清仓大促\u0026#39;, products: [ { id: 1, name: \u0026#39;手机\u0026#39;, price: \u0026#39;1999元\u0026#39; }, { id: 2, name: \u0026#39;平板\u0026#39;, price: \u0026#39;2999元\u0026#39; }, { id: 3, name: \u0026#39;电脑\u0026#39;, price: \u0026#39;3999元\u0026#39; } ] 软件工具 VScode 下载：Visual Studio Code - Code Editing. Redefined\nNode.js Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境（后端）node.js 详解_nodejs-CSDN博客\n下载：Node.js 中文网 (nodejs.com.cn) 或 Node.js (nodejs.org)\nVue.js Vue2官网：Vue2.js (v2.cn.vuejs.org)\nVue3官网：Vue3.js - 渐进式 JavaScript 框架 | Vue3.js (cn.vuejs.org)\n引入 实例 ① 准备容器（Vue所管理的范围）\n1 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\t\u0026lt;/div\u0026gt; ② 引包（开发环境版本 ✔ / 生产环境版本）https://v2.cn.vuejs.org\n③ 创建实例\n1 const app = new Vue({}) ④ 添加配置项=\u0026gt;完成渲染\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; // 插值表达式 {{ msg }} \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 编写用于渲染的代码 --\u0026gt; {{ msg }} \u0026lt;h5\u0026gt; {{m1}} \u0026lt;/h5\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 一旦引入VueJS核心包，在全局环境，就有了Vue构造函数 const app = new Vue({ // el建立关联 el: \u0026#39;#app\u0026#39;, // data提供数据 data: { msg: \u0026#39;Hello World\u0026#39;, m1: \u0026#39;this is m1\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 插值表达式 ⭐ 插值表达式是一种 Vue 的模板语法\n① 作用： 利用表达式进行插值，渲染到页面中\n​\t表达式：是可以被求值的代码，JS 引擎会将其计算出一个结果\n② 语法： {{ 表达式 }}\n1 2 3 4 5 6 7 8 9 10 11 12 13 ## 下列差值表达式，书写正确的有哪些？ \u0026lt;h3\u0026gt;{{ title }}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{ nickname.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ age \u0026gt;= 18 ? \u0026#39;成年\u0026#39; : \u0026#39;未成年\u0026#39; }}\u0026lt;/P\u0026gt; \u0026lt;p\u0026gt;{{ obj.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; \u0026lt;p title=\u0026#34;{{ uesrname }}\u0026#34;\u0026gt;HelloWorld\u0026lt;/p\u0026gt; ③ 注意点：\n​\t(1) 使用的数据必须存在\n​\t(2) 支持的是表达式，而非语句，比如：if 或 for 等\n​\t(3) 不能在标签属性中使用 {{ }} 插值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;app\u0026#39;\u0026gt; \u0026lt;p\u0026gt;{{ m1.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ m1 + \u0026#34; and green\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.age - age }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ name + \u0026#39;和\u0026#39; + friend.name + \u0026#39;是朋友\u0026#39; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.gender }}\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;red\u0026#39;, age: \u0026#39;17\u0026#39;, name: \u0026#39;张三\u0026#39;, friend: { name: \u0026#39;李四\u0026#39;, age: \u0026#39;18\u0026#39;, hobby: \u0026#39;篮球\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t练习差值表达式。\nVue 响应式特性 响应式：数据发生变化，视图自动更新\n​\t① 访问数据：\u0026ldquo;实例.属性名\u0026rdquo;\n​\t② 修改数据：\u0026ldquo;实例.属性名\u0026rdquo; = \u0026ldquo;值\u0026rdquo;\n当我们修改数据时，Vue 监听到数据修改，在底层进行 Dom 操自动更新视图。\n开发者工具安装 极简插件官网_Chrome插件下载_Chrome浏览器应用商店 (zzzmh.cn)\n创建 Vue 工程（废案） 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\n​\tnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n​\t查看 npm 代理 → npm config get registry\n​\t更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n自己动手编写一个 App 组件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;你好啊！\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; export default { name:\u0026#39;App\u0026#39; //组件名 } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .app { background-color: #ddd; box-shadow: 0 0 10px; border-radius: 10px; padding: 20px; } \u0026lt;/style\u0026gt; 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 中是通过 createApp 函数创建一个应用实例。 Vue 指令 Vue 会根据不同的 【指令】（带有 v- 前缀的特殊标签属性。），针对标签实现不同的 【功能】。\nv-html 插值表达式不具备解析标签的能力，v-html 相当于动态的设置元素的 innerHTML。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; {{m1}} {{m2}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;\u0026lt;a href=\u0026#34;https://www.baidu.com/\u0026#34;\u0026gt;百度官网\u0026lt;/a\u0026gt;\u0026#39;, m2: \u0026#39;\u0026lt;p\u0026gt;这是一个段落\u0026lt;/p\u0026gt;\u0026#39; } }) \u0026lt;/script\u0026gt; ------------------------------------------------------------------------------------- \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; \u0026lt;div v-html=\u0026#34;m1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div v-html=\u0026#34;m2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; v-show 和 v-if ⭐ 作用：控制元素显示或者隐藏，其中 v-show 仅控制显示隐藏，而 v-if 本质上为条件渲染。\n语法：v-show/v-if = \u0026quot;表达式\u0026quot;\t表达式的值为 true 则显示该元素，为 false 则隐藏。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 500px; height: 300px; line-height: 300px; text-align: center; margin: 30px 0px 30px 200px; border: 5px solid black; font-size: 50px } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;div v-show=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-show\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-if\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const test = new Vue({ el: \u0026#39;#test\u0026#39;, data: { m1: false, m2: true } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\tv-show 通过切换 css 中的 display：none 来控制元素显示或隐藏，v-if 根据判断条件渲染或者销毁元素；由于渲染元素需要消耗资源，因此 v-show 适用于频繁切换显示隐藏效果的场景，如购物车列表，下拉栏等，v-if 适用于广告栏，提示登录或注册等情况。\nv-else 和 v-else-if 作用：辅助 v-if 进行判断渲染。\n语法： v-else\tv-else-if = \u0026quot;表达式\u0026quot;，需要紧挨着 v-if 一起使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;姓名：{{name}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;gender === 1\u0026#34;\u0026gt;性别：♂ 男\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;性别：♀ 女\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;年龄：{{age + \u0026#39;岁\u0026#39;}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;math + chinese + english \u0026gt;= 270\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩优秀\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 240\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较好\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 210\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩一般\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 180\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较差\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;完了\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { name: \u0026#39;张三\u0026#39;, age: 19, gender: 1, math: 95, chinese: 75, english: 86 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on ⭐ 缩写：@\n预期：Function | Inline Statement | Object\n参数：event\n修饰符：\n.stop - 调用 event.stopPropagation()。 .prevent - 调用 event.preventDefault()。 .capture - 添加事件侦听器时使用 capture 模式。 .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。 .native - 监听组件根元素的原生事件。 .once - 只触发一次回调。 .left - (2.2.0) 只当点击鼠标左键时触发。 .right - (2.2.0) 只当点击鼠标右键时触发。 .middle - (2.2.0) 只当点击鼠标中键时触发。 .passive - (2.3.0) 以 { passive: true } 模式添加侦听器 用法：\n绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。\n用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。\n在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event property：v-on:click=\u0026quot;handle('ok', $event)\u0026quot;。\n从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。\n语法：\n① 事件名 = \u0026ldquo;内联语句\u0026rdquo;（添加监听）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @mouseenter=\u0026#34;count--\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{{ count }}\u0026lt;/span\u0026gt; \u0026lt;button v-on:click=\u0026#34;count++\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { count: 100 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：使用 v-on 写一个抽取随机数字的程序。\n​int randomInt = (int)(Math.random() * (35 - 10 + 1)) + 10;\n// 输出结果为：10 到 34 的随机整数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34; @click=\u0026#34;count = Math.floor(Math.random() * (35 - 1 + 1)) + 1;\u0026#34;\u0026gt;抽取一个幸运同学\u0026lt;/button\u0026gt; {{count}} \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t = new Vue({ el: \u0026#39;#test\u0026#39;, data: { count: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t② 事件名 = \u0026ldquo;methods中的函数名\u0026rdquo;（提供处理逻辑）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { color: rgb(50, 209, 50); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;func\u0026#34;\u0026gt;切换显示隐藏\u0026lt;/button\u0026gt; \u0026lt;h1 v-show=\u0026#34;flag\u0026#34;\u0026gt;Vue\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app4 = new Vue({ el: \u0026#39;#app\u0026#39;, data: { flag: true }, methods: { func() { console.log(\u0026#39;执行函数func\u0026#39;) this.flag = !this.flag } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on 调用传参 在 mothods 中创建带参方法，使用 v-on 绑定点击事件，完成自动贩售机案例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { border: 3px solid #000000; border-radius: 10px; padding: 20px; margin: 20px; width: 200px; text-align: center; } h3 { margin: 10px 0 20px 0; } p { margin-left: 70px; } button { margin: 5px 1px 0px 0px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;24小时自动贩售机\u0026lt;/h3\u0026gt; \u0026lt;button @click=\u0026#34;buy(3)\u0026#34;\u0026gt;可口可乐3元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(7)\u0026#34;\u0026gt;雀巢咖啡7元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(6)\u0026#34;\u0026gt;光明牛奶6元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(9)\u0026#34;\u0026gt;珍珠奶茶9元\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;当前余额：{{ money }}元\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { money: 100 }, methods: { buy(price) { this.money -= price } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind ⭐ 缩写：:\n预期：any (with argument) | Object (without argument)\n参数：attrOrProp (optional)\n修饰符：\n.prop - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(差别在哪里？) .camel - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持) .sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。 用法：\n动态的设置 html 的标签属性，如 src，url，title 等。\n在绑定 class 或 style attribute 时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。\n在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。\n没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。\n语法：\nv-bind : 属性名 = \u0026ldquo;表达式\u0026rdquo;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;img v-bind:src=\u0026#34;url\u0026#34; :title=\u0026#34;title\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t1 = new Vue({ el: \u0026#39;#test\u0026#39;, data: { url: \u0026#39;/MyPra/img/4f385747a4a5f33cbd1ee49224725e42a69dfd2852e57-BI49c0.png\u0026#39;, title: \u0026#39;水滴\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习：编写程序，通过按钮来切换图片。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img { height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026gt; 0\u0026#34; @click=\u0026#34;index--\u0026#34;\u0026gt;上一页\u0026lt;/button\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img :src=\u0026#34;list[index]\u0026#34; :title=\u0026#34;desc\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026lt; list.length - 1\u0026#34; @click=\u0026#34;index++\u0026#34;\u0026gt;下一页\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc: \u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 作用：基于数据循环，多次渲染整个元素，如数组、对象、数字等。\n语法：v-for = \u0026quot;(item, index) in 数组\u0026quot;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 索引号为 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [15, 64, 32, 48, 29] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：使用 v-for 渲染书籍列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div li span { line-height: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.name}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{book[index].author}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { book: [ { id: 1, name: \u0026#39;《红楼梦》\u0026#39;, author: \u0026#39;曹雪芹\u0026#39; }, { id: 2, name: \u0026#39;《西游记》\u0026#39;, author: \u0026#39;吴承恩\u0026#39; }, { id: 3, name: \u0026#39;《水浒传》\u0026#39;, author: \u0026#39;施耐庵\u0026#39; }, { id: 4, name: \u0026#39;《三国演义》\u0026#39;, author: \u0026#39;罗贯中\u0026#39; } ] }, methods: { del(id) { // 优先使用id来删除 console.log(\u0026#39;删除id为\u0026#39; + id + \u0026#39;的元素\u0026#39;); this.book = this.book.filter(item =\u0026gt; item.id !== id); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 的默认行为会尝试原地修改元素（就地复用)。\n可以使用 key 属性给列表项添加的唯一标识，便于 Vue 进行列表项的正确排序复用。\n​\t① key 的值只能是字符串或数字类型\n​\t② key 的值必须具有唯一性\n​\t③ 推荐使用 id 作为 key (唯一)，不推荐使用 index 作为 key (会变化，不对应)\nv-for 中的 key\n​\t语法：key = \u0026quot;唯一标识\n​\t在上述案例中，为第一个 li 元素加上 background: pink ，删除 li 元素，添加 key 属性进行比较。\n1 \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; v-model ⭐ 作用：给表单元素使用，双向数据绑定（视图变化数据自动更新），可以快速获取或设置表单元素内容。\n语法：v-model = '变量'\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; 账户：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;input type=\u0026#34;password\u0026#34; v-model=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;login\u0026#34;\u0026gt;登录\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, password: \u0026#39;\u0026#39; }, methods: { login() { console.log(this.username, this.password) }, reset() { this.username = \u0026#39;\u0026#39; this.password = \u0026#39;\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例练习 图片切换 编写程序，当鼠标滑入图片时切换图片，且能够循环切换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img{ height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;list[index%5]\u0026#34; @mouseenter=\u0026#34;index++\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc:\u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 备忘录 案例模板：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;1.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;周三下午开会\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; 1 \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 编写程序，完成数据显示、数据统计、添加、删除、清空等功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;noteMain\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34; v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;{{index+1}}.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;{{item.name}}\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34; v-show=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; {{list.length}} \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34; @click=\u0026#34;clear\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;周三下午开会\u0026#39; }, { id: 2, name: \u0026#39;周末出去吃火锅\u0026#39; }, { id: 3, name: \u0026#39;周五前提交作业\u0026#39; }, { id: 4, name: \u0026#39;放假期间完成三门功课预习\u0026#39; } ], input:\u0026#39;\u0026#39; }, methods:{ del(id){ console.log(id) this.list = this.list.filter(item =\u0026gt; item.id !== id) }, add(){ if(this.input === \u0026#39;\u0026#39;){ alert(\u0026#39;请输入正确的内容\u0026#39;) return } this.list.unshift({ id: +new Date(), name: this.input }) this.input = \u0026#39;\u0026#39; }, clear(){ this.list = [] } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 选择题 在 Vue 中，被用来响应地更新 HTML 属性的指令是（）。\nA. v-on\nB. v-if\nC. v-bind\nD. v-model\n在 Vue 中，下列不属于条件渲染指令的是（）。\nA. v-if\nB. v-else\nC. v-show\nD. v-on\n在Vue中，下列关于Vue实例对象说法不正确的是（）。\nA. Vue 实例对象是通过 new Vue({ }) 方式创建的。\nB. Vue 实例对象只允许有唯一的一个根标签。\nC. 通过 methods 参数可以定义事件处理函数。\nD. Vue 实例对象中 data 数据不具有响应特性。\nVue中表单元素上数据双向绑定的指令是（）。\nA. v-if\nB. v-show\nC. v-model\nD. v-for\n在Vue中，以下表达式正确的是（）。\nA. {{ if(ok) return msg }}\nB. {{ var str = \u0026ldquo;你好\u0026rdquo; }}\nC. {{ ok ? \u0026ldquo;Yes\u0026rdquo; : \u0026ldquo;No\u0026rdquo; }}\nD. {{ msg, num }}\n在Vue中，以下关于 Vue 插值下列说法错误的是（）。\nA. {{ 文本 }} 用于插入与绑定文本。\nB. {{ 表达式 }} 可以使用 JavaScript 表达式进行简单的运算。\nC. {{ }} 中只支持单个表达式。\nD. {{ }} 支持语句和流控制。\n在Vue中，当遍历大数组或者做大量计算时，使用一下哪个选项效率最高。\nA. methods\nB. computed\nC. components\nD. data\nVue常用选项参数中必须的参数是（）。\nA. data\nB. el\nC. mothods\nD. filters\n在Vue中，下列说法正确的是（）。\nA. vue 是后端框架。\nB. vue 是基于 jQuery 开发的框架。\nC. vue 是前端框架。\nD. 以上说法都不对。\n在Vue中，下列说法错误的是（）。\n1 2 3 \u0026lt;div v-show=\u0026#39;flag\u0026#39;\u0026gt;使用v-show控制\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#39;flag\u0026#39;\u0026gt;使用v-if控制\u0026lt;/div\u0026gt; A. 当 flag 是 true 时，两个 div 都能显示出来。\nB. 当 flag 是 false 时，第一个 div 进行了渲染。\nC. 当 flag 是 false 时，第一个 div 设置了 display: none。\nD. 当 flag 是 false 时，第二个 div 设置了 visible: hidden。\n在 HTML 页面中，下列选项不属于键盘相关事件的是（）。\nA. onkeyup。\nB. onkeydown。\nC. oncontextmenu。\nD. onkeypress。\n在 Vue 中，能够实现页面单击事件绑定的代码是（ ）。\nA. v-on:enter。\nB. v-on:click。\nC. v-on:mouseenter。\nD. v-on:doubleclick。\nvue 实现随机抽题 见 JavaScript 第二章 WebAPI（二）2.1.1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 800px; height: 400px; border: 2px solid black; text-align: center; font-size: 36px; position: absolute; } .msg { height: 150px; } button { width: 100px; height: 50px; font-size: 30px; position: relative; top: 100px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{msg}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;start\u0026#34; @click=\u0026#34;b1\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;end\u0026#34; @click=\u0026#34;b2\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;结束\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { ques: [ \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, \u0026#39;v-on 的作用是什么？缩写是什么？\u0026#39;, \u0026#39;v-for 多次渲染元素的语法是？\u0026#39;, \u0026#39;:src=\u0026#34;list[index]\u0026#34; 使用的是哪个 vue 指令？\u0026#39;, \u0026#39;vue 中哪个指令可以实现数据双向绑定？\u0026#39;, ], random: 0, s1: 0, msg: \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, }, methods: { b1() { console.log(this.ques[2]); const start = document.querySelector(\u0026#39;.start\u0026#39;); const end = document.querySelector(\u0026#39;.end\u0026#39;); s1 = setInterval(this.r1, 30); }, b2() { clearInterval(s1); this.ques.splice(this.random, 1); }, r1(){ const p = document.querySelector(\u0026#39;p\u0026#39;); this.random = Math.floor(Math.random() * this.ques.length); this.msg = this.ques[this.random]; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-07T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/","title":"第一章 Vue 基础"},{"content":"接口测试技术 接口测试概念 接口一般又称为 API ，全称为 Application Programming Interface，人们无时不刻不在使用 Interfaces，例如乘坐电梯里面的按钮是一个 Interface，开车的油门也是 Interface，计算机操作系统也有很多的接口。\n接口测试是指 系统或组件之间进行信息交互的通道 。在软件开发的过程中，随着项目需求越来越多，软件的功能会越来越复杂，接口也会不断增多，为了确保软件系统中的接口能够正常进行 信息交互和传输数据 ，就需要开展接口测试。\n接口测试是对系统组件间接口进行的测试，其原理是模拟客户端向服务端发送请求，服务器接收到请求后进行相应的业务处理，并向客户端返回响应数据。\n测试人员在进行接口测试时，需要关注软件系统中被测接口之间数据的传递、交换和控制管理过程，以及接口与接口之间是否存在逻辑依赖关系，并检测服务器向客户端返回的相应数据是否符合预期结果。\n通过工具实现接口测试 常用的接口测试工具有 Postman、JMeter 等。\nJMeter 是 Apache 基于 Java 开发的一款免费开源工具，它支持多个协议，具有丰富的第三方插件，不仅可以进行性能测试，而且可以进行接口测试。\nPostman 是一款简单易操作的接口测试工具，支持批量运行、保存历史记录，容易学习。\n通过代码实现接口测试 测试人员使用 Java、Python 等语言编写代码也可以实现接口测试，在使用 Java 语言编写接口测试的代码时，通常需要结合 HttpClient 技术；在使用 Python 语言编写接口测试的代码时，通常需要结合 Request 框架。\n虽然通过代码实现接口测试能够让测试人员与开发人员使用相同的技术栈，更好地对接测试流程，但是这种方式要求测试人员具备一定的编程能力，难度较大。\n接口类型 HTTP 接口 HTTP 协议是建立在 TCP 协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次 HTTP 请求。HTTP 会通过 TCP 建立起一个到服务器的连接通道，当获取本次请求需要的数据后，HTTP 会立即将 TCP 连接断开，这个过程是很短的。所以 HTTP 连接是一种短连接，是一种无状态的连接。\nWeb Service 接口 Web Service 是一种跨编程语言和跨操作系统平台的远程调用技术。Web Service 使用了最初设计用于人机交流的基于 HTTP 的 Web 技术，用于系统间以 XML 进行通讯。\nWeb Service 有以下特征：\n可以用于互联网或局域网、使用标准 XML 消息系统、跨编程语言跨操作系统、通过 XML 语法自描述、可以通过简单的查找机制发现。\nRPC 接口 RPC（Remote Procedure Calls，远程过程调用）是一种协议，程序可以使用这种协议向网络中的另一台计算机上的程序请求服务。由于使用 RPC 的程序不必了解支持通信的网络协议的情况，因此 RPC 提高了程序的互操作性。\n在 RPC 中，发出请求的程序是客户程序，提供服务的程序是服务器。RPC 是一项广泛用于支持分布式应用程序的技术，主要目的是为组件提供一种相互通信的方式，是这些组件之间能够相互发出请求并传递这些请求的结果。\nRMI 接口 \u0026hellip;\nRESTful 接口 \u0026hellip;\n网络基础 TCP/IP 计算机与网络设备要相互通信，双方就必须基于相同的方法。比如如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信、不同的硬件与操作系统之间怎么通信等，所有的这一切都需要一种规则，这种规则被称为 协议 （protocol）。\n像这样把与互联网相关联的协议集合起来总称 TCP/IP 协议族，其最重要的一点是分层。TCP/IP 协议族按层次分为 应用层、传输层、网络层、数据链路层 。\n应用层 应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务，比如FTP（File Transfer Protocol，文件传输协议）、DNS（Domain Name System，域名系统）、HTTP 协议。\n传输层 传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。\n网络层 网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位，该层规定了通过怎样的路径（传输路线）到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。\n数据链路层 用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡）、光纤等物理可见部分（还包括连接器等一切传输媒介），硬件上的范畴均在链路层的作用范围之内。\nTCP 三次握手 为了准确无误地将数据送达目标处，TCP 协议采用了 三次握手 策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志 —— SYN（synchronize） 和 ACK（acknowledgement）。\n发送端首先发送一个带 SYN 标志的数据包给对方 接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息 发送端再回传一个带 ACK 标志的数据包，代表“握手”结束 若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。\nTCP 四次挥手 确保当前数据完全被接收后再关闭连接，TCP协议采用 四次挥手 策略。\n客户端向服务器发送一个数据包，主动断开连接（序列号 X），客户端仍可接收数据。\n服务器向客户端发送确认包，表明服务器已经收到客户端的报文（序列号X + 1）。服务器告知客户端数据没有发送完毕，暂时不能进行第三次挥手。\n服务器向客户端发送数据包和确认包，用来停止向客户端发送数据（序列号Y）。服务器告知客户端数据已发送完毕，可以断开链接。\n客户端向服务器发送一个响应数据包（序列号Y + 1 ），规定时间后发送确认包并进入关闭状态。\n负责域名解析的 DNS 服务 DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务，如通过域名查找 IP 地址，或逆向从 IP 地址反查域名。\n计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名，DNS 服务就是为了解决计算机对域名的理解。\nHTTP 协议 统一资源定位符 URI （统一资源标识符）是 Uniform Resource Identifier 的缩写。\nUniform：规定统一的格式处理多种不同类型的资源，不用根据上下文环境来识别资源指定的访问方式。 Resource：资源的定义是“可标识的任何东西”，不仅是文档文件、图像或服务等。 Identifier：可标识的对象，也称为标识符。 URI 就是由某个协议方案表示的资源的定位标识符 ，协议方案是指访问资源所使用的协议类型名称，如采用 HTTP 协议时，协议方案就是 http，除此之外，还有 ftp、mailto、file、telnet 等。\nURI 用字符串标识某一互联网资源，而 URL 表示资源的地点 （互联网上所处的位置），所以 URL 是 URI 的子集。\n1 2 3 4 5 6 7 协议://hostname[:port]/path[?查询参数1\u0026amp;查询参数2] 协议://域名+端口号/资源路径+参数 https://www.bilibili.com/movie/?spm_id_from=333.1007.0.0 http://127.0.0.1:5500/test.html **协议：**数据传输的格式，如 http、https 等。\n**服务器地址：**域名或 IP，.com域名是使用最早也最广泛的域名，还有例如表示工商企业的 .top，表示网络提供商的 .net，表示非盈利组织的 .org 等。\n**端口：**应用程序对外访问的唯一标识，常用端口号有 80（http）、443（https），协议默认的端口号可以省略，如 https://www.baidu.com/:443。\n**资源路径：**主机资源的具体地址，包括目录和文件名等，用 \u0026ldquo;/\u0026rdquo; 隔开，如 /movie。\n**参数：**客户端向服务器传递的数据，参数与路径之间用 \u0026ldquo;?\u0026rdquo; 符号隔开，多个参数之间用 \u0026ldquo;\u0026amp;\u0026rdquo; 符号隔开。\nHTTP 请求 HTTP 协议和 TCP/IP 协议族内的其他众多的协议相同，用于客户端和服务器之间的通信。\nHTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的， 服务器端在没有接收到请求之前不会发送响应 。\n请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。\n**请求行：**位于请求数据的第一行，作用是说明请求方法、访问的资源、协议版本，常用的请求方法如下：\n请求方法 说明 GET 用于请求服务器获取指定的资源 POST 用于请求服务器提交指定的资源 PUT 用于请求服务器更新指定的资源 DELETE 用于请求服务器删除指定的资源 **请求头：**位于第二行到空白行之间，作用是通知服务器客户端的请求信息，请求头部由键值对组成，每行一对，常见的请求头字段如下：\n请求头字段 说明 Host 表示接收请求的服务器地址 User-Agent 表示产生请求的浏览器地址 Accept 表示客户端可以识别的内容类型列表 Content-Type 表示请求体数据的类型 Accept-Encoding 表示服务器可以发送的数据压缩格式 Accept-Language 表示服务器可以发送的语言 Connection 指定与连接相关的属性 **请求体：**位于空白行之后，是传输给服务器数据的实体，常在 POST、PUT 方法中使用，常配合的请求头有 content-type 和 content-length，，参数 content-type 用于规定请求体数据类型，取值类型有 text/html、image/jpeg、application/json、application/x-www-form-urlencoded、multipart/form-data 等，请求报文中可以没有请求体。\nHTTP 响应 响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。\n**状态行：**位于响应数据的第一行，用来描述服务器的处理结果，由协议版本号、状态码、状态消息组成，其中状态码由三位数字组成，第一个数字定义响应类别。\n响应类型 含义 1xx 表示指示信息 2xx 表示请求成功 3xx 表示请求重定向 4xx 表示客户端错误 5xx 表示服务器错误 在接口测试中，常见的状态码和描述如下：\n状态码 描述 200 OK，客户端请求成功 400 Bad Request，客户端请求有语法错误 401 Unauthorized，客户端请求未经授权 403 Forbidden，服务器收到请求，但是拒绝提供服务 404 Not Found，客户端请求的资源不存在 500 Internal Server Error，服务器发生错误 503 Server Unavailable，服务器当前不能处理客户端的请求 **响应头：**响应头是指服务器对客户端请求的应答信息，它位于状态行的下方，主要由键值对组成，与 HTTP 协议中的请求头类似，常见的响应头字段如下：\n请求头字段 说明 Server 表示服务器用到的软件信息 Content-Type 表示服务器实际返回给客户端的内容类型 Connection 表示服务器与客户端的连接类型 Connection-Length 表示服务器告知浏览器需要接收的数据长度 Connection-Language 表示服务器可以识别的内容语言列表 Accept-Encoding 表示服务器可以发送的数据压缩格式 **响应体：**响应体是服务器发送到客户端的实际内容，它位于响应头的下方，响应体的内容类型由响应头中的 Content-Type 指定。\n使用开发者工具进行抓包 打开浏览器访问指定网页，按键盘上的 F12 键，或者邮件空白处选择打开开发者工具，单击 “Network” 可以查看抓取的相关数据信息。\n其中，“ALL” 或者 “全部” 是默认被选中的，由于先访问网页再打开开发者工具，所以没有显示抓取的请求资源信息，此时需要刷新浏览器，重新抓取请求资源信息。\nPostman 入门 Postman 是谷歌开发的一款用于网页调试和接口测试的工具，Postman 能够模拟客户端发送 HTTP 请求至服务器，同时能够接收服务器返回的 HTTP 响应。测试人员通过验证接收到的响应数据是否与预期数据一致，从而判定接口数据是否存在缺陷。\n安装 Postman 进入 Postman 官网 Postman API Platform | Sign Up for Free，选择 windows 版本，单击 Windows 64-bit 按钮后即可下载 Postman 安装包。\n运行程序，如果没有账号可以点击 Create Free Account 注册账号，完成后进入主页面。\n点击左侧栏的扩展符号可以管理选项：\nCollections：表示集合，可以对项目模块中的接口进行分类和管理。 APIs：表示应用程序接口，用于定义集合和环境。 Environments：表示环境，可以定义全局变量和环境变量。 Mock Servers：表示模拟服务器。 Monitors：表示监听器，能够定期运行集合中的请求。 Flows：表示流程，能够通过逻辑连接请求模拟实际项目中的流程。 History：表示历史记录。 发送第一个 HTTP 请求 创建集合 在 Postman 的主窗口中，首先单击左侧的 Collection 选项，然后单击 Collection 选项右侧的加号图标即可创建集合 New Collection。\n添加 HTTP 请求 点击 New Collection 条目右侧的省略号，在下拉表中选择 Add request 选项即可添加一个 HTTP 请求。\n添加的 HTTP 请求默认名称为 New Request，默认的请求方法为 GET，在 New Request 下方可以根据实际测试需求设置请求方法和请求地址。\n请求方法和请求地址下方的标签的具体介绍如下：\nParams：表示参数，单击该标签可以在下方设置请求地址参数。 Authorization：表示授权，单击该标签可以了解授权信息，通常在发送请求时，在其下方会自动生成授权的请求头。 Headers：表示请求头，单击该标签可以在下方设置请求头。 Body：表示请求体，单击该标签可以在下方设置请求体参数。 Pre-request Script：表示预请求脚本，单击该标签可以在下方编写预请求脚本代码。 Tests：表示测试，单击该标签可以在下方编写测试脚本代码，例如断言代码、关联代码等。 Settings：表示设置，单击该标签可以在下方进行相关的设置操作，例如启用 SSL 证书验证、自动跟随重定向等。 在创建 HTTP 请求时，默认选中的标签为 “Params”，接口测试的过程中，常用的标签分别是 “Params”、“Headers”、“Body”、“Tests”。\n填写百度网站的请求信息并发送请求。 在上述步骤后，设置请求方法为 “GET”，将请求地址设置为 www.baidu.com，点击 “Save” 按钮或者通过 “Ctrl + S” 保存，最后单击 “Send” 按钮发送请求。\n可以看到在响应结果区域的右上角显示了 “200 OK”，说明请求发送成功，在 “Body” 下方展示了具体的响应结果，说明服务器已经接收到客户端的请求信息，并成功将响应结果返回给客户端。\nPostman 的基本使用 Postman 断言 断言是程序中的一种逻辑判断式，目的是验证软件开发的预期结果与实际结果是否一致。\n常用的断言有 响应状态码断言、包含指定字符串断言、JSON 数据断言 等。\n响应状态码断言 响应状态码断言是对 HTTP 响应的状态码进行断言。在 Postman 中，有 2 种方式实现响应状态码断言。\n第一种方式是在 HTTP 请求中单击 “Test” 标签，在其下方空白区域手动编写响应状态码断言的代码；\n第二种是首先在 HTTP 请求中单击 “Test” 标签，然后单机 Postman 主窗口右侧的 “Staus code:Code is 200”，自动生成响应状态码断言的代码模板。\n1 2 3 pm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); 代码中，pm 是一个实例，表示 Postman，test() 是 pm 实例中的一个测试方法，该方法有 2 个参数，分别是 \u0026ldquo;function () {pm.response.to.have.status(200);}\u0026rdquo; 和 \u0026ldquo;Status code is 200\u0026rdquo; ，具体说明如下：\n\u0026ldquo;Status code is 200\u0026rdquo;：该参数的作用是显示断言结果的文字，可以根据实际测试需求自定义，不会影响断言结果。 \u0026ldquo;function () {pm.response.to.have.status(200);}\u0026quot;：该参数是一个匿名函数，作用是判断响应结果中的状态码是否是 200。 包含指定字符串断言 包含指定字符串断言是指对 HTTP 响应中的某个字符串进行断言，可以手动编写，也可以选择主窗口右侧的 “Response body:Contains string” 自动生成模板。\n1 2 3 pm.test(\u0026#34;Body matches string\u0026#34;, function () { pm.expect(pm.response.text()).to.include(\u0026#34;string_you_want_to_search\u0026#34;); }); \u0026ldquo;function(){pm.expect(pm.response.text()).to.include(\u0026rdquo;\u0026hellip;\u0026rdquo;);})\u0026quot;：该参数用于断言响应文本中是否包含想要搜索的字符串，其中 \u0026ldquo;string_you_want_to_search\u0026rdquo; 需要根据接口文档的描述修改为预期结果。 \u0026ldquo;Body matches string\u0026rdquo;：该参数用于显示断言结果的提示文字，可以根据实际测试需求自定义，不会影响断言结果。 JSON 数据断言 JSON 数据断言是对 HTTP 响应中的 JSON 数据进行断言，可以手动编写，也可以选择主窗口右侧的 “Response body:JSON value check” 自动生成模板。\n1 2 3 4 pm.test(\u0026#34;Your test name\u0026#34;, function () { var jsonData = pm.response.json(); pm.expect(jsonData.value).to.eql(100); }); \u0026ldquo;function () {var jsonData = pm.response.json();pm.expect(\u0026hellip;).to.eql(100);})\u0026quot;：该参数用于将响应结果中的 JSON 数据全部赋值给变量 jsonData， 其中 \u0026ldquo;pm.expect(jsonData. value).to.eql(100)\u0026rdquo; 用于断言响应结果中 JSON 数据的值 value 是否等于 100。在实际接口测试中需要根据接口文档的描述填写 value 及对应的值。 \u0026ldquo;Your test name\u0026rdquo;：该参数用于像是断言结果的提示文字，可以根据实际测试需求自定义，不会影响断言结果。 Postman 关联 在接口测试中，关联是指两个或两个以上的接口相互依赖关系，例如，某个接口请求地址中的参数是另一个接口的影响结果中的数据，则说明这两个接口之间存在关联关系。\n在使用 Postman 做接口测试时，实现接口关联的方式是在 Postman 中设置环境变量或全局变量，具体实现步骤如下：\n（1）获取第 1 个接口请求的响应结果。\n（2）提取响应结果中的某个字段，将其保存到 Postman 环境变量或全局变量中。\n（3）在第 2 个接口的请求地址中引用环境变量或全局变量，引用方式为 \u0026ldquo;{{环境变量或全局变量}}\u0026quot;。\nPostman 参数化 Postman 生成测试报告 API 接口服务系统 启动系统 下载压缩包 bysms.zip，解压bysms.zip后，进入bysms目录，双击运行 runserver.bat 即可启动系统。\n启动系统后会弹出一个窗口，不要关闭，否则 web 系统会停止。\n如果启动运行 出现闪退或者如下错误提示，很可能 是因为web服务的80端口已经被使用了。\n1 2 3 **!!! runtime error: invalid memory address or nil pointer dereference Serve HTTP on 0.0.0.0:80 listen tcp 0.0.0.0:80: bind: An attempt was made to access a socket in a way forbidden by its access permissions 两种解决方法：\n请检查关闭占用 80 端口的程序，可能是 Apache、IIS 等 web 服务。 修改 bysms 使用的 web 服务端口，可以用 文本编辑器编辑 runserver.bat，如果你是 Mac 电脑，修改 runserver.sh。 1 2 3 解决方法：将端口号 80 修改成其他端口 bysms.exe 0.0.0.0:80\t→\tbysms.exe 0.0.0.0:8047 保存后，重新运行即可，注意，修改后访问网址要加上端口号，http://127.0.0.1:8047\n构建 HTTP 请求 根据协议规范， HTTP头里面的 Content-Type 字段指明消息体格式，比如 urlencoded 为 application/x-www-form-urlencoded，json 为 application/json，当请求被发送的时候，Postman会根据你设定的消息体格式，自动加上对应的 Content-Type 消息头。\n以 bysms 系统为例， 登录接口消息体的格式是 urlencoded， 所以，Postman中应该这样设置。\n而添加客户接口消息体的格式是 json， 所以，Postman中应该这样设置。\n系统接口文档 本接口中，所有请求 ( 除了登录请求之外 )，必须在 cookie 中携带有登录的成功后，服务端返回的 sessionid。\n登录系统 请求消息\n1 2 POST /api/mgr/signin HTTP/1.1 Content-Type: application/x-www-form-urlencoded 请求参数\nhttp 请求消息 body 中 参数以 格式 x-www-form-urlencoded 存储，需要携带如下参数：\nusername\n用户名。\npassword\n密码。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果登录成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示登录成功，如果登录失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;用户名或者密码错误\u0026#34; } ret 不为 0 表示登录失败， msg 字段描述登录失败的原因。\n列出客户 请求消息\n1 GET /api/mgr/customers HTTP/1.1 请求参数\nhttp 请求消息 url 中需要携带如下参数：\naction\n必填项，填写值为 list_customer。\npagesize\n必填项，分页的每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;江苏省常州武进市白云街44号\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;武进市 袁腾飞\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13886666666\u0026#34; }, { \u0026#34;address\u0026#34;: \u0026#34;北京海淀区\u0026#34;, \u0026#34;id\u0026#34;: 4, \u0026#34;name\u0026#34;: \u0026#34;北京海淀区代理 蔡国庆\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13990123456\u0026#34; } ] , \u0026#39;total\u0026#39;: 2 } ret 为 0 表示登录成功，total 为 2 表示系统中全部（不仅仅是这一页）有多少客户，retlist 里面包含了所有的客户信息列表，每个客户信息以如下格式存储：\n1 2 3 4 5 6 { \u0026#34;address\u0026#34;: \u0026#34;江苏省常州武进市白云街44号\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;武进市 袁腾飞\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13886666666\u0026#34; } 添加一个客户 请求消息\n1 2 POST /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加客户的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_customer\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;武汉市桥西医院\u0026#34;, \u0026#34;phonenumber\u0026#34;:\u0026#34;13345679934\u0026#34;, \u0026#34;address\u0026#34;:\u0026#34;武汉市桥西医院北路\u0026#34; } } 其中 action 字段固定填写 add_customer 表示添加一个客户，data 字段中存储了要添加的客户的信息。\n其中 name 字段长度范围是 2-20，phonenumber 字段长度范围是 8-15，address 字段长度范围是 2-100。\n服务端接受到该请求后，应该在系统中增加一位这样的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加客户的 id 号。\n如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;客户名已经存在\u0026#34; } ret 不为 0 表示登录失败， msg 字段描述登录失败的原因。\n修改客户信息 请求消息\n1 2 PUT /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带修改客户的信息，消息体的格式是 json，如下示例：\n1 2 3 4 5 6 7 8 9 { \u0026#34;action\u0026#34;:\u0026#34;modify_customer\u0026#34;, \u0026#34;id\u0026#34;: 6, \u0026#34;newdata\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;武汉市桥北医院\u0026#34;, \u0026#34;phonenumber\u0026#34;:\u0026#34;13345678888\u0026#34;, \u0026#34;address\u0026#34;:\u0026#34;武汉市桥北医院北路\u0026#34; } } 其中 action 字段固定填写 modify_customer 表示修改一个客户的信息，id 字段为要修改的客户的 id 号，newdata 字段中存储了修改后的客户的信息。\n服务端接受到该请求后，应该在系统中做相应修改。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果修改成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果修改失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;客户名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n删除客户信息 请求消息\n1 2 DELETE /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除客户的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;del_customer\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中 action 字段固定填写 del_customer 表示删除一个客户，id 字段为要删除的客户的 id号。\n服务端接受到该请求后，应该在系统中尝试删除该 id 对应的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id为 566 的客户不存在\u0026#34; } ret 不为 0 表示失败， msg字段描述添加失败的原因。\n列出药品 请求消息\n1 GET /api/mgr/medicines HTTP/1.1 请求参数\nhttp 请求消息 url 中 需要携带如下参数：\naction\n必填项，填写值为 list_medicine。\npagesize\n必填项，分页的每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ {\u0026#34;id\u0026#34;:1, \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;sn\u0026#34;:\u0026#34;234324234234\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;青霉素\u0026#34;}, {\u0026#34;id\u0026#34;:2, \u0026#34;name\u0026#34;: \u0026#34;红霉素\u0026#34;, \u0026#34;sn\u0026#34;:\u0026#34;234545534234\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;红霉素\u0026#34;} ] , \u0026#39;total\u0026#39;: 2 } ret 为 0 表示登录成功，total 为 2 表示总共有多少药品，retlist 里面包含了所有的药品信息列表，每个药品信息以如下格式存储：\n1 {\u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;红霉素\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;234545534234\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;红霉素\u0026#34;} 添加一个药品 请求消息\n1 2 POST /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加药品的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_medicine\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;青霉素 国字号\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;099877883837\u0026#34; } } 其中，action 字段固定填写 add_medicine 表示添加一个药品，data 字段中存储了要添加的药品的信息。\nname 字段长度范围是 2-20，desc 字段长度范围是 2-500，sn 字段长度范围是 8-20。\n服务端接受到该请求后，应该在系统中增加这样的药品。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为 添加药品的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;药品名已经存在\u0026#34; } ret 不为 0 表示失败， msg字段描述添加失败的原因。\n修改药品信息 请求消息\n1 2 POST /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加药品的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_medicine\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;青霉素 国字号\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;099877883837\u0026#34; } } 其中，action 字段固定填写 add_medicine 表示添加一个药品，data 字段中存储了要添加的药品的信息。\nname 字段长度范围是 2-20，desc 字段长度范围是 2-500，sn 字段长度范围是 8-20。\n服务端接受到该请求后，应该在系统中增加这样的药品。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加药品的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;药品名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n删除药品信息 请求消息\n1 2 DELETE /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除客户的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;del_customer\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中，action 字段固定填写 del_customer 表示删除一个客户，id 字段为要删除的客户的id号。\n服务端接受到该请求后，应该在系统中尝试删除该 id 对应的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id 为 566 的客户不存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n列出订单 请求消息\n1 GET /api/mgr/orders HTTP/1.1 请求参数\nhttp 请求消息 url 中 需要携带如下参数：\naction\n必填项，填写值为 list_order。\npagesize\n必填项，分页的 每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ {id: 1, name: \u0026#34;华山医院订单001\u0026#34;, create_date: \u0026#34;2018-12-26T14:10:15.419Z\u0026#34;, customer_name: \u0026#34;华山医院\u0026#34;, customerid : 13, medicinelist: \u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:3,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; }, {id: 2, name: \u0026#34;华山医院订单002\u0026#34;, create_date: \u0026#34;2018-12-27T14:10:37.208Z\u0026#34;, customer_name: \u0026#34;华山医院\u0026#34;, customerid : 13, medicinelist: \u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:4,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; } ] } ret 为 0 表示登录成功，retlist 里面包含了所有的订单信息列表，每个订单信息以如下格式存储：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;华山医院订单002\u0026#34;, \u0026#34;create_date\u0026#34;: \u0026#34;2018-12-27T14:10:37.208Z\u0026#34;, \u0026#34;customer_name\u0026#34;: \u0026#34;华山医院\u0026#34;, \u0026#34;customerid\u0026#34; : 13, \u0026#34;medicinelist\u0026#34;:\u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:4,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; } 其中 medicinelist 里面的 amount 表示药品数量 ， id 表示药品的id， name 是药品名称，注意，这个 medicinelist 值是另外一个 json 格式的字符串。\n###0 添加一个订单\n请求消息\n1 2 POST /api/mgr/orders HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加订单的信息，消息体的格式是 json，如下示例：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;action\u0026#34;:\u0026#34;add_order\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;华山医院订单002\u0026#34;, \u0026#34;customerid\u0026#34;:3, \u0026#34;medicinelist\u0026#34;:[ {\u0026#34;id\u0026#34;:16,\u0026#34;amount\u0026#34;:\u0026#34;5\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;环丙沙星\u0026#34;}, {\u0026#34;id\u0026#34;:15,\u0026#34;amount\u0026#34;:\u0026#34;5\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;克林霉素\u0026#34;} ] } } 其中，action 字段固定填写 add_order 表示添加一个订单，data 字段中存储了要添加的订单的信息。\n订单名称 name 字段长度范围是 2-100，medicinelist 是订单中药品的信息列表，amount 表示数量，name表示名称。\n服务端接受到该请求后，应该在系统中增加这样的订单。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加订单的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;订单名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述失败的原因。\n###1 删除订单\n请求消息\n1 2 DELETE /api/mgr/orders HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除订单的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;delete_order\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中，action 字段固定填写 delete_order 表示删除一个订单，id 字段为要删除的订单的id号。\n服务端接受到该请求后，应该在系统中尝试删除该id对应的订单。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，id 为添加订单的 id 号，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id为 566 的订单不存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述失败的原因。\n案例练习 创建一个集合（Collection），在该集合中创建一个 HTTP 请求，访问任意网站，并通状态码断言和包含指定字符串断言判断通信是否成功。\n创建 http 请求，使用正确的账号密码登录系统，返回 ret:0 则表示登录成功。\n创建 http 请求，列出所有客户。\n创建 http 请求，添加一个客户，客户名为长沙市中心医院。\n创建 http 请求，列出所有订单。\n创建 http 请求，添加一个订单，订单中客户为长沙市中心医院。\n创建 http 请求，添加一个订单，订单中客户为香港大学深圳医院。\n创建 http 请求，将长沙市中心医院的订单删除。\n","date":"2024-09-13T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/86aae82b21d34acb81f164634b54504e_hu_dfa23e215e3c8219.webp","permalink":"http://localhost:1313/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/","title":"第四章 接口测试"},{"content":"白盒测试又称为透明盒测试、结构测试，它基于程序的内部逻辑结构进行测试，而不是程序的功能（黑盒测试）。因此，进行白盒测试时，测试人员需要了解程序的内部逻辑结构，根据使用的编程语言设计测试用例。白盒测试可用于单元测试、集成测试和系统测试。白盒测试的方法包括基本路径法、逻辑覆盖法、程序插桩法。\n基本路径法 基本路径法概述 基本路径法是一种将程序的流程图转化为程序控制流图，并在程序控制流图的基础上，分析被测程序控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例的方法。\n使用基本路径法设计的测试用列需要确保被测程序中的每条可执行语句至少被执行一次。\n使用基本路径法设计测试用例主要包括4个步骤，具体如下。\n1．画出流程图\n首先需要分析被测程序的源代码，并画出程序的流程图。\n2．画出控制流图\n控制流图是描述程序控制流的一种图示方法，由程序流程图转化而来。如果测试的源程序的代码简洁，也可以直接通过分析源程序的代码画出控制流图。\n在画程序的控制流图时，使用圆圈表示一条或多条无分支的语句；使用箭头表示控制流方向。程序中常见的控制流图如下所示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 顺序结构 int a = 1; int b = 2; int c = a + b; // if条件语句结构 if (a \u0026lt; b) { a = 0; b = b + 1; } else { a = b; } // while循环语句结构 while (a \u0026lt; b) { a = a + 1; } c = a + b; // until/do-while循环语句结构 do { a = a + 3; } while (a \u0026lt; 100); 图中，圆圈称为控制流图的节点，通常表示程序流程图中的矩形或菱形，箭头称为控制流图的边或连接，由边和节点限定的范围称为区域。\n3．计算程序的圈复杂度⭐\n圈复杂度是一种代码复杂度的衡量标准，用来衡量一个模块的复杂程度。通过计算程序的圈复杂度可以得到程序基本的独立路径数目，从而确定测试用例的数目。\n计算程序圈复杂度的方法有3种，具体如下：\n使用公式计算：V(G)=E-N+2，其中V(G)表示程序的圈复杂度，E表示控制流图中边的数量，N表示控制流图中节点的数量。 使用公式计算：V(G)=P+1，P表示控制流图中判定节点的数量。在控制流图中，当一个节点分出2条或多条指向其他节点的边时，这个节点就是一个判定节点。 程序的圈复杂度等于控制流图中的区域数量。 图中，一共有10条边、8个节点、4个区域，其中判定节点有3个，分别是1、2、4。\n如果使用 V(G)=E-N+2 计算圈复杂度，则 V(G)=10-8+2=4；\n如果使用 V(G)=P+1 计算圈复杂度，则 V(G)=3+1=4；\n由于计算区域包括控制流图外部的区域，所以区域数量为4，圈复杂度也为4；\n由此可见，通过这3种方法计算出的圈复杂度的结果都是相同的。\n4．设计测试用例\n根据计算出的程序圈复杂度导出基本可执行路径集合，从而设计测试用例的输入数据和预期结果。以图中的控制流图为例，由于圈复杂度为4，所以可以得到4条独立的路径，具体如下。\n路径1：1→7。 路径2：1→2→3→7。 路径3：1→2→4→5→8→1→7。 路径4：1→2→4→6→8→1→7。 根据以上4条独立的路径即可设计测试用例，从而确保每一条路径都能被执行。\n5．将程序流程图转换为控制流程图\n将程序流程图转化为控制流图时，在顺序结构、if 条件语句结构、while 循环语句结构、until 循环语句结构和多分支选择语句结构中，分支的汇聚处需要有一个汇聚节点。如果判断条件表达式是由一个或多个逻辑运算符（如or、and）连接的复合条件表达式，则需要将其修改为只有单个条件的嵌套判断。\n实例：判断是否是闰年 当年份能够被 4 但不能被 100 整除时为闰年，或者年份能够被 400 整除时为闰年，据此可以设计判断输入的年份是否为闰年的 C 语言程序代码，具体代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // 引入C语言的头文件 #include \u0026lt;stdio.h\u0026gt;\t#include \u0026lt;stdlib.h\u0026gt; // 定义了main()函数主函数，是所有程序运行的入口 int main()\t{ // 定义了2个int类型的变量，分别是year和leap int year, leap;\t// 分别调用print()函数和scanf()函数，用于输出结果\tprintf(\u0026#34;Enter year:\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;year);\tif(year % 4 == 0) { if(year % 100 == 0) { // 判断变量year是否能被4、100、400整除 if(year % 400 == 0)\tleap = 1; else // 能够被400整除的数一定能被4和100整除 leap = 0;\t} else // 能被4和100整除的数不一定能被400整除 leap = 1;\t} else leap = 0; // leap=0为平年，leap=1为闰年\treturn 0; } 通过分析上述代码画出程序的流程图和控制流程图。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.util.Scanner; public class runnian { public static void main(String[] args) { System.out.printf(\u0026#34;请输入年份：\u0026#34;); Scanner sc = new Scanner(System.in); int year = sc.nextInt(); int result = 0; // if (year % 4 == 0) { // if (year % 100 == 0) { // if (year % 400 == 0) { // result = 1; // } // } else { // result = 1; // } // } if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)){ result = 1; } if (result == 1) { System.out.println(year + \u0026#34;年是闰年\u0026#34;); } else { System.out.println(year + \u0026#34;年是平年\u0026#34;); } } } 图中，一共有10条边、8个节点、4个域，其中判定节点有3个，分别是1、3、4，程序的圈复杂度为4。\n根据圈复杂度可以得到4条独立的路径，具体如下：\n路径1：1→2→8\n路径2：1→3→4→6→8\n路径3：1→3→4→7→8\n路径4：1→3→5→8\n根据这4条独立路径即可设计测试用例。\n实例：while循环+if循环 根据下列代码，绘制程序流程图，控制流程图，计算程序的圈复杂度，设计测试用例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void sort(int a, int b) { int x = 0; int y = 0; while (a \u0026gt; 0) { if (b == 0) { x = y + 2; break; } else if (b == 1) { x = x + 10; } else { x = x + 20; } } } 实例：更复杂的控制流程图 根据代码右侧的步骤注释绘制控制流程图，计算程序的圈复杂度。\n逻辑覆盖法 语句覆盖 语句覆盖（Statement Coverage）又称行覆盖、段覆盖、基本块覆盖，它是最常见的覆盖方式之一。\n语句覆盖的目的是测试程序中的代码是否被执行，它只测试代码中的执行语句，这里的执行语句不包括头文件注释、空行等。\n语句覆盖在多分支的程序中只能覆盖某一条路径，使得该路径中的每一个语句至少被执行一次，不会考虑各种分支组合的情况。\n现有程序伪代码如下：\n1 2 3 4 if x \u0026gt; 0 and y \u0026lt; 0 z = z - (x - y) if x \u0026gt; 2 or z \u0026gt; 0 z = z + (x + y) 根据程序伪代码可以画出流程图：\n图中，a、b、c、d、e表示程序执行分支，Y表示条件成立，N表示条件不成立。在语句覆盖测试用例中，应使程序中的每个可执行语句至少被执行一次，根据图中标示的语句执行路径设计测试用例，具体如下。\n1 test1：x=3 y=-1 z=2 执行上述测试用例，程序的执行路径为 a→\u0026gt;c→e。\n可以看出程序中 a→c→e 路径上的每个语句都能被执行，但是语句覆盖无法全面反映多分支的逻辑，仅仅执行一次不能进行全面覆盖。因此，语句覆盖是弱覆盖方法。\n语句覆盖虽然可以测试执行语句是否被执行，但无法测试程序中存在的逻辑错误，例如，如果上述程序中的逻辑判断符号 “and” 误写成 “or”，使用测试用例 test1 同样可以覆盖 a→c→e 路径上的全部执行语句，但无法发现错误。\n同样，如果将 x\u0026gt;0 误写成 x\u0026gt;=0，使用同样的测试用例 test1 也可以执行 a→c→e 路径上的全部执行语句，但无法发现 x\u0026gt;=0 的错误。\n语句覆盖无须详细考虑每个判断表达式，可以直观地在源程序中有效测试执行语句是否全部被覆盖。由于程序在设计时语句之间存在许多内部逻辑关系，而语句覆盖不能发现其中存在的缺陷，所以语句覆盖并不能满足白盒测试中测试所有逻辑语句的基本需求。\n判定覆盖 判定覆盖（Decision Coverage）又称为分支覆盖，其原则是设计足够多的测试用例，在测试过程中保证每个判定条件至少有一次为真值、有一次为假值。\n判定覆盖的作用是使真假分支均被执行，虽然判定覆盖比语句覆盖测试能力强，但仍然具有与语句覆盖一样的单一性。\n由表可知，这 4个测试用例分别覆盖了 a→c→d、a→b→d、a→c→e、a→b→e执行语句路径，使得每个判定条件的取值满足了各有一次真与一次假。相比于语句覆盖，判定覆盖的覆盖范围更广。\n判定覆盖虽然保证了每个判定条件至少有一次为真值、有一次为假值，但是没有考虑到程序内部的取值情况，例如测试用例 test4，没有将 x\u0026gt;2 作为条件进行判断，仅仅判断了条件 z\u0026gt;0。\n判定覆盖语句一般是由多个逻辑条件组成的，如果仅仅判断测试程序执行的最终结果而忽略每个条件的取值，必然会遗漏部分测试路径。因此，判定覆盖也属于弱覆盖。\n条件覆盖 条件覆盖（Condition Coverage）是指设计足够多的测试用例，使判定语句中的每个逻辑条件取真值与取假值至少出现一次，例如，对于判定语句（a\u0026gt;1 or c\u0026lt;0）中存在 a\u0026gt;1 和 c\u0026lt;0 这 2 个逻辑条件，设计条件覆盖测试用例时，要保证 a\u0026gt;1、c\u0026lt;0 的真值、假值至少出现一次。\n设计测试用例时，要保证每种状态至少出现一次。\n可以看出，S1、S2、S3、S4、-S1、-S2、-S3、-S4 都至少出现了一次，但执行路径没有覆盖到 a→c→d。\n判断——条件覆盖 判定——条件覆盖（Decision-Condition Coverage）要求设计较多的测试用例，使得判定语句中所有条件的可能取值至少出现一次，同时，所有判定语句的可能结果也至少出现一次。\n例如，对于判定语句 if(a\u0026gt;1 and c\u0026lt;1)，该判定语句有 a\u0026gt;1、c\u0026lt;1 这2个条件，则在设计测试用例时，要保证 a\u0026gt;1 和 c\u0026lt;1 这 2 个条件取真值、假值至少一次，同时，判定语句 if(a\u0026gt;1and c\u0026lt;1) 取真值、假值也至少出现一次。判定——条件覆盖弥补了判定覆盖和条件覆盖的不足之处。\n相比条件覆盖、判定覆盖，判定——条件覆盖弥补了前两者的不足，但是由于判定——条件覆盖没有考虑判定语句与条件判断的组合情况，其覆盖范围并没有比条件覆盖更全面，判定——条件覆盖也没有覆盖 a→c→d 路径，因此判定——条件覆盖也存在遗漏测试的情况。\n条件组合覆盖 条件组合覆盖（Multiple Condiion Coverage）是指设计足够多的测试用例，使判定语句中每个条件的所有可能情况至少出现一次，并且每个判定语句本身的判定结果也至少出现一次。\n它与判定——条件覆盖的区别是它不是简单地要求每个条件都出现真与假 2 种结果，而是要求让这些结果的所有可能组合都至少出现一次。\n以上述程序为例，程序中共有4个条件：x\u0026gt;0、y\u0026lt;0、x\u0026gt;2、z\u0026gt;0。S1、S2、S3、S4 表示条件成立，-S1、-S2、-S3、-S4 表示条件不成立。\nS1 和 S2 属于同一个判定语句，有 4 种组合情况：S1/S2、S1/-S2、-S1/S2、-S1/-S2；\nS3 和 S4 属于同一个判定语句，有 4 种组合情况：S3/S4、S3/-S4、-S3/S4、-S3/-S4。\n在执行程序时，只要能分别覆盖2个判定语句的组合情况即可（出现一次），因此，条件组合覆盖至少要 4 个测试用例。\n设计测试用例如下：\n与判定——条件覆盖相比，条件组合覆盖包括了所有判定——条件覆盖，因此它的覆盖范围更广。但是当程序中的条件比较多时，条件组合的数量会呈线性增长，组合情况非常多，要设计的测试用例也会增加，这样反而会使测试效率降低。\n实例：三角形的判定覆盖 根据三角形三边关系可知可能出现4种情况：不构成三角形、一般三角形、等腰三角形、等边三角形。据此实现一个判断三角形的程序。\n程序插桩法 程序插桩法是一种被广泛使用的软件测试技术,简单来说，程序插桩法就是往被测试程序中插入测试代码，以达到测试目的的方法，插入的测试代码被称为探针。根据测试代码插入的时间不同可以将程序插桩法分为目标代码插桩和源代码插桩。\n目标代码插桩 目标代码插桩是指向目标代码（即二进制代码）插入测试代码，以获取程序运行信息的测试方法，也称为动态程序分析方法。在进行目标代码插桩之前，测试人员要对目标代码的逻辑结构进行分析，从而确认需要插桩的位置。\n目标代码插桩对程序运行时的内存监控、指令跟踪、错误检测等有着重要意义。相比于逻辑覆盖法，目标代码插桩在测试过程中不需要重新编译代码或链接程序，并且目标代码的格式与具体的编程语言无关，主要与操作系统相关，因此目标代码插桩被广泛使用。\n目标代码插桩的原理 目标代码插桩的原理是在程序运行平台和底层操作系统之间建立中间层，通过中间层检查执行程序、修改指令，开发人员、软件分析工程师等对运行的程序进行观察，判断程序是否被恶意攻击或者出现异常行为，从而提高程序的整体质量。\n目标代码插桩的两种方式 由于目标代码是可执行的二进制代码，所以目标代码的插桩可分为两种方式。\n第1种方式是对未运行的目标代码插桩，首先从头到尾插入测试代码，然后执行程序。这种方式适用于需要实现完整系统或仿真（模拟真实系统）时进行的代码覆盖测试。\n第2种方式是向正在运行的程序插入测试代码，用来检测程序在特定时间的运行状态信息。\n目标代码插桩的执行模式 目标代码插桩具有以下3种执行模式。\n（1）即时模式（Just-In-Time Mode）\n原始的二进制或可执行文件没有被修改或执行，将修改部分的二进制代码以副本的形式存储在新的内存区域中，在测试时仅执行修改部分的目标代码。\n（2）解释模式（Interpretation Mode）\n在解释模式中目标代码被视为数据，测试人员插人的测试代码作为目标代码指令的解释语言。每当执行一条目标代码指令时，程序就会在测试代码中查找并执行相应的替代指令，测试通过替代指令的执行信息就可以获取程序的运行信息。\n（3）探测模式（Probe Mode）\n探测模式使用新指令覆盖旧指令进行测试，这种模式在某些体系结构（如x86体系结构）中比较适用。\n目标代码插桩工具 由于目标程序是可执行的二进制文件，人工插人代码是无法实现的，所以目标代码插桩一般通过相应的插桩工具实现，插桩工具提供的 API（Application Program Interace，API）可以为用户提供访问指令。\n常见的目标代码插桩工具主要有 Pin-A Dynamic Binary Instrumentation Tool（Pin）和 DynamoRIO。\n源代码插桩 源代码插桩是指对源文件进行完整的词法、语法分析后，确认插桩的位置，插入探针代码（测试代码）。相比目标代码插桩，源代码插桩具有针对性和更高的精确性，实现复杂度更低。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \u0026lt;stdio.h\u0026gt; // 定义ASSERT(y) #define ASSERT(y) if(y){\tprintf(\u0026#34;出错文件: %s\\n\u0026#34;, _FILE_);\\ printf(\u0026#34;在%d行: \\n\u0026#34;, _LINE_\\); printf(\u0026#34;提示: 除数不能为0! \\n\u0026#34;);\\ } int main() { int x, y; printf(\u0026#34;请输入被除数: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); printf(\u0026#34;请输入除数: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;y); // 插入的桩(即探针代码) ASSERT(y == 0);\tprintf(\u0026#34;%d\u0026#34;, x/y); return 0; } 为了监视除法运算中的除数输入是否正确，在第14行插入宏函数ASSERT(y==0)，当除数为0时输出错误原因、出错文件、出错所在行的行号等提示信息。宏函数 ASSERT(y)中使用了C语言标准库的宏定义 \u0026ldquo;__FILE__\u0026rdquo; 提示出错文件、\u0026quot;__LINE__\u0026quot; 提示文件出错位置。\n程序运行后，提示输入被除数和除数，在输入除数后，程序的宏函数ASSERT(y)判断除数是否为0，若除数为0则输出错误信息，程序运行结束；若除数不为0，则进行除法运算并输出计算结果。根据除法运算程序设计测试用例，除法运算测试用例如下表所示。\n对插桩后的 C语言源程序进行编译、链接，生成可执行文件并执行，然后输入表中的测试数据，可以观察测试用例的实际执行结果与预期结果是否一致。\n程序的目标代码插桩与源代码插桩测试方法有效提高了代码测试覆盖率，但是使用插桩测试方法会出现代码膨胀、执行效率低下、HeisenBugs等问题。一般情况下插桩后的代码膨胀率在 20%~40%，甚至能达到100%，导致插测试失败。\n黑盒测试和白盒测试的异同 测试目标 黑盒测试过程中不用考虑程序内部的逻辑结构，仅仅需要验证程序外部功能是否符合用户实际需求。黑盒测试可以发现以下3种类型的缺陷。\n外部逻辑功能缺陷，例如界面显示信息错误、输入框中无法输入内容等 兼容性错误，例如系统版本不支持、运行环境不支持等。 性能问题，例如运行速度慢、响应时间长等。 白盒测试与黑盒测试不同，白盒测试可以设计测试用例尽可能覆盖程序中的分支语句，用于分析程序内部的逻辑结构。白盒测试常用于以下2种情况。\n源程序中含有多个分支，在设计测试用例时要尽可能覆盖所有分支，提高测试覆盖率。 检查内存泄漏。黑盒测试只能在程序长时间运行中发现内存泄漏问题，而白盒测试能立即发现内存泄漏问题。 测试阶段 黑盒测试与白盒测试在不同的测试阶段的使用情况也不同，在测试过程中，黑盒测试与白盒测试结合使用会大幅提升软件测试质量。\n本章习题 填空题 语句覆盖的目的是测试程序中的代码是否被执行，它只测试代码中的（ 执行语句 ）。\n（ 判定覆盖 ）的作用是使真、假分支均被执行。\n（ 条件覆盖 ）是指判定语句中的每个条件都要取真值、假值各一次。\n对于判定语句 if(a\u0026gt;1 and c\u0026lt;1)，测试时要保证 a\u0026gt;1、c\u0026lt;1 两个条件取真值、假值至少一次，同时，判定语句 if(a\u0026gt;1 and c\u0026lt;1)取真值、假值也至少一次，这使用了（ 判断——条件 ）覆盖方法。\n（ 条件组合覆盖 ）要求判定语句中所有条件取值的可能组合至少出现一次。\n判断题 语句覆盖无法考虑分支组合情况。（ √ ）\n语句覆盖可以测试程序中的逻辑错误。（ × ）\n判定——条件覆盖没有考虑判定语句与条件判断的组合情况。（ × ）\n圈复杂度用来衡量一个模块判定结构的复杂程度。（ √ ）\n选择题 下列选项中，哪一项不属于逻辑覆盖法（ D ）？\nA. 语句覆盖\nB. 条件覆盖\nC. 判定覆盖\nD.判定——语句覆盖\n关于逻辑覆盖法，下列说法中错误的是（ C ）。\nA.语句覆盖的语句不包括空行、注释等\nB.相比于语句覆盖，判定覆盖考虑到了每个判定语句的取值情况\nC.条件覆盖考虑到了每个逻辑条件的取值的所有组合情况\nD.在逻辑覆盖法中，条件组合覆盖是覆盖率最大的测试方法\n关于圈复杂度的计算，下列说法中正确的是（ D ）。\nA. 圈复杂度的数量等于控制流图中的节点数量\nB. 使用 V(G)=P+1 可以计算圈复杂度，其中 P 表示控制流图中边的数量\nC. 使用 V(G)=E-N+2 可以计算圈复杂度，其中 E 表示控制流图中节点的数量，N 表示控制流图中边的数量\nD. 圈复杂度等于控制流图中的区域数量\n","date":"2024-08-28T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/86aae82b21d34acb81f164634b54504e_hu_dfa23e215e3c8219.webp","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/","title":"第三章 白盒测试方法"},{"content":"等价类划分法 ⭐ 等价类划分法概述 等价类划分法是一种常用的黑盒测试方法，它主张从大量的数据中选择一部分数据用于测试，即尽可能使用最少的测试用例覆盖最多的数据，以发现更多的软件缺陷。\n使用等价类划分法测试程序需要经过划分等价类和设计测试用例2个步骤，其中等价类可以划分为有效等价类与无效等价类。\n有效等价类指有效值的集合，这些有效值是符合程序要求、合理且有意义的输入数据；\n无效等价类指无效值的集合，这些无效值是不符合程序要求、不合理或无意义的输入数据。\n在划分等价类时，需要遵守以下4个原则：\n（1） 如果程序要求输入值是一个有限区间的值，则可以将输入数据划分为1个有效等价类和2个无效等价类，有效等价类为指定区间中的值的集合，2个无效等价类分别为有限区间两边的值的集合。例如，某程序要求输入值x的范围为[1,100]，则有效等价类为1\u0026lt;=x\u0026lt;=100，无效等价类为x\u0026lt;1和 x\u0026gt;100。\n（2） 如果程序要求输入值“必须成立”，则可以将输入数据划分为1个有效等价类和1个无效等价类。例如，某程序要求密码正确，则正确的密码属于有效等价类，错误的密码属于无效等价类。\n（3） 如果程序要求输入值是一组可能的值，或者要求输入值必须符合某个条件，则可以将输入数据划分为1个有效等价类和1个无效等价类。例如，某程序要求输入数据必须是以数字开头的字符串，则以数字开头的字符串属于有效等价类，不以数字开头的字符串属于无效等价类。\n（4） 如果在某一个等价类中，每个输入值在程序中的处理方式都不相同，则应将该等价类划分成更小的等价类，并建立等价类表。\n实例一：QQ账号合法性的等价类划分 要求：QQ账号是6~10位自然数，在登录QQ时，根据QQ账号的长度判断QQ账号的合法性。\n等价类 说明 有效等价类 6~10位自然数 无效等价类 少于6位自然数（包括0位） 无效等价类 多于10位自然数 无效等价类 6~10位非自然数 无效等价类 少于6位非自然数（包括0位） 无效等价类 多于10位非自然数 基于等价类划分法设计QQ账号的测试用例：\n测试用例编号 用例标题 项目/模块 优先级 前置条件 测试步骤 测试数据 预期结果 Tec_acc_001 账号适长 账号 / 已打开\u0026hellip; 先打开\u0026hellip; 12345678 账号合法 Tec_acc_002 账号过短 \u0026hellip; / \u0026hellip; \u0026hellip; 123 不合法 \u0026hellip; 账号过长 / 12345678910 \u0026hellip; \u0026hellip; 适长非法 / abc\u0026laquo;\u0026lt; \u0026hellip; \u0026hellip; 过短非法 / 空值 \u0026hellip; Tec_acc_006 过长非法 / abc\u0026laquo;\u0026lt;abc\u0026laquo;\u0026lt; \u0026hellip; 实例二：三角形问题的等价类划分 要求：程序要求输入3个数作为三角形的3条边，判断这3个数构成的是一般三角形、等边三角形、等腰三角形，还是无法构成三角形。\n等价类 说明 有效等价类 输入3个数 无效等价类 输入0个数 无效等价类 输入1个数 无效等价类 输入2个数 无效等价类 输入大于3个数 在上述有效等价类“输入3个数”中，又可以分为：\n等价类 说明 有效等价类 3个数都是正数 无效等价类 3个数中有1个数小于0 无效等价类 3个数中有2个数小于0 无效等价类 3个数都小于0 在上述有效等价类“3个数都是正数”中，又可以分为：\n等价类 说明 有效等价类 任意2个数之和大于第3个数（能构成三角形） 无效等价类 有2个数之和小于第3个数（不能构成三角形） 在上述有效等价类“任意2个数之和大于第3个数”中，又可以分为：\n等价类 说明 有效等价类 恰好只有2个数相等（等腰三角形） 有效等价类 3个数均相等（等边三角形） 无效等价类 3个数均不相等（普通三角形） 综上，可以总结三角形问题的等价类表如下：\n基于等价类划分法设计三角形问题的测试用例：\n实例三：余额宝提现的等价类划分 余额宝的提现方式有2种：快速到账（2小时），每日最高提现额度为 10000元；普通到账，可提取金额为余额宝中的最大余额，但到账时间会慢一些。\n对余额宝的提现功能进行测试，首先对余额宝提现功能进行等价类划分。\n对于快速到账：\n等价类 说明 有效等价类 0 \u0026lt; 提现金额 \u0026lt;= 10000 无效等价类 提现金额 \u0026lt;= 0 无效等价类 提现金额 \u0026gt;= 10000 无效等价类 提现金额 \u0026gt;= 余额 对于普通到账：\n等价类 说明 有效等价类 0 \u0026lt; 提现金额 \u0026lt;= 余额 无效等价类 提现金额 \u0026lt;= 0 无效等价类 提现金额 \u0026gt;= 余额 基于等价类划分法设计余额宝提现的测试用例：\n边界值分析法 ⭐ 边界值分析法概述 边界值分析法是对软件的输入或输出边界进行测试的一种方法，它通常作为等价类划分法的一种补充测试方法。对于软件来说，错误经常发生在输入或输出值的关键点，即从符合需求到不符合需求的关键点，因此边界值分析法在等价类的边界上执行软件测试工作，它的所有测试用例都是在等价类的边界处设计的。\n在等价类划分法中，无论是输入值还是输出值，都会有多个边界，而边界值分析法是在这些边界附近寻找某些点作为测试值，而不是在等价类内部选择测试值。在使用边界值分析法时，可以通过确定边界的3个点来设计测试用例，这3个点分别是上点、离点和内点。\n上点是指边界上的点，离点是指距离边界最近的点，内点是指需求给定范围内的点。\n在等价类中选择边界值时，如果输入条件规定了取值范围或取值个数，则在选取边界值时可选取5个测试值或7个测试值。\n如果选取5个测试值，即在2个边界值内选取5个测试值：最小值、略大于最小值、正常值、略小于最大值、最大值。例如，输入条件规定取值范围为1~100，则可以选取1、1.1、50、99.9和100作为测试值。\n如果选取7个测试值，则在取值范围两侧再各选取一个测试值，这7个测试值分别是略小于最小值、最小值、略大于最小值、正常值、略小于最大值、最大值、略大于最大值，对于上述输入条件，可选取0.9、1、1.1、50、99.9、100和100.1作为测试值。\n如果软件要求输入或输出是一组有序集合（如数组、链表等），则可选取第一个和最后一个元素作为测试值。如果被测试程序中有循环，则可选取第0次、第1次与最后2次循环作为测试值。除了上述讲解到的边界值选取外，软件还有其他边界值的选取情况，在对软件进行测试时，要仔细分析软件规格需求，找出其可能的边界条件。\n边界值分析法只在边界取值上考虑测试的有效性。相对于等价类划分法来说，它的执行更加简单易行，但缺乏充分性，不能整体、全面地测试软件，因此它通常作为等价类划分法的补充测试方法。\n实例一：QQ账号合法性的边界值分析 要求：QQ账号是6~10位自然数，在登录QQ时，根据QQ账号的长度判断QQ账号的合法性。\n测试用例如下所示：\n测试用例编号 用例标题 项目/模块 优先级 前置条件 测试步骤 测试数据 预测结果 Tec_acc_001 上点（6） 账号 / 已打开\u0026hellip; 先打开\u0026hellip; 123456 合法 Tec_acc_002 上点（10） \u0026hellip; / \u0026hellip; \u0026hellip; 1234567890 合法 \u0026hellip; 离点（5） / 12345 不合法 \u0026hellip; 离点（7） / 1234567 合法 \u0026hellip; 离点（9） / 123456789 合法 Tec_acc_006 离点（11） / 12345678910 不合法 Tec_acc_007 内点（8） / 12345678 合法 实例二：三角形问题的边界值分析 要求：输入3个数作为三角形的3条边，判断这3个数构成的是一般三角形、等边三角形、等腰三角形，还是无法构成三角形。\n要求：三边取值范围为1~100。\n实例三：余额宝提现的边界值分析 要求：快速到账额度为 10000元；普通到账可提取金额为余额宝中的最大余额。\n因果图法与决策表法 等价类划分法与边界值分析法主要侧重于输入条件，却没有考虑输入条件之间的关系，例如，组合关系、约束关系等。由于程序输入之间有作用关系，等价类划分法与边界值分析法很难描述输入之间的作用关系，无法保证测试效果，所以需要学习一种新的方法来描述多个输入之间的作用关系，即因果图法。\n因果图法概述 在因果图法中，原因表示输入条件，结果表示输入执行后得到的输出，最终根据因果图法的分析绘制决策表。决策表法适用于检查程序输入条件的各种组合情况。\n例如，某一软件要求输入的地址具体到市区，例如 “北京→昌平区” “天津→南开区”，其中第二个输入受到第一个输入的约束，输人的城区只能在输入的城市中选择，否则输入的地址无效。\n像这样多个输入之间有相互制约关系的情况，就无法使用等价类划分法和边界值分析法设计测试用例。因果图法就是为了解决多个输入之间的作用关系而产生的测试用例设计方法。\n因果图中的关系 因果图使用一些简单的逻辑符号和直线将程序的原因（输入）与结果（输出）连接起来，一般原因用c表示，结果用 e 表示，c 与 e 可以取值 “0” 或 “1”，其中 “0” 表示状态不出现，“1” 表示状态出现。\n输入与输出之间有恒等、非、或、与这4种关系。\n恒等： 在恒等关系中，要求程序有一个输入和一个输出，输出与输入保持一致。若c为1，则e也为1；若c为0，则e也为0。\n非： 使用符号“~”表示，在非关系中，要求程序有一个输入和一个输出，输出是输入的取反。若为1，则e为0；若c为0，则e为1。\n或： 使用符号“∨”表示，或关系可以有多个输入，只要这些输入中有一个为1，则输出为1，否则输出为0。\n与： 使用符号“∧”表示，与关系也可以有多个输入，但只有这些输入全部为1，输出才能为1，否则输出为0。\n多个输入之间的约束关系 在软件测试中，如果程序有多个输入，那么除了输入与输出之间的作用关系外，这些输入之间往往也会存在某些依赖关系，即某些输入条件本身不能同时出现或某一种输入可能会影响其他输入。\n例如，某一软化用于统计体检信息，在输入个人信息时，性别只能输入男或女，这2种输入不能同时存在，而且如果输入性别为女，那么体检项就会受到限制。\n这些依赖关系在软件测试中称为“约束”，约束的类别可分为4种：异、或、唯一、要求。\nE（Exclusive，异）： a和b中最多只能有一个为1，即a和b 不能同时为1。\nI（At Least One，或）： a、b和c中至少有一个必须是1，即a、b、c不能同时为0。\nO（One and Only One，唯一）： a和b中有且仅有一个为1。\nR（Require，要求）： a和b必须保持一致，即a为1时，b也必须为1， a为0时，b也必须为0。\n强制约束关系 除了输入条件，输出条件之间也会相互约束。输出条件的约束只有一种，即 M（Mask，强制）。\n在输出条件的强制约束关系中，如果a为1，则b强制为0，如果a为0，则b强制为1。\n决策表法概述 在实际测试中，如果输入条件较多，再加上各种输人与输出之间的相互作用关系，画出的因果图就会比较复杂，让人不易理解。为了避免这种情况出现，测试人员往往使用决策表法代替因果图法。\n决策表也称为判定表，其实质就是一种逻辑表。\n在程序设计发展初期，决策表就已经被当作程序开发的辅助工具了，用于帮助开发人员设计开发模式和整理开发流程，因为它可以把复杂的逻辑关系和多种条件组合的情况表达得既具体又明确，利用决策表可以设计出完整的测试用例集合。\n决策表通常由4个部分组成，具体如下。\n条件桩： 用于列出问题的所有条件，除了某些问题对条件的先后次序有要求外，通常决策表中所列条件的先后次序都无关紧要。\n条件项： 条件桩的所有可能取值。\n动作桩： 对问题可能采取的动作，这些动作一般没有先后次序之分。\n动作项： 指出在条件项的各组取值情况下应采取的动作。\n有些工作可能是重复的、无意义的，如表 2-14 中的规则 1 与规则 2，在前两个问题取值相同的情况下，无论是否对内容不理解，建议都是 “停止阅读并休息”，因此第三个问题就称为无关条件项，可以将这两条规则合并，使用 “-” 表示。\n实例一：零食自动售货机售货情况的因果图与决策表绘制 假设零食自动售货机主要售卖糖果和饼干，其中糖果和饼干的单价均为5角，**每次只能投入一枚5角的硬币或一枚1元的硬币，并按“糖果”按钮或“饼干”按钮进行购买，不能同时按“糖果”按钮和“饼干”按钮。**零食自动售货机的具体使用说明如下。\n如果售货机中没有5角的硬币以供找回，则亮红灯，提示顾客此种情况下不要投入1元的硬币；如果有5角的硬币以供找回，则红灯不亮。 如果顾客投入5角的硬币并按“糖果”按钮或“饼干”按钮，则送出糖果或饼干。 如果顾客投入1元的硬币并按“糖果”按钮或“饼干”按钮，且售货机有5角的零钱找回，则退出一枚5角的硬币并送出糖果或饼干。 如果顾客投入1元的硬币并按“糖果”按钮或“饼干”按钮，且售货机没有5角的零钱找回，则亮红灯，然后退出1元的硬币，无法送出糖果或饼干。 绘制决策表：\n简化决策表：\n实例二：三角形问题的因果图与决策表绘制 假设三角形的3边分别为a、b、c，则三角形问题有4个原因（是否构成三角形、a=b?、b=c?、c=a?）和5个结果（不构成三角形、一般三角形、等腰三角形、等边三角形、不符合逻辑）。\n每个原因可取值“Y”和“N”，因此共有2^4^=16条规则。\n设计测试用例：\n实例三：工资发放情况的因果图与决策表绘制 某公司的薪资管理制度如下：员工工资分为年薪制与月薪制2种，员工的犯错类型包括普通错误与严重错误2种，如果是年薪制的员工，犯普通错误扣款2%，犯严重错误扣款4%；如果是月薪制的员工，犯普通错误扣款4%，犯严重错误扣款8%。该公司编写了一款软件用于员工工资的计算发放，现在要对该软件进行测试。\n有4个原因，每个原因有“Y”和“N”2个取值，理论上可以组成2^4^=16条规则。由于c1与c2不能并存，所以只有8条规则。\n根据公司的薪资情况可设计测试用例。\n正交实验设计法 正交实验设计法概述 实际的软件测试中，测试的软件通常很复杂，很难从软件的需求规格说明中得出一一对应的输入、输出关系，不易划分出等价类，如果使用因果图法，则画出的因果图可能会很庞大。为了合理、有效地进行测试，可以利用正交实验法设计测试用例。\n正交实验法是一种高效、快速、经济的实验设计方法。\n正交实验设计法（Orthogonal Experimental Design）是指从大量的实验点中挑选出适量的、有代表性的点，依据 Galois 理论导出“正交表”，从而合理地安排实验的一种实验设计方法。在软件测试中，如果软件比较复杂，也可以利用正交实验法设计测试用例对软件进行测试。\n正交实验设计法包含3个关键因素，具体如下。\n指标： 判断实验结果优劣的标准。 因子： 也称为因素，是指所有影响实验指标的条件。 因子的状态： 也叫因子的水平，它是指因子变量的取值。 利用正交实验设计法设计测试用例时，按照 ① 提取因子，构造因子——状态表，② 加权筛选，简化因子——状态表，③ 构建正交表，设计测试用例 3 个步骤进行。正交表的表现形式如下：\nL 表示正交表。 n 为正交表的行数，每一行可以用于设计一个测试用例，因此行数 n 也表示可以设计的测试用例数。 c 表示正交实验的因子数目，即正交表的列数，因此正交表是一个 n 行 c 列的表。 t 称为水平数，表示每个因子能够取得的最大值，即因子有多少个状态。 例如 L4(2^3^) 是较为简单的正交表，它表示该实验有 3 个因子，每个因子有 2 个状态，可以做 4 次实验。如果用 0 和 1 表示每个因子的2种状态，正常情况下需要设计 2^3^ = 8 个测试用例。\n根据正交表查询网站 support.sas.com/techsup/technote/ts723_Designs.txt 可以得知，使用正交表只需要设计 4 个测试用例也可以达到相同效果，则该正交表就是一个 4 行 3 列的表。\n在实际软件测试中，大多数情况下，软件有多个因子，每个因子的状态数目都不相同，即各列的水平数不等，这样的正交表称为混合正交表，例如 L8(2^4^*4^1^)，这个正交表表示有 4 个因子有 2 种状态，有 1 个因子有 4 种状态。\n对于受多因子、多水平影响的软件，正交实验法可以高效、适量地生成测试用例，减少测试工作量，并且利用正交实验法得到的测试用例具有一定的覆盖率，检错率可在50%以上。正交实验法虽然好用，但在选择正交表时要注意先确定实验因子、因子的状态及它们之间的交互作用，同时还要考虑实验的精度要求、费用、时长等因素。\n实例一：微信Web页面运行环境正交实验设计 微信是一款手机App软件，但也有Web版微信可以登录。如果要测试微信Web页面运行环境，需要考虑多种因素，在众多的因素中，可以选出几个影响比较大的因素，例如服务器、操作系统、插件和浏览器。对于选出的4个影响因素，每个因素又有不同的取值。同样，在每个囚素的多个取值中，可以选出几个比较重要的值，具体如下。\n服务器：IIS、Apache、Jetty。 操作系统：Windows 7、Windows 10、Linux g 插件：无、小程序、微信插件。 浏览器：IE11、Chrome、Firefox。 正交实验法虽然高效，但并不是对每种软件测试都适用。在实际测试中，正交实验法其实使用得比较少。\n实例二：用户筛选功能正交实验设计 假设有一个招聘软件，招聘人员可以根据多个因素来筛选求职者。下面选择城市、招聘岗位、学历、计算机等级和工作经验作为关键因素，每个因素都有不同的取值，具体如下。\n城市：北京、上海、深圳、广州。\n招聘岗位：产品运营、产品经理、软件测试、软件工程师。\n学历：高中、专科、本科、研究生。\n计算机等级：计算机一级、计算机二级、计算机三级、计算机四级。\n工作经验：1年、2年、3年、4年。\n场景法 场景法概述 场景法也叫流程图法，是指通过模拟用户操作软件时的场景来对系统的功能或业务流程进行测试。场景法通常用于测试多个功能之间的组合使用情况，以及用于集成测试、系统测试和验收测试阶段。\n根据用户操作流程的正确性来划分时，场景法将用户的操作流程分为基本流和备选流。基本流也称为有效流，用来模拟用户正确的操作流程；备选流也称为无效流、错误流，用来模拟用户错误的操作流程。\n由图可知，基本流有1条，备选流有4条。备选流可以从基本流开始，例如备选流1、备选流2和备选流3；备选流也可以从备选流开始，例如备选流4。测试场景如下：\n场景1：基本流。 场景2：基本流→备选流1。 场景3：基本流→备选流1→备选流2。 场景4：基本流→备选流1→备选流3。 场景5：基本流→备选流1→备选流3→备选流4。 场景6：基本流→备选流2。 场景7：基本流→备选流3。 场景8：基本流→备选流3→备选流4。 在场景法中每一个场景是一条流程路径，根据流程路径的数量即可设计测试用例。 使用场景法设计测试用例可以按照以下4个步骤进行：\n步骤1：分析需求规格说明书。 步骤2：根据需求规格说明书绘制流程图。 步骤3：根据流程图确定测试场景。 步骤4：根据测试场景设计测试用例。 在绘制流程图时，首先需要确定测试场景中的关键业务以及各个业务之间的操作顺序，然后用箭头连接即可。\n实例一：电商网站购物场景分析 如今电商行业的发展非常迅速，许多公司开始研发电商网站，为用户提供更多的购物渠道。\n假设某公司研发了一个电商网站，现需要测试人员按照 “注册→登录→挑选商品→将商品加入购物车→支付→查看订单” 的流程进行测试。\n在使用电商网站进行购物时，首先进行注册，如果注册失败，则需要重新注册，直到注册成功后才可以登录电商网站。如果登录失败，则需要重新登录。\n该电商网站的支付方式有3种，分别是微信、银行卡和支付宝，如果用这3种方式都支付失败，则需要返回支付环节重新支付，直到支付成功后才能查看订单。\n分析图可知，基本流有1条，备选流有3条，具体如下。\n基本流：注册→登录→挑选商品→将商品加入购物车→支付→查看订单。 备选流1：注册失败。 备选流2：注册成功→登录失败。 备选流3：注册成功→登录成功→挑选商品→将商品加入购物车→支付失败。 通过对基本流和备选流进行分析，可以得出4个测试场景，具体如下。\n场景1：基本流。 场景2：基本流+备选流1。 场景3：基本流+备选流2。 场景4：基本流+备选流3。 基本流+备选流1+备选流2+备选流3 多次注册后成功，多次登录后成功，支付均失败\n基本流+备选流1+备选流2 基本流+备选流1+备选流3 基本流+备选流2+备选流3 在使用场景法设计测试用例时，每一个场景对应一个测试用例，根据4个测试场景来设计测试用例。\n在实际的测试过程中，首先应使用等价类划分法或边界值分析法对单个功能（例如注册功能、登录功能、支付功能等）设计测试用例进行测试，然后结合场景法设计测试用例对整个购物流程开展测试。\n实例二：ATM取款场景分析 假设需要使用场景法测试某银行ATM的取款业务流程，银行给出的需求规格说明是：用户在ATM中插入有效的银行卡，输入正确的密码后选择取款业务，然后输入取款金额，待出钞后选择退卡即可完成取款。在取款的过程中，如果出现以下4种情况将取款失败，此时选择退卡，结束流程。\n密码输入错误的次数超过3次。 输入的取款金额不是100的倍数。 输入的取款金额大于账户余额。 输入的取款金额大于ATM取款额度。 通过上述需求规格说明，画出取款的流程图。\n由图可知，基本流有1条，备选流有5条，具体如下。\n基本流：插卡→输入密码→选择取款→输入取款金额→出钞→退卡。 备选流1：插卡→输入密码错误（3次以内）→选择取款→输入取款金额→出钞→退卡。 备选流2：插卡→输入密码错误（超过3次）→退卡。 备选流3：插卡→输入密码→选择取款→输入的取款金额不是100的倍数→退卡。 备选流4：插卡→输入密码选择取款→输入的取款金额大于账户余额→退卡。 备选流5：插卡→输入密码→选择取款→输入的取款金额大于ATM取款额度→退卡。 通过对基本流和备选流进行分析，可以得出6个测试场景，具体如下。\n场景1：基本流。（预期结果：取款成功） 场景2：基本流+备选流1。（预期结果：取款成功） 场景3：基本流+备选流1+备选流3。（预期结果：取款失败） 场景4：基本流+备选流1+备选流4。（预期结果：取款失败） 场景5：基本流+备选流1+备选流5。（预期结果：取款失败） 场景6：基本流+备选流2。（预期结果：取款失败） 其他\n场景7：基本流+备选流3。 场景8：基本流+备选流4。 场景9：基本流+备选流5。 假设测试的银行卡有效，密码为123456，账户余额为5000元，ATM取款额度为3000元。\n状态迁移图法 状态迁移图法概述 状态迁移图法（State Transition Diagram，STD）是黑盒测试的一种方法，状态迁移图用来描述系统或对象的状态，以及导致系统或对象状态发生改变的事件。\n状态迁移图法是通过分析被测系统的状态，以及这些状态之间的转换条件和路径来设计测试用例的一种方法，它主要用于验证在给定的条件内，系统对象是否能够发生状态的改变，以及是否存在不可能达到的状态或非法的状态等。在状态迁移图中，由一个状态、事件所确定的下一个状态可能会有多个，实际迁移到哪一个状态，由触发条件决定。\n状态迁移图法主要关注测试状态转移的正确性，将被测系统中业务流程的每个节点用状态来描述，通过触发的事件来完成各个状态之间的迁移。使用状态迁移图法设计测试用例的具体步骤如下。\n1. 绘制状态迁移图\n在使用状态迁移图法设计测试用例时,首先需要根据需求规格说明书分析被测系统中有哪些状态以及每个状态之间的迁移关系，然后绘制状态迁移图。在状态迁移图中，通常使用圆圈表示状态，使用箭头表示迁移的方向，在箭头的上方或下方描述状态迁移的条件。\n2. 列出状态——事件表\n根据绘制好的状态迁移图，分析各个状态之间不同的输入导致的状态迁移，列出状态——事件表。\n3. 绘制状态转换树并推导测试路径\n为了更好地推导测试路径，通常会借助状态转换树。首先确定一个根节点，然后向后延伸，直到所有的状态都包含在状态转换树中，从根节点到每一个子节点的路径即测试路径。\n4. 设计测试用例\n在设计测试用例时，选取达到规定的测试覆盖率的测试路径，并针对每条路径设计一个或多个测试用例。需要说明的是，状态迁移图法通常也需要结合等价类划分法和边界值分析法来设计测试用例。\n实例一：商城订单状态迁移图 假设商城的需求是：\n用户在搜索商品后，将商品加入购物车进行购买，用户提交订单后生成订单，订单状态转变为待支付，若支付失败，则订单状态转变为订单取消，若支付成功，则订单状态转变为待发货； 商家发货后，订单状态转变为待收货； 买家确认收货后，订单状态转变为订单完成； 用户可在待发货状态和待收货状态下申请退货或取消申请，若用户申请退货，则订单状态均转变为售后； 商家同意退货后，订单状态转变为已退货； 退货成功时，订单状态转变为订单完成； 如果用户在申请退货后，又取消申请，则订单状态转变为待发货或待收货； 商家发货并且买家确认收货后订单状态才转变为订单完成。 在图中，一共有8个状态，分别是提交订单、待支付、订单取消、待发货、待收货、售后、已退货和订单完成。商城订单状态——事件表如下所示：\n为了能够更好地确定测试路径，需要根据状态迁移图画出商城订单状态转换树。\n通过分析可知，一共有6条测试路径，具体如下。\n测试路径1：提交订单→待支付→订单取消。 测试路径2：提交订单→待支付→待发货→售后→待发货。 测试路径3：提交订单→待支付→待发货→售后→待收货。 测试路径4：提交订单→待支付→待发货→售后→已退货→订单完成。 测试路径5：提交订单→待支付→待发货→待收货→订单完成。 测试路径6：提交订单→待支付→待发货→待收货→售后。 则商场订单状态迁移的测试用例如下。\n由于状态迁移图法主要用于验证被测系统在特定条件下状态的转移过程是否合法，所以本实例设计的测试用例中，测试步骤描述的使用余额不足的银行卡支付、商家发货、买家确认收货等均是在前置条件成立的情况下进行测试的。在实际的测试工作中，需要结合用户的真实购物场景进行测试，这样才能减少被测系统或软件出现的缺陷。\n实例二：飞机售票系统状态迁移图 假设飞机售票系统的需求是：\n乘客可以通过小程序预约购买机票，预约成功时，机票状态为已预订； 乘客提交订单并成功支付机票费用后，机票状态为已支付； 乘客到机场取出机票后，机票状态为已出票； 乘客登机检票后，机票状态为已使用； 在登机前，例如在已预订、已支付或已出票的状态下，乘客可以取消订单，在这3种情况下取消订单时，机票状态都为已取消。\n根据上述给出的需求测试飞机售票系统中机票状态迁移的过程，分析需求，画出状态迁移图。\n机票状态迁移图一共由5个状态组成，分别是已预订、已支付、已出票、已使用和已取消。根据机票状态迁移图绘制机票状态——事件表。\n为了能够更好地确定测试路径，需要根据状态迁移图画出状态转换树。\n通过分析可知，一共有4条测试路径，具体如下。\n测试路径1：已预订→已取消。\n测试路径2：已预订→已支付→已取消。\n测试路径3：已预订→已支付→已出票→已取消。\n测试路径4：已预订→已支付→已出票→已使用。\n假设需要测试用户从预订机票到使用机票过程中机票状态的迁移过程，根据上述4条测试路径可以设计4个测试用例。\n在使用黑盒测试方法设计测试用例的过程中：\n① 如果测试模块具有输入功能，但是输入功能之间没有组合关系，则选择等价类划分法；\n② 如果测试模块的功能对输入有边界限制，例如长度范围、数值类型等方面的限制，则选择边界值分析法；\n③ 如果测试模块具有多输入、多输出、输入与输入之间存在组合关系、输入与输出之间存在依赖或制约关系的情况，则可以选择因果图法与决策表法；\n④ 如果想要用最少的测试用例获得测试模块的最大测试覆盖率，则可以选择正交实验设计法；\n⑤ 如果测试模块包含多个功能的组合，则可以选择场景法；\n⑥ 如果测试模块在特定条件下会发生状态的改变，则可以选择状态迁移图法；\n通常，对于测试经验丰富的测试人员来说，还会使用错误推测法来进一步补充测试用例的设计。\n本章习题 填空题 等价类划分就是将输入数据按照输入需求划分为若干个子集，这些子集称为（ 等价类 ）。\n（ 边界值分析法 ）通常作为等价类划分法的补充。\n因果图中的（ 恒等 ）关系要求程序有一个输入和一个输出，输出与输入保持一致。\n因果图的多个输入之间的约束包括（ 异 ）、（ 或 ）、（ 唯一 ）、（ 要求 ）共4种。\n决策表通常由（ 动作桩 ）、（ 动作项 ）、（ 条件桩 ）、（ 条件项 ）共4个部分组成。\n根据用户操作流程的正确性来划分，场景法通常分为（ 基本流 ）和（ 备选流 ）。\n判断题 有效等价类可以捕获程序中的缺陷，而无效等价类不能捕获缺陷。（ x ）\n如果程序要求输入值是一个有限区间内的值，可以划分一个有效等价类和一个无效等价类。（ x ）\n使用边界值分析法测试时，只取边界两个值即可完成边界测试。（ x ）\n因果图考虑了程序输入、输出之间的各种组合情况。（ √ ）\n决策表法是由因果图法演变而来的。（ √ ）\n正交实验设计法比较适用于复杂的大型项目。（ √ ）\n单选题 下列选项中，哪一项不是因果图中输入与输出之间的关系？（ ）\nA. 恒等\nB. 或\nC. 要求\nD. 非\n下列选项中，哪一项是因果图中输出之间的约束关系？（ ）\nA. 异\nB. 或\nC. 强制\nD. 要求\n下列选项中，哪一项不是正交实验设计法的关键因素？（ ）\nA. 指标\nB. 因子\nC. 因子状态\nD. 正交表\n","date":"2024-08-26T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/86aae82b21d34acb81f164634b54504e_hu_dfa23e215e3c8219.webp","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/","title":"第二章 黑盒测试方法"},{"content":"软件测试的背景意义 计算机发展史上几大著名的软件缺陷 1、Ariane 5 Crash\nAriane 5 是一种可以发射航天器的火箭。这种火箭在升空后 40 秒就会发生爆炸，原因是系统软件中的整数溢出漏洞，当在系统中输入一个比软件内置的最大整数还要大的整数时，系统内存将不会存储这个整数数字，由此引起软件崩溃，导弹爆炸。一枚火箭价值 3 亿 7000 万美元。\n2、爱国者导弹软件错误\n在第一次海湾战争期间，一枚伊拉克导弹击中了美军军营导致 28 死 98 伤，而部署在周围的爱国者导弹系统没有及时对对方的导弹进行拦截，原因是爱国者导弹雷达追踪系统有软件缺陷，没有发现导弹。\n3、千年虫\n在一些计算机系统中，不能把2000年识别为闰年，即在该计算机系统的日历中没有2000年2月29日这一天，而是直接由2000年2月28日过渡到了2000年3月1日；一些比较老的计算机系统中，在程序中使用了数字串99（或99/99等）来表示文件结束、永久性过期、删除等一些特殊意义的自动操作，这样当1999年9月9日（或1999年4月9日即1999年的第99天）来临时，计算机系统在处理到内容中有日期的文件时，就会遇到99或99/99等数字串，从而将文件误认为已经过期或者将文件删除等错误操作，引发系统混乱甚至崩溃等故障\n4、PayPal软件错误\n来自宾夕法尼亚的 Chris Reynold 一度成为了世界上最有钱的人，原因是 PayPal 错误的向他的账户里打了 9 亿 2000 万美元。\n5、《江南style》打破Youtube观看记录\nYoutube 网站使用 32 位有符号的整数来记录视频的观看次数。最初网站设定的视频最大观看次数被《江南style》打破，因此《江南style》的观看此数超过最大值后，变成了负数。之后谷歌将最大值扩大成了 64 位有符号的整数。\n6、软件中竞争条件缺陷导致50万人受到停电影响\n2003 年 8 月 14 日，一场大规模停电影响到了美国 8 个州和加拿大，总共 50 万人的生活。电脑专家指出是由于软件中的一个竞争条件缺陷导致的，单个操作中的 2 个独立线程使用了同一个代码，由于没有正常同步，2 个线程导致了整个电厂系统瘫痪，最终使 256 个发电厂的发电机停转。当时最大的影响应该是很多无线基站没有信号不能上网，因此很多人将笔记本电脑通过古老的拨号上网方式进行上网。\n软件的定义及分类方法 人们通常把各种不同功能的程序，包括系统程序、应用程序、自己编写的程序等称为软件。然而，当计算机的应用日益普及，软件产品日益复杂，软件规模日益增大时，人们意识到软件不仅仅等于程序。\n程序是人们为了完成特定的功能而编制的一组指令集，它由计算机语言描述，并且能够在计算机系统上执行。而软件不仅包括程序，还包括程序的处理对象——数据以及程序开发、维护和使用有关的图文资料。\n计算机软件是由专业人员开发并长期维护的软件产品，有以下 8 个特点。\n软件是一种逻辑实体，而不是具体的物理实体，因而它具有抽象性。 软件没有明显的制造过程，要提高软件质量，必须在软件开发方面下功夫。 软件不会出现机械磨损、老化等问题，但仍需要多次修改与维护。 软件的开发与运行受到计算机系统的限制，为了解决这个问题提出了软件移植。 软件的开发至今尚未完全摆脱人工的开发方式。 软件是复杂的，包括反映问题的复杂性和程序逻辑的复杂性。 软件开发需要投入大量成本。 软件工作涉及到社会因素。 根据软件规模不同，可以分为微型、小型、中型、大型、超大型软件；\n根据软件运行平台不同，可以分为个人计算机软件、嵌入式软件、基于Web的软件等；\n根据软件使用范围不同，软件可以分为应用软件和系统软件。\n软件概述 软件生命周期 软件生命周期分为多个阶段，每个阶段都有明确的任务，这样就使结构复杂、管理复杂的软件开发变得容易控制和管理。通常，可将软件生命周期划分为6个阶段。\n软件开发模型 软件开发模型规定了软件开发应遵循的步骤，是软件开发的“导航图”，它能够清晰、直观地表达软件开发的全过程，以及每个阶段要进行的活动和要完成的任务。开发人员在选择开发模型时，要根据软件的特点、开发人员的参与方式选择稳定、可靠的开发模型。\n常见的软件开发模型有：瀑布模型、快速原型模型、迭代模型、螺旋模型、敏捷模型。\n**瀑布模型：**瀑布模型采用从上至下一次性完成整个软件产品的开发的方式，该模型将软件开发过程分为6个阶段：计划→需求分析→软件设计→编码→测试→运行维护。\n瀑布模型是按照线性方式进行的，无法适应用户的需求变更，用户只能等到最后才能看到开发成果，这增加了开发风险。此外，对于现代软件来说，软件开发各阶段之间的关系大部分不会是线性的，很难使用瀑布模型开发软件，因此瀑布模型不再适合现代软件的开发，已经被逐渐废弃。\n**快速原型模型：**快速原型模型在最初确定用户需求时快速构造出一个可以运行的软件原型，用户对该原型进行审核评价，然后给出具体的需求意见，这样逐步丰富、细化需求，最后开发人员与用户达成最终共识，确定用户的真正需求。\n快速原型模型的关键在于快速构建软件原型，但准确地设计出软件原型存在一定的难度，此外，这种开发模型也不利于开发人员对产品进行扩展。\n**迭代模型：**迭代模型又称为增量模型或演化模型，它将一个完整的软件拆分成不同的组件，然后对每个组件进行开发测试，每测试完一个组件就将结果展现给用户，确定此组件的功能和性能是否满足用户需求，最终确定无误后，将组件集成到软件体系结构中。\n迭代模型需要将开发完成的组件集成到软件体系结构中，这样会有集成失败的风险，因此要求软件必须有开放式的体系结构。此外，迭代模型以逐个组件的形式开发、修改，很容易退化为“边做边改”的开发形式，从而失去对软件开发过程的整体控制。\n**螺旋模型：**螺旋模型融合了瀑布模型和快速原型模型，它最大的特点是引入了其他模型所忽略的风险分析。如果项目不能排除重大风险，就停止项目从而减小损失，这种模型比较适用于开发复杂的大型软件。\n**敏捷模型：**敏捷模型以用户的需求进化为核心，采用迭代、循序渐进的方式进行软件开发。敏捷模型可以及时响应用户的需求变更，不断适应新的趋势，但是在开发灵活的同时也带来了一定程度的混乱，例如，缺乏文档资料，软件旧版本部分功能的重现、回溯较为困难。对于较大的项目，参与开发的人员越多，有效沟通越困难，因此敏捷模型比较适用于小型项目的开发，而不太适用于大型项目的开发。\n软件质量概述 软件质量的概念 软件质量是指软件产品满足基本需求和隐式需求的程度。软件产品满足基本需求是指其能满足软件开发时所规定需求的特性，这是软件产品最基本的质量要求，其次是软件产品满足隐式需求的程度，例如，产品界面更美观、用户操作更简单等。\n从软件质量的定义可知，为了开发高质量的软件，需要满足以下3个需求，具体如下：\n**满足需求规定：**软件产品符合开发者明确给定的目标，并且能可靠运行。 **满足用户基本需求：**软件产品的需求是由用户给出的，软件开发最终的目的就是满足用户基本需求，解决用户的实际问题。 **满足用户隐式需求：**软件产品除了满足用户的基本需求外，如果还能满足用户的隐式需求，将会极大地提升用户满意度，这就意味着软件质量更高。 所谓高质量的软件，除了满足上述需求外，对于内部人员来说，它应该也是易于维护与升级的。软件开发时，统一的符合标准的编码规范、清晰合理的代码注释、形成文档的需求分析、软件设计等资料对于软件后期的维护与升级都有很大的帮助，同时，这些资料也是软件质量的重要体现。\n软件质量模型 ⭐ ISO/IEC 9126:1991是一个通用的评价软件质量的国际标准，它不仅对软件质量进行了定义，而且制定了软件测试的规范流程，包括测试计划的撰写、测试用例的设计等。\n**功能性：**在指定条件下，软件产品满足用户基本需求和隐式需求的能力。\n**可靠性：**在指定条件下使用时，软件产品维持规定的性能级别的能力。\n**可使用性：**在指定条件下，软件产品被使用、理解、学习的能力。\n**效率：**在指定条件下，相对于所有资源的数量，软件产品可提供适当性能的能力。\n**可维护性：**指软件产品被修改的能力，修改包括修正、优化和功能规格变更的说明。\n**可移植性：**指软件产品从一个环境迁移到另一个环境的能力。\n例：以微信为例，验证微信的软件质量。\n影响软件质量的因素 由于软件自身的特点和目前的软件开发模式存在不足，隐藏在软件内部的质量缺陷无法完全被根除，所以每一款软件都会存在一些质量问题。影响软件质量的因素有很多，常见的有：需求模糊、软件开发缺乏规范性文件的指导、软件开发人员变化、缺乏软件质量的管控等。\n软件缺陷管理 软件缺陷产生的原因 软件缺陷就是通常所说的 bug，它是指软件中存在的影响软件正常运行的问题。从产品内部看，缺陷是产品开发或维护过程中存在的错误、问题等；从产品外部看，缺陷是系统运行过程中某种功能的失效。\n软件缺陷产生的原因主要有：需求不明确、软件结构复杂、编码问题、项目期限短、使用新技术等。\n软件缺陷的分类 软件缺陷有很多，从不同的角度可以将软件缺陷划分为不同的种类，具体划分如下：\n按照测试种类，可以将软件缺陷划分为界面缺陷、功能缺陷、性能缺陷、安全性缺陷、兼容性缺陷等。 按照缺陷的严重程度，可以将软件缺陷划分为严重缺陷、一般缺陷、次要缺陷、建议缺陷。 按照缺陷的优先级不同，可以将软件缺陷划分为立即解决缺陷、高优先级缺陷、正常排队缺陷、低优先级缺陷。 按照缺陷的发生阶段不同，可以将软件缺陷划分为需求阶段缺陷、架构阶段缺陷、设计阶段缺陷、编码阶段缺陷、测试阶段缺陷。 软件缺陷的处理流程 （1）提交：测试人员发现缺陷之后，将缺陷提交给测试组长。\n（2）分配：测试组长接收到测试人员提交的缺陷之后，将其移交给开发人员。\n（3）确认：开发人员接收到移交的缺陷之后，会与团队甚至测试人员一起商议，确定其是否是一个缺陷。\n（4）拒绝/延期：如果经过商议之后，发现其不是一个真正的缺陷，则拒绝处理此缺陷，对其进行关闭处理。如果经过商议之后，确定其是一个真正的缺陷，则可以根据缺陷的严重程度或优先级等立即处理或延期处理。\n（5）处理：开发人员修改缺陷。\n（6）复测：开发人员修改好缺陷之后，测试人员重新进行测试（复测)，检测缺陷是否已经修改。如果未被正确修改，则重新提交缺陷。\n（7）关闭：测试人员重新测试之后，如果缺陷已经被正确修改，则将缺陷关闭，整个缺陷处理完成。\n软件缺陷报告 在实际软件测试过程中，测试人员在提交软件测试时都会按照公司规定的模板将缺陷的详细情况记录下来并生成软件缺陷报告。每个公司的软件缺陷报告模板通常并不相同，但一般都会包括缺陷的ID、类型、严重程度、优先级，以及测试环境等，有时还会有测试人员的建议。\n软件测试概述 软件测试简介 软件测试是使用人工或自动手段运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清楚预期结果与实际结果之间的差异。\n敏捷模型促使人们对软件测试重新进行了思考，更多的人倾向于软件开发与软件测试的融合，即不再是在软件完成之后再进行测试，而从软件需求分析阶段，测试人员就参与其中，了解整个软件的需求、设计等。\n软件开发与软件测试融合后，虽然两者的界限变得模糊，但软件开发与软件测试的工作效率都得到了极大的提高，这种工作模式至今依然盛行。\n软件测试的目的 从软件开发角度来说，软件测试通过找到的缺陷帮助开发人员找到开发过程中存在的问题，包括软件开发的模式、工具、技术等方面存在的问题，从而预防缺陷的产生。 从软件测试角度来说，主要目的是使用最少的人力、物力、时间等找到软件中隐藏的缺陷，保证软件的质量，也为以后的软件测试积累丰富的经验。 从用户需求角度来说，软件测试能够检验软件是否符合用户需求，对软件质量进行评估和度量，可为用户评审软件提供有力的依据。 软件测试的分类 按测试阶段分类 ⭐ 测试阶段 说明 单元测试 验证软件单元是否符合用户需求与设计需求。单元测试大多是开发人员进行的自测。 冒烟测试 对新构建版本软件进行的最基本的测试。\n如果测试未通过，需要返回给开发人员进行修正；如果测试通过则再进行其他测试。 集成测试 将已经测试过的软件单元组合在一起并测试它们之间的接口，验证软件是否满足设计需求。 系统测试 系统测试将经过测试的软件放在实际环境中运行，并将其与其他系统的成分\n（如数据库、硬件和操作人员等）组合在一起进行测试。 验收测试 逐行逐字地按照说明书的描述对软件产品进行测试，确保其符合用户的各项要求。 按是否需要查看代码分类 ⭐ 测试技术 说明 黑盒测试 黑盒测试又叫功能测试、数据驱动测试、基于需求规格说明书的功能测试，\n它把软件当作一个有输入与输出的“黑匣子”，只要输入的数据能输出预期的结果\n即可，不必关心软件内部是怎样实现的，注重于测试软件的功能性需求。 白盒测试 白盒测试又叫透明盒测试、结构测试、逻辑驱动测试或基于代码的测试，\n它是指测试人员了解软件程序的逻辑结构、路径和运行过程，\n在测试时，按照程序的执行路径得出结果。\n白盒测试把软件（程序）当作一个透明的“盒子”，\n测试人员清楚地知道从输入到输出的每一步过程。 灰盒测试 灰盒测试是介于黑盒测试与白盒测试之间的一种软件测试方法，\n它由方法和工具组成，这些方法和工具取决于应用程序内部交互的环境。\n灰盒测试通常用于集成测试阶段，测试人员在使用灰盒测试方法时，\n不仅需要关注输入、输出的正确性，而且需要关注程序内部的情况，\n通常根据—些现象、事件、标志来判断内部的运行状态。 相对于黑盒测试来说，白盒测试对测试人员的要求会更高一点，它要求测试人员具有一定的编程能力，而且要熟悉各种脚本语言。\n但是在企业中，黑盒测试与白盒测试并不是界限分明的，在测试一款软件时往往将黑盒测试与白盒测试相结合对软件进行完整、全面的测试。\n灰盒测试虽然没有白盒测试详细、完整，但是比黑盒测试更关注程序的内部逻辑，能够用于黑盒测试以提高测试的效率。\n按软件质量特性分类 软件质量特性 说明 功能测试 测试软件的准确性、易用性、适合性、互操作性等是否满足用户的需求。 性能测试 测试软件的是否满足用户的需求，包括负载测试、压力测试、兼容性测试、\n可移植性测试和健壮性测试等。 按自动化程度分类 自动化程度 说明 人工测试 人工测试是测试人员编写与执行测试用例的过程。人工测试比较耗时、费力，\n而且测试人员如果在疲惫状态下，很难保证测试的效果。 自动化测试 借助脚本、自动化测试工具等完成相应的测试工作，它也需要人工的参与，\n但是它可以将要执行的测试代码或流程写成脚本，通过执行脚本完成整个测试工作。 按测试项目分类 测试项目 说明 界面测试 验证软件界面是否符合用户需求，包括界面布局是否美观、按钮是否齐全等。 文档测试 文档测试以需求分析说明书、软件设计文档、用户手册、安装手册为主，\n主要验证文档说明与实际软件情况之间是否存在差异。 安全性测试 测试软件在受到没有授权的内部或外部用户的攻击或恶意破坏时如何进行处理，\n是否能保证软件与数据的安全。 功能测试 / 性能测试 / 其他分类 其他分类 说明 α测试 α测试是指对软件最初版本进行测试。软件最初版本一般不对外发布，\n在上线之前，由开发人员和测试人员或者用户协助进行测试。\n测试人员记录软件最初版本在使用过程中出现的错误和问题，整个测试过程是可控的。 β测试 β测试是指对上线之后的软件版本进行测试，此时软件已上线发布，\n但发布的版本中可能会存在较小的bug，\n由用户在使用过程中发现错误和问题并进行记录，然后反馈给开发人员进行修复。 回归测试 当测试人员发现缺陷以后，会将缺陷提交给开发人员，开发人员对程序进行修改；\n修改之后，测试人员会对修改后的程序重新进行测试，\n确认原有的缺陷已经消除并且没有引入新的缺陷，\n这个重新测试的过程称为回归测试。\n回归测试是软件测试工作中非常重要的一部分，软件开发的各个阶段都会进行多次回归测试。 随机测试 随机测试是没有测试用例、检查列表、脚本或指令的测试，\n它主要根据测试人员的经验对软件进行功能和性能抽查。\n随机测试是根据测试用例说明书执行测试用例的重要补充手段，\n是保证测试覆盖完整性的有效方式。 按照软件开发版本周期进行划分，可以将软件测试分为预览版本Pre-α测试、内部测试版本α测试、公测版本β测试、候选版本Release测试。在这些测试完成之后产品就可以正式上线发布了。\n练习 张三开发实现完成注册功能，针对自己开发的该功能代码进行测试属于（ A ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n项目相关开发人员完成了全部系统的核心业务实现，最最后提交给测试全面测试，属于（ C ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n从注册、登录、下单联动一起的测试属于（ B ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n整个电商系统测试通过后，最后交付给用户正式使用，一般需要完成（ D ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n登录界面输入账号、密码、验证码，点击登录测试属于（ A ）\nA. 黑盒测试\nB. 灰盒测试\nC. 白盒测试\n无界面，通过工具/代码实现登录功能测试属于（ B ）\nA. 黑盒测试\nB. 灰盒测试\nC. 白盒测试\n无界面，直接对开发实现的登录功能的源代码进行测试属于（ C ）\nA. 盒测试\nB. 盒测试\nC. 盒测试\n软件测试的目的和原则 ⭐ 软件测试的目的 软件测试的目的是发现软件中存在的缺陷和系统不足，定义系统的能力和局限性，提供组件、工作产品和系统的质量信息；提供预防和减少可能错误的信息，在过程中尽早检测错误以防止错误传递到下一阶段，提前确认问题和识别风险；最终获取系统在可接受风险范围内的可用信息，确认系统在非正常情况下的功能和性能，保证一个产品是完整的，并且是可用的或者可被集成的。\n软件测试的原则 1．测试应基于用户需求\n所有的测试工作都应该建立在满足用户需求的基础上。从用户角度来看，最严重的错误就是软件无法满足需求。有时候，软件产品的测试结果非常完美，但不是用户最终想要的产品，那么软件产品的开发就是失败的，而测试工作也是没有任何意义的。因此测试应依照用户的需求配置环境并且按照用户的使用习惯进行，以及给出评价结果。\n2．测试要尽早进行\n软件的错误存在于软件生命周期的各个阶段，因此应该尽早开展测试工作，把软件测试贯穿到软件生命周期的各个阶段中，这样测试人员能够尽早地发现和预防错误，降低错误修复的成本。尽早地开展测试工作有利于帮助测试人员了解软件产品的需求和设计，从而预测测试的难度和风险，制定出完善的计划和方案，提高测试的效率。\n3．不能做到穷尽测试\n由于时间和资源的限制，进行完全（各种输入和输出的全部组合）的测试是几乎不可能的，测试人员可以根据测试的风险和优先级等确定测试的关注点，从而控制测试的工作量,在测试成本、风险和收益之间求得平衡。\n4．遵循 GoodEnough 原则\nGoodEnough 原则是指测试的投入与产出要适当平衡，形成充分的质量评估过程，这个过程建立在测试付出的代价之上。测试不充分无法保证软件产品的质量，但测试投入过多会造成资源的浪费。随着测试资源投入的增加，测试的产出也是增加的，但当投入达到一定的比例后，测试的效果就不会明显增强了。因此在测试时要根据实际要求和产品质量考虑测试的投入，最好使测试的投入与产出达到一个足够好的状态。\n5．测试缺陷要符合“二八”定理\n缺陷的“二八”定理也称为 Pareto 原则、缺陷集群效应。一般情况下，软件中80%的缺陷会集中在20%的模块中，缺陷并不是均匀分布的。因此在测试时，要抓住主要矛盾，如果发现某些模块比其他模块具有更多的缺陷，则要投入更多的人力、精力重点测试这些模块以提高测试效率。\n6．避免缺陷免疫\n我们都知道虫子的抗药性原理，即一种药物使用久了，虫子就会产生抗药性，而在软件测试中，缺陷也是会产生免疫性的。同样的测试用例被反复使用，其发现缺陷的能力就会越来越差；测试人员对软件越熟悉越会忽略一些看起来比较小的问题，发现缺陷的能力也越差，这种现象被称为软件测试的“杀虫剂”现象。它的产生主要是由于测试人员没有及时更新测试用例或者是对测试用例和测试对象过于熟悉形成了思维定势。\n要想应对这种情况，就要不断对测试用例进行修改和评审，不断增加新的测试用例。同时，测试人员也要发散思维，不能只是为了完成测试任务而做一些输入、输出的对比。\n没有缺陷的软件是不存在的，软件测试是为了找出软件中的缺陷，而不是为了证明软件没有缺陷。\n① 不可能进行完全测试\n② 测试中有风险存在\n③ 软件测试中只能证明缺陷存在，不能证明产品已经没有缺陷\n④ 软件产品中所存在的缺陷数与已发现的缺陷数成正比\n⑤ 要避免软件测试的杀虫剂现象\n⑥ 及早地和不断地进行软件测试\n⑦ 进行回归测试\n⑧ 软件测试应该有计划、有组织地进行\n软件测试与软件开发 软件测试与软件开发的关系 软件测试贯穿软件项目的整个过程，但它的实施过程与软件开发的并不相同。\n软件开发是自顶向下、逐步细化的过程，除此之外，软件开发中的计划阶段的任务是定义软件作用域，软件需求分析阶段的任务是确定软件信息域、功能和性能需求等，软件设计阶段的任务是选定编程语言、设计模块接口等。\n软件测试与软件开发的实施过程相反，它是自底向上、逐步集成的过程。首先进行单元测试，排除模块内部逻辑与功能上的缺陷，然后按照软件设计将模块集成并进行集成测试,检测子系统或系统结构上的错误，最后运行完整的系统，进行系统测试，检验其是否满足用户需求。\n常见的软件测试模型 V模型 V模型在瀑布模型的基础上进行了改变，在瀑布模型的后半部分添加了测试工作。\nV模型应用瀑布模型的思想将复杂的测试工作分成了目标明确的小阶段来完成，具有阶段性、顺序性和依赖性，它既包含对源代码的底层测试也包含对软件需求的高层测试。\n但是V模型也有一定的局限性，它只有在编码之后才能开始测试，早期的需求分析等前期工作没有涵盖其中，因此它不能发现需求分析等早期阶段的错误，这为后期的系统测试、验收测试埋下了隐患。\nW模型 W模型是由V模型演变而来的，它强调测试应伴随着整个软件生命周期。其实W模型是一个双V模型，软件开发是一个V模型，而软件测试是与软件开发同步进行的另一个V模型。\nW模型的测试范围不仅包括程序，而且包括需求分析、概要设计、详细设计等前期工作，这样有利于尽早、全面地发现问题。\n但是W模型也有自己的局限性，它将软件开发过程分成需求分析、设计、编码、集成等一系列的串行活动，无法支持迭代、自发性等需要变更调整的项目。\nH模型 H模型将测试活动完全独立出来，形成一个完全独立的流程，这个流程将测试准备活动和测试执行活动清晰地体现出来。测试流程和其他工作流程是并发执行的，只要某一个工作流程的条件成熟就可以开始进行测试。\nX模型 X模型的设计原理是将程序分成多个片段反复迭代测试，然后将多个片段集成再进行迭代测试。\nX模型左边描述的是针对单独程序片段进行的相互分离的编码和测试，多个程序片段进行频繁的交接，在X模型的右上部分，将多个片段集成为一个可执行的程序再进行测试。通过集成测试的产品可以进行更大规模的集成，也可以进行封装提交给用户。\n在X模型的右下部分还设置了探索性测试，它能够帮助有经验的测试人员发现更多测试计划之外的软件缺陷,但这对测试人员的要求会高一些。\n软件测试的基本流程 软件测试的流程 分析测试需求 测试人员一般会根据软件开发需求文档制作一个需求规格说明书检查列表，按照各个检查项对用户需求进行分析、校验。\n制定测试计划 **确定测试范围险：**明确哪些对象是需要测试的，哪些对象是不需要测试的。 **制定测试策略险：**测试策略是测试计划中最重要的部分，它将要测试的内容划分出不同的优先级，以确定测试重点，并根据测试模块的特点和测试类型（如功能测试、性能测试）选定测试环境和测试方法（如人工测试、自动化测试）。 安排测试资源险：通过考虑测试难度、时间、工作量等因素，对测试资源进行合理安排，包括人员分配、工具配置等。 安排测试进度险：根据软件开发计划、产品的整体计划来安排测试工作的进度，同时还要考虑各部分工作的变化。在安排测试进度时，最好在各项测试工作之间预留一个缓冲时间以应对计划变更。 预估测试风险：罗列出测试工作过程中可能会出现的不确定因素，并制定应对策略。 设计测试用例 ⭐ 测试用例编写的原则是尽量用最少的测试用例达到最大的测试覆盖率。测试用例常用的设计方法包括等价类划分法、边界值分析法、因果图法与决策表法、正交实验设计法、逻辑覆盖法等。\n测试用例的编写一般包含以下几个分类：\n1.用例编号： 项目+模块+数字\n2.用例标题： 预期执行结果(测试点)\n3.所属模块： 模块名\n4.优先级： 用例的重要程度(高P0~P3低)\n5.前置条件： 执行操作步骤的前置条件 1、账号已注册 2、已打开登录页面\n6.测试步骤： 测试点执行的关键步骤 1、输入账号 2、输入密码 3、点击登录按钮\n7.测试数据： 输入数据\n8.预期结果： 预期执行结果及隐性结果\n执行测试 根据测试用例的优先级执行测试，当提交后的缺陷被开发人员修改之后，测试人员还需要进行回归测试。\n编写测试报告 测试报告是对一个测试活动的总结,包括对项目测试过程进行归纳、对测试数据进行统计、对项目的测试质量进行客观评价。测试报告通常包括引言、测试概要、测试内容及执行情况、缺陷统计与分析、测试结论与分析等。\n实例:微信朋友圈功能的测试流程 微信朋友圈功能的测试流程主要包括6个，分别是开始、注册/登录、发布朋友圈、查看朋友圈、点赞/评论朋友圈、结束。本次主要对发布朋友圈功能进行测试。\n分析测试需求： 发布的朋友圈内容主要有5种形式，分别是文字、照片、视频、文字+照片、文字+视频，假设5种朋友圈内容的要求为文字1-500字、照片1-9张、视频1-15秒。\n制定测试计划：\n设计测试用例：\n**执行测试：**执行测试用例，对测试过程进行记录和跟踪。将测试发现的缺陷整理成缺陷报告。\n编写测试报告：\n一、引言\n目的 术语解释 参考资料 二、测试概要\n项目简介 测试环境 测试时间、地点及人员 回归测试 三、测试内容及执行情况\n测试目标 测试范围 测试用例使用情况 四、缺陷统计与分析\n缺陷数目与类型 缺陷的解决情况 缺陷的趋势分析 五、测试分析\n测试覆盖率分析 需求符合度分析 功能正确性分析 产品质量分析 测试局限性 六、测试总结\n遗留问题 测试经验总结 七、附件\n测试用例清单 缺陷清单 交付的测试工作产品 遗留问题报告 本章习题 填空题 软件从 “出生” 到 “消亡” 的过程称为（ 软件生命周期 ） 。\n引入风险分析的开发模型为（ 螺旋模型 ）模型。\nISO/IEC 9126:1991标准提出的质量模型包括（ 功能性 ）、可靠性、（ 可使用性 ）、效率、可维护性、（ 可移植性 ）六大特性。\n按照缺陷的严重程度可以将缺陷划分为（ 严重缺陷 ）、一般缺陷、次要缺陷、（ 建议缺陷 ）。\n验证软件单元是否符合软件需求与设计的测试称为（ 单元测试 ）。\n对程序的逻辑结构、路径与运行过程进行的测试称为（ 白盒测试 ）。\n有一种测试模型，测试与开发并行进行，这种测试模型称为（ H ）模型。\n判断题 软件存在缺陷是由于开发人员水平有限引起的，优秀的开发人员可以开发出零缺陷的软件。（ × ）\n软件缺陷都存在于程序代码中。（ × ）\n软件测试是为了证明程序无错。（ × ）\n软件测试要投入尽可能多的精力以达到100%的覆盖率。（ × ）\n单选题 下列选项中，不属于软件开发模型的是（ A ）\nA. V模型\nB. 快速原型模型\nC. 螺旋模型\nD. 敏捷模型\n下列选项中，哪一项不是影响软件质量的因素（ C ）\nA．需求模糊\nB. 缺乏规范的文档指导\nC. 软件测试要求太严格\nD. 开发人员技术有限\n下列哪一项不是软件缺陷产生的原因（ B ）\nA. 需求不明确\nB. 测试用例设计不好\nC. 软件结构复杂\nD. 项目周期短\n下列选项中，关于软件缺陷的说法错误的是（ C ）\nA. 软件缺陷是软件（包括程序和文档）中存在的影响软件正常运行的问题、错误、隐藏的功能缺失或多余\nB. 按照缺陷的优先级不同可以将缺陷划分为立即解决缺陷、高优先级缺陷、正常排队缺陷、低优先级缺陷\nC. 缺陷报告有统一的模板，该模板是根据IEEE729-1983标准制定的\nD. 每个缺陷都有一个唯一的编号，这是缺陷的标识\n下列选项中，关于软件测试的说法错误的是（ D ）\nA. 在早期的软件开发中，测试就等同于调试\nB. 软件测试是使用人工或自动手段来运行或测定某个系统的过程\nC. 软件测试的目的在于检验软件是否满足规定的需求或弄清楚预期结果与实际结果之间的差异\nD. 软件测试与软件开发是两个独立、分离的过程\n下列选项中，不属于软件测试原则的是（ B ）\nA. 测试应基于用户需求\nB. 测试越晚进行越好\nC. 穷尽测试是不可以的\nD. 软件测试遵循 GoodEnough 原则\n","date":"2024-08-25T00:00:00Z","image":"http://localhost:1313/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/86aae82b21d34acb81f164634b54504e_hu_dfa23e215e3c8219.webp","permalink":"http://localhost:1313/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/","title":"第一章 软件测试基础"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","permalink":"http://localhost:1313/p/markdown-%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/","title":"Markdown 语法示例"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/katex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/","title":"KaTeX 数学公式"}]