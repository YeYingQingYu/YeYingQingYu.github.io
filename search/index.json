[{"content":"参考内容 【AI客服deepseek】deepseek接入微信（本地部署deepseek集成微信自动收发消息）\n黑马程序员AI大模型开发零基础到项目实战全套视频教程，基于DeepSeek和Qwen大模型，从大模型私有化部署、运行机制到独立搭建聊天机器人一套通关_哔哩哔哩_bilibili\n本地部署 Ollama 安装 Ollama 是一个开源的本地大语言模型运行框架，专为在本地机器上便捷部署和运行大型语言模型（LLM）而设计。\nOllama 官网\n模型安装 在 Ollama Search 中选择想要下载的模型，使用 cmd 终端运行相应代码即可。\n需要注意的是 ollama 默认安装在 C 盘目录 AppData 下的 ollama 文件夹中，如果内存不够可以在环境变量中配置 OLLAMA_MODELS，路径自选。\n可视化页面 Chatbox 安装 Chatbox AI 是一款 AI 客户端应用和智能助手，支持众多先进的 AI 模型和 API，可在 Windows、MacOS、Android、iOS、Linux 和网页版上使用。\nChatbox 官网\n安装 chatbox 可以在窗口应用中使用相应本地模型，代替了在 cmd 终端中运行。\nOllama Web UI Lite 安装 Ollama Web UI Lite 是 Ollama Web UI 的简化版本，旨在提供简化的用户界面，具有最少的功能和更低的复杂性。该项目的主要重点是通过完整的 TypeScript 迁移实现更清晰的代码，采用更加模块化的架构，确保全面的测试覆盖率，并实施强大的 CI/CD 管道。\nollama-webui/ollama-webui-lite: This repo is no longer maintained, please use our main Open WebUI repo.\n本地解压后，在终端中打开，使用 npm ci 安装依赖，然后使用 npm run dev 即可运行。\n自动聊天 实现原理 通过本地代码监测微信聊天窗口，获取到消息后调用本地 deepseek 模型，并将 deepseek 的回复发送到聊天窗口。\n需要安装 wxauto 自动控制微信界面实现收发信息。\n此时我使用的 Python 版本是 3.10.6，微信版本为 3.9.12.51，与视频演示中的版本不同。\n发送消息 1 2 3 4 5 6 7 8 9 10 11 from wxauto import Wechat wx= Wechat() # 指定人/群发消息 wx.sendMsg(msg=\u0026#34;你好\u0026#34;，who=\u0026#34;用户ID\u0026#34;) # 群消息+@指定人 # wx.sendMsg(msg=\u0026#34;你好\u0026#34;，who=\u0026#34;...\u0026#34;，at=[“...\u0026#34;,“...”]) # wx.sendMsg(filepath=\u0026#34;F:\\xxx.png\u0026#34;，who=\u0026#34;...\u0026#34;) # wx.sendMsg(filepath=[\u0026#34;文件A\u0026#34;,“文件B\u0026#34;,“F:\\xxx.png\u0026#34;]，who=“...”) 接收所有消息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 from wxauto import wechat WX = Wechat() # { # \u0026#34;用户昵称A\u0026#34;: [消息对象1, 消息对象2, 消息对象3], # \u0026#34;用户昵称B\u0026#34;: [消息对象1, 消息对象2, 消息对象3] # } while True: # 等待接受收到的最新消息 msg_dict= wx.GetNextNewMessage for username, msg_list in msg_dict.items(): print(\u0026#34;昵称:\u0026#34;, username) # [消息对象1，消息对象2，消息对象3] for msg in msg_list: print(\u0026#34;\\t消息\u0026#34;, msg.type, msg.content) 接收指定用户消息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from wxauto import wechat wx = Wechat() wx.AddListenchat(who=\u0026#39;用户ID\u0026#34;) wx.AddListenchat(who=\u0026#34;...\u0026#34;) # { # \u0026#34;用户A聊天窗口\u0026#34;: [消息对象1, 消息对象2, 消息对象3], # \u0026#34;用户B聊天窗口\u0026#34;: [消息对象1, 消息对象2, 消息对象3] # } while True:\tlisten dict = wx.GetListenMessage() for chat win, message list in listen_ dict.items(): #用户或群名 chat user=chat win.who #[消息对象1,消息对象2,消息对象3] for msg in message_list: if msg.type != \u0026#34;friend\u0026#34;: continue print(chat_user, msg.content) # 回复消息 # chat_win.sendMsg(\u0026#34;回复的内容\u0026#34;) time.sleep(5) 整体实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 import os import time import json import requests from wxauto import WeChat # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): fp = open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) DB = json.load(fp) fp.close() # MONITOR_LIST = [] # fp = open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) # for line in fp: # # 读取users.txt加载监听用户 # # print(line) # MONITOR_LIST.append(line) # fp.close() # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() # 去除首尾空白字符和换行符 if line: # 忽略空行 MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户列表\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 默认监听用户（示例） # 打开微信 wx = WeChat() # 监听账户列表 # MONITOR_LIST = [\u0026#34;沙系\u0026#34;] for ele in MONITOR_LIST: wx.AddListenChat(who = ele) # 监听消息 while True: listen_dict = wx.GetListenMessage() for chat_win, message_list in listen_dict.items(): # print(chat_win.who) chat_user = chat_win.who # 获取最新聊天消息 interval_list = [] for msg in message_list: if msg.type != \u0026#34;friend\u0026#34;: continue interval_list.append({\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: msg.content}) if not interval_list: continue # 拼接历史聊天记录 print(\u0026#34;微信消息：\u0026#34;) for interval in interval_list: print(interval) history_list = DB.get(chat_user, []) history_list.extend(interval_list) # 调用本地 deepseek 模型 res = requests.post( url=\u0026#34;http://localhost:11434/api/chat\u0026#34;, json={ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1:8b\u0026#34;, \u0026#34;message\u0026#34;: history_list, \u0026#34;stream\u0026#34;: False } ) data_dict = res.json() res_msg_dict = data_dict[\u0026#39;message\u0026#39;] # 获取 deepseek 回复内容，微信回复 res_content = res_msg_dict[\u0026#39;content\u0026#39;] chat_win.SendMsg(res_content) print(\u0026#34;deepseek回复：\u0026#34;) print(res_content) # 保存沟通记录 history_list.append(res_msg_dict) DB[chat_user] = history_list with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp: json.dump(DB, fp, ensure_ascii=False, indent=2) 代码运行后能够成功监听到微信好友发送的消息，且能够读取到消息信息，但是在回复时一直报错，显示回复时间超时，报错信息如下。\n1 2 3 4 5 6 Traceback (most recent call last): File \u0026#34;D:\\PycharmProject\\WebAutoTest\\Auto_Chat\\Auto_Chat.py\u0026#34;, line 82, in \u0026lt;module\u0026gt; chat_win.SendMsg(res_content) File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\elements.py\u0026#34;, line 250, in SendMsg raise TimeoutError(f\u0026#39;发送消息超时 --\u0026gt; {self.who} - {msg}\u0026#39;) TimeoutError: 发送消息超时 --\u0026gt; 沙系 - 询问 AI 修改后代码如下，但仍未能解决问题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 import os import time import json import requests from wxauto import WeChat import win32gui import win32con # ======================== 工具函数 ======================== def activate_window(window_title): \u0026#34;\u0026#34;\u0026#34;强制激活微信窗口（需管理员权限）\u0026#34;\u0026#34;\u0026#34; try: hwnd = win32gui.FindWindow(None, window_title) if hwnd: win32gui.ShowWindow(hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(hwnd) except Exception as e: print(f\u0026#34;窗口激活失败（不影响发送）: {str(e)}\u0026#34;) def safe_send_msg(chat_win, msg, max_retries=3): \u0026#34;\u0026#34;\u0026#34;带重试机制的消息发送\u0026#34;\u0026#34;\u0026#34; for attempt in range(max_retries): try: # 尝试激活窗口（提高成功率） if hasattr(chat_win, \u0026#39;who\u0026#39;): activate_window(f\u0026#34;{chat_win.who} - 微信\u0026#34;) time.sleep(1) chat_win.SendMsg(msg) return True except Exception as e: print(f\u0026#34;发送失败（尝试 {attempt + 1}/{max_retries}）: {str(e)}\u0026#34;) time.sleep(2) return False # ======================== 主逻辑 ======================== # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): try: with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: DB = json.load(fp) except Exception as e: print(f\u0026#34;历史记录加载失败: {str(e)}\u0026#34;) # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() if line and line not in MONITOR_LIST: # 去重 MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 初始化微信 wx = WeChat() for user in MONITOR_LIST: try: wx.AddListenChat(who=user) print(f\u0026#34;已监听用户: {user}\u0026#34;) except Exception as e: print(f\u0026#34;监听用户 {user} 失败: {str(e)}\u0026#34;) # 主循环 while True: try: listen_dict = wx.GetListenMessage() for chat_win, message_list in listen_dict.items(): chat_user = chat_win.who # 过滤非好友消息 interval_list = [ {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: msg.content} for msg in message_list if msg.type == \u0026#34;friend\u0026#34; ] if not interval_list: continue print(f\u0026#34;\\n收到来自 {chat_user} 的消息:\u0026#34;) for msg in interval_list: print(f\u0026#34; {msg[\u0026#39;content\u0026#39;]}\u0026#34;) # 合并历史记录 history_list = DB.get(chat_user, []) history_list.extend(interval_list) # 调用模型API try: res = requests.post( url=\u0026#34;http://localhost:11434/api/chat\u0026#34;, json={ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1:8b\u0026#34;, \u0026#34;message\u0026#34;: history_list, \u0026#34;stream\u0026#34;: False }, timeout=30 ) res.raise_for_status() reply = res.json()[\u0026#39;message\u0026#39;] reply_content = reply[\u0026#39;content\u0026#39;] except Exception as e: print(f\u0026#34;模型调用失败: {str(e)}\u0026#34;) reply_content = \u0026#34;（思考中...请稍后再试）\u0026#34; # 发送回复 print(f\u0026#34;\\n回复 {chat_user}:\u0026#34;) print(f\u0026#34; {reply_content}\u0026#34;) if not safe_send_msg(chat_win, reply_content): print(f\u0026#34;⚠️ 最终发送失败: {reply_content[:50]}...\u0026#34;) else: # 保存成功记录 history_list.append(reply) DB[chat_user] = history_list with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp: json.dump(DB, fp, ensure_ascii=False, indent=2) time.sleep(1) # 降低CPU占用 except KeyboardInterrupt: print(\u0026#34;\\n用户终止程序\u0026#34;) break except Exception as e: print(f\u0026#34;主循环异常: {str(e)}\u0026#34;) time.sleep(5) # 防止频繁报错 此时检查可能影响因素，ollama 正常运行，能够访问到 api 地址 http://localhost:11434/api/tags，管理员身份运行 pycharm，模型加载正常，暂时未发现其他问题。\n终端信息输出如下。\ntime=2025-06-07T11:16:44.115+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T11:16:44.142+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T11:16:44.155+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T11:16:44.156+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.vision.block_count default=0 time=2025-06-07T11:16:44.156+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.key_length default=128 time=2025-06-07T11:16:44.156+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.value_length default=128 time=2025-06-07T11:16:44.156+08:00 level=INFO source=sched.go:754 msg=\u0026#34;new model will fit in available VRAM in single GPU, loading\u0026#34; model=C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be gpu=GPU-189333b1-98d9-8621-adb5-344761953fc5 parallel=2 available=7349653504 required=\u0026#34;6.5 GiB\u0026#34; time=2025-06-07T11:16:44.177+08:00 level=INFO source=server.go:106 msg=\u0026#34;system memory\u0026#34; total=\u0026#34;31.3 GiB\u0026#34; free=\u0026#34;16.5 GiB\u0026#34; free_swap=\u0026#34;22.9 GiB\u0026#34; time=2025-06-07T11:16:44.177+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.vision.block_count default=0 time=2025-06-07T11:16:44.177+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.key_length default=128 time=2025-06-07T11:16:44.177+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.value_length default=128 time=2025-06-07T11:16:44.177+08:00 level=INFO source=server.go:139 msg=offload library=cuda layers.requested=-1 layers.model=33 layers.offload=33 layers.split=\u0026#34;\u0026#34; memory.available=\u0026#34;[6.8 GiB]\u0026#34; memory.gpu_overhead=\u0026#34;0 B\u0026#34; memory.required.full=\u0026#34;6.5 GiB\u0026#34; memory.required.partial=\u0026#34;6.5 GiB\u0026#34; memory.required.kv=\u0026#34;1.0 GiB\u0026#34; memory.required.allocations=\u0026#34;[6.5 GiB]\u0026#34; memory.weights.total=\u0026#34;4.3 GiB\u0026#34; memory.weights.repeating=\u0026#34;3.9 GiB\u0026#34; memory.weights.nonrepeating=\u0026#34;411.0 MiB\u0026#34; memory.graph.full=\u0026#34;560.0 MiB\u0026#34; memory.graph.partial=\u0026#34;677.5 MiB\u0026#34; llama_model_loader: loaded meta data with 28 key-value pairs and 292 tensors from C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be (version GGUF V3 (latest)) llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output. llama_model_loader: - kv 0: general.architecture str = llama llama_model_loader: - kv 1: general.type str = model llama_model_loader: - kv 2: general.name str = DeepSeek R1 Distill Llama 8B llama_model_loader: - kv 3: general.basename str = DeepSeek-R1-Distill-Llama llama_model_loader: - kv 4: general.size_label str = 8B llama_model_loader: - kv 5: llama.block_count u32 = 32 llama_model_loader: - kv 6: llama.context_length u32 = 131072 llama_model_loader: - kv 7: llama.embedding_length u32 = 4096 llama_model_loader: - kv 8: llama.feed_forward_length u32 = 14336 llama_model_loader: - kv 9: llama.attention.head_count u32 = 32 llama_model_loader: - kv 10: llama.attention.head_count_kv u32 = 8 llama_model_loader: - kv 11: llama.rope.freq_base f32 = 500000.000000 llama_model_loader: - kv 12: llama.attention.layer_norm_rms_epsilon f32 = 0.000010 llama_model_loader: - kv 13: general.file_type u32 = 15 llama_model_loader: - kv 14: llama.vocab_size u32 = 128256 llama_model_loader: - kv 15: llama.rope.dimension_count u32 = 128 llama_model_loader: - kv 16: tokenizer.ggml.model str = gpt2 llama_model_loader: - kv 17: tokenizer.ggml.pre str = llama-bpe llama_model_loader: - kv 18: tokenizer.ggml.tokens arr[str,128256] = [\u0026#34;!\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\u0026#39;\u0026#34;, ... llama_model_loader: - kv 19: tokenizer.ggml.token_type arr[i32,128256] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... llama_model_loader: - kv 20: tokenizer.ggml.merges arr[str,280147] = [\u0026#34;Ġ Ġ\u0026#34;, \u0026#34;Ġ ĠĠĠ\u0026#34;, \u0026#34;ĠĠ ĠĠ\u0026#34;, \u0026#34;... llama_model_loader: - kv 21: tokenizer.ggml.bos_token_id u32 = 128000 llama_model_loader: - kv 22: tokenizer.ggml.eos_token_id u32 = 128001 llama_model_loader: - kv 23: tokenizer.ggml.padding_token_id u32 = 128001 llama_model_loader: - kv 24: tokenizer.ggml.add_bos_token bool = true llama_model_loader: - kv 25: tokenizer.ggml.add_eos_token bool = false llama_model_loader: - kv 26: tokenizer.chat_template str = {% if not add_generation_prompt is de... llama_model_loader: - kv 27: general.quantization_version u32 = 2 llama_model_loader: - type f32: 66 tensors llama_model_loader: - type q4_K: 193 tensors llama_model_loader: - type q6_K: 33 tensors print_info: file format = GGUF V3 (latest) print_info: file type = Q4_K - Medium print_info: file size = 4.58 GiB (4.89 BPW) load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect load: special tokens cache size = 256 load: token to piece cache size = 0.7999 MB print_info: arch = llama print_info: vocab_only = 1 print_info: model type = ?B print_info: model params = 8.03 B print_info: general.name = DeepSeek R1 Distill Llama 8B print_info: vocab type = BPE print_info: n_vocab = 128256 print_info: n_merges = 280147 print_info: BOS token = 128000 \u0026#39;\u0026lt;｜begin▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOS token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOT token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOM token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: PAD token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: LF token = 198 \u0026#39;Ċ\u0026#39; print_info: EOG token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOG token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: EOG token = 128009 \u0026#39;\u0026lt;|eot_id|\u0026gt;\u0026#39; print_info: max token length = 256 llama_model_load: vocab only - skipping tensors time=2025-06-07T11:16:44.398+08:00 level=INFO source=server.go:410 msg=\u0026#34;starting llama server\u0026#34; cmd=\u0026#34;C:\\\\Users\\\\Ysam\\\\AppData\\\\Local\\\\Programs\\\\Ollama\\\\ollama.exe runner --model C:\\\\Users\\\\Ysam\\\\.ollama\\\\models\\\\blobs\\\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be --ctx-size 8192 --batch-size 512 --n-gpu-layers 33 --threads 12 --no-mmap --parallel 2 --port 57197\u0026#34; time=2025-06-07T11:16:44.401+08:00 level=INFO source=sched.go:452 msg=\u0026#34;loaded runners\u0026#34; count=1 time=2025-06-07T11:16:44.401+08:00 level=INFO source=server.go:589 msg=\u0026#34;waiting for llama runner to start responding\u0026#34; time=2025-06-07T11:16:44.401+08:00 level=INFO source=server.go:623 msg=\u0026#34;waiting for server to become available\u0026#34; status=\u0026#34;llm server error\u0026#34; time=2025-06-07T11:16:44.420+08:00 level=INFO source=runner.go:853 msg=\u0026#34;starting go runner\u0026#34; load_backend: loaded CPU backend from C:\\Users\\Ysam\\AppData\\Local\\Programs\\Ollama\\lib\\ollama\\ggml-cpu-icelake.dll ggml_cuda_init: GGML_CUDA_FORCE_MMQ: no ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no ggml_cuda_init: found 1 CUDA devices: Device 0: NVIDIA GeForce RTX 4070 Laptop GPU, compute capability 8.9, VMM: yes load_backend: loaded CUDA backend from C:\\Users\\Ysam\\AppData\\Local\\Programs\\Ollama\\lib\\ollama\\cuda_v12\\ggml-cuda.dll time=2025-06-07T11:16:44.744+08:00 level=INFO source=ggml.go:103 msg=system CPU.0.SSE3=1 CPU.0.SSSE3=1 CPU.0.AVX=1 CPU.0.AVX2=1 CPU.0.F16C=1 CPU.0.FMA=1 CPU.0.BMI2=1 CPU.0.AVX512=1 CPU.0.AVX512_VBMI=1 CPU.0.AVX512_VNNI=1 CPU.0.LLAMAFILE=1 CPU.1.LLAMAFILE=1 CUDA.0.ARCHS=500,600,610,700,750,800,860,870,890,900,1200 CUDA.0.USE_GRAPHS=1 CUDA.0.PEER_MAX_BATCH_SIZE=128 compiler=cgo(clang) time=2025-06-07T11:16:44.744+08:00 level=INFO source=runner.go:913 msg=\u0026#34;Server listening on 127.0.0.1:57197\u0026#34; llama_model_load_from_file_impl: using device CUDA0 (NVIDIA GeForce RTX 4070 Laptop GPU) - 7056 MiB free time=2025-06-07T11:16:44.903+08:00 level=INFO source=server.go:623 msg=\u0026#34;waiting for server to become available\u0026#34; status=\u0026#34;llm server loading model\u0026#34; llama_model_loader: loaded meta data with 28 key-value pairs and 292 tensors from C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be (version GGUF V3 (latest)) llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output. llama_model_loader: - kv 0: general.architecture str = llama llama_model_loader: - kv 1: general.type str = model llama_model_loader: - kv 2: general.name str = DeepSeek R1 Distill Llama 8B llama_model_loader: - kv 3: general.basename str = DeepSeek-R1-Distill-Llama llama_model_loader: - kv 4: general.size_label str = 8B llama_model_loader: - kv 5: llama.block_count u32 = 32 llama_model_loader: - kv 6: llama.context_length u32 = 131072 llama_model_loader: - kv 7: llama.embedding_length u32 = 4096 llama_model_loader: - kv 8: llama.feed_forward_length u32 = 14336 llama_model_loader: - kv 9: llama.attention.head_count u32 = 32 llama_model_loader: - kv 10: llama.attention.head_count_kv u32 = 8 llama_model_loader: - kv 11: llama.rope.freq_base f32 = 500000.000000 llama_model_loader: - kv 12: llama.attention.layer_norm_rms_epsilon f32 = 0.000010 llama_model_loader: - kv 13: general.file_type u32 = 15 llama_model_loader: - kv 14: llama.vocab_size u32 = 128256 llama_model_loader: - kv 15: llama.rope.dimension_count u32 = 128 llama_model_loader: - kv 16: tokenizer.ggml.model str = gpt2 llama_model_loader: - kv 17: tokenizer.ggml.pre str = llama-bpe llama_model_loader: - kv 18: tokenizer.ggml.tokens arr[str,128256] = [\u0026#34;!\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\u0026#39;\u0026#34;, ... llama_model_loader: - kv 19: tokenizer.ggml.token_type arr[i32,128256] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... llama_model_loader: - kv 20: tokenizer.ggml.merges arr[str,280147] = [\u0026#34;Ġ Ġ\u0026#34;, \u0026#34;Ġ ĠĠĠ\u0026#34;, \u0026#34;ĠĠ ĠĠ\u0026#34;, \u0026#34;... llama_model_loader: - kv 21: tokenizer.ggml.bos_token_id u32 = 128000 llama_model_loader: - kv 22: tokenizer.ggml.eos_token_id u32 = 128001 llama_model_loader: - kv 23: tokenizer.ggml.padding_token_id u32 = 128001 llama_model_loader: - kv 24: tokenizer.ggml.add_bos_token bool = true llama_model_loader: - kv 25: tokenizer.ggml.add_eos_token bool = false llama_model_loader: - kv 26: tokenizer.chat_template str = {% if not add_generation_prompt is de... llama_model_loader: - kv 27: general.quantization_version u32 = 2 llama_model_loader: - type f32: 66 tensors llama_model_loader: - type q4_K: 193 tensors llama_model_loader: - type q6_K: 33 tensors print_info: file format = GGUF V3 (latest) print_info: file type = Q4_K - Medium print_info: file size = 4.58 GiB (4.89 BPW) load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect load: special tokens cache size = 256 load: token to piece cache size = 0.7999 MB print_info: arch = llama print_info: vocab_only = 0 print_info: n_ctx_train = 131072 print_info: n_embd = 4096 print_info: n_layer = 32 print_info: n_head = 32 print_info: n_head_kv = 8 print_info: n_rot = 128 print_info: n_swa = 0 print_info: n_swa_pattern = 1 print_info: n_embd_head_k = 128 print_info: n_embd_head_v = 128 print_info: n_gqa = 4 print_info: n_embd_k_gqa = 1024 print_info: n_embd_v_gqa = 1024 print_info: f_norm_eps = 0.0e+00 print_info: f_norm_rms_eps = 1.0e-05 print_info: f_clamp_kqv = 0.0e+00 print_info: f_max_alibi_bias = 0.0e+00 print_info: f_logit_scale = 0.0e+00 print_info: f_attn_scale = 0.0e+00 print_info: n_ff = 14336 print_info: n_expert = 0 print_info: n_expert_used = 0 print_info: causal attn = 1 print_info: pooling type = 0 print_info: rope type = 0 print_info: rope scaling = linear print_info: freq_base_train = 500000.0 print_info: freq_scale_train = 1 print_info: n_ctx_orig_yarn = 131072 print_info: rope_finetuned = unknown print_info: ssm_d_conv = 0 print_info: ssm_d_inner = 0 print_info: ssm_d_state = 0 print_info: ssm_dt_rank = 0 print_info: ssm_dt_b_c_rms = 0 print_info: model type = 8B print_info: model params = 8.03 B print_info: general.name = DeepSeek R1 Distill Llama 8B print_info: vocab type = BPE print_info: n_vocab = 128256 print_info: n_merges = 280147 print_info: BOS token = 128000 \u0026#39;\u0026lt;｜begin▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOS token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOT token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOM token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: PAD token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: LF token = 198 \u0026#39;Ċ\u0026#39; print_info: EOG token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOG token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: EOG token = 128009 \u0026#39;\u0026lt;|eot_id|\u0026gt;\u0026#39; print_info: max token length = 256 load_tensors: loading model tensors, this can take a while... (mmap = false) load_tensors: offloading 32 repeating layers to GPU load_tensors: offloading output layer to GPU load_tensors: offloaded 33/33 layers to GPU load_tensors: CUDA0 model buffer size = 4403.49 MiB load_tensors: CPU model buffer size = 281.81 MiB llama_context: constructing llama_context llama_context: n_seq_max = 2 llama_context: n_ctx = 8192 llama_context: n_ctx_per_seq = 4096 llama_context: n_batch = 1024 llama_context: n_ubatch = 512 llama_context: causal_attn = 1 llama_context: flash_attn = 0 llama_context: freq_base = 500000.0 llama_context: freq_scale = 1 llama_context: n_ctx_per_seq (4096) \u0026lt; n_ctx_train (131072) -- the full capacity of the model will not be utilized llama_context: CUDA_Host output buffer size = 1.01 MiB init: kv_size = 8192, offload = 1, type_k = \u0026#39;f16\u0026#39;, type_v = \u0026#39;f16\u0026#39;, n_layer = 32, can_shift = 1 init: CUDA0 KV buffer size = 1024.00 MiB llama_context: KV self size = 1024.00 MiB, K (f16): 512.00 MiB, V (f16): 512.00 MiB llama_context: CUDA0 compute buffer size = 560.00 MiB llama_context: CUDA_Host compute buffer size = 24.01 MiB llama_context: graph nodes = 1094 llama_context: graph splits = 2 time=2025-06-07T11:16:45.904+08:00 level=INFO source=server.go:628 msg=\u0026#34;llama runner started in 1.50 seconds\u0026#34; [GIN] 2025/06/07 - 11:16:45 | 200 | 1.8019804s | 127.0.0.1 | POST \u0026#34;/api/chat\u0026#34; 代码修改 问答过程 提问1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 import os import time import json import requests from wxauto import WeChat # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): fp = open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) DB = json.load(fp) fp.close() # MONITOR_LIST = [] # fp = open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) # for line in fp: # # 读取users.txt加载监听用户 # # print(line) # MONITOR_LIST.append(line) # fp.close() # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() # 去除首尾空白字符和换行符 if line: # 忽略空行 MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户列表\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 默认监听用户（示例） # 打开微信 wx = WeChat() # 监听账户列表 # MONITOR_LIST = [\u0026#34;沙系\u0026#34;] for ele in MONITOR_LIST: wx.AddListenChat(who = ele) # 监听消息 while True: listen_dict = wx.GetListenMessage() for chat_win, message_list in listen_dict.items(): # print(chat_win.who) chat_user = chat_win.who # 获取最新聊天消息 interval_list = [] for msg in message_list: if msg.type != \u0026#34;friend\u0026#34;: continue interval_list.append({\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: msg.content}) if not interval_list: continue # 拼接历史聊天记录 print(\u0026#34;微信消息：\u0026#34;) for interval in interval_list: print(interval) history_list = DB.get(chat_user, []) history_list.extend(interval_list) # 调用本地 deepseek 模型 res = requests.post( url=\u0026#34;http://localhost:11434/api/chat\u0026#34;, json={ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1:8b\u0026#34;, \u0026#34;message\u0026#34;: history_list, \u0026#34;stream\u0026#34;: False } ) data_dict = res.json() res_msg_dict = data_dict[\u0026#39;message\u0026#39;] # 获取 deepseek 回复内容，微信回复 res_content = res_msg_dict[\u0026#39;content\u0026#39;] chat_win.SendMsg(res_content) print(\u0026#34;deepseek回复：\u0026#34;) print(res_content) # 保存沟通记录 history_list.append(res_msg_dict) DB[chat_user] = history_list with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp: json.dump(DB, fp, ensure_ascii=False, indent=2) 这段代码在运行后，能够检测到当前聊天用户，并且能够获取到信息，但是无法回复 pycharm 报错如下： 初始化成功，获取到已登录窗口：清雨 微信消息： {\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: \u0026#39;测试\u0026#39;} Traceback (most recent call last): File \u0026#34;D:\\PycharmProject\\WebAutoTest\\Auto_Chat\\Auto_Chat.py\u0026#34;, line 82, in \u0026lt;module\u0026gt; chat_win.SendMsg(res_content) File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\elements.py\u0026#34;, line 250, in SendMsg raise TimeoutError(f\u0026#39;发送消息超时 --\u0026gt; {self.who} - {msg}\u0026#39;) TimeoutError: 发送消息超时 --\u0026gt; 沙系 - 在终端中可以看到如下信息 C:\\Users\\Ysam\u0026gt;ollama serve 2025/06/07 12:01:11 routes.go:1233: INFO server config env=\u0026#34;map[CUDA_VISIBLE_DEVICES: GPU_DEVICE_ORDINAL: HIP_VISIBLE_DEVICES: HSA_OVERRIDE_GFX_VERSION: HTTPS_PROXY: HTTP_PROXY: NO_PROXY: OLLAMA_CONTEXT_LENGTH:4096 OLLAMA_DEBUG:false OLLAMA_FLASH_ATTENTION:false OLLAMA_GPU_OVERHEAD:0 OLLAMA_HOST:http://127.0.0.1:11434 OLLAMA_INTEL_GPU:false OLLAMA_KEEP_ALIVE:5m0s OLLAMA_KV_CACHE_TYPE: OLLAMA_LLM_LIBRARY: OLLAMA_LOAD_TIMEOUT:5m0s OLLAMA_MAX_LOADED_MODELS:0 OLLAMA_MAX_QUEUE:512 OLLAMA_MODELS:C:\\\\Users\\\\Ysam\\\\.ollama\\\\models OLLAMA_MULTIUSER_CACHE:false OLLAMA_NEW_ENGINE:false OLLAMA_NOHISTORY:false OLLAMA_NOPRUNE:false OLLAMA_NUM_PARALLEL:0 OLLAMA_ORIGINS:[http://localhost https://localhost http://localhost:* https://localhost:* http://127.0.0.1 https://127.0.0.1 http://127.0.0.1:* https://127.0.0.1:* http://0.0.0.0 https://0.0.0.0 http://0.0.0.0:* https://0.0.0.0:* app://* file://* tauri://* vscode-webview://* vscode-file://*] OLLAMA_SCHED_SPREAD:false ROCR_VISIBLE_DEVICES:]\u0026#34; time=2025-06-07T12:01:11.166+08:00 level=INFO source=images.go:463 msg=\u0026#34;total blobs: 10\u0026#34; time=2025-06-07T12:01:11.166+08:00 level=INFO source=images.go:470 msg=\u0026#34;total unused blobs removed: 0\u0026#34; time=2025-06-07T12:01:11.167+08:00 level=INFO source=routes.go:1300 msg=\u0026#34;Listening on 127.0.0.1:11434 (version 0.6.8)\u0026#34; time=2025-06-07T12:01:11.167+08:00 level=INFO source=gpu.go:217 msg=\u0026#34;looking for compatible GPUs\u0026#34; time=2025-06-07T12:01:11.167+08:00 level=INFO source=gpu_windows.go:167 msg=packages count=1 time=2025-06-07T12:01:11.167+08:00 level=INFO source=gpu_windows.go:214 msg=\u0026#34;\u0026#34; package=0 cores=12 efficiency=0 threads=24 time=2025-06-07T12:01:11.758+08:00 level=WARN source=amd_windows.go:138 msg=\u0026#34;amdgpu is not supported (supported types:[gfx1030 gfx1100 gfx1101 gfx1102 gfx1151 gfx906])\u0026#34; gpu_type=gfx1036 gpu=0 library=C:\\Users\\Ysam\\AppData\\Local\\Programs\\Ollama\\lib\\ollama\\rocm time=2025-06-07T12:01:11.761+08:00 level=INFO source=types.go:130 msg=\u0026#34;inference compute\u0026#34; id=GPU-189333b1-98d9-8621-adb5-344761953fc5 library=cuda variant=v12 compute=8.9 driver=12.8 name=\u0026#34;NVIDIA GeForce RTX 4070 Laptop GPU\u0026#34; total=\u0026#34;8.0 GiB\u0026#34; available=\u0026#34;6.9 GiB\u0026#34; time=2025-06-07T12:01:29.732+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T12:01:29.754+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T12:01:29.767+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=general.alignment default=32 time=2025-06-07T12:01:29.768+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.vision.block_count default=0 time=2025-06-07T12:01:29.768+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.key_length default=128 time=2025-06-07T12:01:29.768+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.value_length default=128 time=2025-06-07T12:01:29.768+08:00 level=INFO source=sched.go:754 msg=\u0026#34;new model will fit in available VRAM in single GPU, loading\u0026#34; model=C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be gpu=GPU-189333b1-98d9-8621-adb5-344761953fc5 parallel=2 available=7317225472 required=\u0026#34;6.5 GiB\u0026#34; time=2025-06-07T12:01:29.777+08:00 level=INFO source=server.go:106 msg=\u0026#34;system memory\u0026#34; total=\u0026#34;31.3 GiB\u0026#34; free=\u0026#34;18.0 GiB\u0026#34; free_swap=\u0026#34;22.8 GiB\u0026#34; time=2025-06-07T12:01:29.777+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.vision.block_count default=0 time=2025-06-07T12:01:29.777+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.key_length default=128 time=2025-06-07T12:01:29.777+08:00 level=WARN source=ggml.go:152 msg=\u0026#34;key not found\u0026#34; key=llama.attention.value_length default=128 time=2025-06-07T12:01:29.778+08:00 level=INFO source=server.go:139 msg=offload library=cuda layers.requested=-1 layers.model=33 layers.offload=33 layers.split=\u0026#34;\u0026#34; memory.available=\u0026#34;[6.8 GiB]\u0026#34; memory.gpu_overhead=\u0026#34;0 B\u0026#34; memory.required.full=\u0026#34;6.5 GiB\u0026#34; memory.required.partial=\u0026#34;6.5 GiB\u0026#34; memory.required.kv=\u0026#34;1.0 GiB\u0026#34; memory.required.allocations=\u0026#34;[6.5 GiB]\u0026#34; memory.weights.total=\u0026#34;4.3 GiB\u0026#34; memory.weights.repeating=\u0026#34;3.9 GiB\u0026#34; memory.weights.nonrepeating=\u0026#34;411.0 MiB\u0026#34; memory.graph.full=\u0026#34;560.0 MiB\u0026#34; memory.graph.partial=\u0026#34;677.5 MiB\u0026#34; llama_model_loader: loaded meta data with 28 key-value pairs and 292 tensors from C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be (version GGUF V3 (latest)) llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output. llama_model_loader: - kv 0: general.architecture str = llama llama_model_loader: - kv 1: general.type str = model llama_model_loader: - kv 2: general.name str = DeepSeek R1 Distill Llama 8B llama_model_loader: - kv 3: general.basename str = DeepSeek-R1-Distill-Llama llama_model_loader: - kv 4: general.size_label str = 8B llama_model_loader: - kv 5: llama.block_count u32 = 32 llama_model_loader: - kv 6: llama.context_length u32 = 131072 llama_model_loader: - kv 7: llama.embedding_length u32 = 4096 llama_model_loader: - kv 8: llama.feed_forward_length u32 = 14336 llama_model_loader: - kv 9: llama.attention.head_count u32 = 32 llama_model_loader: - kv 10: llama.attention.head_count_kv u32 = 8 llama_model_loader: - kv 11: llama.rope.freq_base f32 = 500000.000000 llama_model_loader: - kv 12: llama.attention.layer_norm_rms_epsilon f32 = 0.000010 llama_model_loader: - kv 13: general.file_type u32 = 15 llama_model_loader: - kv 14: llama.vocab_size u32 = 128256 llama_model_loader: - kv 15: llama.rope.dimension_count u32 = 128 llama_model_loader: - kv 16: tokenizer.ggml.model str = gpt2 llama_model_loader: - kv 17: tokenizer.ggml.pre str = llama-bpe llama_model_loader: - kv 18: tokenizer.ggml.tokens arr[str,128256] = [\u0026#34;!\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\u0026#39;\u0026#34;, ... llama_model_loader: - kv 19: tokenizer.ggml.token_type arr[i32,128256] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... llama_model_loader: - kv 20: tokenizer.ggml.merges arr[str,280147] = [\u0026#34;Ġ Ġ\u0026#34;, \u0026#34;Ġ ĠĠĠ\u0026#34;, \u0026#34;ĠĠ ĠĠ\u0026#34;, \u0026#34;... llama_model_loader: - kv 21: tokenizer.ggml.bos_token_id u32 = 128000 llama_model_loader: - kv 22: tokenizer.ggml.eos_token_id u32 = 128001 llama_model_loader: - kv 23: tokenizer.ggml.padding_token_id u32 = 128001 llama_model_loader: - kv 24: tokenizer.ggml.add_bos_token bool = true llama_model_loader: - kv 25: tokenizer.ggml.add_eos_token bool = false llama_model_loader: - kv 26: tokenizer.chat_template str = {% if not add_generation_prompt is de... llama_model_loader: - kv 27: general.quantization_version u32 = 2 llama_model_loader: - type f32: 66 tensors llama_model_loader: - type q4_K: 193 tensors llama_model_loader: - type q6_K: 33 tensors print_info: file format = GGUF V3 (latest) print_info: file type = Q4_K - Medium print_info: file size = 4.58 GiB (4.89 BPW) load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect load: special tokens cache size = 256 load: token to piece cache size = 0.7999 MB print_info: arch = llama print_info: vocab_only = 1 print_info: model type = ?B print_info: model params = 8.03 B print_info: general.name = DeepSeek R1 Distill Llama 8B print_info: vocab type = BPE print_info: n_vocab = 128256 print_info: n_merges = 280147 print_info: BOS token = 128000 \u0026#39;\u0026lt;｜begin▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOS token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOT token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOM token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: PAD token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: LF token = 198 \u0026#39;Ċ\u0026#39; print_info: EOG token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOG token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: EOG token = 128009 \u0026#39;\u0026lt;|eot_id|\u0026gt;\u0026#39; print_info: max token length = 256 llama_model_load: vocab only - skipping tensors time=2025-06-07T12:01:29.965+08:00 level=INFO source=server.go:410 msg=\u0026#34;starting llama server\u0026#34; cmd=\u0026#34;C:\\\\Users\\\\Ysam\\\\AppData\\\\Local\\\\Programs\\\\Ollama\\\\ollama.exe runner --model C:\\\\Users\\\\Ysam\\\\.ollama\\\\models\\\\blobs\\\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be --ctx-size 8192 --batch-size 512 --n-gpu-layers 33 --threads 12 --no-mmap --parallel 2 --port 59718\u0026#34; time=2025-06-07T12:01:29.969+08:00 level=INFO source=sched.go:452 msg=\u0026#34;loaded runners\u0026#34; count=1 time=2025-06-07T12:01:29.969+08:00 level=INFO source=server.go:589 msg=\u0026#34;waiting for llama runner to start responding\u0026#34; time=2025-06-07T12:01:29.969+08:00 level=INFO source=server.go:623 msg=\u0026#34;waiting for server to become available\u0026#34; status=\u0026#34;llm server error\u0026#34; time=2025-06-07T12:01:29.988+08:00 level=INFO source=runner.go:853 msg=\u0026#34;starting go runner\u0026#34; load_backend: loaded CPU backend from C:\\Users\\Ysam\\AppData\\Local\\Programs\\Ollama\\lib\\ollama\\ggml-cpu-icelake.dll ggml_cuda_init: GGML_CUDA_FORCE_MMQ: no ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no ggml_cuda_init: found 1 CUDA devices: Device 0: NVIDIA GeForce RTX 4070 Laptop GPU, compute capability 8.9, VMM: yes load_backend: loaded CUDA backend from C:\\Users\\Ysam\\AppData\\Local\\Programs\\Ollama\\lib\\ollama\\cuda_v12\\ggml-cuda.dll time=2025-06-07T12:01:30.307+08:00 level=INFO source=ggml.go:103 msg=system CPU.0.SSE3=1 CPU.0.SSSE3=1 CPU.0.AVX=1 CPU.0.AVX2=1 CPU.0.F16C=1 CPU.0.FMA=1 CPU.0.BMI2=1 CPU.0.AVX512=1 CPU.0.AVX512_VBMI=1 CPU.0.AVX512_VNNI=1 CPU.0.LLAMAFILE=1 CPU.1.LLAMAFILE=1 CUDA.0.ARCHS=500,600,610,700,750,800,860,870,890,900,1200 CUDA.0.USE_GRAPHS=1 CUDA.0.PEER_MAX_BATCH_SIZE=128 compiler=cgo(clang) time=2025-06-07T12:01:30.308+08:00 level=INFO source=runner.go:913 msg=\u0026#34;Server listening on 127.0.0.1:59718\u0026#34; llama_model_load_from_file_impl: using device CUDA0 (NVIDIA GeForce RTX 4070 Laptop GPU) - 7056 MiB free llama_model_loader: loaded meta data with 28 key-value pairs and 292 tensors from C:\\Users\\Ysam\\.ollama\\models\\blobs\\sha256-6340dc3229b0d08ea9cc49b75d4098702983e17b4c096d57afbbf2ffc813f2be (version GGUF V3 (latest)) llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output. llama_model_loader: - kv 0: general.architecture str = llama llama_model_loader: - kv 1: general.type str = model llama_model_loader: - kv 2: general.name str = DeepSeek R1 Distill Llama 8B llama_model_loader: - kv 3: general.basename str = DeepSeek-R1-Distill-Llama llama_model_loader: - kv 4: general.size_label str = 8B llama_model_loader: - kv 5: llama.block_count u32 = 32 llama_model_loader: - kv 6: llama.context_length u32 = 131072 llama_model_loader: - kv 7: llama.embedding_length u32 = 4096 llama_model_loader: - kv 8: llama.feed_forward_length u32 = 14336 llama_model_loader: - kv 9: llama.attention.head_count u32 = 32 llama_model_loader: - kv 10: llama.attention.head_count_kv u32 = 8 llama_model_loader: - kv 11: llama.rope.freq_base f32 = 500000.000000 llama_model_loader: - kv 12: llama.attention.layer_norm_rms_epsilon f32 = 0.000010 llama_model_loader: - kv 13: general.file_type u32 = 15 llama_model_loader: - kv 14: llama.vocab_size u32 = 128256 llama_model_loader: - kv 15: llama.rope.dimension_count u32 = 128 llama_model_loader: - kv 16: tokenizer.ggml.model str = gpt2 llama_model_loader: - kv 17: tokenizer.ggml.pre str = llama-bpe llama_model_loader: - kv 18: tokenizer.ggml.tokens arr[str,128256] = [\u0026#34;!\u0026#34;, \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;#\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34;%\u0026#34;, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\u0026#39;\u0026#34;, ... llama_model_loader: - kv 19: tokenizer.ggml.token_type arr[i32,128256] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... llama_model_loader: - kv 20: tokenizer.ggml.merges arr[str,280147] = [\u0026#34;Ġ Ġ\u0026#34;, \u0026#34;Ġ ĠĠĠ\u0026#34;, \u0026#34;ĠĠ ĠĠ\u0026#34;, \u0026#34;... llama_model_loader: - kv 21: tokenizer.ggml.bos_token_id u32 = 128000 llama_model_loader: - kv 22: tokenizer.ggml.eos_token_id u32 = 128001 llama_model_loader: - kv 23: tokenizer.ggml.padding_token_id u32 = 128001 llama_model_loader: - kv 24: tokenizer.ggml.add_bos_token bool = true llama_model_loader: - kv 25: tokenizer.ggml.add_eos_token bool = false llama_model_loader: - kv 26: tokenizer.chat_template str = {% if not add_generation_prompt is de... llama_model_loader: - kv 27: general.quantization_version u32 = 2 llama_model_loader: - type f32: 66 tensors llama_model_loader: - type q4_K: 193 tensors llama_model_loader: - type q6_K: 33 tensors print_info: file format = GGUF V3 (latest) print_info: file type = Q4_K - Medium print_info: file size = 4.58 GiB (4.89 BPW) time=2025-06-07T12:01:30.471+08:00 level=INFO source=server.go:623 msg=\u0026#34;waiting for server to become available\u0026#34; status=\u0026#34;llm server loading model\u0026#34; load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect load: special tokens cache size = 256 load: token to piece cache size = 0.7999 MB print_info: arch = llama print_info: vocab_only = 0 print_info: n_ctx_train = 131072 print_info: n_embd = 4096 print_info: n_layer = 32 print_info: n_head = 32 print_info: n_head_kv = 8 print_info: n_rot = 128 print_info: n_swa = 0 print_info: n_swa_pattern = 1 print_info: n_embd_head_k = 128 print_info: n_embd_head_v = 128 print_info: n_gqa = 4 print_info: n_embd_k_gqa = 1024 print_info: n_embd_v_gqa = 1024 print_info: f_norm_eps = 0.0e+00 print_info: f_norm_rms_eps = 1.0e-05 print_info: f_clamp_kqv = 0.0e+00 print_info: f_max_alibi_bias = 0.0e+00 print_info: f_logit_scale = 0.0e+00 print_info: f_attn_scale = 0.0e+00 print_info: n_ff = 14336 print_info: n_expert = 0 print_info: n_expert_used = 0 print_info: causal attn = 1 print_info: pooling type = 0 print_info: rope type = 0 print_info: rope scaling = linear print_info: freq_base_train = 500000.0 print_info: freq_scale_train = 1 print_info: n_ctx_orig_yarn = 131072 print_info: rope_finetuned = unknown print_info: ssm_d_conv = 0 print_info: ssm_d_inner = 0 print_info: ssm_d_state = 0 print_info: ssm_dt_rank = 0 print_info: ssm_dt_b_c_rms = 0 print_info: model type = 8B print_info: model params = 8.03 B print_info: general.name = DeepSeek R1 Distill Llama 8B print_info: vocab type = BPE print_info: n_vocab = 128256 print_info: n_merges = 280147 print_info: BOS token = 128000 \u0026#39;\u0026lt;｜begin▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOS token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOT token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOM token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: PAD token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: LF token = 198 \u0026#39;Ċ\u0026#39; print_info: EOG token = 128001 \u0026#39;\u0026lt;｜end▁of▁sentence｜\u0026gt;\u0026#39; print_info: EOG token = 128008 \u0026#39;\u0026lt;|eom_id|\u0026gt;\u0026#39; print_info: EOG token = 128009 \u0026#39;\u0026lt;|eot_id|\u0026gt;\u0026#39; print_info: max token length = 256 load_tensors: loading model tensors, this can take a while... (mmap = false) load_tensors: offloading 32 repeating layers to GPU load_tensors: offloading output layer to GPU load_tensors: offloaded 33/33 layers to GPU load_tensors: CUDA0 model buffer size = 4403.49 MiB load_tensors: CPU model buffer size = 281.81 MiB llama_context: constructing llama_context llama_context: n_seq_max = 2 llama_context: n_ctx = 8192 llama_context: n_ctx_per_seq = 4096 llama_context: n_batch = 1024 llama_context: n_ubatch = 512 llama_context: causal_attn = 1 llama_context: flash_attn = 0 llama_context: freq_base = 500000.0 llama_context: freq_scale = 1 llama_context: n_ctx_per_seq (4096) \u0026lt; n_ctx_train (131072) -- the full capacity of the model will not be utilized llama_context: CUDA_Host output buffer size = 1.01 MiB init: kv_size = 8192, offload = 1, type_k = \u0026#39;f16\u0026#39;, type_v = \u0026#39;f16\u0026#39;, n_layer = 32, can_shift = 1 init: CUDA0 KV buffer size = 1024.00 MiB llama_context: KV self size = 1024.00 MiB, K (f16): 512.00 MiB, V (f16): 512.00 MiB llama_context: CUDA0 compute buffer size = 560.00 MiB llama_context: CUDA_Host compute buffer size = 24.01 MiB llama_context: graph nodes = 1094 llama_context: graph splits = 2 time=2025-06-07T12:01:37.233+08:00 level=INFO source=server.go:628 msg=\u0026#34;llama runner started in 7.26 seconds\u0026#34; [GIN] 2025/06/07 - 12:01:37 | 200 | 7.682587s | 127.0.0.1 | POST \u0026#34;/api/chat\u0026#34; 如何解决该问题，请提供完整代码 回答1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 已深度思考（用时 14 秒） 根据问题描述，代码在运行过程中出现了`TimeoutError: 发送消息超时 --\u0026gt; 沙系 -`的错误。这个错误通常发生在使用`wxauto`库发送消息时，由于某种原因消息未能成功发送。可能的原因包括： \\1. 微信窗口未激活或未在前台。 \\2. 微信窗口标题不匹配（例如，窗口标题可能包含其他信息，如“沙系 - 微信”）。 \\3. 发送消息时微信窗口被其他窗口遮挡或最小化。 \\4. 发送消息的速度过快，微信来不及响应。 为了解决这个问题，我们可以采取以下措施： \\- 在发送消息前，确保微信窗口是激活状态（即在前台）。 \\- 添加重试机制，在发送失败时进行多次尝试。 \\- 在发送消息前，先尝试将微信窗口置顶。 由于`wxauto`库的`SendMsg`方法在发送消息时要求窗口处于激活状态，我们可以使用`win32gui`来激活窗口。 以下是修改后的代码，主要增加了以下功能： \\1. 使用`win32gui`来查找并激活微信窗口。 \\2. 在发送消息时加入重试机制。 \\3. 在发送消息前添加适当的延迟，确保窗口已经激活。 注意：需要安装`pywin32`库，可以使用`pip install pywin32`安装。 修改后的完整代码如下： 根据您的问题描述和错误信息，主要问题在于微信消息发送超时。以下是完整的解决方案代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 import os import time import json import requests import win32gui import win32con from wxauto import WeChat def activate_window(window_title): \u0026#34;\u0026#34;\u0026#34;激活指定标题的窗口\u0026#34;\u0026#34;\u0026#34; try: hwnd = win32gui.FindWindow(None, window_title) if hwnd: win32gui.ShowWindow(hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(hwnd) return True except Exception as e: print(f\u0026#34;窗口激活失败: {str(e)}\u0026#34;) return False def safe_send_msg(chat_win, msg, max_retries=3): \u0026#34;\u0026#34;\u0026#34;带重试机制的安全发送消息\u0026#34;\u0026#34;\u0026#34; for attempt in range(max_retries): try: # 激活微信窗口 window_title = f\u0026#34;{chat_win.who} - 微信\u0026#34; if activate_window(window_title): time.sleep(0.5) # 等待窗口激活 chat_win.SendMsg(msg) return True except Exception as e: print(f\u0026#34;发送失败（尝试 {attempt + 1}/{max_retries}）: {str(e)}\u0026#34;) time.sleep(2) # 等待后重试 return False # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): try: with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: DB = json.load(fp) except Exception as e: print(f\u0026#34;历史记录加载失败: {str(e)}\u0026#34;) # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() if line: MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 初始化微信 wx = WeChat() for user in MONITOR_LIST: try: wx.AddListenChat(who=user) print(f\u0026#34;已监听用户: {user}\u0026#34;) except Exception as e: print(f\u0026#34;监听用户 {user} 失败: {str(e)}\u0026#34;) # 主循环 while True: try: listen_dict = wx.GetListenMessage() for chat_win, message_list in listen_dict.items(): chat_user = chat_win.who # 过滤非好友消息 interval_list = [ {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: msg.content} for msg in message_list if msg.type == \u0026#34;friend\u0026#34; ] if not interval_list: continue print(f\u0026#34;\\n收到来自 {chat_user} 的消息:\u0026#34;) for msg in interval_list: print(f\u0026#34; {msg[\u0026#39;content\u0026#39;]}\u0026#34;) # 合并历史记录 history_list = DB.get(chat_user, []) history_list.extend(interval_list) # 调用模型API try: res = requests.post( url=\u0026#34;http://localhost:11434/api/chat\u0026#34;, json={ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1:8b\u0026#34;, \u0026#34;messages\u0026#34;: history_list, \u0026#34;stream\u0026#34;: False }, timeout=30 ) res.raise_for_status() reply = res.json()[\u0026#39;message\u0026#39;] reply_content = reply[\u0026#39;content\u0026#39;] except Exception as e: print(f\u0026#34;模型调用失败: {str(e)}\u0026#34;) reply_content = \u0026#34;⚠️ 处理请求时出错，请稍后再试\u0026#34; # 发送回复 print(f\u0026#34;\\n回复 {chat_user}:\u0026#34;) print(f\u0026#34; {reply_content}\u0026#34;) if not safe_send_msg(chat_win, reply_content): print(f\u0026#34;⚠️ 最终发送失败: {reply_content[:50]}...\u0026#34;) else: # 保存成功记录 history_list.append(reply) DB[chat_user] = history_list with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp: json.dump(DB, fp, ensure_ascii=False, indent=2) time.sleep(1) # 降低CPU占用 except KeyboardInterrupt: print(\u0026#34;\\n用户终止程序\u0026#34;) break except Exception as e: print(f\u0026#34;主循环异常: {str(e)}\u0026#34;) time.sleep(5) # 防止频繁报错 主要改进：\n窗口激活功能： 添加了 activate_window() 函数，使用 win32gui 确保微信窗口在前台 在发送消息前激活目标聊天窗口 消息发送重试机制： 创建了 safe_send_msg() 函数实现带重试的消息发送 默认3次重试，每次间隔2秒 错误处理增强： 添加了模型调用异常处理 增加了主循环异常捕获 添加了键盘中断处理（Ctrl+C） 日志优化： 更详细的调试信息输出 消息发送状态实时反馈 性能优化： 添加了适当的休眠时间 减少不必要的资源占用 使用说明：\n安装依赖：\n1 pip install wxauto requests pywin32 创建用户列表： 在脚本同目录下创建 users.txt 文件，每行一个要监听的微信联系人名称\n运行准备：\n确保微信客户端已登录并处于前台 确保Ollama服务已运行（ollama serve） 确保已安装模型（ollama pull deepseek-r1:8b） 运行脚本：\n1 python your_script_name.py 注意事项：\n首次运行时微信可能会有安全提示，需要手动允许 确保微信窗口标题格式为 \u0026ldquo;联系人名称 - 微信\u0026rdquo; 如果仍遇到问题，可以尝试： 增加重试次数（修改 max_retries 参数） 延长窗口激活后的等待时间（调整 time.sleep(0.5)） 这个解决方案解决了消息发送超时的核心问题，同时增强了程序的健壮性和用户体验。\n提问2 1 2 3 4 5 6 7 8 9 10 Traceback (most recent call last): File \u0026#34;D:\\PycharmProject\\WebAutoTest\\Auto_Chat\\AI_Auto.py\u0026#34;, line 62, in \u0026lt;module\u0026gt; wx = WeChat() File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\wxauto.py\u0026#34;, line 41, in __init__ self._show() File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\wxauto.py\u0026#34;, line 88, in _show win32gui.SetWindowPos(self.HWND, -1, 0, 0, 0, 0, 3) pywintypes.error: (5, \u0026#39;SetWindowPos\u0026#39;, \u0026#39;拒绝访问。\u0026#39;) 进程已结束,退出代码 回答2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 已深度思考（用时 65 秒） 这个错误是由于尝试设置窗口位置时被拒绝访问导致的。可能的原因是程序没有足够的权限，或者微信窗口的某些保护机制阻止了操作。我们可以尝试以下方法： \\1. 以管理员身份运行Python脚本。 \\2. 避免在初始化时调用`_show`方法（即避免设置窗口位置）。 在wxauto的源代码中，`__init__`方法会调用`_show`方法，而`_show`方法中使用了`SetWindowPos`。我们可以通过继承`WeChat`类并重写`_show`方法，避免这个操作。 但是，我们也可以尝试在创建`WeChat`对象时不自动调用`_show`（查看wxauto源码，似乎没有提供参数来控制）。因此，我们可以修改为捕获异常，或者使用其他方式。 另一种思路：在初始化`WeChat`对象时，我们并不需要立即显示窗口（因为后续我们通过激活窗口来操作）。所以，我们可以考虑修改wxauto的代码？但这不是好的做法。 实际上，错误信息中提到的`SetWindowPos`调用是为了将窗口置于最前面。我们可以跳过这一步，因为后续在发送消息时我们会激活窗口。 由于我们无法直接修改库，我们可以尝试捕获这个异常并继续运行，只要后续操作不受影响。 修改初始化部分： \\```python try: wx = WeChat() except Exception as e: print(f\u0026#34;初始化微信时出错: {str(e)}\u0026#34;) print(\u0026#34;尝试继续运行...\u0026#34;) # 这里需要确保wx对象仍然被创建，但捕获异常后可能无法创建，所以我们需要重新初始化但不调用_show方法？ # 实际上，wxauto在初始化时一定会调用_show，所以我们需要另一种方式 \\``` 由于这个错误发生在`_show`方法中，我们可以尝试在创建`WeChat`实例之前，先找到微信窗口，然后尝试激活它，这样在`_show`中设置位置时可能就不会出错？或者，我们考虑使用另一个库（如`pywinauto`）来操作微信窗口？ 但是，为了快速解决问题，我们可以考虑修改`wxauto`库的源代码。找到`wxauto.py`文件，定位到`_show`方法（大约第88行），将： \\```python win32gui.SetWindowPos(self.HWND, -1, 0, 0, 0, 0, 3) \\``` 改为： \\```python try: win32gui.SetWindowPos(self.HWND, -1, 0, 0, 0, 0, 3) except Exception as e: print(f\u0026#34;设置窗口位置失败: {e}\u0026#34;) \\``` 这样，即使设置窗口位置失败，也不会抛出异常，程序可以继续运行。 如果你不想修改库的代码，我们可以尝试在初始化之前先激活微信窗口，看是否能避免这个错误。 以下是修改后的初始化代码，尝试先激活微信主窗口： \\```python # 尝试先激活微信主窗口 def activate_wechat_main_window(): hwnd = win32gui.FindWindow(\u0026#34;WeChatMainWndForPC\u0026#34;, None) if hwnd: win32gui.ShowWindow(hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(hwnd) time.sleep(1) activate_wechat_main_window() # 初始化微信对象 wx = WeChat() \\``` 微信主窗口的类名是\u0026#34;WeChatMainWndForPC\u0026#34;，我们尝试先激活它，然后再初始化`WeChat`对象。 让我们整合到代码中： \\```python import os import time import json import requests import win32gui import win32con from wxauto import WeChat def activate_window(window_title): \u0026#34;\u0026#34;\u0026#34;激活指定标题的窗口\u0026#34;\u0026#34;\u0026#34; try: hwnd = win32gui.FindWindow(None, window_title) if hwnd: win32gui.ShowWindow(hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(hwnd) return True except Exception as e: print(f\u0026#34;窗口激活失败: {str(e)}\u0026#34;) return False def safe_send_msg(chat_win, msg, max_retries=3): \u0026#34;\u0026#34;\u0026#34;带重试机制的安全发送消息\u0026#34;\u0026#34;\u0026#34; for attempt in range(max_retries): try: # 激活微信窗口 window_title = f\u0026#34;{chat_win.who} - 微信\u0026#34; if activate_window(window_title): time.sleep(0.5) # 等待窗口激活 chat_win.SendMsg(msg) return True except Exception as e: print(f\u0026#34;发送失败（尝试 {attempt + 1}/{max_retries}）: {str(e)}\u0026#34;) time.sleep(2) # 等待后重试 return False # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): try: with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: DB = json.load(fp) except Exception as e: print(f\u0026#34;历史记录加载失败: {str(e)}\u0026#34;) # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() if line: MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 初始化微信 try: wx = WeChat() except Exception as e: print(f\u0026#34;初始化微信时出错: {str(e)}\u0026#34;) # 如果初始化失败，尝试再次激活主窗口并重试一次 print(\u0026#34;尝试再次激活微信主窗口并重试初始化...\u0026#34;) activate_wechat_main_window() # 再试一次，如果还失败则退出 wx = WeChat() for user in MONITOR_LIST: try: wx.AddListenChat(who=user) print(f\u0026#34;已监听用户: {user}\u0026#34;) except Exception as e: print(f\u0026#34;监听用户 {user} 失败: {str(e)}\u0026#34;) # ... 其余代码保持不变 ... \\``` 这样，在初始化`WeChat`对象之前，我们先激活微信主窗口，可能会避免权限问题。 如果问题仍然存在，请考虑以管理员身份运行脚本。 注意：如果微信没有运行，`activate_wechat_main_window`函数将找不到窗口，所以确保微信已经启动。 这个错误发生在初始化 WeChat 对象时，具体是在尝试设置微信窗口位置时出现了访问被拒绝的问题。让我们解决这个问题：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 import os import time import json import requests import win32gui import win32con from wxauto import WeChat def activate_window(window_title): \u0026#34;\u0026#34;\u0026#34;激活指定标题的窗口\u0026#34;\u0026#34;\u0026#34; try: hwnd = win32gui.FindWindow(None, window_title) if hwnd: win32gui.ShowWindow(hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(hwnd) return True except Exception as e: print(f\u0026#34;窗口激活失败: {str(e)}\u0026#34;) return False def safe_send_msg(chat_win, msg, max_retries=3): \u0026#34;\u0026#34;\u0026#34;带重试机制的安全发送消息\u0026#34;\u0026#34;\u0026#34; for attempt in range(max_retries): try: # 激活微信窗口 window_title = f\u0026#34;{chat_win.who} - 微信\u0026#34; if activate_window(window_title): time.sleep(0.5) # 等待窗口激活 chat_win.SendMsg(msg) return True except Exception as e: print(f\u0026#34;发送失败（尝试 {attempt + 1}/{max_retries}）: {str(e)}\u0026#34;) time.sleep(2) # 等待后重试 return False # 加载历史消息记录 DB = {} if os.path.exists(\u0026#34;db.json\u0026#34;): try: with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: DB = json.load(fp) except Exception as e: print(f\u0026#34;历史记录加载失败: {str(e)}\u0026#34;) # 加载监听用户列表 MONITOR_LIST = [] if os.path.exists(\u0026#34;users.txt\u0026#34;): with open(\u0026#34;users.txt\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp: for line in fp: line = line.strip() if line: MONITOR_LIST.append(line) else: print(\u0026#34;警告：未找到 users.txt 文件，将监听默认用户\u0026#34;) MONITOR_LIST = [\u0026#34;沙系\u0026#34;] # 初始化微信 - 安全方式 wx = None try: wx = WeChat() except Exception as e: print(f\u0026#34;初始化微信时出错: {str(e)}\u0026#34;) print(\u0026#34;尝试手动获取微信窗口...\u0026#34;) # 手动查找微信窗口 wechat_hwnd = win32gui.FindWindow(\u0026#34;WeChatMainWndForPC\u0026#34;, None) if wechat_hwnd: print(\u0026#34;找到微信主窗口，尝试激活...\u0026#34;) win32gui.ShowWindow(wechat_hwnd, win32con.SW_RESTORE) win32gui.SetForegroundWindow(wechat_hwnd) time.sleep(1) # 再次尝试初始化 try: wx = WeChat() print(\u0026#34;微信初始化成功\u0026#34;) except Exception as e2: print(f\u0026#34;再次初始化失败: {str(e2)}\u0026#34;) print(\u0026#34;请确保微信已启动并处于前台\u0026#34;) exit(1) else: print(\u0026#34;未找到微信窗口，请确保微信已启动\u0026#34;) exit(1) # 监听账户列表 for user in MONITOR_LIST: try: wx.AddListenChat(who=user) print(f\u0026#34;已监听用户: {user}\u0026#34;) except Exception as e: print(f\u0026#34;监听用户 {user} 失败: {str(e)}\u0026#34;) # 监听消息 while True: try: listen_dict = wx.GetListenMessage() if not listen_dict: time.sleep(1) continue for chat_win, message_list in listen_dict.items(): chat_user = chat_win.who # 获取最新聊天消息 interval_list = [] for msg in message_list: if msg.type != \u0026#34;friend\u0026#34;: continue interval_list.append({\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: msg.content}) if not interval_list: continue print(f\u0026#34;\\n收到来自 {chat_user} 的消息:\u0026#34;) for msg in interval_list: print(f\u0026#34; {msg[\u0026#39;content\u0026#39;]}\u0026#34;) # 合并历史记录 history_list = DB.get(chat_user, []) history_list.extend(interval_list) # 调用本地 deepseek 模型 try: res = requests.post( url=\u0026#34;http://localhost:11434/api/chat\u0026#34;, json={ \u0026#34;model\u0026#34;: \u0026#34;deepseek-r1:8b\u0026#34;, \u0026#34;messages\u0026#34;: history_list, \u0026#34;stream\u0026#34;: False }, timeout=30 ) res.raise_for_status() reply = res.json()[\u0026#39;message\u0026#39;] reply_content = reply[\u0026#39;content\u0026#39;] except Exception as e: print(f\u0026#34;模型调用失败: {str(e)}\u0026#34;) reply_content = \u0026#34;⚠️ 处理请求时出错，请稍后再试\u0026#34; # 发送回复 print(f\u0026#34;\\n回复 {chat_user}:\u0026#34;) print(f\u0026#34; {reply_content}\u0026#34;) if not safe_send_msg(chat_win, reply_content): print(f\u0026#34;⚠️ 最终发送失败: {reply_content[:50]}...\u0026#34;) else: # 保存成功记录 history_list.append(reply) DB[chat_user] = history_list with open(\u0026#34;db.json\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp: json.dump(DB, fp, ensure_ascii=False, indent=2) time.sleep(1) # 降低CPU占用 except KeyboardInterrupt: print(\u0026#34;\\n用户终止程序\u0026#34;) break except Exception as e: print(f\u0026#34;主循环异常: {str(e)}\u0026#34;) time.sleep(5) # 防止频繁报错 主要修复：\n微信初始化错误处理： 添加了完整的异常捕获和处理机制 当 WeChat() 初始化失败时，手动查找并激活微信窗口 使用微信窗口的类名 \u0026quot;WeChatMainWndForPC\u0026quot; 进行查找 增加健壮性： 检查 GetListenMessage() 返回是否为空 添加了更多的错误处理和日志输出 确保程序在遇到错误时不会完全崩溃 权限问题解决： 确保以管理员身份运行脚本（右键 -\u0026gt; 以管理员身份运行） 如果仍然遇到权限问题，尝试在微信设置中关闭 \u0026ldquo;以管理员身份运行此程序\u0026rdquo; 的选项 使用说明：\n首次运行时：\n确保微信已启动并处于前台 右键点击脚本 -\u0026gt; 以管理员身份运行 如果仍然遇到问题：\n检查微信是否设置了 \u0026ldquo;以管理员身份运行\u0026rdquo;：\n右键微信快捷方式 -\u0026gt; 属性 -\u0026gt; 兼容性 取消勾选 \u0026ldquo;以管理员身份运行此程序\u0026rdquo; 尝试更新 wxauto 库：\n1 pip install --upgrade wxauto 替代方案： 如果以上方法无效，可以尝试使用更稳定的 UIAutomation 替代方案：\n1 2 3 4 5 6 7 8 9 10 11 # 替代初始化方法 from wxauto import WeChat from uiautomation import WindowControl # 查找微信窗口 wx_win = WindowControl(ClassName=\u0026#34;WeChatMainWndForPC\u0026#34;) if wx_win.Exists(): wx_win.SetActive() time.sleep(1) wx = WeChat() 这个解决方案应该能解决 \u0026ldquo;拒绝访问\u0026rdquo; 的错误，并确保微信自动化功能正常工作。\n实现情况 运行 ollama 程序，或者在终端使用 ollama serve 运行 ollama。\n确保登录微信，且微信不能使用管理员身份运行。\n在 pycharm 中存有两个文件，其中 users.txt 用于保存聊天对象的名称。\n1 沙系 db.json 用来保存聊天对象以及，每一次聊天的数据。这是因为调用本地模型的 chat 接口时，本地模型只能够对当前信息作出回复，没有之前聊天的记录，为了让本地模型能够进行多次对话，在代码中将每次对话的内容存储在 db.json 文件中，每次聊天将之间所有的消息记录一起发送。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 { \u0026#34;沙系\u0026#34;: [ { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;import os\\nimport time\\nimport json\\nimport requests\\nfrom wxauto import WeChat\\n\\n# 加载历史消息记录\\nDB = {}\\nif os.path.exists(\\\u0026#34;db.json\\\u0026#34;):\\n fp = open(\\\u0026#34;db.json\\\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;)\\n DB = json.load(fp)\\n fp.close()\\n\\n# MONITOR_LIST = []\\n# fp = open(\\\u0026#34;users.txt\\\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;)\\n# for line in fp:\\n# # 读取users.txt加载监听用户\\n# # print(line)\\n# MONITOR_LIST.append(line)\\n# fp.close()\\n\\n# 加载监听用户列表\\nMONITOR_LIST = []\\nif os.path.exists(\\\u0026#34;users.txt\\\u0026#34;):\\n with open(\\\u0026#34;users.txt\\\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;r\u0026#39;) as fp:\\n for line in fp:\\n line = line.strip() # 去除首尾空白字符和换行符\\n if line: # 忽略空行\\n MONITOR_LIST.append(line)\\nelse:\\n print(\\\u0026#34;警告：未找到 users.txt 文件，将监听默认用户列表\\\u0026#34;)\\n MONITOR_LIST = [\\\u0026#34;沙系\\\u0026#34;] # 默认监听用户（示例）\\n\\n# 打开微信\\nwx = WeChat()\\n\\n# 监听账户列表\\n# MONITOR_LIST = [\\\u0026#34;沙系\\\u0026#34;]\\nfor ele in MONITOR_LIST:\\n wx.AddListenChat(who = ele)\\n\\n# 监听消息\\nwhile True:\\n listen_dict = wx.GetListenMessage()\\n\\n for chat_win, message_list in listen_dict.items():\\n # print(chat_win.who)\\n chat_user = chat_win.who\\n\\n # 获取最新聊天消息\\n interval_list = []\\n for msg in message_list:\\n if msg.type != \\\u0026#34;friend\\\u0026#34;:\\n continue\\n interval_list.append({\\\u0026#34;role\\\u0026#34;: \\\u0026#34;user\\\u0026#34;, \\\u0026#34;content\\\u0026#34;: msg.content})\\n\\n if not interval_list:\\n continue\\n\\n # 拼接历史聊天记录\\n print(\\\u0026#34;微信消息：\\\u0026#34;)\\n for interval in interval_list:\\n print(interval)\\n\\n history_list = DB.get(chat_user, [])\\n history_list.extend(interval_list)\\n\\n # 调用本地 deepseek 模型\\n res = requests.post(\\n url=\\\u0026#34;http://localhost:11434/api/chat\\\u0026#34;,\\n json={\\n \\\u0026#34;model\\\u0026#34;: \\\u0026#34;deepseek-r1:8b\\\u0026#34;,\\n \\\u0026#34;message\\\u0026#34;: history_list,\\n \\\u0026#34;stream\\\u0026#34;: False\\n }\\n )\\n data_dict = res.json()\\n res_msg_dict = data_dict[\u0026#39;message\u0026#39;]\\n\\n # 获取 deepseek 回复内容，微信回复\\n res_content = res_msg_dict[\u0026#39;content\u0026#39;]\\n chat_win.SendMsg(res_content)\\n print(\\\u0026#34;deepseek回复：\\\u0026#34;)\\n print(res_content)\\n\\n # 保存沟通记录\\n history_list.append(res_msg_dict)\\n DB[chat_user] = history_list\\n with open(\\\u0026#34;db.json\\\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;, mode=\u0026#39;w\u0026#39;) as fp:\\n json.dump(DB, fp, ensure_ascii=False, indent=2)\\n\\n这段代码在运行后，能够检测到当前聊天用户，并且能够获取到信息，但是无法回复\\n\\npycharm 报错如下：\\n\\n初始化成功，获取到已登录窗口：清雨\\n微信消息：\\n{\u0026#39;role\u0026#39;: \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;: \u0026#39;测试\u0026#39;}\\nTraceback (most recent call last):\\n File \\\u0026#34;D:\\\\PycharmProject\\\\WebAutoTest\\\\Auto_Chat\\\\Auto_Chat.py\\\u0026#34;, line 82, in \u0026lt;module\u0026gt;\\n chat_win.SendMsg(res_content)\\n File \\\u0026#34;D:\\\\PycharmProject\\\\WebAutoTest\\\\venv\\\\lib\\\\site-packages\\\\wxauto\\\\elements.py\\\u0026#34;, line 250, in SendMsg\\n raise TimeoutError(f\u0026#39;发送消息超时 --\u0026gt; {self.who} - {msg}\u0026#39;)\\nTimeoutError: 发送消息超时 --\u0026gt; 沙系 -\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;assistant\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u0026lt;think\u0026gt;\\n嗯，我看到用户在运行这段代码的时候遇到了问题。代码本身是用来自动回复微信消息的，但是在运行后，它检测到当前聊天用户，并且能够获取信息，但是无法回复。而在PyCharm中，运行这段代码会报错，提示发送消息超时，错误信息是“发送消息超时 --\u0026gt; 沙系 -”。\\n\\n首先，我要分析一下这个问题。看起来，当代码试图发送回复消息时，遇到了超时错误。这可能是因为微信自动响应或者网络延迟的问题，导致发送消息的操作无法及时完成。\\n\\n接下来，我检查一下代码结构。用户提供的代码中，有一个`wx = WeChat()`这行，用来初始化微信自动化模拟器。然后，加载历史消息记录到DB字典中。如果没有`users.txt`文件，就使用默认用户“沙系”。接着，循环添加监听聊天窗口。\\n\\n在监听消息的部分，当收到新的消息时，会调用本地深度求模型进行回复，然后通过`wx.SendMsg(res_content)`发送回复。但是，在执行这行代码的时候，却抛出了一个TimeoutError，这意味着在发送消息时超时了。\\n\\n我觉得可能有几个原因导致这个问题：\\n\\n1. **超时设置不正确**：在`WeChat`类中，发送消息的操作可能有默认的超时时间，如果这个时间太短，就会导致超时错误。用户需要检查一下`wx.SendMsg`的参数，看看是否可以调整超时时间。\\n\\n2. **网络问题**：如果深度求模型的回复太大，或者服务器响应过慢，也可能导致发送消息的操作超时。不过，由于是本地服务，这个可能性比较低，但也不排除。\\n\\n3. **多线程或多任务问题**：在代码中，`wx.SendMsg`方法是否在主线程执行。如果在其他线程发送消息，可能会出现UI更新的问题，导致超时。\\n\\n4. **权限问题**：微信自动化模拟器是否有足够的权限来进行操作，比如发送消息。用户需要检查一下WXAuto库的使用情况，看看是否正确初始化了窗口和权限。\\n\\n接下来，我应该逐一排查这些可能性：\\n\\n首先，查看`wx.SendMsg(res_content)`这行代码，是否有合适的超时设置。可能`SendMsg`方法支持指定超时参数，比如`timeout`，如果不指定，默认值可能太小，可以尝试增加。\\n\\n其次，考虑将整个消息发送过程放在主线程中，以避免由于其他任务导致的延迟或错误。\\n\\n另外，我还需要检查一下深度求模型返回的内容是否符合微信的格式要求，或者是否有空白回复的情况，这可能影响`SendMsg`方法的执行。\\n\\n如果以上方法都无法解决问题，可能需要进一步调试，看看`SendMsg`内部是如何处理消息的，是否有异常被抛出，或者日志信息是否提供了更多的线索。\\n\\n最后，如果所有方法尝试过仍然不行，可能需要考虑升级微信自动化库，或者使用更高效的方式来发送消息，以避免超时问题。\\n\u0026lt;/think\u0026gt;\\n\\n根据上述分析，以下是逐步解决方案：\\n\\n1. **检查`wx.SendMsg`的超时设置**：\\n - 查看WXAuto库文档或源码，看看`SendMsg`方法是否支持指定超时参数。如果支持，在调用时增加合理的超时值。\\n\\n2. **将消息发送操作放到主线程中**：\\n - 确保在发送消息之前，程序已经在主线程执行。避免由于其他线程或任务影响消息发送。\\n\\n3. **检查权限和初始化**：\\n - 确认微信自动化模拟器是否正确初始化，并且具有发送消息的权限。如果必要，可以参考WXAuto库的示例代码，确保窗口和权限设置正确。\\n\\n4. **验证模型回复内容**：\\n - 检查深度求模型返回的回复内容是否符合预期。如果有空白或错误内容，可能导致`SendMsg`方法无法正常发送消息。\\n\\n5. **调试和日志记录**：\\n - 在关键步骤添加日志输出，监控消息发送前后的状态，以便快速定位问题所在。\\n \\n6. **升级库或改用其他工具**：\\n - 如果以上方法无效，可以考虑更换微信自动化库，或者使用其他工具来实现消息回复功能。\\n\\n通过以上步骤，您可以逐步排查并解决`wx.SendMsg`超时的问题，从而让您的自动聊天程序正常运行。\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;测试\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;assistant\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u0026lt;think\u0026gt;\\n嗯，我遇到了一个问题，就是在我的Python脚本中，当尝试调用`wx.SendMsg(res_content)`的时候，程序报错说`TimeoutError: 发送消息超时 --\u0026gt; 沙系 -`。我不太明白这是什么意思，也不确定如何解决这个问题。我需要一步步地来分析和修复这个问题。\\n\\n首先，我应该了解一下`wx.SendMsg`方法在WXAuto库中的实现方式，以及它为什么会抛出这样的异常。根据错误信息，超时似乎是因为消息发送操作没有完成，而是在一定时间内没有按时完成任务。这可能有几种原因：比如网络连接问题、目标窗口状态不正常，或者模型返回的内容有问题。\\n\\n接下来，我应该检查一下`res_content`是否正确。也许模型返回的内容有空白，导致消息发送失败。我可以在发送消息之前打印出`res_content`来确认它是否有意义。如果发现内容为空或不符合预期，那么可能需要调整我的请求参数或者修复模型的问题。\\n\\n然后，我想到可能是WXAuto库本身存在问题。也许在调用`SendMsg`时，它没有正确地处理超时设置，或者窗口状态不稳定。我可以查阅WXAuto的文档，看看是否有相关的超时参数可以配置，或者是否有其他方法来确保消息能够成功发送。\\n\\n另外，我还需要考虑程序的主线程问题。有时候，由于多线程操作，某些操作可能在主线程之外完成，导致`SendMsg`无法及时执行。我可以将消息发送操作放入一个与主线程独立的子线程中，并使用异常捕捉来处理潜在的问题。\\n\\n我还应该检查一下模型是否正常运行。确保我的请求参数和模型配置正确无误。如果发现问题，我可以尝试调整模型的参数或者重新加载模型以获取更好的结果。\\n\\n最后，如果以上方法都无法解决问题，我可能需要考虑升级WXAuto库到最新版本，或者寻找其他支持微信自动化的库，以确保程序能够稳定运行。\\n\\n通过这些步骤，我希望能够逐步排查并找到导致`wx.SendMsg`超时的原因，从而修复这个问题，让我的自动聊天程序正常运行。\\n\u0026lt;/think\u0026gt;\\n\\n根据上述思考过程，以下是具体的解决步骤：\\n\\n1. **打印模型返回内容**：\\n - 在发送消息之前，先将`res_content`打印出来，确认是否有实际内容。可以使用 `print(res_content)` 来实现这一点。\\n\\n2. **处理`SendMsg`超时异常**：\\n - 将调用`chat_win.SendMsg(res_content)` 放入一个try-except块中，这样可以捕获可能发生的超时错误，并记录详细信息。\\n \\n3. **检查窗口状态**：\\n - 在发送消息之前，确保目标窗口（`chat_win`）是活跃的。可以通过打印 `print(chat_win.who)` 来确认窗口是否存在以及内容是否正确。\\n\\n4. **测试网络连接**：\\n - 确认系统的网络连接是否正常。如果发现网络问题，可以尝试更换网络环境或检查网络配置是否影响了消息发送。\\n\\n5. **验证数据存储和读取**：\\n - 确保`DB`字典能够正确加载和保存历史聊天记录。可以通过打印 `print(DB)` 来查看当前数据库内容，确认没有异常。\\n\\n6. **升级库或改用其他工具**：\\n - 如果问题仍未解决，可以考虑更换到更为稳定的微信自动化库，或者使用其他工具如Selenium来实现自动化功能。\\n\\n7. **确保消息发送在主线程中执行**：\\n - 确认所有操作都在主线程中进行。避免因多线程问题导致的消息发送异常。\\n\\n8. **检查模型返回内容的有效性**：\\n - 确认模型返回的内容是否合理，是否有空白或无效数据。如果存在问题，可以调整请求参数或者更换模型来获得更好的结果。\\n\\n通过以上步骤，您可以系统地排查并解决“发送消息超时”的问题，从而使您的自动聊天程序正常运行。\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;你是谁\u0026#34; }, { \u0026#34;role\u0026#34;: \u0026#34;assistant\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u0026lt;think\u0026gt;\\n嗯，用户问“你是谁”，我需要详细解释我的身份和功能。我是一个AI助手，由中国的深度求（DeepSeek）公司独立开发，专注于通过算法和大数据分析来提供信息和帮助。\\n\\n首先，我要说明我的来源，这样用户能理解我不是来自其他知名公司或项目。然后，描述我的功能，让用户知道我可以回答各种问题，无论是科技、科学还是日常事务。接着，可以提到一些具体的能力，比如代码审查、文档生成等，这显示出我的多功能性。\\n\\n接下来，我需要强调数据安全和隐私保护，这是用户关心的重点，说明我会处理用户提供的信息时遵循相关法律法规。然后，考虑用户可能对模型背景感兴趣，可以简要介绍深度求的技术实力和他们在AI领域的成就。\\n\\n最后，以一个友好的邀请结束，让用户感到被支持，并愿意进一步提问。这整个过程需要用中文自然流畅地表达，避免使用任何 markdown 格式，只是简单的文本。\\n\u0026lt;/think\u0026gt;\\n\\n我是一个由中国深度求（DeepSeek）公司开发的智能助手，我可以通过算法和大数据分析来提供信息解答和帮助。我的目标是以专业、准确的方式为用户提供服务，同时也倡导健康、理性、尊重的交流环境。如果你有任何问题或需要帮助，随时告诉我！\u0026#34; } ] } 可以看到，这样会导致每次需要发送很多聊天记录，且本地模型有时会重复回复以前的聊天信息，虽然可以手动删除聊天记录，但是整体体验很差。\n能够实现自动监听微信好友聊天窗口，并根据聊天内容进行回复，由于调用的是本地模型，因此只有基本的文本回复功能。\n偶尔可能出现模型调用失败的情况，原因可能是模型过大或者本地算力不足导致处理时间过长。\n1 2 3 4 5 6 收到来自 沙系 的消息: 你好，请介绍一下deepseek 模型调用失败: HTTPConnectionPool(host=\u0026#39;localhost\u0026#39;, port=11434): Read timed out. (read timeout=30) 回复 沙系: ⚠️ 处理请求时出错，请稍后再试 关闭微信，程序报错。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 收到来自 沙系 的消息: 在吗 11 测试 模型调用失败: HTTPConnectionPool(host=\u0026#39;localhost\u0026#39;, port=11434): Max retries exceeded with url: /api/chat (Caused by NewConnectionError(\u0026#39;\u0026lt;urllib3.connection.HTTPConnection object at 0x00000199D427AD70\u0026gt;: Failed to establish a new connection: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\u0026#39;)) 回复 沙系: ⚠️ 处理请求时出错，请稍后再试 发送失败（尝试 1/3）: (1400, \u0026#39;SetWindowPos\u0026#39;, \u0026#39;无效的窗口句柄。\u0026#39;) 发送失败（尝试 2/3）: (1400, \u0026#39;SetWindowPos\u0026#39;, \u0026#39;无效的窗口句柄。\u0026#39;) 发送失败（尝试 3/3）: (1400, \u0026#39;SetWindowPos\u0026#39;, \u0026#39;无效的窗口句柄。\u0026#39;) ⚠️ 最终发送失败: ⚠️ 处理请求时出错，请稍后再试... 主循环异常: (-2147220991, \u0026#39;事件无法调用任何订户\u0026#39;, (None, None, None, 0, None)) 主循环异常: (-2147220991, \u0026#39;事件无法调用任何订户\u0026#39;, (None, None, None, 0, None)) 主循环异常: (-2147220991, \u0026#39;事件无法调用任何订户\u0026#39;, (None, None, None, 0, None)) Traceback (most recent call last): File \u0026#34;D:\\PycharmProject\\WebAutoTest\\Auto_Chat\\AI_Auto.py\u0026#34;, line 100, in \u0026lt;module\u0026gt; listen_dict = wx.GetListenMessage() File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\wxauto.py\u0026#34;, line 596, in GetListenMessage msg = chat.GetNewMessage(savepic=chat.savepic, savefile=chat.savefile, savevoice=chat.savevoice) File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\elements.py\u0026#34;, line 333, in GetNewMessage MsgItems = self.C_MsgList.GetChildren() File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\uiautomation.py\u0026#34;, line 5960, in GetChildren child = self.GetFirstChildControl() File \u0026#34;D:\\PycharmProject\\WebAutoTest\\venv\\lib\\site-packages\\wxauto\\uiautomation.py\u0026#34;, line 5855, in GetFirstChildControl ele = _AutomationClient.instance().ViewWalker.GetFirstChildElement(self.Element) _ctypes.COMError: (-2147220991, \u0026#39;事件无法调用任何订户\u0026#39;, (None, None, None, 0, None)) During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;D:\\PycharmProject\\WebAutoTest\\Auto_Chat\\AI_Auto.py\u0026#34;, line 164, in \u0026lt;module\u0026gt; time.sleep(5) # 防止频繁报错 KeyboardInterrupt 进程已结束,退出代码-1073741510 (0xC000013A: interrupted by Ctrl+C) ","date":"2025-06-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E5%BE%AE%E4%BF%A1%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0-deepseek-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%81%8A%E5%A4%A9/img_hu_5b2cb777c2d8c261.png","permalink":"https://YeYingQingYu.github.io/p/%E5%BE%AE%E4%BF%A1%E8%BF%9E%E6%8E%A5%E6%9C%AC%E5%9C%B0-deepseek-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%81%8A%E5%A4%A9/","title":"微信连接本地 deepseek 实现自动聊天"},{"content":"基本概念 SPA 和 MPA 单页应用应用（Single-Page Application，SPA），就是只有一张 Web 页面的应用，是加载单个 HTML 页面并在用户与应用程序交互时动态更新该页面的 Web 应用程序。\n单页应用程序在切换功能页面的时候，如点击导航栏的时候，变化的只有主体内容，且页面不会刷新；多页应用程序（Multi-Page Application，MPA） 在点击导航栏时，会跳转到其他页面或刷新整个页面。\n对比项 SPA（Vue Router） MPA（传统 HTML） 页面结构 单个 HTML 文件，动态更新内容 多个独立 HTML 文件，完整刷新 加载方式 首次加载所有核心资源，后续仅更新变化部分 每次请求新页面时重新加载全部资源 路由实现 前端路由（通过 URL hash 或 History API）通过前端路由拦截，URL 变化但不触发服务器请求 后端路由（服务器根据 URL 返回对应页面）URL 变化会向服务器请求新页面 SEO 较差（需特殊处理，如 SSR 或预渲染） 较好（原生支持搜索引擎抓取） 用户体验 流畅无刷新，适合复杂交互场景 可能有明显加载延迟，适合内容型网站 开发难度 较高（需处理状态管理、路由、性能优化） 较低（传统开发模式，技术栈简单） 维护成本 大型项目可能复杂，需合理架构 页面间耦合度低，维护相对简单 适用场景 社交平台、管理后台、在线游戏等 新闻网站、博客、电商产品列表页等 搜索引擎优化，简称 SEO（Search Engine Optimization），是一种通过分析搜索引擎的排名规则，了解搜索引擎如何进行搜索、抓取网页以及如何确定特定关键词的排名的技术。\nSEO 通过采用易于被搜索引擎引用的方法，针对性地优化网站，从而提高其在搜索引擎中的自然排名。这样可以吸引更多用户访问网站，增加网站的流量，提升网站的销售和宣传能力，进而增强网站的品牌效应。\n代码示例 SPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // router/index.js (Vue Router配置) import { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39; import Home from \u0026#39;../views/Home.vue\u0026#39; import About from \u0026#39;../views/About.vue\u0026#39; const routes = [ { path: \u0026#39;/\u0026#39;, name: \u0026#39;Home\u0026#39;, component: Home }, { path: \u0026#39;/about\u0026#39;, name: \u0026#39;About\u0026#39;, component: About } ] const router = createRouter({ history: createWebHistory(), routes }) export default router MPA\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // server.js (Express路由) const express = require(\u0026#39;express\u0026#39;) const app = express() app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/index.html\u0026#39;) }) app.get(\u0026#39;/about\u0026#39;, (req, res) =\u0026gt; { res.sendFile(__dirname + \u0026#39;/public/about.html\u0026#39;) }) app.listen(3000, () =\u0026gt; { console.log(\u0026#39;Server running on port 3000\u0026#39;) }) 路由 在 Vue 3 中，路由是实现单页应用（SPA）页面导航的核心机制。它允许用户在不刷新整个页面的情况下，通过 URL 变化切换视图内容。Vue Router 是 Vue.js 官方的路由管理器，专为 Vue 3 设计，提供了声明式导航、路由参数、路由守卫等高级功能。\nVue 中的路由：路径和组件之间的映射关系。\n在 Html 中，实现跳转时，都使用了 a 标签。标签中有一个属性 herf，为其赋一个网络地址或者一个路径后，它就会跳转对应的页面。\nVue.js 的路由和 a 标签实现的功能是一样的，都是实现一个对应的功能，只不过路由的性能更佳，a 标签不管单击多少次，都会发生对应的网络请求，页面会不断地进行刷新；但是使用路由机制，单击之后，不会出现网络请求页面刷新，而会直接跳转到要链接的地址，这是使用路由的好处。\n随着前后端分离开发模式的兴起，前端路由的概念出现：前端通过 AJAX 获取数据后通过一定的方式渲染到页面中，改变 url 不会向服务器发送请求，同时，前端可以监听 url 变化，可以解析 url 并执行相应的操作，而后端只负责提供 api 来返回数据，在 Vue中，通过路由跳转到不同的页面，实际上就是加载不同的组件。\n路由的安装和使用 路由的安装 Vue Router | The official Router for Vue.js\n在已经创建的 vue3 项目中，使用以下指令安装路由。\n1 npm install vue-router@4 路由基本配置 安装成功后，使用路由时需要经过以下几个步骤：\n（1）在 src 下创建路由文件夹 router，并在 index.js 文件中创建路由对象，并配置路由规则。\nindex.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; // 创建路由规则 const routes = [ { path:..., component:... } ] // 创建路由器 const router = createRouter({ history: createWebHashHistory(), routes }) // 导出路由器 export default router （2）安装路由插件。在 main.js 文件中使用 import router from './router' 导入需要使用的路由，导入后使用 app.use(router) 命令加载 router 插件用于安装插件挂载属性。\nmain.js\n1 2 3 4 5 6 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import router from \u0026#39;./router\u0026#39; createApp(App).use(router).mount(\u0026#39;#app\u0026#39;) （3）在 App 组件的 template 中使用路由挂载其他组件。\nApp.vue\n1 2 3 \u0026lt;template\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/template\u0026gt; 路由文件结构 在使用路由时，通常会将页面文件放在 src 下的 views 文件夹中而不是 components 文件夹中，views 文件夹通常用来存放页面级别的组件，也就是每个路由对应的页面。\n比如，首页、关于我们、用户个人资料这些页面应该放在 views 里，因为它们对应不同的路由路径。而 components 文件夹里的组件是更小的、可复用的 UI 部分，比如按钮、导航栏、卡片等，这些可能在多个页面中被使用。\n1. 功能与用途\n文件夹 用途 典型场景 views 存放页面级组件，对应路由路径，负责完整页面的布局和路由逻辑。 如 HomeView.vue（首页）、UserProfile.vue（用户资料页）、LoginView.vue（登录页）。 components 存放可复用 UI 组件，用于构建页面的局部功能，不直接绑定路由。 如 Button.vue（按钮）、Navbar.vue（导航栏）、Card.vue（卡片组件）。 2. 路由关联\nviews 中的组件：\n在路由配置文件（router/index.js）中直接引用。\n示例：\n1 2 3 4 5 6 // router/index.js import HomeView from \u0026#39;@/views/HomeView.vue\u0026#39;; const routes = [ { path: \u0026#39;/\u0026#39;, component: HomeView }, ]; components 中的组件：\n不会在路由配置中直接引用，而是在其他组件（包括 views）中通过 import 引入。\n示例：\n1 2 3 4 5 6 7 \u0026lt;!-- views/HomeView.vue --\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Navbar /\u0026gt; \u0026lt;!-- 来自 components/Navbar.vue --\u0026gt; \u0026lt;UserList /\u0026gt; \u0026lt;!-- 来自 components/UserList.vue --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; 3. 组件职责\n文件夹 职责 views 处理路由参数、页面级状态（如 Vuex/Pinia）、路由守卫、页面布局组合。 components 实现特定 UI 功能（如表单验证、数据展示），保持无状态或局部状态。 4. 命名规范\nviews： 建议以 XxxView.vue 或 XxxPage.vue 命名（如 UserListView.vue）。 components： 使用功能明确的名称，可添加前缀表明用途（如 BaseButton.vue、AppHeader.vue）。 5. 项目结构示例\n1 2 3 4 5 6 7 8 9 src/ ├── router/ │ └── index.js # 路由配置，引用 views 中的组件 ├── views/ │ ├── HomeView.vue # 首页 │ └── UserProfile.vue # 用户资料页 └── components/ ├── BaseButton.vue # 基础按钮 └── UserCard.vue # 用户卡片组件 6. 边界情况处理\n共享的复杂组件： 如果某个组件在多个页面中使用且包含复杂逻辑，可以放在 components 中（如 ProductList.vue）。 子路由页面： 子路由对应的组件仍属于页面级，应放在 views 的子目录中（如 views/users/UserDetail.vue）。 跳转方式 router-link 在前面的实例中，如果用户需要跳转到不同的页面，则需要修改浏览器地址栏中的地址实现，而在网站中，用户通常需要通过超链接的文本或按钮进行跳转。\n在 Vue 中，用户通常是使用 router-link 渲染一个 a 标签来实现跳转的，例如，使用 \u0026lt;router-link to=/about'\u0026gt;\u0026lt;/router-link\u0026gt; 跳转到关于about 页面，其中，to 是一个属性，指向目标页面，可以使用 v-bind 进行动态设置。\nSign.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; Register.vue\n1 2 3 4 5 6 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;/template\u0026gt; 之前的小米商场案例中，使用到了 v-for 循环渲染导航栏，此时如果需要为不同导航栏标题添加跳转，需要将渲染的导航栏数据修改为对象数组形式，存储导航栏标题和跳转路径。\nHeader.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; ... \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; ... \u0026lt;/li\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { ..., rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/sign\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], } }, ... } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; ... \u0026lt;/style\u0026gt; 通过事件调用函数 可以通过 v-on 指令绑定事件，在函数中使用 this.$router.push() 方法，传入指定地址即可实现页面跳转。\nSign.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 登录页面 \u0026lt;router-link to=\u0026#34;/register\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/register\u0026#39;) } } } \u0026lt;/script\u0026gt; Register.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;template\u0026gt; 注册页面 \u0026lt;router-link to=\u0026#34;/sign\u0026#34;\u0026gt; \u0026lt;button\u0026gt;切换\u0026lt;/button\u0026gt; \u0026lt;/router-link\u0026gt; \u0026lt;button v-on:click=\u0026#34;handleRouter\u0026#34;\u0026gt;跳转\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default{ methods: { handleRouter(){ this.$router.push(\u0026#39;/sign\u0026#39;) } } } \u0026lt;/script\u0026gt; 商品页面切换 Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; {{ item.title }} \u0026lt;/router-link\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; ViewPhone 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Header\u0026gt;\u0026lt;/Header\u0026gt; \u0026lt;Tab\u0026gt;\u0026lt;/Tab\u0026gt; \u0026lt;Wrapper\u0026gt;\u0026lt;/Wrapper\u0026gt; \u0026lt;Banner\u0026gt;\u0026lt;/Banner\u0026gt; \u0026lt;PartPhone\u0026gt;\u0026lt;/PartPhone\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import PartPhone from \u0026#39;./PartPhone.vue\u0026#39;; import Footer from \u0026#39;./Footer.vue\u0026#39;; import Wrapper from \u0026#39;./Wrapper.vue\u0026#39;; import Banner from \u0026#39;./Banner.vue\u0026#39;; export default { components: { Header, Tab, PartPhone, Footer, Wrapper, Banner }, data() { return { } } } \u0026lt;/script\u0026gt; router 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34;; const routes = [ { path: \u0026#39;/\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/views/Page.vue\u0026#39;) }, { path: \u0026#39;/shop/phone\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPhone.vue\u0026#39;) }, { path: \u0026#39;/shop/pad\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewPad.vue\u0026#39;) }, { path: \u0026#39;/shop/elec\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewElec.vue\u0026#39;) }, { path: \u0026#39;/shop/smart\u0026#39;, component: () =\u0026gt; import(\u0026#39;@/components/xiaomi/ViewSmart.vue\u0026#39;) } ] const router = createRouter({ history: createWebHashHistory(), routes }) export default router 模糊匹配和精确匹配 样式匹配 前面我们已经了解到，用户可以使用 router-link 渲染一个 a 标签来实现跳转，此时，点击标签 vue 会为当前被点击的 a 标签添加两个类，我们可以通过这两个类来为当前元素添加样式。\n1 2 3 4 5 \u0026lt;li data-v-a5978fdc=\u0026#34;\u0026#34;\u0026gt; \u0026lt;a data-v-a5978fdc=\u0026#34;\u0026#34; aria-current=\u0026#34;page\u0026#34; href=\u0026#34;#/shop/pad\u0026#34; class=\u0026#34;router-link-active router-link-exact-active\u0026#34;\u0026gt; 电视 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; 可以发现，两个类分别为 router-link-active 和 router-link-exact-active ，可以直接通过 style 设置相关样式。\n1 2 3 ul li a.router-link-exact-active{ color: rgb(255, 128, 9); } 其中， router-link-active 表示模糊匹配，可以使对应样式在当前跳转目录，如 /shop 下的所有子页面中都生效，如 /shop/phone ，/shop/pad 等，适用于在切换子页面时不改变父元素样式的情况，使用相对较多。\nrouter-link-exact-active 表示精确匹配，即只有在目录完全与当前 a 标签跳转的位置完全相同时才使得相应的样式生效。\n自定义类名 可以在 router 中自定义模糊匹配和精确匹配对应的类名。\n1 2 3 4 5 6 const router = createRouter({ history: createWebHashHistory(), routes, linkActiveClass: \u0026#39;fuzzy-active\u0026#39;, linkExactActiveClass: \u0026#39;exact-active\u0026#39; }) ","date":"2025-03-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E8%B7%AF%E7%94%B1/","title":"第五章 路由"},{"content":"Vue 生命周期 生命周期的四个阶段 Vue 生命周期：一个 Vue 实例从创建到销毁的整个过程。\n组件每个阶段它的内部构造是不一样的，所以一般特定的钩子做特定的事，比如 Ajax 获取数据就可以在 mounted 阶段。\n从 Vue 实例被创建开始到该实例最终被销毁的整个过程叫做 VUE 的生命周期，在这个生命周期内发生了下面的事情：从 vue 实例被创建开始，首先 vue 实例被创建，之后开始数据的初始化，编译模板，挂载 dom，渲染 dom，更新对象属性，渲染 dom，解绑销毁。\n创建：const app = new Vue({ ... })\n销毁：关闭页面\n生命周期四个阶段：①创建\t②挂载\t③更新\t④销毁\n生命周期钩子函数 Vue 生命周期过程中，会自动运行一些函数，被称为生命周期钩子，让开发者可以在特定阶段运行自己的代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: 111 } }, beforeCreate() { console.log(\u0026#39;beforeCreate 响应式数据创建前\u0026#39;, this.m1); }, created() { console.log(\u0026#39;created 响应式数据创建后\u0026#39;, this.m1); }, beforeMount() { console.log(\u0026#39;beforeMount 模板渲染前\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, mounted() { console.log(\u0026#39;mounted 模板渲染后\u0026#39;, document.querySelector(\u0026#39;p\u0026#39;)); }, beforeUpdate() { console.log(\u0026#39;beforeUpdate 数据修改视图未更新\u0026#39;); }, updated() { console.log(\u0026#39;updated 数据修改视图已更新\u0026#39;); }, beforeDestroy() { console.log(\u0026#39;beforeDestroy 卸载前\u0026#39;); }, destroyed() { console.log(\u0026#39;destroyed 卸载后\u0026#39;); }, methods: { change() { this.m1 = 222; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 自定义指令 基础语法 自定义指令 — Vue.js (vuejs.org)\n自定义指令：自己定义的指令，可以封装一些 dom 操作，扩展额外功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // 局部注册 directives: { 自定义指令名: { 钩子函数: function (参数) { 执行内容 } }, 自定义指令名: function (参数) { 执行内容 } } // 全局注册 Vue.directive(\u0026#39;自定义指令名\u0026#39;, { 钩子函数: function (参数) { 执行内容 } }) // 自定义函数的使用 \u0026lt;标签名 v-自定义指令名 /\u0026gt; 自定义指令钩子函数 钩子函数 描述 bind 只调用一次，在指令第一次绑定到元素时触发。可以在这里进行初始设置、绑定事件监听器等操作。 inserted 在被绑定元素插入父节点时触发。如果指令绑定的元素是动态生成的，在插入后才会触发。 update 在指令所在模板更新时触发，不论绑定值是否发生变化。可以通过比较更新前后的绑定值，以便在需要时执行相应的操作。 componentUpdated 在被绑定元素所在模板完成一次更新周期时触发。如果需要在每次更新时执行操作，可以选择使用这个钩子函数。 unbind 只调用一次，在指令与元素解绑时触发。可以在这里进行清理工作、移除事件监听器等操作。 常用的自定义指令生命周期函数的参数：\n参数 说明 el 指令所绑定的元素，可以直接用于操作 dom 元素 binding 一个对象，包含多个属性，用于接收属性的参数值 vnode 代表绑定元素底层的虚拟节点 prevNode 之前页面渲染中指令所绑定元素的虚拟节点 在 Vue3 中，自定义指令的钩子函数名称更改为：\n- beforeMount：代替 bind\n- mounted：代替 inserted\n- beforeUpdate：新\n- updated：代替 componentUpdated\n- beforeUnmount：新\n- unmounted：代替 unbind\n钩子函数示例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Vue.directive(\u0026#39;my-directive\u0026#39;, { bind: function(el, binding, vnode, oldVnode) { // 指令绑定时执行的操作 }, inserted: function(el, binding) { // 元素插入父节点时执行的操作 }, update: function(el, binding) { // 指令所在模板更新时执行的操作 }, componentUpdated: function(el, binding) { // 模板完成一次更新周期时执行的操作 }, unbind: function(el, binding) { // 指令与元素解绑时执行的操作 } }) 编写代码，创建自定义指令，通过自定义指令能够让文字颜色变为红色。\n使用 directives: { 方法名: { 钩子函数: function(形参){ 执行的代码}}}\n在标签中使用 v-方法名 调用 Vue 指令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-red\u0026gt;使用自定义指令让这段文字变为红色\u0026lt;/div\u0026gt; \u0026lt;div v-cyan\u0026gt;使用自定义指令让这段文字变为青色\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, directives: { red: function (el){ el.style.color = \u0026#39;red\u0026#39; }, cyan: function (el){ el.style.color = \u0026#39;cyan\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在 vue3 中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;template\u0026gt; \u0026lt;div v-test v-red v-green v-blue\u0026gt;{{ msg }}\u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;改变div中的文字\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data(){ return{ msg: \u0026#39;测试\u0026#39; } }, directives: { test: { beforeMount: function (el, binding) { console.log(111); console.log(el); console.log(binding); } }, red: { mounted: function (el) { el.style.color = \u0026#39;red\u0026#39; } }, green: function (el) { el.style.color = \u0026#39;green\u0026#39; }, blue: { updated: function (el) { el.style.color = \u0026#39;blue\u0026#39; } }, }, methods: { change() { this.msg = \u0026#39;改变后的文字\u0026#39; } } }; \u0026lt;/script\u0026gt; 插槽 默认插槽 作用：让组件内部的一些结构支持自定义。\n封装组件后，希望组件中的部分内容能够动态修改，可以使用插槽。\n组件内需要定制的结构部分，改用 \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; 占位。\n使用组件时，\u0026lt;MyDialog\u0026gt;\u0026lt;/MyDialog\u0026gt; 标签内部，传入结构替换 slot。\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- 1. 在需要修改的位置使用 slot 标签占位 --\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 后背内容（默认值） 插槽后备内容：封装组件时，可以为预留的 \u0026lt;slot\u0026gt; 插槽提供后备内容（默认内容)。\n语法：在 \u0026lt;slot\u0026gt; 标签内，放置内容，作为默认显示内容，如果组件标签中有内容，则默认内容不显示。\n1 2 3 \u0026lt;slot\u0026gt;\u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;...\u0026lt;/div\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;Video\u0026gt;\u0026lt;/Video\u0026gt; 具名插槽 默认插槽只能定制一个位置的内容，如果在组件中，有多个地方需要改变内容，此时需要使用具名插槽，即具有名字的插槽，通过 name 属性为插槽命名，再进行区分。\n使用方法：\n多个 slot 使用 name 属性区分名字\ntemplate 配合 v-slot:name 来分发对应标签\n插槽添加 name 属性后，就是具名插槽，只支持定向分发。此外，v-slot:name 可以简写为 #name\nVideo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .box{ border: 2px solid black; width: 466px; float: left; margin: 10px; } .title{ line-height: 50px; font-size: 24px; text-align: center; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;!-- \u0026lt;Video /\u0026gt; --\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;海王2\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;Video\u0026gt; \u0026lt;template #img\u0026gt; \u0026lt;img src=\u0026#34;../../img/film2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;侏罗纪世界\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Video\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Video from \u0026#39;./components/Video.vue\u0026#39;; export default{ components: { Video } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 作用域插槽 作用域插槽是插槽的一个传参语法。\n作用域插槽：定义 slot 插槽的同时是可以传值的。给插槽上可以绑定数据，将来使用组件时可以调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!-- 基本使用步骤: --\u0026gt; \u0026lt;!-- 1. 给 slot 标签，以添加属性的方式传值 --\u0026gt; \u0026lt;slot :id=\u0026#34;item.id\u0026#34; :msg=\u0026#34;测试文本\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;!-- 2. 所有添加的属性，都会被收集到一个对象中 --\u0026gt; { id: 3， msg:\u0026#39;测试文本\u0026#39;} \u0026lt;!-- 3. 在 template 中，通过 `#插槽名= \u0026#34;obj\u0026#34;` 接收，默认插槽名为 default --\u0026gt; \u0026lt;Table :list=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;template #default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; 案例：表格业务动态变化\n插槽渲染的不只有数据，也有可能需要动态渲染方法的时候，此时方法无法直接调用父组件中的数据，需要使用作用域插槽进行数据传递。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;小米\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;华为\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;8866\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;苹果\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;9998\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;vivo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;6688\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;oppo\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;5888\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;meizu\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;4999\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; 需求：\n① 能够根据不同数组渲染列表\n② 操作分为两种：删除和修改（slot）\n③ 点击删除/修改时对数据进行操作，此时在父组件中无法使用 item.id 传值，需要使用作用域插槽\n④ 为 slot 添加属性，在父组件中使用 template 标签和 #default=\u0026quot;obj\u0026quot; 属性接收传值\n将上方代码改为组件+插槽的形式：\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 此时尝试在 App.vue 当中为 button 添加删除逻辑，如下：\n1 2 3 4 5 6 7 8 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; 在 Table.vue 当中添加删除方法，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;script\u0026gt; export default { props: { dataList: Array }, methods: { del(id){ for (let i = 0; i \u0026lt; this.dataList.length; i++) { if(id == this.dataList[i].id){ this.dataList.splice[i, 1] } } } } } \u0026lt;/script\u0026gt; 显示的报错信息为：\n需要在子组件的 slot 标签中使用 v-bind 绑定属性传值，vue 会将 slot 标签中传递的值保存在一个数组当中，在父组件引用的子组件标签中使用 template+v-slot:插槽名=\u0026quot;自定义对象\u0026quot; 即可将子组件中所有传递的数据存储在该对象中。\n此时在父组件中即可通过 自定义对象.传递数据 的方法获取到子组件的数据，从而调用方法。\nTable\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;手机型号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;价格\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.type }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.price }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;!-- \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;slot :item=\u0026#34;item\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { dataList: Array }, } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .table { border-collapse: collapse; text-align: center; width: 500px; margin: 10px; } .table th, .table td { border: 1px solid black; } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;Table :dataList=\u0026#34;list1\u0026#34;\u0026gt; \u0026lt;button\u0026gt;修改\u0026lt;/button\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;Table :dataList=\u0026#34;list2\u0026#34;\u0026gt; \u0026lt;template v-slot:default=\u0026#34;obj\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;del(obj.item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Table\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Table from \u0026#39;./components/directives\u0026amp;slot/table.vue\u0026#39; export default { data() { return { list1: [ { id: 1, type: \u0026#39;小米\u0026#39;, price: 6999 }, { id: 2, type: \u0026#39;华为\u0026#39;, price: 8866 }, { id: 3, type: \u0026#39;苹果\u0026#39;, price: 9998 }, ], list2: [ { id: 1, type: \u0026#39;vivo\u0026#39;, price: 6688 }, { id: 2, type: \u0026#39;oppo\u0026#39;, price: 5888 }, { id: 3, type: \u0026#39;meizu\u0026#39;, price: 4999 }, ] } }, components: { Table }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list2.length; i++) { if (id == this.list2[i].id) { this.list2.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 动态组件 定义动态组件 利用动态组件可以动态切换页面中显示的组件。使用 \u0026lt;component\u0026gt; 标签可以定义动态组件，\u0026lt;component\u0026gt; 标签必须配合 is 属性一起使用，is 属性的属性值表示要渲染的组件。\n在 vue3 中，使用 setup 语法糖配合 shallowRef() 函数可以将组件保存为响应式数据。shallowRef() 函数只处理对象最外层属性的响应，它比 ref() 函数更适合将组件保存为响应式数据。\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Main\u0026#34;\u0026gt;显示Main组件\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;showComponent = Header\u0026#34;\u0026gt;显示Header组件\u0026lt;/button\u0026gt; \u0026lt;component :is=\u0026#34;showComponent\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; import Main from \u0026#39;./components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;./components/xiaomi/Header.vue\u0026#39;; import { shallowRef } from \u0026#39;vue\u0026#39;; const showComponent = shallowRef(Main); \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; button { width: 100px; height: 50px; margin: 30px; position: absolute; top: 20px; } button:first-child { top: 100px; } \u0026lt;/style\u0026gt; 根据元素类型动态渲染组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; style=\u0026#34;text-align: center;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Vue 中动态组件的使用\u0026lt;/h1\u0026gt; \u0026lt;div v-for=\u0026#34;item in modules\u0026#34; :id=\u0026#34;item.id\u0026#34; style=\u0026#34;margin: 10px 0;\u0026#34;\u0026gt; \u0026lt;component :is=\u0026#34;item.type\u0026#34;\u0026gt;\u0026lt;/component\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ item.type }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Image from \u0026#39;./components/activeComponents/Image.vue\u0026#39;; import Text from \u0026#39;./components/activeComponents/Text.vue\u0026#39;; import Video from \u0026#39;./components/activeComponents/Video.vue\u0026#39;; export default { data() { return { modules: [ { id: 1, type: \u0026#39;text\u0026#39; }, { id: 2, type: \u0026#39;video\u0026#39; }, { id: 3, type: \u0026#39;image\u0026#39; }, { id: 4, type: \u0026#39;image\u0026#39; }, { id: 5, type: \u0026#39;text\u0026#39; } ], // news: \u0026#39;Image\u0026#39; } }, components: { Image, Text, Video }, // computed:{ // getType(){ // return this.modules.map(item =\u0026gt; { // return { // ...item, // type: \u0026#39;news-\u0026#39; + item.type, // } // }) // } // } } \u0026lt;/script\u0026gt; 实战案例 基础样式 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;1999元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 0; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt;\u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 使用具名插槽 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi Turbo 3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi Turbo 3\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;性能旋风，席卷而来\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi Civi 4 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi Civi 4 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Ultra.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Ultra\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;6499\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70 Pro.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第三代骁龙8 年度旗舰平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3299\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;第二代骁龙8 旗舰芯\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;2399\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Redmi K70E.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Redmi K70E\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;新一代旗舰焊门员\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;1799\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14 Pro.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14 Pro\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;4599\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/Xiaomi 14.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;Xiaomi 14\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;3999\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; v-for 循环 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { data(){ return{ dataList: [ {id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999}, {id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999}, {id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499}, {id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299}, {id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399}, {id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799}, {id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599}, {id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999}, ] } }, components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt;\u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; export default { components: { Part } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 插槽嵌套 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], } }, components: { Part, Goods, } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 按需修改 Goods\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;desc\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 240px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 7px 14px 7px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Extra\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;extra\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;etc\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;etc-img\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;slot name=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;元起\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;more-icon\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../img/more.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;more-text\u0026#34;\u0026gt; \u0026lt;div\u0026gt;浏览更多\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;slot name=\u0026#34;type\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .extra { width: 240px; height: 300px; box-sizing: border-box; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; float: left; margin: 0 7px 14px 7px; user-select: none; } .etc, .more { width: 240px; height: 143px; background-color: white; margin: 0 0 14px 0; transition: 0.5s; cursor: pointer; } .etc:hover, .more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .etc img { width: 80px; height: 80px; float: right; margin: 31.5px 30px 0 0; } .extra h3, .extra p { font-weight: 100; font-size: 14px; margin: 0; padding-left: 30px; } .extra .price { color: rgb(255, 103, 0); } .extra h3 { padding: 45px 0 15px 30px; } .more .more-icon img{ width: 52px; height: 52px; float: right; margin: 45.5px 45px 0 0; } .more .more-text div:nth-child(1){ font-size: 18px; padding: 49px 0 5px 30px; } .more .more-text div:nth-child(2){ font-size: 12px; padding: 0 0 0 30px; color: rgb(117, 117, 117); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; Part\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;right\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; export default { components: { Goods } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 614px; padding: 10px; user-select: none; min-width: 1900px } .main-box { width: 68%; margin: auto; } .left-img { float: left; cursor: pointer; margin-right: 7px; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } \u0026lt;/style\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;template\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiphone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList1\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;Part\u0026gt; \u0026lt;template v-slot:left\u0026gt; \u0026lt;img src=\u0026#34;../../../img/xiaomiwatch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:right\u0026gt; \u0026lt;Goods v-for=\u0026#34;(item, index) in dataList2\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;template v-slot:img\u0026gt; \u0026lt;img :src=\u0026#34;item.url\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;{{ item.title }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:desc\u0026gt;{{ item.desc }}\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;{{ item.price }}\u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Extra v-show=\u0026#34;dataList2.length \u0026lt; 8\u0026#34;\u0026gt; \u0026lt;template v-slot:etc-img\u0026gt; \u0026lt;img src=\u0026#34;../../../img/小米手环8 NFC版.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template v-slot:title\u0026gt;小米手环8\u0026lt;/template\u0026gt; \u0026lt;template v-slot:price\u0026gt;209\u0026lt;/template\u0026gt; \u0026lt;template v-slot:type\u0026gt;穿戴\u0026lt;/template\u0026gt; \u0026lt;/Extra\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Part\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Part from \u0026#39;./components/xiaomi/Part.vue\u0026#39;; import Goods from \u0026#39;./components/xiaomi/Goods.vue\u0026#39;; import Extra from \u0026#39;./components/xiaomi/Extra.vue\u0026#39;; export default { data() { return { dataList1: [ { id: 1, url: \u0026#39;../../../img/Redmi Turbo 3.png\u0026#39;, title: \u0026#39;Redmi Turbo 3\u0026#39;, desc: \u0026#39;性能旋风，席卷而来\u0026#39;, price: 1999 }, { id: 2, url: \u0026#39;../../../img/Xiaomi Civi 4 Pro.png\u0026#39;, title: \u0026#39;Xiaomi Civi 4 Pro\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头 | 5000万徕卡人像镜头\u0026#39;, price: 2999 }, { id: 3, url: \u0026#39;../../../img/Xiaomi 14 Ultra.png\u0026#39;, title: \u0026#39;Xiaomi 14 Ultra\u0026#39;, desc: \u0026#39;徕卡全明星四摄 | 双向卫星通信 | 小米澎湃OS\u0026#39;, price: 6499 }, { id: 4, url: \u0026#39;../../../img/Redmi K70 Pro.jpg\u0026#39;, title: \u0026#39;Redmi K70 Pro\u0026#39;, desc: \u0026#39;第三代骁龙8 年度旗舰平台\u0026#39;, price: 3299 }, { id: 5, url: \u0026#39;../../../img/Redmi K70.png\u0026#39;, title: \u0026#39;Redmi K70\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰芯\u0026#39;, price: 2399 }, { id: 6, url: \u0026#39;../../../img/Redmi K70E.png\u0026#39;, title: \u0026#39;Redmi K70E\u0026#39;, desc: \u0026#39;新一代旗舰焊门员\u0026#39;, price: 1799 }, { id: 7, url: \u0026#39;../../../img/Xiaomi 14 Pro.png\u0026#39;, title: \u0026#39;Xiaomi 14 Pro\u0026#39;, desc: \u0026#39;徕卡Summilux可变光圈镜头｜小米澎湃OS\u0026#39;, price: 4599 }, { id: 8, url: \u0026#39;../../../img/Xiaomi 14.png\u0026#39;, title: \u0026#39;img/Xiaomi 14\u0026#39;, desc: \u0026#39;徕卡光学Summilux镜头｜小米澎湃OS｜第三代骁龙®8移动平台\u0026#39;, price: 3999 }, ], dataList2: [ { id: 1, url: \u0026#39;../../../img/小米手环8 Pro 原神定制版.jpg\u0026#39;, title: \u0026#39;小米手环8 Pro 原神定制版\u0026#39;, desc: \u0026#39;达达利亚主题定制手环 | 主题定制充电底座 | 专属定制礼盒\u0026#39;, price: 549 }, { id: 2, url: \u0026#39;../../../img/Redmi Watch 4.jpg\u0026#39;, title: \u0026#39;Redmi Watch 4\u0026#39;, desc: \u0026#39;1.97英寸AMOLED大屏丨潮流金属表框丨20天超长续航\u0026#39;, price: 499 }, { id: 3, url: \u0026#39;../../../img/Xiaomi Watch S3.jpg\u0026#39;, title: \u0026#39;Xiaomi Watch S3\u0026#39;, desc: \u0026#39;百变表圈 | 小米澎湃OS | 12通道心率检测模组\u0026#39;, price: 799 }, { id: 4, url: \u0026#39;../../../img/小米腕部心电血压记录仪.png\u0026#39;, title: \u0026#39;小米腕部心电血压记录仪\u0026#39;, desc: \u0026#39;血压测量｜心电采集｜跌倒检测 紧急呼救｜蓝牙通话\u0026#39;, price: 1999 }, { id: 5, url: \u0026#39;../../../img/小米手环 8 Pro.jpg\u0026#39;, title: \u0026#39;小米手环 8 Pro\u0026#39;, desc: \u0026#39;1.74″AMOLED炫彩大屏 | 手表级健康监测 | 独立GNSS定位\u0026#39;, price: 379 }, { id: 6, url: \u0026#39;../../../img/Redmi Watch 3 青春版.png\u0026#39;, title: \u0026#39;Redmi Watch 3 青春版\u0026#39;, desc: \u0026#39;1.83\u0026#34;超大屏幕｜腕上蓝牙通话｜全天候血氧监测\u0026#39;, price: 329 }, { id: 7, url: \u0026#39;../../../img/小米手环8 NFC版.jpg\u0026#39;, title: \u0026#39;小米手环8 NFC版\u0026#39;, desc: \u0026#39;多样快拆时尚腕带 | 跑步豆\u0026amp;体感互动多模式 | 多功能NFC\u0026#39;, price: 249 }, // { id: 8, url: \u0026#39;../../../img/米兔儿童学习手表5 Pro.jpg\u0026#39;, title: \u0026#39;img/米兔儿童学习手表5 Pro\u0026#39;, desc: \u0026#39;12重安全定位 | 3D楼层定位 | 高清双摄 | AI拍照识物 | NFC公交卡 | 实时心率监测 | 20米防水 | 儿童微信 | QQ | 支付宝 | 小爱同学\u0026#39;, price: 999 }, ] } }, components: { Part, Goods, Extra } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 练习 可以通过（）标签为组件添加插槽？\n如果要把内容填充到指定名称的插槽中，可以通过一个包含（）指令的 \u0026lt;template\u0026gt; 标签来实现。\n如果一个组件没有预留任何插槽，则组件的使用者提供的任何插槽内容同样会起作用。（）\n添加 name 属性的 \u0026lt;slot\u0026gt; 标签用来定义具名插槽。（）\ndom 元素在哪个生命周期后才能后被调用？\n​\tA. onActived()\tB. mounted()\tC. beforeCreate()\tD. beforeMount()\n下列说法，关于自定义指令说法错误的是。（） ​\tA. 插槽是组件封装期间为组件的使用者预留的占位符。\n​\tB. 在定义插槽时，直接写一个 \u0026lt;slot\u0026gt; 标签，它属于默认插槽。\n​\tC. 如果组件的使用者为插槽提供内容，则默认内容生效。\n​\tD. 当需要使用多个插槽时，则需要为每个 \u0026lt;slot\u0026gt; 插槽指定具体的 name 属性。\n下列选项中，关于自定义指令说法错误的是。（） ​\tA. 全局自定义指令可以在全局进行使用。\n​\tB. 私有自定义指令只能够在声明该指令的组件中使用。\n​\tC. 在 Vue 中，可以通过 app.directive() 函数声明全局自定义指令。\n​\tD. 在 Vue 中，不能为自定义指令绑定参数。\n下列选项中，关于自定义指令常用声明周期函数及传入参数说法错误的是。（） ​\tA. mounted() 函数在绑定元素的父组件及自身的所有子节点都挂在完成后调用。\n​\tB. value 为参数 binding 中的属性，表示传递给指令的值。\n​\tC. beforeUpdate() 函数在绑定的父组件卸载前调用。\n​\tD. el 参数表示当前指令所绑定到的元素。\n","date":"2025-02-28T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8B/","title":"第四章 组件基础（下）"},{"content":"Vue API 风格 组合式 API 和选项式 API 各有优缺点，组合式 API 的主要优势在于更强的逻辑复用和组合能力、更好的类型推导和类型安全、更清晰的逻辑隔离、灵活的逻辑组合和嵌套，以及更方便的测试。选项式 API 在 Vue 2 中广泛使用，仍然是一个强大和有效的选择，但对于复杂逻辑的管理和复用，组合式 API 提供了更现代化的解决方案。\n选项式 API（Vue2） 使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，如 data、methods 和 mounted。选项所定义的属性都会暴露在函数内部的 this 上，它会指向当前的组件实例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 2 Options API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 2 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { count: 0 }; }, methods: { increment() { this.count++; } } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 组合式 API（Vue3） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Vue 3 Composition API Example\u0026lt;/title\u0026gt; \u0026lt;!-- 引入 Vue 3 库 --\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/vue@3/dist/vue.global.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Count: {{ count }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;increment\u0026#34;\u0026gt;点击增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 从 Vue 全局对象中解构出 createApp 和 ref 函数 const { createApp, ref } = Vue; // 使用 createApp 函数创建一个 Vue 应用实例 const app = createApp({ // setup 函数是 Vue 3 组合式 API 的入口点 setup() { // 使用 ref 函数创建一个响应式变量 count，初始值为 0 const count = ref(0); // 定义一个箭头函数 increment，用于增加 count 的值 const increment = () =\u0026gt; { // 通过 count.value 访问和修改 ref 包装的值 count.value++; }; // setup 函数返回一个对象，将响应式变量和方法暴露给模板使用 return { count, increment }; } }); // 调用 app.mount 方法将 Vue 应用挂载到 id 为 app 的 DOM 元素上 app.mount(\u0026#39;#app\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 两种API风格都能够覆盖大部分的应用场景。它们只是同一个底层系统所提供的两套不同的接口。\n当你不需要使用构建工具，或者打算主要在低复杂度的场景中使用 Vue，例如渐进增强的应用场景，推荐采用选项式 API。 当你打算用 Vue 构建完整的单页应用，推荐采用组合式 API + 单文件组件。 创建 Vue 工程 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\n​\tnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n​\t查看 npm 代理 → npm config get registry\n​\t更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \u0026#34;name\u0026#34;: \u0026#34;vue-study\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;0.0.0\u0026#34;, \u0026#34;private\u0026#34;: true, \u0026#34;type\u0026#34;: \u0026#34;module\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;vite\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;vite build\u0026#34;, \u0026#34;preview\u0026#34;: \u0026#34;vite preview\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;vue\u0026#34;: \u0026#34;^3.4.21\u0026#34; }, \u0026#34;devDependencies\u0026#34;: { \u0026#34;@vitejs/plugin-vue\u0026#34;: \u0026#34;^5.0.4\u0026#34;, \u0026#34;vite\u0026#34;: \u0026#34;^5.1.6\u0026#34; } } 观察 main.ts 文件：\n1 2 3 4 5 6 7 8 9 10 11 import \u0026#39;./assets/main.css\u0026#39; // 这行代码从 vue 库中导入了 createApp 函数。在 Vue 3 里，createApp 是创建 Vue 应用实例的核心函数，借助它可以初始化一个新的 Vue 应用。 import { createApp } from \u0026#39;vue\u0026#39; // 此代码导入了根组件 App.vue。App.vue 一般是 Vue 项目的根组件，它包含了整个应用的基本结构与布局。 import App from \u0026#39;./App.vue\u0026#39; // createApp(App)：调用 createApp 函数，把 App 组件当作参数传入，从而创建一个新的 Vue 应用实例。 // .mount(\u0026#39;#app\u0026#39;)：调用 mount 方法，将创建好的 Vue 应用实例挂载到 HTML 文件里 id 为 app 的 DOM 元素上。通常，这个 id 为 app 的元素是在 index.html 文件中定义的。 createApp(App).mount(\u0026#39;#app\u0026#39;) 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 **中是通过 **createApp 函数创建一个应用实例。 项目内语法 export default 在 Vue 3 里，export default 是 ES6 模块语法的一部分，其用途是从一个模块里导出一个默认的值。在 Vue 组件里，它通常用来导出组件的配置对象。\n在 Vue 3 的单文件组件（.vue 文件）里，export default 用于导出组件的配置对象，此对象包含组件的选项，像 data、methods、computed 等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;{{ message }}\u0026lt;/h1\u0026gt; \u0026lt;button @click=\u0026#34;changeMessage\u0026#34;\u0026gt;修改消息\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;欢迎使用 Vue 3\u0026#39; }; }, methods: { changeMessage() { this.message = \u0026#39;消息已更新\u0026#39;; } } }; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; h1 { color: blue; } \u0026lt;/style\u0026gt; 插值表达式 删除 src 文件夹下 components 文件夹中的所有文件，清空 App.vue 中所有内容，删除 main.js 文件中语句 import './assets/main.css'。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ m1 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { m1: \u0026#39;插值表达式\u0026#39;, count: 0 } } } \u0026lt;/script\u0026gt; 属性绑定 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;c1\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img2\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;{ active1: true, active2: false }\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;img6\u0026#34; alt=\u0026#34;\u0026#34; :class=\u0026#34;[\u0026#39;active1\u0026#39;, \u0026#39;active2\u0026#39;]\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, c1: \u0026#34;active1\u0026#34;, c2: \u0026#34;active2\u0026#34; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; img{ margin: 20px; box-sizing: border-box; } .active1 { width: 300px; } .active2 { width: 500px; border: 20px solid black; } \u0026lt;/style\u0026gt; 条件渲染和列表渲染 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;template\u0026gt; \u0026lt;img v-bind:src=\u0026#34;img5\u0026#34; alt=\u0026#34;\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 的索引号是 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { img1: \u0026#39;../img/film1.webp\u0026#39;, img2: \u0026#39;../img/film2.webp\u0026#39;, img3: \u0026#39;../img/film3.webp\u0026#39;, img4: \u0026#39;../img/film4.webp\u0026#39;, img5: \u0026#39;../img/film5.webp\u0026#39;, img6: \u0026#39;../img/film6.webp\u0026#39;, flag: true, list: [ \u0026#39;111\u0026#39;, \u0026#39;222\u0026#39;, \u0026#39;333\u0026#39;, \u0026#39;444\u0026#39; ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; 事件和计算属性 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;template\u0026gt; \u0026lt;button @click=\u0026#34;add($event)\u0026#34;\u0026gt;{{ count }}\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;{{ getSum }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { count: 0, list: [1, 2, 3, 4, 5] } }, methods: { add(e) { this.count++; console.log(e); } }, computed: { getSum() { let sum = 0; for (let i = 0; i \u0026lt; this.list.length; i++) { sum += this.list[i]; } return sum; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 侦听器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { message: \u0026#39;旧消息\u0026#39; } }, methods: { reset() { this.message = \u0026#39;新消息\u0026#39; } }, watch: { message(newValue, oldValue) { console.log(newValue, oldValue) }, // message(m1, m2) { // console.log(m1, m2) // } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt; 拓展：如果希望点击按钮能够在 “旧消息” 和 “新消息” 之间来回切换，怎样实现？\n阶段案例 参照以下图片，完成 \u0026ldquo;学习计划表\u0026rdquo; 案例，页面中会展示学生的学习计划，包括学习科目、学习内容、学习地点、完成状态等。\n使用 vue + html + css 完成案例，实现添加、删除、完成状态变化等功能。\nu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, methods: { add() { this.list.unshift({ id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) console.log(this.list); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } \u0026lt;/style\u0026gt; 获取 dom 元素 虽然 Vue 的声明性渲染模型为我们抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref 属性。\n1 2 3 \u0026lt;div id=\u0026#34;d1\u0026#34; ref=\u0026#34;d2\u0026#34;\u0026gt;这是一个div标签\u0026lt;/div\u0026gt; console.log(this.$refs.d2); 挂载结束后引用都会被暴露在 this.$refs 之上。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;template\u0026gt; \u0026lt;p ref=\u0026#34;p1\u0026#34;\u0026gt;p标签\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;getRef\u0026#34;\u0026gt;获取dom元素\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;reSet\u0026#34;\u0026gt;更改元素内容\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; ref=\u0026#34;i1\u0026#34; @focus=\u0026#34;setValue\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { } }, methods: { getRef() { console.log(this.$refs) console.log(this.$refs.p1) }, reSet() { this.$refs.p1.innerHTML = \u0026#39;2\u0026#39;; }, setValue() { this.$refs.i1.value = \u0026#39;1111\u0026#39;; } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p{ font-size: 30px; } \u0026lt;/style\u0026gt; 组件基础 组件组成 组件最大的优势就是可复用性。当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件（简称 SFC）。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt;承载标签\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 其中，scoped 表示让该样式只在当前组件中生效。\n组件引用（局部注册） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;MyComponent /\u0026gt; \u0026lt;MyComponent\u0026gt;\u0026lt;/MyComponent\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import MyComponent from \u0026#34;./components/MyComponent.vue\u0026#34;; export default { components:{ MyComponent, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 练习：创建两个组件，其中，第一个组件中有一个 h1 标签和一个图片标签，文字颜色为黑色，当点击图片时，图片和标题都能够循环切换；第二个组件中有一个 p 标签，文字颜色为灰色，在 App 文件中引用这两个组件，具体实现效果如下图所示。\n中国34个省级2022年高清行政地图和名称来源解读（值得收藏） - 知乎\nApp\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;template\u0026gt; \u0026lt;C1 /\u0026gt; \u0026lt;C2 /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import C1 from \u0026#34;./components/C1.vue\u0026#34;; import C2 from \u0026#34;./components/C2.vue\u0026#34;; export default { components: { C1, C2, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; C1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; C2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; 组件嵌套关系 组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。在实际应用中，组件常常被组织成层层嵌套的树状结构，这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。\n组件注册 当在 Vue 项目中定义了一个新的组件后，想要在其他组件中引用这个新的组件，需要对新的组件进行注册。Vue 提供了两种注册组件的方式，分别是全局注册和局部注册。\n在实际开发中，如果某些组件只在特定情况下被用到，推荐进行局部注册，即在某个组件中注册。被局部注册的组件只能在当前注册范围内使用。例如：在组件 A 中注册了组件 B，则组件 B 只能在组件 A 中使用，不能在组件 C 中使用。\n在实际开发中，如果某个组件使用频率很高，许多组件都会引用这个新的组件，则推荐将该组件全局注册。被全局注册的组件可以在当前 Vue 项目的任何一个组件内引用。\n在 Vue 项目 src\\main.js 文件中，通过 Vue 应用实例的 component() 方法可以全局注册组件，语法如下：\n1 component(\u0026#39;组件名称\u0026#39;, 需要被注册的组件) 在 src\\main.js 中注册一个全局组件 MyComponent，示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import MyComponent from \u0026#39;./components/MyComponent.vue\u0026#39; // createApp(App).mount(\u0026#39;#app\u0026#39;) const app = createApp(App) // 一定要在 const app = createApp(App) 和 app.mount(\u0026#39;#app\u0026#39;) 两行代码中间注册组件 app.component(\u0026#39;MyComponent\u0026#39;, MyComponent) app.mount(\u0026#39;#app\u0026#39;) 全局注册虽然很方便，但有以下几个问题:\n全局注册，但并没有被使用的组件无法在生产打包时被自动移除（也叫 \u0026ldquo;tree-shaking\u0026quot;）。如果你全局注册了—个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。\n全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。\nprops 传递数据 组件与组件之间不是完全独立的，而是有交集的，有时候会遇到同一个模块中的多个子组件请求同一份数据的情况，如果在子组件中逐个进行网络请求，会造成代码冗余。Vue 提供了 props 语法，可以让父组件为子组件提供要展示的数据，即在父组件中请求该模块下所有子组件中的网络请求，然后通过 props 将数据传递给子组件。\n声明 props 在不使用 setup 语法糖的情况下，可以使用 props 选项声明 props，形式可以使对象或者字符串数组，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;script\u0026gt; export default { props: { 自定义属性 A: 类型, 自定义属性 B: 类型, str: String, num: Number, bol: Boolean, arr: Array, obj: Object, ... } } \u0026lt;/script\u0026gt; 如果不需要限制 props 的类型，可以直接声明 props，语法格式如下：\n1 2 3 export default { props: [\u0026#39;自定义属性 A\u0026#39;, \u0026#39;自定义属性 B\u0026#39;, \u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;...] } 当使用 setup 语法糖时，可以使用 defineProps() 函数声明 props，语法格式如下：\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;script setup\u0026gt; const props = defineProps( {\u0026#39;自定义属性 A\u0026#39;: 类型}, {\u0026#39;自定义属性 B\u0026#39;: 类型}, {\u0026#39;str\u0026#39;: String}, {\u0026#39;num\u0026#39;: Number}, {\u0026#39;bol\u0026#39;: Boolean}, {\u0026#39;arr\u0026#39;: Array}, {\u0026#39;obj\u0026#39;: Object}, ... ) \u0026lt;/script\u0026gt; 静态绑定 props 1 \u0026lt;子组件标签名 自定义属性 A = \u0026#34;数据\u0026#34; 自定属性 B = \u0026#34;数据\u0026#34; /\u0026gt; Parent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;!-- \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; :num=\u0026#34;111\u0026#34; :arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; :obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; --\u0026gt; \u0026lt;Child str=\u0026#34;字符串类型数据\u0026#34; num=\u0026#34;111\u0026#34; bol=\u0026#34;true\u0026#34; arr=\u0026#34;[\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;]\u0026#34; obj=\u0026#34;{name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { // props: { // str: String, // num: Number, // bol: Boolean, // arr: Array, // obj: Object // } props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 动态绑定 props 使用 v-bind 动态绑定 props，任意类型的值都可以传给子组件的 props。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :str=\u0026#34;m0\u0026#34; :num=\u0026#34;m1\u0026#34; :bol=\u0026#34;m2\u0026#34; :arr=\u0026#34;m3\u0026#34; :obj=\u0026#34;m4\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m0: \u0026#39;你好\u0026#39;, m1: 111, m2: true, m3: [\u0026#39;alice\u0026#39;, \u0026#39;bob\u0026#39;, \u0026#39;john\u0026#39;], m4: {name: \u0026#39;张三\u0026#39;, age: \u0026#39;18\u0026#39;, gender: \u0026#39;男\u0026#39;}, } }, components: { Child } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ str }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ num }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ bol }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ arr }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ obj }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;str\u0026#39;, \u0026#39;num\u0026#39;, \u0026#39;bol\u0026#39;, \u0026#39;arr\u0026#39;, \u0026#39;obj\u0026#39;] } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; 子传父 $emit 在子元素中添加按钮，点击按钮时触发事件，使用 this.$emit('方法名'，'值') 向父组件请求修改数据。 1 2 3 4 5 6 7 8 \u0026lt;!-- 在子组件中需要写在方法里：--\u0026gt; methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, 300) } } \u0026lt;!-- 在父组件中需要接收相应的事件：--\u0026gt; \u0026lt;Child @aaa=\u0026#34;change(a)\u0026#34;\u0026gt;\u0026lt;/Child\u0026gt; 父组件需要监听子组件传递过来的方法名，监听到后执行父组件内的方法。\n在父组件的 methods 中提供处理函数，在形参中可以获取到子组件传递过来的值，用于修改数据。\nParent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Parent\u0026lt;/h1\u0026gt; \u0026lt;Child :msg=\u0026#34;m1\u0026#34; @changeData=\u0026#34;change\u0026#34; /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Child from \u0026#39;./Child.vue\u0026#39;; export default{ data(){ return{ m1: \u0026#39;尝试修改这条信息\u0026#39;, } }, components: { Child }, methods: { change(newData){ this.m1 = newData; } } } \u0026lt;/script\u0026gt; Child\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;Child\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;{{ msg }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;modify\u0026#34;\u0026gt;修改数据\u0026lt;/button\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: [\u0026#39;msg\u0026#39;], methods: { modify(){ this.$emit(\u0026#39;changeData\u0026#39;, \u0026#39;修改后的信息\u0026#39;) } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;template\u0026gt; \u0026lt;Parent /\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Parent from \u0026#34;./components/Parent.vue\u0026#34; export default { components: { Parent } } \u0026lt;/script\u0026gt; \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;地图切换\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // --------------c1 \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt;{{ addresses[count % addresses.length] }}\u0026lt;/h1\u0026gt; \u0026lt;img :src=\u0026#34;maps[count % maps.length]\u0026#34; alt=\u0026#34;\u0026#34; @click=\u0026#34;change\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { addresses: [ \u0026#39;北京市\u0026#39;, \u0026#39;上海市\u0026#39;, \u0026#39;福建省\u0026#39;, \u0026#39;湖南省\u0026#39;, \u0026#39;广东省\u0026#39;, ], maps: [ \u0026#39;../../images/01.jpg\u0026#39;, \u0026#39;../../images/02.jpg\u0026#39;, \u0026#39;../../images/03.jpg\u0026#39;, \u0026#39;../../images/04.jpg\u0026#39;, \u0026#39;../../images/05.jpg\u0026#39;, ] } }, props: [\u0026#39;count\u0026#39;], methods:{ change(){ this.$emit(\u0026#39;aaa\u0026#39;, this.count+1) } }, emits: [\u0026#39;aaa\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; h1 { margin: 50px 100px; } img { width: 700px; float: left; margin: 0 100px; } \u0026lt;/style\u0026gt; // --------------c2 \u0026lt;template\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ desc[count % desc.length].m2 }}\u0026lt;/p\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { desc: [ { m1: \u0026#39;北京，简称京，古称幽州、燕京和北平，是中华人民共和国首都，位于华北平原北部，面积1.64万平方千米，2022年人口2184万，生产总值41610亿元。北京是中国政治中心、文化中心、国际交往中心、科技创新中心、国家中心城市和世界著名古都。\u0026#39;, m2: \u0026#39;北京历史悠久，作为城市历史可追溯到3000年前，一直是中国北方重镇，与西安、南京、洛阳并称中国四大古都。商周时蓟国在北京建城，春秋时燕国灭蓟后迁都于此，称为燕都或燕京。秦代为蓟县，汉代为幽州，隋朝改幽州为涿郡，唐朝复称幽州。1153年，完颜亮正式建都于北京，称为中都，此后元、明和清三朝均建都北京，元代改称大都，明朝朱棣改称北京沿用至今。\u0026#39; }, { m1: \u0026#39;上海，简称沪，别称申城，位于中国华东地区长江三角洲，是中国最大城市和国际经济、金融、贸易、航运、科技创新中心。面积0.63万平方千米，2022年人口为2475万，GDP为44652亿元。\u0026#39;, m2: \u0026#39;古时上海地区渔民发明一种竹编捕鱼工具“扈”，因此被称为“沪渎”。战国时上海是楚国春申君黄歇封邑，故上海别称“申”。上海之称始于宋代，当时上海已成为新兴贸易港口，有十八大浦，其中一条叫上海浦，上海浦西岸设有上海镇。1292年，上海改镇为县，这是上海名称由来。1949年，上海设为直辖市。\u0026#39; }, { m1: \u0026#39;福建，简称闽，省会福州，地处我国东南沿海，与台湾隔海相望，因境内有面积12.4万平方公里，是我国著名侨乡和海上丝绸之路起点，山地和丘陵约占90%，八山一水一分田，森林覆盖率居全国第一。2022年人口4188万，生产总值53109亿元。\u0026#39;, m2: \u0026#39;秦始皇统一中国后设闽中郡，汉称为闽越国。唐开元年间设福建节度使，管辖福、建、泉、漳、汀五州，取福州和建州两府首字而得名。元设福建行省，明设福建省至今。因境内有闽江和古为闽越族聚居地，故简称闽。\u0026#39; }, { m1: \u0026#39;湖南，简称湘，省会长沙，位于我国中部和长江中游，是湘楚文化典型代表。面积21.18万平方千米，地势东南西三面环山，北部为平原，地跨长江、珠江两大水系。2022年人口6604万人，生产总值48670亿元。\u0026#39;, m2: \u0026#39;两晋时设有湘州。唐朝设湖南观察使，始出现湖南一名。宋置荆湖南路，简称湖南路。元朝设湖广行省，明朝设湖广承宣布政使司，清康熙三年湖广分治，以洞庭湖为界，南为湖南省，北为湖北省。因大部分地区处于洞庭湖以南故名湖南，因省内最大河流湘江流贯南北而简称湘。\u0026#39; }, { m1: \u0026#39;广东，简称粤，省会广州，位于南岭以南，南海之滨，是海上丝绸之路发源地、近代革命策源地、改革开放前沿地，岭南文化重要传承地。面积17.98万平方千米，地势总体北高南低，北部多为山地和高丘陵，南部则为平原和台地。广东是中国第一人口大省和经济大省，人口12656万，生产总值129118亿元，是著名华侨之乡、鱼米之乡和果蔬花木之乡。\u0026#39;, m2: \u0026#39;因古地名广信之东，故名“广东”，因春秋战国时为百越之地，而简称粤。宋置广南东路，简称广东路，是广东得名之始。元设广东道，明设广东省，沿袭至今。\u0026#39; } ] } }, props: { count: Number } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; p { color: gray; margin: 50px 100px; font-size: 20px; } \u0026lt;/style\u0026gt; // --------------app \u0026lt;template\u0026gt; \u0026lt;c1 :count=\u0026#34;num\u0026#34; @aaa=\u0026#34;me\u0026#34;\u0026gt;\u0026lt;/c1\u0026gt; \u0026lt;c2 :count=\u0026#34;num\u0026#34;\u0026gt;\u0026lt;/c2\u0026gt; \u0026lt;!-- \u0026lt;button @click=\u0026#34;change\u0026#34;\u0026gt;11\u0026lt;/button\u0026gt; --\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import c1 from \u0026#39;./components/c1.vue\u0026#39; import c2 from \u0026#39;./components/c2.vue\u0026#39; export default { data() { return { num: 0 } }, components: { c1, c2 }, methods:{ // change(){ // this.num++; // }, me(a){ this.num = a; } } } \u0026lt;/script\u0026gt; 学习计划表传递 Top\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;学习计划表\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习科目\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;subject\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习科目\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习内容\u0026lt;/span\u0026gt; \u0026lt;textarea v-model=\u0026#34;content\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; placeholder=\u0026#34;请输入学习内容\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-item\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;item-head\u0026#34;\u0026gt;学习地点\u0026lt;/span\u0026gt; \u0026lt;select name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;space\u0026#34;\u0026gt; \u0026lt;option :value=\u0026#34;index + 1\u0026#34; v-for=\u0026#34;(item, index) in spaceList\u0026#34;\u0026gt;{{ item.place }}\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;add()\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, space: 1, finished: \u0026#39;\u0026#39; } }, props: { spaceList: Array }, methods: { add() { this.$emit(\u0026#39;aaa\u0026#39;, { id: +new Date(), subject: this.subject, content: this.content, space: this.spaceList[this.space - 1].place, finished: false }) } } } \u0026lt;/script\u0026gt; Bottom\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 300px;\u0026#34;\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 500px;\u0026#34;\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 120px;\u0026#34;\u0026gt;{{ item.space }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;item.finished\u0026#34; :disabled=\u0026#34;item.finished\u0026#34;\u0026gt; {{ item.finished ? \u0026#39;已完成\u0026#39; : \u0026#39;未完成\u0026#39; }} \u0026lt;/td\u0026gt; \u0026lt;td style=\u0026#34;width: 65px;\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { props: { list: Array }, methods: { del(id) { for (let i = 0; i \u0026lt; this.list.length; i++) { if (this.list[i].id == id) { this.list.splice(i, 1) } } } } } \u0026lt;/script\u0026gt; App\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 \u0026lt;template\u0026gt; \u0026lt;top :spaceList=\u0026#34;spaceList\u0026#34; @aaa=\u0026#34;add\u0026#34;\u0026gt;\u0026lt;/top\u0026gt; \u0026lt;bottom :list=\u0026#34;list\u0026#34;\u0026gt;\u0026lt;/bottom\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import top from \u0026#39;./components/studyCard/top.vue\u0026#39; import bottom from \u0026#39;./components/studyCard/bottom.vue\u0026#39; export default { components: { top, bottom }, data() { return { list: [ { id: 1, subject: \u0026#39;vue.js前端开发实战\u0026#39;, content: \u0026#39;学习vue指令，如v-if、v-for、v-model等\u0026#39;, space: \u0026#39;自习室\u0026#39;, finished: false }, { id: 2, subject: \u0026#39;bootstrap\u0026#39;, content: \u0026#39;百度首页仿写\u0026#39;, space: \u0026#39;教室\u0026#39;, finished: true }, ], spaceList: [ { placeCode: 1, place: \u0026#39;自习室\u0026#39; }, { placeCode: 2, place: \u0026#39;教室\u0026#39; }, { placeCode: 3, place: \u0026#39;图书馆\u0026#39; }, { placeCode: 4, place: \u0026#39;办公室\u0026#39; }, { placeCode: 5, place: \u0026#39;宿舍\u0026#39; } ], } }, methods:{ add(e){ this.list.unshift(e) } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; } body { min-width: 1200px; } .header { border: 2px solid black; margin: 10px; width: 1200px; } h2 { height: 40px; line-height: 40px; padding: 0 10px; border-bottom: 2px solid gray; background-color: lightgray; } .card { padding: 20px 10px; display: flex; justify-content: space-between; } .card .card-item { display: flex; margin-right: 20px; height: 50px; } .card .card-item .item-head { background-color: lightgray; border: 1px solid black; width: 70px; line-height: 50px; padding: 0 5px; } .card .card-item textarea { line-height: 40px; font-size: 20px; padding: 5px; border: 1px solid black; border-radius: 0; outline: none; position: relative; left: -1px; width: 200px; } select { border-radius: 0; position: relative; left: -1px; font-size: 16px; padding: 5px; width: 200px; outline: none; } .card button { background-color: lightgray; border-radius: 0; width: 70px; border: 1px solid black; cursor: pointer; } .main { border: 2px solid black; margin: 50px 10px; width: 1200px; } table { border-collapse: collapse; width: 100%; text-align: center; font-size: 18px; } th, td { border: 1px solid lightgray; } thead { height: 40px; } tr { height: 40px; } textarea{ overflow-y: hidden; } \u0026lt;/style\u0026gt; 跨级组件之间的数据传递 父子关系组件之间的数据传递主要通过 props、$emit 实现，非父子关系组件之间，通过 provide、inject 或者 eventbus 传递数据，在复杂的 vue 项目中，使用 vuex 实现组件之间数据传递。\nprovide() \u0026amp; inject() 父组件provide提供数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 export default { provide() { return { \u0026lt;!-- 可以包含普通数据类型或者复杂数据类型 --\u0026gt; c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, \u0026lt;!-- c1为字符串类型，c2为对象类型 --\u0026gt; c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } } } 子 / 孙组件 inject 取值使用\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { \u0026lt;!-- 在后代组件中使用inject数组的形式取值 --\u0026gt; inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; APP\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;changeAll\u0026#34;\u0026gt;改变数据\u0026lt;/button\u0026gt; \u0026lt;ProvideChild :n1=\u0026#34;m1\u0026#34; :n2=\u0026#34;m2\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideChild from \u0026#34;./components/ProvideChild.vue\u0026#34;; export default { provide() { return { c1: this.c1, c2: this.c2 } }, components: { ProvideChild, }, data() { return { m1: 111, m2: 222, c1: \u0026#39;hello\u0026#39;, c2: { name: \u0026#39;zhangsan\u0026#39;, age: 18, gender: \u0026#39;nan\u0026#39; } } }, methods: { changeAll() { this.c1 = \u0026#39;changedc1\u0026#39;; this.c2 = { name: \u0026#39;xiaozhang\u0026#39;, age: 17, gender: \u0026#39;nv\u0026#39; }; }, changeData() { this.c2.name = \u0026#39;xiaozhang\u0026#39;; this.c2.age = 17; this.c2.gender = \u0026#39;nv\u0026#39; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; div { width: 800px; height: 800px; border: 2px solid black; } \u0026lt;/style\u0026gt; ProvideChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;child\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;ProvideGrandChild /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import ProvideGrandChild from \u0026#39;./ProvideGrandChild.vue\u0026#39;; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;], components:{ ProvideGrandChild, } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .child{ width: 500px; height: 500px; border: 2px solid black; margin: 30px; } \u0026lt;/style\u0026gt; ProvideGrandChild\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;grandchild\u0026#34;\u0026gt; \u0026lt;p\u0026gt;111\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ n1 }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;p\u0026gt;{{ c1 }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ c2 }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { inject: [\u0026#39;c1\u0026#39;, \u0026#39;c2\u0026#39;], created() { console.log(this.c1, this.c2); }, // props: [\u0026#39;n1\u0026#39;, \u0026#39;n2\u0026#39;] } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .grandchild{ margin: 30px; width: 300px; height: 300px; border: 2px solid black; } \u0026lt;/style\u0026gt; 练习 选择题 创建 Vue 项目的命令是什么？ A. npm create-vue project\tB. npm create vue project\nC. npm create-react project\tD. npm create vue@latest\n下列哪个语句可以作为插值表达式中的语句？ A. {{ var a = 1 }}\tB. {{ if (ok) { return message } }}\nC. {{ message.split(\u0026rsquo;\u0026rsquo;).reverse().join(\u0026rsquo;\u0026rsquo;) }}\tD. {{ if (ok) { } else { } }}\n下列哪个是侦听器关键字？ A. data\tB. methods\tC. computed\tD. watch\n在 Vue 中，传递参数过程中获取 event 对象的写法正确的是？ A. @click = \u0026ldquo;getNameHandle(item)\u0026rdquo;\nB. @click = \u0026ldquo;getNameHandle(item, $event)\u0026rdquo;\nC. @click = \u0026ldquo;getNameHandle(item, e)\u0026rdquo;\nD. @click = \u0026ldquo;getNameHandle(e)\u0026rdquo;\n案例——学习计划表u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt;\u0026lt;span\u0026gt;\u0026lt;strong\u0026gt;学习计划表\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;form\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习科目 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;subject\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt;\u0026lt;span\u0026gt;学习内容 \u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;content\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mod\u0026#34;\u0026gt; \u0026lt;span\u0026gt;学习地点 \u0026lt;select v-model=\u0026#34;location\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;1\u0026#34;\u0026gt;图书馆\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;2\u0026#34;\u0026gt;自习室\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;3\u0026#34;\u0026gt;宿舍\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;4\u0026#34;\u0026gt;咖啡厅\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;5\u0026#34;\u0026gt;办公室\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;序号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习内容\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;学习地点\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;完成状态\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in lists\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ index + 1 }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.subject }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.content }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.location }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;check\u0026#34; @click=\u0026#34;finish(item.id)\u0026#34;\u0026gt;\u0026lt;span\u0026gt;{{ item.status }}\u0026lt;/span\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;javascript:;\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { lists: [ { id: 1, subject: \u0026#39;vue.js\u0026#39;, content: \u0026#39;vue指令\u0026#39;, location: \u0026#39;图书馆\u0026#39;, status: \u0026#39;未完成\u0026#39; }, ], subject: \u0026#39;\u0026#39;, content: \u0026#39;\u0026#39;, location: \u0026#39;1\u0026#39;, status: \u0026#39;未完成\u0026#39; } }, methods: { add() { if (!this.subject) { alert(\u0026#39;学习科目不能为空！\u0026#39;); return; } if (!this.content) { alert(\u0026#39;学习内容不能为空！\u0026#39;); return; } this.lists.push({ id: +new Date(), subject: this.subject, content: this.content, location: document.querySelectorAll(\u0026#39;option\u0026#39;)[this.location - 1].innerHTML, status: this.status }) this.subject = \u0026#39;\u0026#39; this.content = \u0026#39;\u0026#39; console.log(this.lists); }, del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } if(document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == false){ alert(\u0026#39;请先完成计划再删除！\u0026#39;); return; } // console.log(this.list) this.lists.splice(index, 1); // console.log(this.list) }, finish(id){ let index = 0; for (let i = 0; i \u0026lt; this.lists.length; i++) { if (this.lists[i].id === id) { index = i; } } // document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].checked == true; document.querySelectorAll(\u0026#39;td span\u0026#39;)[index].innerHTML = \u0026#39;已完成\u0026#39;; document.querySelectorAll(\u0026#39;.check\u0026#39;)[index].disabled = true; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; * { font-size: 24px; } .card { width: 100%; height: 200px; border: 2px solid gray; } .card-header { height: 50px; background-color: lightgray; line-height: 50px; border-bottom: 2px solid gray; } .card-header span { margin-left: 20px; } .card-body button { float: left; margin: 50px 20px; height: 50px; } .mod { float: left; margin: 50px 20px; background-color: lightgray; height: 48px; border: 2px solid gray; } .mod input { height: 44px; margin-top: -1px; margin-right: -2px; outline: none; } .mod select { height: 50px; margin-top: -1px; margin-right: -2px; width: 150px; text-align: center; outline: none; } .mod span { margin-left: 5px; } .list { width: 100%; } .list table { width: 100%; border-spacing: 0; border-top: 2px solid gray; border-left: 2px solid gray; } .list table th { background: lightgray; } .list table td:hover { background: #f5f5f5; } .list table th, .list table td { border-bottom: 2px solid gray; border-right: 2px solid gray; text-align: center; padding: 10px; } input[type=\u0026#34;checkbox\u0026#34;] { width: 20px; height: 20px; } \u0026lt;/style\u0026gt; 案例——百度热搜u0026lt;template\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in lis\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;head\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../img/baidu.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;百度热搜 \u0026gt;\u0026lt;/strong\u0026gt; \u0026lt;span class=\u0026#34;next-icon\u0026#34; @click=\u0026#34;next\u0026#34;\u0026gt;↻ 换一换\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tab\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;tab-item active\u0026#34; @click=\u0026#34;show(0)\u0026#34;\u0026gt;热搜榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(1)\u0026#34;\u0026gt;长沙榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(2)\u0026#34;\u0026gt;民生榜\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;tab-item\u0026#34; @click=\u0026#34;show(3)\u0026#34;\u0026gt;财经榜\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 1 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span v-if=\u0026#34;index == 0\u0026#34; :class=\u0026#34;{ s0: index == 0 }\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 1, s1: index == 2, s2: index == 3, s3: index \u0026gt; 3 }\u0026#34; v-else\u0026gt;{{ index }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab1lis2\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;page % 2 == 0 \u0026amp;\u0026amp; tab % 4 == 0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;s3\u0026#34;\u0026gt;{{ index + 10 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab2lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab3lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34; v-for=\u0026#34;(item, index) in tab4lis1\u0026#34; :key=\u0026#34;item.id\u0026#34; v-show=\u0026#34;tab % 4 == 3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span :class=\u0026#34;{ s0: index == 0, s1: index == 1, s2: index == 2, s3: index \u0026gt; 2 }\u0026#34;\u0026gt;{{ index + 1 }}\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { tab1lis1: [ { id: 1, title: \u0026#39;风好正是扬帆时\u0026#39; }, { id: 2, title: \u0026#39;住建部：防止房地产市场大起大落热\u0026#39; }, { id: 3, title: \u0026#39;美国共产主义者宣布成立政党\u0026#39; }, { id: 4, title: \u0026#39;2024年全国两会新闻中心启用\u0026#39; }, { id: 5, title: \u0026#39;上海到北京仅需2.5小时\u0026#39; }, { id: 6, title: \u0026#39;爆火的秦岭隧道视频系拼接 作者道歉\u0026#39; }, { id: 7, title: \u0026#39;贵州省长：全面清理拖欠企业账款\u0026#39; }, { id: 8, title: \u0026#39;理想市值一天涨了1个小鹏\u0026#39; }, { id: 9, title: \u0026#39;#张雪峰称想出国读书先看这本书#\u0026#39; }, { id: 10, title: \u0026#39;河南多地发生山火？\u0026#39; }, ], tab1lis2: [ { id: 11, title: \u0026#39;演唱会黄牛煽动粉丝冲卡被行拘\u0026#39; }, { id: 12, title: \u0026#39;端午节放3天不调休\u0026#39; }, { id: 13, title: \u0026#39;美媒称拜登支持率与特朗普仅差1%\u0026#39; }, { id: 14, title: \u0026#39;澳亿万富豪之女在悉尼袭击案中遇害\u0026#39; }, { id: 15, title: \u0026#39;华为P系列升级为华为Pura\u0026#39; }, { id: 16, title: \u0026#39;老板掉进化粪池6人施救不幸全遇难\u0026#39; }, { id: 17, title: \u0026#39;阿根廷总统米莱宣布与女友分手\u0026#39; }, { id: 18, title: \u0026#39;我国已记录660多种外来入侵物种\u0026#39; }, { id: 19, title: \u0026#39;官方回应128元千人宴全是花生毛豆\u0026#39; }, { id: 20, title: \u0026#39;副县长妻子为出轨对象做间谍17年\u0026#39; }, ], tab2lis1: [ { id: 1, title: \u0026#39;民生项目落地 长沙幸福“加码”\u0026#39; }, { id: 2, title: \u0026#39;发展新质生产力，长沙瞄准有生力“量”\u0026#39; }, { id: 3, title: \u0026#39;长沙：未经业主同意，不得擅自涨物业费\u0026#39; }, { id: 4, title: \u0026#39;长沙望城区：调解劳资纠纷工会“快”字当头\u0026#39; }, { id: 5, title: \u0026#39;长沙诚邀您用镜头寻最美“乡”味\u0026#39; }, { id: 6, title: \u0026#39;2024中部（长沙）糖酒会将启幕\u0026#39; }, { id: 7, title: \u0026#39;2024长沙马栏山花朝节开幕\u0026#39; }, { id: 8, title: \u0026#39;2028年通车！长沙城南将新增一座过江大桥\u0026#39; }, { id: 9, title: \u0026#39;长沙量子测量产业技术研究院揭牌\u0026#39; }, { id: 10, title: \u0026#39;听说，五一广场成了长沙“粤语区”\u0026#39; }, ], tab3lis1: [ { id: 1, title: \u0026#39;翻船目击者称因吃饭躲过一劫\u0026#39; }, { id: 2, title: \u0026#39;35辆车高速集体爆胎\u0026#39; }, { id: 3, title: \u0026#39;北大凌晨讣告:大师辞世\u0026#39; }, { id: 4, title: \u0026#39;墨西哥城一直升机坠毁\u0026#39; }, { id: 5, title: \u0026#39;南京司机拒载日本乘客系谣言\u0026#39; }, { id: 6, title: \u0026#39;重庆辟谣“一家人上吊而死”\u0026#39; }, { id: 7, title: \u0026#39;1735名村民起诉区政府\u0026#39; }, { id: 8, title: \u0026#39;26岁男生失联家属发声\u0026#39; }, { id: 9, title: \u0026#39;国家某部委翻译驻外期被策反\u0026#39; }, { id: 10, title: \u0026#39;炸串奶奶摊前排起长队\u0026#39; }, ], tab4lis1: [ { id: 1, title: \u0026#39;章泽天自曝家族有帕金森基因\u0026#39; }, { id: 2, title: \u0026#39;油价明天预计上调\u0026#39; }, { id: 3, title: \u0026#39;周鸿祎等企业家在飞机上掼蛋\u0026#39; }, { id: 4, title: \u0026#39;万科承认遇到经营困难\u0026#39; }, { id: 5, title: \u0026#39;我国人均存款约10.8万\u0026#39; }, { id: 6, title: \u0026#39;高盛上调年底金价预测\u0026#39; }, { id: 7, title: \u0026#39;章泽天现身美国参加名流晚宴\u0026#39; }, { id: 8, title: \u0026#39;科大讯飞与华中师范大学合作\u0026#39; }, { id: 9, title: \u0026#39;苹果面临日本加重罚款\u0026#39; }, { id: 10, title: \u0026#39;1-3月中国进口钢材减少\u0026#39; }, ], page: 1, tab: 0 } }, methods: { next() { this.page++; }, show(index) { const items = document.querySelectorAll(\u0026#39;.tab-item\u0026#39;); const active = document.querySelector(\u0026#39;.active\u0026#39;); active.classList.remove(\u0026#39;active\u0026#39;); items[index].classList.add(\u0026#39;active\u0026#39;); this.tab = index; this.page = 1; } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .main-box { width: 300px; text-wrap: nowrap; overflow-x: hidden; /* text-overflow: ellipsis; */ overflow-y: hidden; position: absolute; top: 30%; left: 50%; /* 往上（x轴）、左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */ transform: translate(-50%, -50%); } img { width: 101px; height: 33px; margin-bottom: -2.5px; } .list { height: 35px; padding: 5px 0; box-sizing: border-box; } a { text-decoration: none; color: rgb(36, 64, 179); font-size: 16px; } a:hover { color: rgb(41, 91, 255); text-decoration: underline; } .title { margin: 15px 0; } .title strong { width: 150px; font-size: 22px; cursor: pointer; } .title strong:hover { color: rgb(41, 91, 255); } .next-icon { margin-left: 120px; color: rgb(98, 102, 117); cursor: pointer; } .next-icon:hover { color: rgb(41, 91, 255); } .tab { margin: 15px 0; } .tab-item { background-color: rgb(238, 238, 238); margin-left: 20px; width: 60px; height: 28px; /* border: 1px solid black; */ border-radius: 5px; display: inline-block; text-align: center; line-height: 28px; color: rgb(36, 64, 179); cursor: pointer; } .tab-item:hover { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .tab-item:nth-child(1) { margin-left: 0; } .active { color: rgb(41, 91, 255); background-color: rgb(227, 237, 255); } .s0 { color: rgb(255, 0, 0); } .s1 { color: rgb(255, 102, 0); } .s2 { color: rgb(250, 169, 14); } .s3 { color: rgb(145, 149, 163); } .list .news span { border-radius: 50%; width: 20px; height: 20px; margin-right: 10px; font-size: 16px; display: inline-block; } \u0026lt;/style\u0026gt; 案例——小米商场 练习：仿照小米官网，思考如何划分组件，编写样式，引入组件完成页面设计。\nHeader 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in leftList\u0026#34;\u0026gt; {{ item }} \u0026lt;span v-if=\u0026#34;index != leftList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in rightList\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34; class=\u0026#34;title\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;span v-if=\u0026#34;index != rightList.length - 1\u0026#34;\u0026gt;|\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;router-link to=\u0026#34;/shop\u0026#34;\u0026gt; --\u0026gt; \u0026lt;li class=\u0026#34;shop\u0026#34; ref=\u0026#34;shopItem\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745197484153\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1028 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2689\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.8 790.528q19.456 0 36.864 7.168t30.208 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.208 20.48-36.864 7.68q-20.48 0-37.888-7.68t-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 37.888-7.168zM758.784 792.576q19.456 0 37.376 7.168t30.72 19.968 20.48 30.208 7.68 36.864-7.68 36.864-20.48 30.208-30.72 20.48-37.376 7.68-36.864-7.68-30.208-20.48-20.48-30.208-7.68-36.864 7.68-36.864 20.48-30.208 30.208-19.968 36.864-7.168zM930.816 210.944q28.672 0 44.544 7.68t22.528 18.944 6.144 24.064-3.584 22.016-13.312 37.888-22.016 62.976-23.552 68.096-18.944 53.248q-13.312 40.96-33.28 56.832t-49.664 15.872l-35.84 0-65.536 0-86.016 0-96.256 0-253.952 0 14.336 92.16 517.12 0q49.152 0 49.152 41.984 0 20.48-9.728 35.84t-38.4 14.336l-49.152 0-94.208 0-118.784 0-119.808 0-99.328 0-55.296 0q-20.48 0-34.304-9.216t-23.04-24.064-14.848-32.256-8.704-32.768q-1.024-6.144-5.632-29.696t-11.264-58.88-14.848-78.848-16.384-87.552q-19.456-103.424-44.032-230.4l-76.8 0q-15.36 0-25.6-7.68t-16.896-18.432-9.216-23.04-2.56-22.528q0-20.48 13.824-33.792t37.376-12.288l103.424 0q20.48 0 32.768 6.144t19.456 15.36 10.24 18.944 5.12 16.896q2.048 8.192 4.096 23.04t4.096 30.208q3.072 18.432 6.144 38.912l700.416 0zM892.928 302.08l-641.024-2.048 35.84 185.344 535.552 1.024z\u0026#34; p-id=\u0026#34;2690\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 购物车 \u0026lt;span class=\u0026#34;shopCount\u0026#34;\u0026gt;({{ count }})\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;!-- 方法1：router-link + to 跳转到指定地址 --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { leftList: [ \u0026#39;小米官网\u0026#39;, \u0026#39;小米商场\u0026#39;, \u0026#39;小米澎湃 OS\u0026#39;, \u0026#39;IOT\u0026#39;, \u0026#39;云服务\u0026#39;, \u0026#39;天星数科\u0026#39;, \u0026#39;有品\u0026#39;, \u0026#39;小爱开放平台\u0026#39;, \u0026#39;资质证照\u0026#39;, \u0026#39;协议规则\u0026#39;, \u0026#39;下载 APP\u0026#39;, \u0026#39;Select Location\u0026#39; ], // rightList: [ // \u0026#39;登录\u0026#39;, \u0026#39;注册\u0026#39;, \u0026#39;消息通知\u0026#39; // ], rightList: [ { title: \u0026#39;登录\u0026#39;, linkTo: \u0026#39;/login\u0026#39; }, { title: \u0026#39;注册\u0026#39;, linkTo: \u0026#39;/register\u0026#39; }, { title: \u0026#39;消息通知\u0026#39;, linkTo: \u0026#39;/info\u0026#39; }, ], count: 0, } }, mounted() { // console.log(this.$refs.shopItem); let shop = document.querySelector(\u0026#39;.shop\u0026#39;); shop.addEventListener(\u0026#39;mouseenter\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;rgb(255, 103, 0)\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;rgb(255, 103, 0)\u0026#39;; shop.classList.add(\u0026#39;active\u0026#39;) }) shop.addEventListener(\u0026#39;mouseleave\u0026#39;, () =\u0026gt; { document.querySelector(\u0026#39;path\u0026#39;).style.fill = \u0026#39;#b0b0b0\u0026#39;; document.querySelector(\u0026#39;.shopCount\u0026#39;).style.color = \u0026#39;#b0b0b0\u0026#39;; shop.classList.remove(\u0026#39;active\u0026#39;) }) }, // 方法2：使用 method 处理事件实现跳转 // methods: { // toShop(){ // this.$router.push(\u0026#39;/shop\u0026#39;) // } // } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; .bg { min-width: 1226px; background-color: rgb(51, 51, 51); } .container { width: 1226px; margin: 0 auto; height: 40px; } ul { height: 40px; line-height: 40px; font-size: 12px; } .left { float: left; } .right { float: right; } ul li { float: left; list-style: none; /* margin: 0 10px; */ padding: 0 5px; color: rgb(176, 176, 176); } span { /* margin-left: 16px; */ position: relative; left: 4px; color: rgb(114, 114, 114); } .shop { width: 110px; background-color: rgb(66, 66, 66); text-align: center; margin-left: 25px; } .shop.active { background-color: rgb(255, 255, 255); color: rgb(255, 103, 0); } .shopCount { color: rgb(176, 176, 176); } ul li:hover { color: white; cursor: pointer; } svg { position: relative; top: 5px; left: -5px; } .title { color: rgb(176, 176, 176); text-decoration: none; } .title:hover { color: white; } \u0026lt;/style\u0026gt; Tab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/logo-mi2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;router-link :to=\u0026#34;item.linkTo\u0026#34;\u0026gt; --\u0026gt; {{ item.title }} \u0026lt;!-- \u0026lt;/router-link\u0026gt; --\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;2025米粉节\u0026#34;\u0026gt; \u0026lt;button\u0026gt; \u0026lt;svg t=\u0026#34;1745200046674\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3786\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M959.266 879.165c0 81.582-81.582 81.582-81.582 81.582l-233.38-233.381c-60.529 43.977-134.777 70.217-215.318 70.217-202.755 0-367.117-164.362-367.117-367.117S226.23 63.349 428.985 63.349s367.117 164.362 367.117 367.117c0 80.541-26.241 154.785-70.217 215.318l233.381 233.381zM428.985 144.931c-157.697 0-285.536 127.838-285.536 285.536s127.838 285.536 285.536 285.536 285.536-127.838 285.536-285.536-127.839-285.536-285.536-285.536z\u0026#34; fill=\u0026#34;#8a8a8a\u0026#34; p-id=\u0026#34;3787\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { // list: [ // \u0026#39;Xiaomi 手机\u0026#39;, \u0026#39;Redmi 手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;服务中心\u0026#39;, \u0026#39;社区\u0026#39; // ], list: [ {title: \u0026#39;Xiaomi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;Redmi 手机\u0026#39;, linkTo: \u0026#39;/shop/phone\u0026#39;}, {title: \u0026#39;电视\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;笔记本\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;平板\u0026#39;, linkTo: \u0026#39;/shop/pad\u0026#39;}, {title: \u0026#39;家电\u0026#39;, linkTo: \u0026#39;/shop/elec\u0026#39;}, {title: \u0026#39;路由器\u0026#39;, linkTo: \u0026#39;/shop/smart\u0026#39;}, {title: \u0026#39;服务中心\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, {title: \u0026#39;社区\u0026#39;, linkTo: \u0026#39;/\u0026#39;}, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; img { width: 56px; float: left; position: relative; top: 22px; } .container { height: 100px; width: 1226px; margin: 0 auto; overflow: hidden; } ul { height: 24px; line-height: 24px; position: relative; top: 38px; left: 160px; width: 700px; } ul li { float: left; list-style: none; padding: 0 10px; } ul li a{ text-decoration: none; color: black; } ul li a:hover { color: rgb(255, 128, 9); cursor: pointer; } ul li a.fuzzy-active{ color: rgb(255, 128, 9); } .search { width: 296px; height: 50px; display: flex; float: right; } button { width: 52px; border: 1px solid rgb(224, 224, 224); background: #fff; } input { width: 243px; border: 1px solid rgb(224, 224, 224); outline: none; box-sizing: border-box; padding: 0 10px; font-size: 14px; border-right: 0; } \u0026lt;/style\u0026gt; Wrapperu0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;nextImg\u0026#34; ref=\u0026#34;bg\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;container\u0026#34; @click=\u0026#34;count++\u0026#34; ref=\u0026#34;bg\u0026#34; :style=\u0026#34;{ backgroundImage: test[count % test.length]}\u0026#34;\u0026gt; --\u0026gt; \u0026lt;!-- :class=\u0026#34;{ bg1: count % bgList.length == 0, bg2: count % bgList.length == 1, bg3: count % bgList.length == 2, bg4: count % bgList.length == 3, bg5: count % bgList.length == 4, bg6: count % bgList.length == 5 }\u0026#34; --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;item in list\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; {{ item }} \u0026lt;span\u0026gt; \u0026lt;svg t=\u0026#34;1745202463487\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4940\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M332.501333 183.168a42.666667 42.666667 0 0 1 57.621334-2.496l2.709333 2.496 298.666667 298.666667a42.666667 42.666667 0 0 1 2.496 57.621333l-2.496 2.709333-298.666667 298.666667a42.666667 42.666667 0 0 1-62.826667-57.621333l2.496-2.709334L600.96 512 332.501333 243.498667a42.666667 42.666667 0 0 1-2.496-57.621334l2.496-2.709333z\u0026#34; fill=\u0026#34;#ffffff\u0026#34; p-id=\u0026#34;4941\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207869866\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;6132\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M300 511.4l363 436.1c12.2 14.6 33.9 16.6 48.5 4.4 14.6-12.2 16.6-33.9 4.4-48.5l-326.2-392L716 120.5c12.2-14.6 10.2-36.3-4.4-48.5-14.6-12.2-36.4-10.2-48.6 4.4l-363 435z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;6133\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745207985607\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;10595\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M680.96 536.32L294.826667 149.76C281.6 136.533333 281.6 115.2 294.826667 101.546667c13.226667-13.226667 34.986667-13.226667 48.213333 0l386.133333 386.133333c13.226667 13.226667 13.226667 34.986667 0 48.213333-13.226667 13.653333-34.986667 13.653333-48.213333 0.426667z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10596\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M294.826667 874.24l386.133333-386.133333c13.226667-13.226667 34.986667-13.226667 48.213333 0 13.226667 13.226667 13.226667 34.986667 0 48.213333l-386.133333 386.133333c-13.226667 13.226667-34.986667 13.226667-48.213333 0-13.226667-13.653333-13.226667-34.986667 0-48.213333z\u0026#34; fill=\u0026#34;rgb(176, 176, 176)\u0026#34; p-id=\u0026#34;10597\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { list: [ \u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;笔记本 平板\u0026#39;, \u0026#39;出行 穿戴\u0026#39;, \u0026#39;耳机 音箱\u0026#39;, \u0026#39;健康 儿童\u0026#39;, \u0026#39;生活 箱包\u0026#39;, \u0026#39;智能 路由器\u0026#39;, \u0026#39;电源 配件\u0026#39; ], // bgList: [ // \u0026#39;../../../images/xiaomi/i1.jpg\u0026#39;, // \u0026#39;../../../images/xiaomi/i2.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i3.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i4.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i5.webp\u0026#39;, // \u0026#39;../../../images/xiaomi/i6.webp\u0026#39;, // ], test: [ \u0026#39;url(../../../images/xiaomi/i1.jpg)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i2.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i3.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i4.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i5.webp)\u0026#39;, \u0026#39;url(../../../images/xiaomi/i6.webp)\u0026#39; ], count: 4 } }, mounted() { this.$refs.bg.style.backgroundImage = this.test[4] }, methods: { nextImg() { this.count++; this.$refs.bg.style.backgroundImage = this.test[this.count % this.test.length] } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; /* .bg1 { background-image: url(../../../images/xiaomi/i1.jpg); } .bg2 { background-image: url(../../../images/xiaomi/i2.webp); } .bg3 { background-image: url(../../../images/xiaomi/i3.webp); } .bg4 { background-image: url(../../../images/xiaomi/i4.webp); } .bg5 { background-image: url(../../../images/xiaomi/i5.webp); } .bg6 { background-image: url(../../../images/xiaomi/i6.webp); } */ .container { width: 1226px; margin: 0 auto; /* background-image: url(../../../images/xiaomi/i5.webp); */ height: 460px; background-size: contain; overflow: hidden; position: relative; } ul { width: 234px; height: 420px; padding: 20px 0; background-color: rgba(105, 101, 101, 0.6); } ul li { list-style: none; font-size: 14px; line-height: 42px; height: 42px; cursor: pointer; } a { display: inline-block; box-sizing: border-box; width: 234px; line-height: 42px; text-decoration: none; color: white; padding-left: 30px; } ul li:hover { background-color: rgb(255, 103, 0); } span { float: right; position: relative; right: 20px; top: 5px; } .left, .right { width: 40px; height: 70px; /* background-color: aqua; */ background-color: rgba(0, 0, 0, 0); cursor: pointer; } .left { float: left; position: absolute; top: 195px; left: 234px; } .left svg { position: relative; left: -6px; top: 10px; } .right { float: right; position: absolute; top: 195px; right: 0px; /* left: 900px; */ } .right svg { position: relative; left: -1px; top: 10px; } .left:hover { background-color: rgb(51, 51, 51); } .right:hover { background-color: rgb(51, 51, 51); } \u0026lt;/style\u0026gt; Banner 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;span4\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-channel-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 保障服务 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 企业团购 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; F码通道 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner4.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 米粉卡 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner5.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 以旧换新 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner6.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 话费充值 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;span16\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;home-promo-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/banner-b-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style scoped\u0026gt; .container { width: 1226px; height: 170px; margin: 0 auto; margin-top: 14px; margin-bottom: 20px; display: flex; } .span4 { width: 234px; height: 170px; } .home-channel-list { width: 234px; height: 170px; background-color: rgb(95, 87, 80); padding: 3px; box-sizing: border-box } .home-channel-list li { width: 70px; height: 82px; padding: 0 3px; float: left; list-style: none; font-size: 12px; color: white; text-align: center; } .home-channel-list li img{ width: 24px; height: 24px; margin: 0 23px; padding-top: 18px; } .home-promo-list li { list-style: none; float: left; margin-left: 15px; } .home-promo-list li:first-child{ margin-left: 0; } .home-promo-list li img { width: 316px; height: 170px; } .span16 { margin-left: 14px; } \u0026lt;/style\u0026gt; Item 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;Redmi Turbo 3\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;性能旋风，席卷而来\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;slot\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .goods { width: 234px; height: 300px; box-sizing: border-box; padding: 20px 0; text-align: center; font-size: 14px; font-family: \u0026#34;Helvetica Neue\u0026#34;, Helvetica, Arial, \u0026#34;Microsoft Yahei\u0026#34;, \u0026#34;Hiragino Sans GB\u0026#34;, \u0026#34;Heiti SC\u0026#34;, \u0026#34;WenQuanYi Micro Hei\u0026#34;, sans-serif; cursor: pointer; background-color: white; transition: 0.5s; float: left; margin: 0 0 14px 14px; user-select: none; } .goods:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .goods-img img { width: 160px; height: 160px; } .goods h3 { font-size: 14px; } .goods h3, .goods p { margin: 0; font-weight: 100; } .goods .desc { margin: 10px; color: rgb(176, 176, 176); font-size: 12px; text-overflow: ellipsis; overflow: hidden; text-wrap: nowrap; } .goods .price { color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; \u0026lt;/script\u0026gt; MoreItem\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;more-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;mini-item\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Xiaomi 开放式耳机 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;599元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/mini-Xiaomi 开放式耳机.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;see-more\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; 浏览更多 \u0026lt;slot name=\u0026#34;more-small\u0026#34;\u0026gt; \u0026lt;small\u0026gt;耳机\u0026lt;/small\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;svg t=\u0026#34;1745805142422\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;12820\u0026#34; width=\u0026#34;60\u0026#34; height=\u0026#34;60\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M510.247 959.053c238.627 0 432.77-196.2 432.77-437.351 0-241.153-194.143-437.353-432.77-437.353-238.627 0-432.772 196.202-432.772 437.353 0 241.15 194.143 437.351 432.772 437.351z m0-820.035c208.804 0 378.675 171.665 378.675 382.684 0 211.013-169.871 382.68-378.675 382.68S131.57 732.715 131.57 521.702c0-211.02 169.871-382.684 378.677-382.684zM293.862 549.035h367.472L545.218 666.38c-10.563 10.677-10.563 27.976 0 38.654a26.849 26.849 0 0 0 38.251 0l162.288-164.01c10.567-10.675 10.567-27.975 0-38.651L583.469 338.361c-5.283-5.337-12.205-8.004-19.124-8.004-6.924 0-13.841 2.667-19.127 8.004-10.563 10.679-10.563 27.974 0 38.654l116.116 117.35H293.862c-14.953 0-27.047 12.225-27.047 27.336 0 15.107 12.092 27.333 27.047 27.333z\u0026#34; p-id=\u0026#34;12821\u0026#34; fill=\u0026#34;#FF6700\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style\u0026gt; .more-item { width: 234px; height: 300px; float: left; margin-left: 14px; } .more-item .mini-img img { width: 80px; height: 80px; position: relative; top: -90px; left: 130px; } .mini-item, .see-more { width: 234px; height: 143px; margin-bottom: 14px; background-color: #fff; transition: 0.5s; cursor: pointer; padding: 50px 0; box-sizing: border-box; } .mini-item .title { font-size: 14px; font-weight: 400; width: 94px; height: 42px; margin: 0 110px 0 30px; line-height: 21px; } .mini-item .price { color: rgb(255, 103, 0); width: 91px; height: 21px; margin: 5px 110px 0 30px; font-size: 14px; } .mini-item:hover, .see-more:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .see-more .title { width: 94px; height: 45px; margin: 0 110px 0 30px; font-size: 18px; line-height: 27px; } .see-more small { display: block; color: rgb(117, 117, 117); font-size: 12px; height: 18px; line-height: 18px; } .see-more svg { position: relative; top: -55px; left: 140px; } \u0026lt;/style\u0026gt; Goods 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;bgc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box-hd\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;手机\u0026lt;/h2\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;div class=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;more\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; 查看更多 \u0026lt;svg t=\u0026#34;1745725757152\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;4256\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M512 102.4a422.912 422.912 0 1 0 422.570667 423.936A422.570667 422.570667 0 0 0 512 102.4z m117.418667 446.805333L462.506667 716.8a34.133333 34.133333 0 0 1-48.469334-48.128l143.018667-143.018667-143.018667-143.018666a34.133333 34.133333 0 0 1 0-48.128 34.133333 34.133333 0 0 1 48.469334 0l166.912 166.912a34.133333 34.133333 0 0 1 0 49.152z\u0026#34; fill=\u0026#34;#b0b0b0\u0026#34; p-id=\u0026#34;4257\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;slot name=\u0026#34;left-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/phone/left-phone.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/xiaomielec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; --\u0026gt; \u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;right-goods\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;Item v-for=\u0026#34;(item, index) in itemList\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; --\u0026gt; \u0026lt;slot name=\u0026#34;right-goods\u0026#34;\u0026gt;\u0026lt;/slot\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Item from \u0026#39;./Item.vue\u0026#39; export default { components: { Item }, // data() { // return { // itemList: [ // { id: 1, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, // { id: 2, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39; 徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, // { id: 3, src: \u0026#39;../../../images/xiaomi/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, // { id: 4, src: \u0026#39;../../../images/xiaomi/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, // { id: 5, src: \u0026#39;../../../images/xiaomi/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, // { id: 6, src: \u0026#39;../../../images/xiaomi/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, // { id: 7, src: \u0026#39;../../../images/xiaomi/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39; 徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, // { id: 8, src: \u0026#39;../../../images/xiaomi/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, // ] // } // } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .bgc { background-color: rgb(245, 245, 245); height: 686px; } .box-hd { height: 58px; width: 1226px; color: rgb(51, 51, 51); display: flex; justify-content: space-between; } .box-hd h2 { font-size: 22px; font-weight: 200; line-height: 58px } .box-hd .more { line-height: 58px; } .box-hd .more a { color: rgb(51, 51, 51); text-decoration: none; } .main-box { width: 1226px; display: flex; } .left-img { /* float: left; */ cursor: pointer; } .left-img img { width: 234px; height: 614px; transition: 0.5s; } .left-img img:hover { box-shadow: 0 0 15px #cccccc; transform: translate(0, -2px); } .right-goods { width: 992px; height: 614px; } svg { position: relative; top: 4px; } .left-img li{ list-style: none; margin-bottom: 14px; } .left-img .top-img img, .left-img .bottom-img img{ width: 234px; height: 300px; } \u0026lt;/style\u0026gt; Mainu0026lt;template\u0026gt; \u0026lt;main\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-top.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #left-img\u0026gt;\u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPhone\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能穿戴\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;耳机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;穿戴\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/watch\u0026amp;bud/left-watch.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListBud\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt;\u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;笔记本 | 平板\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/left-pad.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListPad\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi Book Pro 14 2024 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;4999元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/pad\u0026amp;book/mini-Redmi Book Pro 14 2024.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;家电\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;热门\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电视影音\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空调\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/left-elec2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListElec\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 迷你波轮洗衣机 3kg \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;799元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/elec/mini-米家迷你波轮洗衣机Pro 3kg.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;热门\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;生活电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;风扇\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;扫地机\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;空净\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;清洁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;环境\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/left-cleaner2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListCleaner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家直流变频台式循环扇 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/cleaner/mini-米家直流变频台式循环扇.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;风扇\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;厨房电器\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt;净水器\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;烟灶\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;电饭煲\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;微蒸烤\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/left-kitchen2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListKitchen\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; 米家智能净烟机P2 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/kitchen/mini-米家智能净烟机P2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;烟灶\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;Goods\u0026gt; \u0026lt;template #title\u0026gt; \u0026lt;h2 class=\u0026#34;title\u0026#34;\u0026gt;智能家居\u0026lt;/h2\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more\u0026gt; \u0026lt;ul class=\u0026#34;tab-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;active\u0026#34;\u0026gt;小爱音箱\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;门锁门铃\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;路由器\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;智能设备\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #left-img\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;top-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart1.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;bottom-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/left-smart2.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #right-goods\u0026gt; \u0026lt;Item v-for=\u0026#34;(item, index) in itemListSmart\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;goods-img\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;item.src\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;{{ item.title }}\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;desc\u0026#34;\u0026gt;{{ item.desc }}\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;{{ item.price }}\u0026lt;/p\u0026gt; \u0026lt;/Item\u0026gt; \u0026lt;MoreItem\u0026gt; \u0026lt;template #mini-item\u0026gt; \u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt; Redmi小爱触屏音箱 8英寸 \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;price\u0026#34;\u0026gt;299元\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;mini-img\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/smart/mini-Redmi小爱触屏音箱 8英寸.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;template #more-small\u0026gt; \u0026lt;small\u0026gt;小爱音箱\u0026lt;/small\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/MoreItem\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/Goods\u0026gt; \u0026lt;div class=\u0026#34;home-banner-box\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;../../../images/xiaomi/main-bottom.webp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Goods from \u0026#39;./Goods.vue\u0026#39;; import Item from \u0026#39;./Item.vue\u0026#39;; import MoreItem from \u0026#39;./MoreItem.vue\u0026#39;; export default { components: { Goods, Item, MoreItem }, data() { return { itemListPhone: [ { id: 1, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4 Pro.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4 Pro\u0026#39;, desc: \u0026#39;Turbo 4 Pro 好看，更能打！\u0026#39;, price: \u0026#39;1999元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Ultra.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Ultra\u0026#39;, desc: \u0026#39;徕卡1英寸主摄 | 徕卡2亿超级长焦 | 徕卡超纯光学系统 | 骁龙8至尊版移动平台 | 6000mAh 小米金沙江电池 | 小米澎湃OS 2\u0026#39;, price: \u0026#39;6499元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/phone/REDMI Turbo 4.webp\u0026#39;, title: \u0026#39;REDMI Turbo 4\u0026#39;, desc: \u0026#39;REDMI Turbo 4 好看又能打\u0026#39;, price: \u0026#39;1799元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/phone/Redmi 14C.webp\u0026#39;, title: \u0026#39;Redmi 14C\u0026#39;, desc: \u0026#39;【持久续航】5160mAh 大电池\u0026#39;, price: \u0026#39;499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80 Pro.webp\u0026#39;, title: \u0026#39;REDMI K80 Pro\u0026#39;, desc: \u0026#39;骁龙8至尊版|2K新国屏|全焦段影像\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/phone/REDMI K80.webp\u0026#39;, title: \u0026#39;REDMI K80\u0026#39;, desc: \u0026#39;第三代骁龙8|2K新国屏|6550mAh 超长续航\u0026#39;, price: \u0026#39;2499元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15.webp\u0026#39;, title: \u0026#39;Xiaomi 15\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜骁龙®8至尊版移动平台｜5400mAh 小米金沙江电池 小米澎湃OS 2\u0026#39;, price: \u0026#39;4199元起\u0026#39; }, { id: 8, src: \u0026#39;../../../images/xiaomi/phone/Xiaomi 15 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi 15 Pro\u0026#39;, desc: \u0026#39;徕卡光学 Summilux 高速镜头｜ 骁龙®8至尊版移动平台｜6100mAh 小米金沙江电池｜小米澎湃OS 2\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, ], itemListBud: [ { id: 1, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5 Pro.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5 Pro\u0026#39;, desc: \u0026#39;小米首发双功放三单元｜55dB 深度降噪｜哈曼联合调音\u0026#39;, price: \u0026#39;1299元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/REDMI Buds 6 Pro.webp\u0026#39;, title: \u0026#39;REDMI Buds 6 Pro\u0026#39;, desc: \u0026#39;小米首发圈瓷同轴三单元 | 55dB深度降噪 | 无级动态降噪技术\u0026#39;, price: \u0026#39;399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 青春版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 青春版\u0026#39;, desc: \u0026#39;42dB深度主动降噪 | 双麦AI通话抗风噪 | 12.4mm超大镀钛动圈\u0026#39;, price: \u0026#39;139元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6.webp\u0026#39;, title: \u0026#39;Redmi Buds 6\u0026#39;, desc: \u0026#39;旗舰双单元架构 | 49dB深度降噪 | 42h超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Xiaomi Buds 5.webp\u0026#39;, title: \u0026#39;Xiaomi Buds 5\u0026#39;, desc: \u0026#39;舒适无感佩戴｜高通全链路无损音频｜哈曼 AudioEFX 联合调音\u0026#39;, price: \u0026#39;679元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6S.webp\u0026#39;, title: \u0026#39;Redmi Buds 6S\u0026#39;, desc: \u0026#39;14.2mm超大动圈单元 | 半入耳主动降噪 | 33小时超长续航\u0026#39;, price: \u0026#39;199元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/watch\u0026amp;bud/Redmi Buds 6 活力版.webp\u0026#39;, title: \u0026#39;Redmi Buds 6 活力版\u0026#39;, desc: \u0026#39;14.2mm超大动圈 | 内置五种调音模式 | 30小时长续航\u0026#39;, price: \u0026#39;99元起\u0026#39; }, ], itemListPad: [ { id: 1, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 14 2024\u0026#39;, desc: \u0026#39;65W 满血性能｜全新酷睿 Ultra 处理器\u0026#39;, price: \u0026#39;4899元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book Pro 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book Pro 16 2024\u0026#39;, desc: \u0026#39;70W 狂暴性能｜3.1K 165Hz 高刷高亮屏\u0026#39;, price: \u0026#39;6399元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 16 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 16 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;3699元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Book 14 2024.webp\u0026#39;, title: \u0026#39;Redmi Book 14 2024\u0026#39;, desc: \u0026#39;47W 满血性能 | 小米澎湃智联 | 旗舰硬核品质\u0026#39;, price: \u0026#39;4499元起\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad Pro系列.webp\u0026#39;, title: \u0026#39;Redmi Pad Pro系列\u0026#39;, desc: \u0026#39;12.1英寸2.5K旗舰机大屏 | 10000mAh超大电池\u0026#39;, price: \u0026#39;1499元起\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Xiaomi Pad 6S Pro 12.4.webp\u0026#39;, title: \u0026#39;Xiaomi Pad 6S Pro 12.4\u0026#39;, desc: \u0026#39;第二代骁龙8 旗舰处理器 | 小米澎湃OS\u0026#39;, price: \u0026#39;2799元起\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/pad\u0026amp;book/Redmi Pad SE.webp\u0026#39;, title: \u0026#39;Redmi Pad SE\u0026#39;, desc: \u0026#39;高性价比千元平板｜11英寸高刷护眼大屏｜全金属一体机身｜73.2天超长待机\u0026#39;, price: \u0026#39;849元起\u0026#39; }, ], itemListElec: [ { id: 1, src: \u0026#39;../../../images/xiaomi/elec/小米电视S系列.webp\u0026#39;, title: \u0026#39;小米电视S系列\u0026#39;, desc: \u0026#39;144HZ超高刷 3+32G 多色温色彩还原技术\u0026#39;, price: \u0026#39;2599元起\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/elec/小米电视S Pro Mini LED系列.webp\u0026#39;, title: \u0026#39;小米电视S Pro Mini LED系列\u0026#39;, desc: \u0026#39;144Hz超高刷、4+64G大存储\u0026#39;, price: \u0026#39;4999元起\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/elec/小米电视 S Mini LED 系列.webp\u0026#39;, title: \u0026#39;小米电视 S Mini LED 系列\u0026#39;, desc: \u0026#39;Mini LED 高分区背光、1200nits峰值亮度\u0026#39;, price: \u0026#39;2999元起\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/elec/巨省电 小米空调 1.5匹新1级能效.webp\u0026#39;, title: \u0026#39;巨省电 小米空调 1.5匹新1级能效\u0026#39;, desc: \u0026#39;强劲制冷 | 高效节能 | 智能互联\u0026#39;, price: \u0026#39;1899元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/elec/米家新风空调 立式3匹.webp\u0026#39;, title: \u0026#39;米家新风空调 立式3匹\u0026#39;, desc: \u0026#39;全屋快通风，就要大新风\u0026#39;, price: \u0026#39;6799元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/elec/米家分区洗烘一体机 15kg.webp\u0026#39;, title: \u0026#39;米家分区洗烘一体机 15kg\u0026#39;, desc: \u0026#39;健康分开洗 一台就够了\u0026#39;, price: \u0026#39;5499元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/elec/米家波轮洗衣机 10kg.webp\u0026#39;, title: \u0026#39;米家波轮洗衣机 10kg\u0026#39;, desc: \u0026#39;全景玻璃阻尼上盖 防夹手\u0026#39;, price: \u0026#39;999元\u0026#39; }, ], itemListCleaner: [ { id: 1, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频落地扇1X 升级版.webp\u0026#39;, title: \u0026#39;米家智能直流变频落地扇1X 升级版\u0026#39;, desc: \u0026#39;静音舒适自然风，支持充电宝供电，随处可用， 小爱语音控制\u0026#39;, price: \u0026#39;299元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/cleaner/米家循环扇.webp\u0026#39;, title: \u0026#39;米家循环扇\u0026#39;, desc: \u0026#39;风量强劲，广域覆盖\u0026#39;, price: \u0026#39;319元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/cleaner/米家直流变频落地扇 Pro.webp\u0026#39;, title: \u0026#39;米家直流变频落地扇 Pro\u0026#39;, desc: \u0026#39;收纳有序，与自然风同行\u0026#39;, price: \u0026#39;399元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/cleaner/米家落地扇.webp\u0026#39;, title: \u0026#39;米家落地扇\u0026#39;, desc: \u0026#39;静享智能轻风\u0026#39;, price: \u0026#39;219元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频循环扇 落地式.webp\u0026#39;, title: \u0026#39;米家智能直流变频循环扇 落地式\u0026#39;, desc: \u0026#39;智能温湿度控风，超广域空气循环\u0026#39;, price: \u0026#39;429元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/cleaner/米家智能直流变频塔扇2.webp\u0026#39;, title: \u0026#39;米家智能直流变频塔扇2\u0026#39;, desc: \u0026#39;DIY自然风 ，环抱式柔和送风 ，儿童安全防护\u0026#39;, price: \u0026#39;329元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/cleaner/米家桌面移动风扇.webp\u0026#39;, title: \u0026#39;米家桌面移动风扇\u0026#39;, desc: \u0026#39;无线长续航，随处享清凉\u0026#39;, price: \u0026#39;129元\u0026#39; }, ], itemListKitchen: [ { id: 1, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能燃气灶S2.webp\u0026#39;, title: \u0026#39;米家智能燃气灶S2 5200W/4800W\u0026#39;, desc: \u0026#39;5200W/4800W猛火 | 双环聚能火焰 | 可调节\u0026#39;, price: \u0026#39;699元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能定时灶S2.webp\u0026#39;, title: \u0026#39;米家智能定时灶S2 5200W /4800W\u0026#39;, desc: \u0026#39;5200W/4800W爆炒大火才够味 | 68%超高热效\u0026#39;, price: \u0026#39;1099元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能平嵌侧吸油烟机S1.webp\u0026#39;, title: \u0026#39;米家智能平嵌侧吸油烟机S1\u0026#39;, desc: \u0026#39;小巧机身 | 25立方大吸力 | 烟灶联动\u0026#39;, price: \u0026#39;1799元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能顶侧双吸油烟机S2.webp\u0026#39;, title: \u0026#39;米家智能顶侧双吸油烟机S2\u0026#39;, desc: \u0026#39;25m³/min大风量 | 1000Pa大静压\u0026#39;, price: \u0026#39;2099元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能欧式烟机S2.webp\u0026#39;, title: \u0026#39;米家智能欧式烟机S2\u0026#39;, desc: \u0026#39;23m³/min大吸力｜500pa静压｜智能干洗\u0026#39;, price: \u0026#39;1499元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机S2 白色.webp\u0026#39;, title: \u0026#39;米家智能净烟机S2 白色\u0026#39;, desc: \u0026#39;下厨不留味｜无油网免拆洗｜真白不惧黄\u0026#39;, price: \u0026#39;2699元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/kitchen/米家智能净烟机P1.webp\u0026#39;, title: \u0026#39;米家智能净烟机P1\u0026#39;, desc: \u0026#39;高速气旋强锁烟， 劲速气流高效净吸，无油网设计免拆洗\u0026#39;, price: \u0026#39;2999元\u0026#39; }, ], itemListSmart: [ { id: 1, src: \u0026#39;../../../images/xiaomi/smart/Xiaomi智能家庭屏 10.webp\u0026#39;, title: \u0026#39;Xiaomi智能家庭屏 10\u0026#39;, desc: \u0026#39;MIUI Home｜10.1\u0026#34; 高清大屏｜115°超广角摄像头｜儿童模式｜家庭 KTV｜小爱同学\u0026#39;, price: \u0026#39;899元\u0026#39; }, { id: 2, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱Play 增强版.webp\u0026#39;, title: \u0026#39;小米小爱音箱Play 增强版\u0026#39;, desc: \u0026#39;LED时钟显示，语音控制传统家电\u0026#39;, price: \u0026#39;129元\u0026#39; }, { id: 3, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Play.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Play\u0026#39;, desc: \u0026#39;听音乐、语音遥控家电\u0026#39;, price: \u0026#39;99元\u0026#39; }, { id: 4, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱 Pro.webp\u0026#39;, title: \u0026#39;小米小爱音箱 Pro\u0026#39;, desc: \u0026#39;澎湃低音，语音遥控传统家电\u0026#39;, price: \u0026#39;269元\u0026#39; }, { id: 5, src: \u0026#39;../../../images/xiaomi/smart/小米AI音箱（第二代）.webp\u0026#39;, title: \u0026#39;小米AI音箱（第二代）\u0026#39;, desc: \u0026#39;低频饱满有深度，人声清晰有细节\u0026#39;, price: \u0026#39;179元\u0026#39; }, { id: 6, src: \u0026#39;../../../images/xiaomi/smart/小米小爱音箱.webp\u0026#39;, title: \u0026#39;小米小爱音箱\u0026#39;, desc: \u0026#39;Hi-Fi级音频芯片，支持AUX IN接口，你桌面的有源音箱\u0026#39;, price: \u0026#39;199元\u0026#39; }, { id: 7, src: \u0026#39;../../../images/xiaomi/smart/Redmi小爱触屏音箱 8英寸.webp\u0026#39;, title: \u0026#39;Redmi小爱触屏音箱 8英寸\u0026#39;, desc: \u0026#39;8英寸高清大屏，海量优质影音资源\u0026#39;, price: \u0026#39;349元\u0026#39; }, ], } } } \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; main { height: 5194px; width: 100%; background-color: rgb(245, 245, 245); } .container { width: 1226px; margin: 0 auto; } .home-banner-box { padding: 22px 0; } .home-banner-box img { width: 1226px; } .tab-list { height: 58px; padding: 14px 0; box-sizing: border-box; } .tab-list li { list-style: none; float: left; margin-left: 30px; height: 30px; line-height: 30px; cursor: pointer; } .tab-list .active { border-bottom: 2px solid rgb(255, 103, 0); color: rgb(255, 103, 0); } \u0026lt;/style\u0026gt; Footer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;footer-services\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810757451\u0026#34; class=\u0026#34;icon tool\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;15017\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M373.91591769 722.85439369c-19.74602377 0-39.49204754-1.65700898-59.23807131-5.10911106-70.00862973-12.15139925-133.66539167-45.15349491-184.0660817-95.55418494-51.09111045-51.09111045-84.23129021-115.57637689-95.96843721-186.5515952-11.46097883-69.4562934-1.79509307-139.7410913 28.1691528-203.12168507l12.56565148-26.65022789L287.61336625 418.10282403l124.8280104-124.8280104-212.2352345-212.37331858 26.65022789-12.5656515c63.38059378-29.96424587 133.66539167-39.63013162 203.12168507-28.16915279 70.97521831 11.737147 135.59856882 44.87732675 186.5515952 95.96843721 50.40069004 50.40069004 83.40278572 114.05745199 95.55418494 184.06608172 11.87523108 68.48970482 3.0378498 137.94599822-25.54555522 200.91233974l-37.69695446-17.1224262c51.64344678-113.9193679 26.92639605-250.07027305-61.58550071-338.58216981-82.85044939-82.85044939-206.15953488-109.77684543-314.96979174-71.1133024l198.70299443 198.70299445-183.3756613 183.65182946-198.84107852-198.84107851c-38.66354305 108.81025686-11.737147 232.11934237 71.1133024 314.96979173 88.51189675 88.51189675 224.52471783 113.22894749 338.58216981 61.58550071l17.12242619 37.69695446c-44.87732675 20.43644418-92.9305874 30.79275037-141.67426844 30.79275037z\u0026#34; p-id=\u0026#34;15018\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M813.989888 980.65737535c-17.81284661 0-35.62569324-6.76612003-49.1579333-20.2983601L492.3920603 687.91912086c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382545 8.14696086-8.14696086 21.26494868-8.14696086 29.27382546 0l272.43989439 272.43989438c10.90864251 10.90864251 28.72148912 10.90864251 39.63013162 0l91.68783065-91.68783065c5.24719513-5.24719513 8.14696086-12.28948332 8.14696084-19.88410784 0-7.45654045-2.89976573-14.49882864-8.14696084-19.88410787L653.12193212 527.32733314c-8.14696086-8.14696086-8.14696086-21.26494868 0-29.27382544 8.14696086-8.14696086 21.26494868-8.14696086 29.27382545 0l272.43989438 272.43989438c13.11798782 13.11798782 20.2983601 30.5165822 20.2983601 49.15793329s-7.18037229 36.03994548-20.2983601 49.15793331l-91.68783065 91.68783064c-13.67032415 13.39415599-31.34508668 20.16027601-49.1579333 20.16027603z\u0026#34; p-id=\u0026#34;15019\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 预约维修服务 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745810998229\u0026#34; class=\u0026#34;icon circle-7\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;17244\u0026#34; width=\u0026#34;30\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;path d=\u0026#34;M952.46 31.5H31.5v961h961v-961h-40.04z m0 920.96H71.54V71.54h880.915l0.005 880.92z\u0026#34; p-id=\u0026#34;17245\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; --\u0026gt; \u0026lt;path d=\u0026#34;M512 872.375c188.197 0 340.353-152.16 340.353-340.353S700.198 191.664 512 191.664h-60.063L512 131.601h-60.063l-80.085 80.085 80.085 80.085H512l-60.063-60.062H512c166.172 0 300.313 134.141 300.313 300.313S678.172 832.335 512 832.335 211.687 698.194 211.687 532.022h-40.04c0 188.192 152.155 340.353 340.353 340.353z\u0026#34; p-id=\u0026#34;17246\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M450.319 720.834l45.638 0.13L631.544 414.53v-53.834H390.761v41.89h200.695l-141.137 318.25z\u0026#34; p-id=\u0026#34;17247\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 7天无理由退货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811204525\u0026#34; class=\u0026#34;icon circle-15\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;18507\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M511.00672 1003.52c247.75168 0 448.07168-200.30976 448.07168-448.07168 0-247.75168-200.32-448.06656-448.07168-448.06656H431.93344L511.00672 28.3136H431.93344L326.50752 133.74464l105.43104 105.43104h79.06816L431.93344 160.10752h79.06816c218.76736 0 395.35104 176.59392 395.35104 395.35104 0 218.76736-176.58368 395.35616-395.35104 395.35616-218.76224 0-395.35104-176.5888-395.35104-395.35616H62.94016c0 247.75168 200.30976 448.06144 448.06656 448.06144z\u0026#34; p-id=\u0026#34;18508\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M430.52544 739.95264h-50.07872V344.6016h-105.4208V397.312h52.7104v342.64064H272.384v52.70528h158.14144v-52.70528zM630.84032 739.95264H485.87264v52.70528h144.96256c79.06816 0 144.96256-65.88416 144.96256-144.95744s-65.88928-144.96256-144.96256-144.96256h-92.25728v-105.4208h210.86208V344.6016H485.87264v210.85184h144.96256c50.0736 0 92.25728 42.17856 92.25728 92.25728s-42.17856 92.24192-92.25216 92.24192z\u0026#34; p-id=\u0026#34;18509\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 15天免费换货 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811426127\u0026#34; class=\u0026#34;icon gift\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;21679\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M195.58025 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21680\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M775.5183125 514.67721875l52.87528125 0 0 419.76984375-52.87528125 0 0-419.76984375Z\u0026#34; p-id=\u0026#34;21681\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21682\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M828.39359375 354.363875l52.3125 0 0 210.9375-52.3125 0 0-210.9375Z\u0026#34; p-id=\u0026#34;21683\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M143.26775 353.8019375l737.4375 0 0 52.3125-737.4375 0 0-52.3125Z\u0026#34; p-id=\u0026#34;21684\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M172.51803125 511.86415625l657.00028125 0 0 53.43721875-657.00028125 0 0-53.43721875Z\u0026#34; p-id=\u0026#34;21685\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M205.141625 881.009l591.75225 0 0 53.4380625-591.75225 0 0-53.4380625Z\u0026#34; p-id=\u0026#34;21686\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M458.97115625 385.3008125l105.0485625 0 0 520.87471875-105.0485625 0 0-520.87471875Z\u0026#34; p-id=\u0026#34;21687\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M523.1931875 354.40353125C518.73734375 125.9725625 343.40103125 30.28203125 269.13584375 129.761 180.1784375 248.9204375 357.58025 357.73971875 357.58025 357.73971875s4.9528125 11.39990625 60.4546875 19.86440625C450.07128125 382.49028125 524.82415625 438.00228125 523.1931875 354.40353125zM448.14246875 355.4894375c-36.56221875 0-91.843875-45.98859375-91.843875-45.98859375s-73.98253125-75.57215625-39.77015625-129.28865625c31.48875-49.44121875 146.1661875-4.13690625 148.74890625 128.25421875C466.2231875 356.9170625 466.9251875 355.4894375 448.14246875 355.4894375z\u0026#34; p-id=\u0026#34;21688\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M601.90325 377.604125c55.501875-8.46534375 60.4546875-19.86440625 60.4546875-19.86440625s183.9324375-105.2780625 86.4405-226.96875C671.18103125 33.8856875 501.20253125 125.9725625 496.74584375 354.40353125 495.114875 438.00228125 569.86775 382.49028125 601.90325 377.604125zM554.66084375 308.46640625C557.24440625 176.0744375 673.8936875 133.18240625 703.41059375 180.21134375c33.5761875 53.49628125-39.77015625 129.28865625-39.77015625 129.28865625s-55.2825 45.98859375-91.84471875 45.98859375C553.01384375 355.4894375 553.71584375 356.9170625 554.66084375 308.46640625z\u0026#34; p-id=\u0026#34;21689\u0026#34; fill=\u0026#34;#616161\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 满69包邮 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745811515464\u0026#34; class=\u0026#34;icon location\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;22794\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M503.23456 885.82144l-14.04928-14.15168C478.02368 860.38528 215.49056 593.92 215.49056 434.7904c0-163.55328 129.29024-296.61184 288.21504-296.61184 158.90432 0 288.21504 132.28032 288.256 294.87104 0.04096 159.0272-271.4624 436.51072-274.20672 439.07072l-14.52032 13.70112z m0.49152-706.6624c-136.33536 0-247.25504 114.688-247.25504 255.65184 0 122.79808 192.7168 335.21664 247.48032 393.09312C563.2 765.62432 751.06304 549.4784 751.02208 433.07008c-0.04096-140.00128-110.98112-253.91104-247.296-253.91104z m1.88416 360.83712c-68.9152 0-125.00992-57.79456-125.00992-128.83968s56.07424-128.8192 125.00992-128.8192c68.89472 0 124.96896 57.79456 124.96896 128.8192s-56.05376 128.83968-124.96896 128.83968z m0-216.6784c-46.34624 0-84.04992 39.40352-84.04992 87.8592s37.70368 87.8592 84.04992 87.8592c46.32576 0 84.00896-39.40352 84.00896-87.8592s-37.6832-87.8592-84.00896-87.8592z\u0026#34; fill=\u0026#34;#616161\u0026#34; p-id=\u0026#34;22795\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 1100余家售后网点 \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer-links\u0026#34;\u0026gt; \u0026lt;dl v-for=\u0026#34;item1 in linkList\u0026#34;\u0026gt; \u0026lt;dt\u0026gt;{{ item1.title }}\u0026lt;/dt\u0026gt; \u0026lt;dd v-for=\u0026#34;item2 in item1.ddList\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;{{ item2 }}\u0026lt;/a\u0026gt; \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;div class=\u0026#34;right-contact\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-contact\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34;\u0026gt;950816\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;phone\u0026#34; style=\u0026#34;margin-top: 25px;\u0026#34;\u0026gt;950818\u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;width: 200px; text-align: left; margin-left: 52px;\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;time\u0026#34;\u0026gt;8:00-18:00（仅收市话费）\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;手机适用于：Xiaomi MIX Fold系列、MIX Flip系列、数字12系列及以上\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;notice\u0026#34;\u0026gt;电视适用于：98寸、100寸电视\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026#34;btn\u0026#34;\u0026gt; \u0026lt;svg t=\u0026#34;1745977646738\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1024 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;2668\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M851.6096 136.8064H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.8704 105.5232c0.1536 15.5648 16.7424 25.4464 30.5152 18.176l232.704-123.6992h323.3792c44.0832 0 79.872-35.7376 79.872-79.872v-479.232c0-44.0832-35.7376-79.8208-79.872-79.8208z m-287.3856 453.6832H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664s19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664s-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FC7032\u0026#34; p-id=\u0026#34;2669\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M931.4816 216.6272c0-44.0832-35.7376-79.872-79.872-79.872H168.448c-44.0832 0-79.872 35.7376-79.872 79.872v479.1808c0 44.0832 35.7376 79.872 79.872 79.872h95.6928l0.256 31.8976c25.088 3.072 50.5856 4.8128 76.544 4.8128 53.3504 0 105.0624-6.7072 154.3168-19.2l32.9728-17.5104h24.3712c190.6688-68.5568 335.5648-227.072 378.88-421.7856V216.6272z m-367.2576 373.8624H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h268.032c23.9616 0 43.3664 19.4048 43.3664 43.3664 0 23.9616-19.4048 43.3664-43.3664 43.3664z m168.3968-175.5136H296.192c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h436.48c23.9616 0 43.3664 19.4048 43.3664 43.3664-0.0512 23.9616-19.456 43.3664-43.4176 43.3664z\u0026#34; fill=\u0026#34;#FF7E3E\u0026#34; p-id=\u0026#34;2670\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v383.5392c28.4672 3.9424 57.4976 6.0928 87.0912 6.0928 48.0768 0 94.7712-5.5808 139.6224-15.7696h-19.2c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h222.1568c38.656-25.6512 74.0864-55.4496 105.5232-88.832h-327.68c-23.9616 0-43.3664-19.4048-43.3664-43.3664 0-23.9616 19.4048-43.3664 43.3664-43.3664h395.1616c36.864-57.9072 63.3856-122.5216 77.2608-191.488H168.448c-44.0832 0.1024-79.8208 35.84-79.8208 79.9232z\u0026#34; fill=\u0026#34;#FF9552\u0026#34; p-id=\u0026#34;2671\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;path d=\u0026#34;M88.6272 216.6272v180.8896c58.5728-5.9904 114.5856-20.0704 166.9632-40.96 6.144-16.4864 21.9648-28.2624 40.6016-28.2624h20.1728c86.528-46.1312 159.9488-112.0768 213.76-191.488H168.448c-44.0832 0-79.8208 35.7376-79.8208 79.8208z\u0026#34; fill=\u0026#34;#FFA56A\u0026#34; p-id=\u0026#34;2672\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 人工客服 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; export default { data() { return { linkList: [ { title: \u0026#39;\u0026#39;, ddList: [] }, { title: \u0026#39;选购指南\u0026#39;, ddList: [\u0026#39;手机\u0026#39;, \u0026#39;电视\u0026#39;, \u0026#39;笔记本\u0026#39;, \u0026#39;平板\u0026#39;, \u0026#39;穿戴\u0026#39;, \u0026#39;耳机\u0026#39;, \u0026#39;家电\u0026#39;, \u0026#39;路由器\u0026#39;, \u0026#39;音箱\u0026#39;, \u0026#39;配件\u0026#39;] }, { title: \u0026#39;服务中心\u0026#39;, ddList: [\u0026#39;申请售后\u0026#39;, \u0026#39;售后政策\u0026#39;, \u0026#39;维修服务价格\u0026#39;, \u0026#39;订单查询\u0026#39;, \u0026#39;以旧换新\u0026#39;, \u0026#39;保障服务\u0026#39;, \u0026#39;防伪查询\u0026#39;, \u0026#39;F码通道\u0026#39;] }, { title: \u0026#39;线下门店\u0026#39;, ddList: [\u0026#39;小米之家\u0026#39;, \u0026#39;服务网点\u0026#39;, \u0026#39;授权体验店/专区\u0026#39;] }, { title: \u0026#39;关于小米\u0026#39;, ddList: [\u0026#39;了解小米\u0026#39;, \u0026#39;加入小米\u0026#39;, \u0026#39;投资者关系\u0026#39;, \u0026#39;可持续发展\u0026#39;, \u0026#39;廉洁举报\u0026#39;] }, { title: \u0026#39;关注我们\u0026#39;, ddList: [\u0026#39;新浪微博\u0026#39;, \u0026#39;官方微信\u0026#39;, \u0026#39;联系我们\u0026#39;, \u0026#39;公益基金会\u0026#39;] }, ] } } } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .container { width: 1226px; margin: 0 auto; } .container .footer-services { border-bottom: 1px solid rgb(224, 224, 224); } .container .footer-services ul { padding: 27px 0; /* display: flex; */ /* justify-content: space-around; */ height: 79px; box-sizing: border-box; } .container .footer-services li { list-style: none; height: 25px; color: rgb(97, 97, 97); line-height: 25px; cursor: pointer; border-left: 1px solid rgb(224, 224, 224); width: 243px; text-align: center; float: left; line-height: 25px; } .container .footer-services li:first-child { border: 0; } .container .footer-services li svg { float: left; position: relative; } .container .footer-services li svg.tool { left: 56px; top: 0; } .container .footer-services li svg.circle-7 { left: 50px; top: -3px; } .container .footer-services li svg.circle-15 { left: 54px; top: 0; } .container .footer-services li svg.gift { left: 70px; top: 0; } .container .footer-services li svg.location { left: 40px; top: 0; } .container .footer-services li a { height: 25px; line-height: 25px; color: rgb(97, 97, 97); text-decoration: none; } .container .footer-links { height: 392.5px; box-sizing: border-box; padding: 40px 0; } .footer-links dl { width: 160px; height: 25px; float: left; } .footer-links dl dt { height: 17.5px; line-height: 17.5px; font-size: 14px; margin-top: -1px; margin-bottom: 26px; color: rgb(66, 66, 66); } .footer-links dl dd { color: rgb(117, 117, 117); font-size: 12px; margin-top: 10px; line-height: 18px; /* cursor: pointer; */ } .footer-links dl dd a { color: rgb(117, 117, 117); text-decoration: none; } .footer-links dl dd a:hover { color: rgb(255, 103, 0); } .footer-links .right-contact { width: 251px; float: right; text-align: center; } .footer-links .right-contact .col-contact { width: 251px; height: 80px; border-left: 1px solid rgb(224, 224, 224); } .right-contact .phone { height: 22px; margin-bottom: 5px; color: rgb(255, 103, 0); font-size: 22px; line-height: 22px; } .right-contact .time { font-size: 12px; color: rgb(97, 97, 97); height: 18px; line-height: 18px; margin-bottom: 5px; } .right-contact .btn { width: 120px; height: 30px; border: 1px solid rgb(255, 103, 0); display: inline-block; font-size: 12px; line-height: 30px; color: #FF6700; } .right-contact .notice { font-size: 12px; color: rgb(97, 97, 97); /* height: 18px; */ line-height: 18px; margin-bottom: 5px; margin-top: 3px; } \u0026lt;/style\u0026gt; App 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;template\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;Tab /\u0026gt; \u0026lt;Wrapper /\u0026gt; \u0026lt;Main\u0026gt;\u0026lt;/Main\u0026gt; \u0026lt;Footer\u0026gt;\u0026lt;/Footer\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import Main from \u0026#39;@/components/xiaomi/Main.vue\u0026#39;; import Header from \u0026#39;@/components/xiaomi/Header.vue\u0026#39;; import Tab from \u0026#39;@/components/xiaomi/Tab.vue\u0026#39;; import Wrapper from \u0026#39;@/components/xiaomi/Wrapper.vue\u0026#39;; import Footer from \u0026#39;./components/xiaomi/Footer.vue\u0026#39;; export default { components: { Header, Tab, Wrapper, Main, Footer, } } \u0026lt;/script\u0026gt; ","date":"2025-02-21T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%E4%B8%8A/","title":"第三章 组件基础（上）"},{"content":"Vue 指令 指令修饰符 通过 . 指明一些指令后缀，不同后缀封装了不同的处理操作\t→\t简化代码\n① 按键修饰符\n@keyup.enter\t→\t键盘回车监听 ② v-model修饰符\nv-model.trim\t→\t去除首尾空格\nv-model.number →\t转数字\n③ 事件修饰符\n@事件名.stop\t→\t阻止冒泡\n@事件名.prevent →\t阻止默认行为\n1 \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; @keyup.enter=\u0026#34;add\u0026#34; /\u0026gt; .enter 等价于 if 判断事件触发时 key 的值（addEventListener）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;@keyup.enter → 监听键盘回车事件\u0026lt;/h3\u0026gt; \u0026lt;input @keyup=\u0026#34;fn\u0026#34; v-model=\u0026#34;username\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39; }, methods: { fn(e) { if (e.key === \u0026#39;Enter\u0026#39;) { console.log(\u0026#39;键盘回车的时候触发\u0026#39;, this.username) this.username = \u0026#39;\u0026#39; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind 对于样式控制的增强 操作 class 语法：v-bind:class = \u0026quot;对象 / 数组\u0026quot;\n① 对象 → 键就是类名，值是布尔值。如果值为 true，有这个类，否则没有这个类。(一个类来回切换)\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{类名1:布尔值，类名2:布尔值}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; ② 数组 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表。（多个类批量添加或删除）\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;类名1\u0026#39;，\u0026#39;类名2\u0026#39;，\u0026#39;类名3\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 300px; height: 300px; margin: 30px 0px 30px 200px; border: 5px solid black; border-radius: 10px; } .pink { background-color: rgb(255, 236, 239); } .big { width: 500px; height: 300px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;{ pink: false, big: false }\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :class=\u0026#34;[\u0026#39;pink\u0026#39;, \u0026#39;big\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：导航栏高亮效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #e01222; padding: 0 10px; } li { width: 100px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #e01222; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;京东秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;每日特价\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;品类秒杀\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 基于数据动态渲染页面。\n记录导航栏下标，用于标记 class 为 active，以显示高亮。\n使用 @ 或 v-on: 监听事件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; } ul { display: flex; border-bottom: 2px solid #3ea1e4; padding: 0 10px; } li { width: 200px; height: 50px; line-height: 50px; list-style: none; text-align: center; } li a { display: block; text-decoration: none; font-weight: bold; color: #333333; } li a.active { background-color: #3ea1e4; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34; @mouseenter=\u0026#34;activeIndex=item.id-1\u0026#34;\u0026gt; \u0026lt;a :class=\u0026#34;{active: index === activeIndex}\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;{{item.name}}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;专栏\u0026#39; }, { id: 2, name: \u0026#39;活动\u0026#39; }, { id: 3, name: \u0026#39;直播\u0026#39; }, { id: 4, name: \u0026#39;课堂\u0026#39; }, { id: 5, name: \u0026#39;社区中心\u0026#39; }, { id: 6, name: \u0026#39;游戏中心\u0026#39; } ], activeIndex: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 操作 style 语法：style = \u0026quot;样式对象\u0026quot;\n1 \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{CSS属性名1: CSS属性值, CSS属性名2: CSS属性值} \u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 300px; height: 300px; background-color: gainsboro; margin: 5px; } .bigger{ width: 400px; height: 400px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; :style=\u0026#34;{backgroundColor: \u0026#39;pink\u0026#39;}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; v-bind:class=\u0026#34;[\u0026#39;bigger\u0026#39;]\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;../vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：进度条变化。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; \u0026lt;span\u0026gt;50%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-bind: 或 : 操作 style。\n为 button 添加点击事件，改变进度条长度。\n动态渲染长度显示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .progress { height: 25px; width: 400px; border-radius: 15px; background-color: #272425; border: 3px solid #272425; box-sizing: border-box; margin-bottom: 30px; } .inner { width: 50%; height: 19px; border-radius: 10px; text-align: right; position: relative; background-color: #409eff; background-size: 20px 20px; box-sizing: border-box; transition: all 1s; } .inner span { position: absolute; right: -20px; bottom: -25px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 外层盒子底色 （黑色） --\u0026gt; \u0026lt;div class=\u0026#34;progress\u0026#34;\u0026gt; \u0026lt;!-- 内层盒子 - 进度（蓝色） --\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34; :style=\u0026#34;{ width: percent + \u0026#39;%\u0026#39; }\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{ percent }}%\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button @click=\u0026#34;percent = 25\u0026#34;\u0026gt;设置25%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 50\u0026#34;\u0026gt;设置50%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 75\u0026#34;\u0026gt;设置75%\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;percent = 100\u0026#34;\u0026gt;设置100%\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { percent: 30 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-model 应用于其他表单元素 v-model 可以快速获取或设置表单元素的值，且能够根据控件类型自动选取正确的方法来更新元素。\n表单元素：\n① 输入框 input:text\t→\tvalue\n② 文本域 textarea\t→\tvalue\n③ 复选框 input:checkbox\t→\tchecked\n④ 单选框 input:radio →\tchecked\n⑤ 下拉菜单 select\t→\tvalue\t\u0026hellip;\n案例：个人信息档案。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; textarea { display: block; width: 395px; height: 100px; margin: 10px 0; } .info { width: 400px; height: 500px; border: solid rgb(0, 0, 0); padding-left: 20px; padding-right: 20px; border-radius: 20px; box-shadow: 5px 5px #ccc; ; } .study { width: 20px; margin: 0 5px 0 5px; } .study:first-child { width: 50px; } .necc { color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;个人信息档案\u0026lt;/h3\u0026gt; \u0026lt;span\u0026gt; 姓名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34; style=\u0026#34;width: 80px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 20px;\u0026#34;\u0026gt; 学号：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;stuId\u0026#34; style=\u0026#34;width: 120px;\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;p\u0026gt; \u0026lt;!-- name 属性使得单选框互斥，当选择其中一个的时候，另外的则取消勾选 --\u0026gt; \u0026lt;!-- value 向后台提交数据 --\u0026gt; 性别： \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;男 \u0026lt;input v-model=\u0026#34;gender\u0026#34; type=\u0026#34;radio\u0026#34; name=\u0026#34;gender\u0026#34; value=\u0026#34;2\u0026#34;\u0026gt;女 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 籍贯： \u0026lt;select v-model=\u0026#34;cityId\u0026#34;\u0026gt; \u0026lt;!-- option 需要设置 value 值，且 select 框的 value 值与选中的 option 的 value 值关联 --\u0026gt; \u0026lt;option value=\u0026#34;001\u0026#34;\u0026gt;北京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;002\u0026#34;\u0026gt;上海\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;003\u0026#34;\u0026gt;成都\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;004\u0026#34;\u0026gt;南京\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;005\u0026#34;\u0026gt;长沙\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;006\u0026#34;\u0026gt;武汉\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;007\u0026#34;\u0026gt;...\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 是否为共产党员： \u0026lt;input type=\u0026#34;checkbox\u0026#34; v-model=\u0026#34;isStar\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;necc\u0026#34;\u0026gt;*\u0026lt;/span\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 入学时间：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;year\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;年\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;month\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;月\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;day\u0026#34; class=\u0026#34;study\u0026#34;\u0026gt;日 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; 自我评价： \u0026lt;textarea v-model=\u0026#34;desc\u0026#34; placeholder=\u0026#34;本人积极向上...\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;保存\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, isStar: false, gender: \u0026#34;2\u0026#34;, cityId: \u0026#39;002\u0026#39;, desc: \u0026#34;\u0026#34;, stuId: \u0026#39;\u0026#39;, year: \u0026#39;2023\u0026#39;, month: \u0026#39;\u0026#39;, day: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 计算属性 基础语法 概念：基于现有的数据，计算出来的新属性。依赖的数据变化，自动重新计算。\n语法：① 声明在 computed 配置项中，一个计算属性对应一个函数。\n​\t② 使用起来和普通属性一样使用 {{ 计算属性名 }}。\n注意：计算属性本质上是属性，因此在使用时不能加 ()，如 {{ getCount() }} 是错误的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 240px; } th,td { border: 1px solid #000; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;分数\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}分\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;总分 {{ getCount }} 分\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;英语\u0026#39;, num: 67 }, { id: 2, name: \u0026#39;数学\u0026#39;, num: 82 }, { id: 3, name: \u0026#39;语文\u0026#39;, num: 75 }, ] }, computed:{ getCount(){ // 遍历数组求和 let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; computed 和 methods ​\tmethods 侧重于处理业务，使用几次就需要计算几次；computed 侧重于求得结果，具有缓存特性，性能更好。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; table { border: 1px solid #000; text-align: center; width: 300px; } th,td { border: 1px solid #000; } h3 { position: relative; margin-left: 120px; } span { position: absolute; left: 70px; top: -4px; width: 16px; height: 16px; color: white; font-size: 12px; text-align: center; border-radius: 50%; background-color: #e63f32; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;购物车🛒\u0026lt;span\u0026gt;{{ getCount() }}\u0026lt;/span\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;名字\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;数量\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{ item.name }}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{ item.num }}个\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;p\u0026gt;礼物总数：{{ getCount() }} 个\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // 现有的数据 list: [ { id: 1, name: \u0026#39;篮球\u0026#39;, num: 3 }, { id: 2, name: \u0026#39;玩具\u0026#39;, num: 2 }, { id: 3, name: \u0026#39;铅笔\u0026#39;, num: 5 }, ] }, methods: { getCount() { console.log(\u0026#39;methods方法执行了\u0026#39;) let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) return count } }, computed: { // 计算属性：有缓存的，一旦计算出来结果，就会立刻缓存 // 下一次读取 → 直接读缓存就行 → 性能特别高 // getCount() { // console.log(\u0026#39;计算属性执行了\u0026#39;) // let count = this.list.reduce((sum, item) =\u0026gt; sum + item.num, 0) // return count // } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 修改计算属性 计算属性默认的简写，只能读取访问，不能修改；如果要修改，则需要写计算属性的完整写法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 computed: { 计算属性名() { 一段代码逻辑 (计算逻辑) return 结果 } } ------------------------------------------------------------------------ computed: { 计算属性名: { get() { 一段代码逻辑 (计算逻辑) return 结果 }, set(修改的值) { 一段代码逻辑 (修改逻辑) } } } 案例：改名卡。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39; }, computed: { fullName() { return this.firstName + \u0026#34;·\u0026#34; + this.lastName } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = \u0026#39;迈克尔杰克逊\u0026#39; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t如果使用 computed 计算完整姓名，直接修改 fullName 时提示 computed 没有配置 setter 逻辑，[Vue warn]: Computed property \u0026quot;fullName\u0026quot; was assigned to but it has no setter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .t1 { margin: auto; width: 300px; height: 250px; border: 2px solid black; border-radius: 10px; text-align: center; } input { width: 190px; } button { margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;t1\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;姓名：{{fullName}} \u0026lt;/h2\u0026gt; 姓：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;firstName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 名：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;lastName\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;changeFirstName\u0026#34;\u0026gt;修改姓\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;changeLastName\u0026#34;\u0026gt;修改名\u0026lt;/button\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;change\u0026#34;\u0026gt;\u0026lt;button @click=\u0026#34;changeFullName\u0026#34;\u0026gt;修改姓名\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { firstName: \u0026#39;约斯夫\u0026#39;, lastName: \u0026#39;乔尼\u0026#39;, }, computed: { // fullName() { // return this.firstName + \u0026#34;·\u0026#34; + this.lastName // } fullName: { get: function(){ return this.firstName + \u0026#34;·\u0026#34; + this.lastName }, set: function(a){ this.firstName = a.slice(0, 3) this.lastName = a.slice(3) } } }, methods: { changeFirstName() { this.firstName = \u0026#39;迈克尔\u0026#39; }, changeFullName() { this.fullName = document.querySelector(\u0026#39;.change\u0026#39;).value; }, changeLastName() { this.lastName = \u0026#39;杰克逊\u0026#39; }, } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 成绩案例 ​\t编写程序，使得页面在没有数据时显示 \u0026ldquo;暂无数据\u0026rdquo;，有数据时，显示数据并将未及格的成绩标红，实现添加、删除、求总分及平均分等功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./styles/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;语文\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;red\u0026#34;\u0026gt;46\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;英语\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;80\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;3\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;数学\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;100\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：246\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：79\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-if v-else 判断条件渲染或删除 tbody。\nv-for 动态渲染tbody 中的数据， v-bind 控制不及格科目成绩的颜色。\nv-on 绑定删除事件，filter 覆盖数组，v-model 双向绑定数据，unshfit 更新视图。\ncomputed 计算属性求总分及平均分。\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .score-case { width: 1000px; margin: 50px auto; display: flex; } .score-case .table { flex: 4; } .score-case .table table { width: 100%; border-spacing: 0; border-top: 1px solid #ccc; border-left: 1px solid #ccc; } .score-case .table table th { background: #f5f5f5; } .score-case .table table tr:hover td { background: #f5f5f5; } .score-case .table table td, .score-case .table table th { border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; text-align: center; padding: 10px; } .score-case .table table td.red, .score-case .table table th.red { color: red; } .score-case .table .none { height: 100px; line-height: 100px; color: #999; } .score-case .form { flex: 1; padding: 20px; } .score-case .form .form-item { display: flex; margin-bottom: 20px; align-items: center; } .score-case .form .form-item .label { width: 60px; text-align: right; font-size: 14px; } .score-case .form .form-item .input { flex: 1; } .score-case .form .form-item input, .score-case .form .form-item select { appearance: none; outline: none; border: 1px solid #ccc; width: 200px; height: 40px; box-sizing: border-box; padding: 10px; color: #666; } .score-case .form .form-item input::placeholder { color: #666; } .score-case .form .form-item .cancel, .score-case .form .form-item .submit { appearance: none; outline: none; border: 1px solid #ccc; border-radius: 4px; padding: 4px 10px; margin-right: 10px; font-size: 12px; background: #ccc; } .score-case .form .form-item .submit { border-color: #069; background: #069; color: #fff; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;score-case\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;table\u0026#34;\u0026gt; \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;编号\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;科目\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;成绩\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;操作\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody v-if=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;tr v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;td\u0026gt;{{index+1}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;{{item.subject}}\u0026lt;/td\u0026gt; \u0026lt;td :class=\u0026#34;{red:item.score\u0026lt;60}\u0026#34;\u0026gt;{{item.score}}\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; @click.prevent=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tbody v-else\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;none\u0026#34;\u0026gt;暂无数据\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;span\u0026gt;总分：{{getSum}}\u0026lt;/span\u0026gt; \u0026lt;span style=\u0026#34;margin-left: 50px\u0026#34;\u0026gt;平均分：{{getAvg}}\u0026lt;/span\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;科目：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入科目\u0026#34; v-model.trim=\u0026#34;subject\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;分数：\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;请输入分数\u0026#34; v-model.number=\u0026#34;score\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;submit\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, subject: \u0026#39;语文\u0026#39;, score: 20 }, { id: 7, subject: \u0026#39;数学\u0026#39;, score: 99 }, { id: 12, subject: \u0026#39;英语\u0026#39;, score: 70 }, ], subject: \u0026#39;\u0026#39;, score: \u0026#39;\u0026#39; }, methods: { del(id) { // this.list = this.list.filter(item =\u0026gt; item.id !== id) let index = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ if(this.list[i].id === id){ index = i; } } // console.log(this.list) this.list.splice(index, 1); // console.log(this.list) }, add() { if (!this.subject) { alert(\u0026#39;科目不能为空！\u0026#39;) return } if (typeof this.score !== \u0026#39;number\u0026#39;) { alert(\u0026#39;成绩输入格式错误！\u0026#39;) return } // push 在最后添加，unshift 在前面插入 this.list.unshift({ id: +new Date(), subject: this.subject, score: this.score }) this.subject = \u0026#39;\u0026#39; this.score = \u0026#39;\u0026#39; } }, computed: { getSum() { // return this.list.reduce((sum, item) =\u0026gt; sum + item.score, 0) let sum = 0; for(let i = 0; i \u0026lt; this.list.length; i++){ sum += this.list[i].score; } return sum; }, getAvg() { if (this.list.length === 0) { return 0 } return (this.getSum / this.list.length).toFixed(2) } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vue 生命周期钩子函数 每个 Vue 实例在创建过程中都有一系列的初始化步骤。例如，创建函数绑定、编译模板、将实例挂在到 DOM 并在数据变化时触发 DOM 更新、销毁实例等。\n通俗的说，Vue 实例从创建到销毁的过程，就是生命周期。在这个过程中会运行一些叫做生命周期钩子的函数，通过这些钩子函数可以定义业务逻辑。\n（1）beforeCreate：在 Vue 实例开始初始化时调用。\n（2）created：在实例创建之后，DOM 编译之前调用。\n（3）beforeMount：在 DOM 渲染前调用。\n（4）mounted：在 DOM 渲染后调用，等于 window.onload() 方法。\n（5）beforeUpdate()：在组件更新前调用。\n（6）updated()：在组件中的任意 DOM 元素更新后调用。\n（7）beforeDestory：在销毁实例前调用，此时实例仍有效。\n（8）destoryed：在实例销毁后调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, beforeCreate() { console.log(\u0026#39;beforeCreate\u0026#39;); }, created() { console.log(\u0026#39;created\u0026#39;); }, beforeMount() { console.log(\u0026#39;beforeMount\u0026#39;); }, mounted() { console.log(\u0026#39;mounted\u0026#39;); }, beforeDestory() { console.log(\u0026#39;beforeDestory\u0026#39;); }, destoryed() { console.log(\u0026#39;destoryed\u0026#39;); }, }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; watch 侦听器 基础语法 作用：监听数据变化，执行一些业务逻辑或异步操作。\n语法：① 简单写法\t→\t简单类型数据，直接监视。\n1 2 3 4 5 6 7 8 watch: { 数据属性名(newValue, oldValue) { 一些业务逻辑或异步操作。 }, \u0026#39;对象.属性名\u0026#39;(newValue, oldvalue) { 一些业务逻辑或异步操作。 } } 注意：watch 中函数的名称需要与在 data 中定义的属性名称一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{ user.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ user.age }}\u0026lt;/p\u0026gt; \u0026lt;textarea name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model=\u0026#34;msg\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;#app\u0026#39;, data() { return { user: { name: \u0026#39;John\u0026#39;, age: 30 }, msg: \u0026#39;\u0026#39; } }, watch: { user(newValue, oldValue) { console.log(\u0026#39;user changed\u0026#39;); console.log(oldValue); console.log(newValue); }, msg(newValue, oldValue) { console.log(`${oldValue} changed to ${newValue}`); } }, mounted() { // 这会触发上面的 watch 回调，因为 user 的引用改变了 this.user = { name: \u0026#39;Doe\u0026#39;, age: 32 }; // 这不会触发上面的 watch 回调，因为 user 的引用没有改变 this.user.name = \u0026#39;Jane\u0026#39;; this.user.age = 31; } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：模拟实时翻译。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 接口地址：https://applet-base-api-t.itheima.net/api/translate // 请求方式：get // 请求参数： // （1）words：需要被翻译的文本（必传） // （2）lang： 需要被翻译成的语言（可选）默认值-意大利 // ----------------------------------------------- const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { words: \u0026#39;\u0026#39;, obj: { w1: \u0026#39;\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // 检测 words 的变化，一般只使用新值，因此 oldValue 可以省略 // words(newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.ne s.data.data // }, 300) // }, // 如果检测某个对象里面的子属性，只需要改名字就可以了，但在 js 中不能出现.-等符号，因此需要用 \u0026#39;\u0026#39; 包裹 \u0026#39;obj.w1\u0026#39;(newValue, oldValue) { console.log(newValue, oldValue); }, async words(newValue, oldValue) { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: { words: newValue } }) this.result = res.data.data; console.log(res.data.data); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 完整写法 语法：② 完整写法\t→\t添加额外配置项。\n(1) deep: true 对复杂类型深度监视\n(2) immediate: true 初始化立刻执行一次 handler 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 data: { obj: { words:‘苹果, lang: \u0026#39;italy\u0026#39; } }, watch: { 数据属性名: { deep: true, handler (newValue) { console.log(newValue)} } } } 完整写法：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; * { margin: 0; padding: 0; box-sizing: border-box; font-size: 18px; } #app { padding: 10px 20px; } .query { margin: 10px 0; } .box { display: flex; } textarea { width: 300px; height: 160px; font-size: 18px; border: 1px solid #dedede; outline: none; resize: none; padding: 10px; } textarea:hover { border: 1px solid #1589f5; } .transbox { width: 300px; height: 160px; background-color: #f0f0f0; padding: 10px; border: none; } .tip-box { width: 300px; height: 25px; line-height: 25px; display: flex; } .tip-box span { flex: 1; text-align: center; } .query span { font-size: 18px; } .input-wrap { position: relative; } .input-wrap span { position: absolute; right: 15px; bottom: 15px; font-size: 12px; } .input-wrap i { font-size: 20px; font-style: normal; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 条件选择框 --\u0026gt; \u0026lt;div class=\u0026#34;query\u0026#34;\u0026gt; \u0026lt;span\u0026gt;翻译成的语言：\u0026lt;/span\u0026gt; \u0026lt;select v-model=\u0026#34;obj.lang\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;italy\u0026#34;\u0026gt;意大利\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;english\u0026#34;\u0026gt;英语\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;german\u0026#34;\u0026gt;德语\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- 翻译框 --\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-wrap\u0026#34;\u0026gt; \u0026lt;textarea v-model=\u0026#34;obj.words\u0026#34;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;span\u0026gt;\u0026lt;i\u0026gt;⌨️\u0026lt;/i\u0026gt;文档翻译\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;output-wrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;transbox\u0026#34;\u0026gt;{{result}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { obj: { words: \u0026#39;\u0026#39;, lang: \u0026#39;italy\u0026#39; }, result: \u0026#39;\u0026#39;, timer: null }, watch: { // \u0026#39;obj.words\u0026#39; (newValue, oldValue) { // console.log(newValue, oldValue); // clearTimeout(this.timer); // 防抖优化 // this.timer = setTimeout(async () =\u0026gt; { // const res = await axios({ // method: \u0026#39;get\u0026#39;, // url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, // params: { // words: newValue // } // }) // this.result = res.data.data // }, 300) // }, obj: { deep: true, // immediate: true, handler(newValue, oldValue) { console.log(newValue, oldValue); clearTimeout(this.timer); this.timer = setTimeout(async () =\u0026gt; { const res = await axios({ method: \u0026#39;get\u0026#39;, url: \u0026#39;https://applet-base-api-t.itheima.net/api/translate\u0026#39;, params: newValue }) this.result = res.data.data }, 300) } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 过滤器 对于一些需要经过复杂计算的数据绑定，简单的表达式可能无法实现，这时可以使用 vue.js 的过滤器进行处理，通过自定义过滤器可以对文本进行格式化。\n过滤器可以用在插值表达式和 v-bind 指令中，其需要在被添加在 JavaScript 表达式的尾部，由符号 | 表示，格式如下：\n1 2 3 4 \u0026lt;!-- 在插值表达式中 --\u0026gt; {{ msg | filter }} \u0026lt;!-- 在 v-bind 中 --\u0026gt; \u0026lt;div v-bind:id=\u0026#34;msg | filter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 定义过滤器有两种方式，第一种是通过全局方法 Vue.filter() 进行定义；第二种是应用选项对象中的 filters 选项进行定义。\n全局过滤器 1 2 3 4 5 Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) }); 该方法定义了一个名为 capitalize 的全局过滤器，其中，Vue.filter 方法接受两个参数，第一个参数 capitalize 是过滤器的名称，第二个参数是一个函数，这个函数会接收从模板传递过来的值，并对其进行处理。\n在该过滤器中，如果传入的 value 是假值（比如 null、undefined、空字符串等），则直接返回一个空字符串。这是为了防止在调用 toUpperCase() 方法时出现错误。\n该过滤器将传入的值转换为一个字符串，将第一个字母大写并与剩余的字符串片段拼接起来，形成一个新的字符串。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ name | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Vue.filter(\u0026#39;capitalize\u0026#39;, function (value) { if (!value) return \u0026#39;\u0026#39; value = value.toString() // 将其转换为一个字符串。 return value.charAt(0).toUpperCase() + value.slice(1) // value.charAt(0) 获取字符串的第一个字符。 // toUpperCase() 将第一个字符转换为大写。 // value.slice(1) 获取除了第一个字符之外的所有字符。 }); const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { name: \u0026#39;bob\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 局部过滤器 这个局部过滤器 capitalize 只能在定义它的组件内部使用。\n1 2 3 4 5 6 7 8 9 filters: { capitalize: function (value) { // 这是定义在组件的 `filters` 选项中的一个过滤器。 // `filters` 是一个对象，其中的每个属性都是一个过滤器函数。 if (!value) return \u0026#39;\u0026#39; value = value.toString() return value.charAt(0).toUpperCase() + value.slice(1) } } 过滤器串联 1 {{ msg | filterA | filterB }} 多个过滤器可以串联使用，在串联使用过滤器时，先调用左边的过滤器，再依次往右调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;{{ str | lowercase | capitalize }}\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { str: \u0026#39;hElLoW woRlD!\u0026#39; }, filters: { lowercase: (str)=\u0026gt;{ return str.toLowerCase(); }, capitalize: (str)=\u0026gt;{ return str.charAt(0).toUpperCase() + str.slice(1); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：定义两个过滤器，第一个过滤器用来区分信息类别，使得不同标题的颜色不同，第二个过滤器用来将超出 15 个字符的新闻内容截取，以省略号结尾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 实现方法：\n观察代码可发现，标题颜色通过不同类来实现，因此可以使用 v-bind 绑定 class ，并使用过滤器对标题内容进行判断从而改变标题颜色。\n新闻内容可以直接使用插值表达式加过滤器的方式修改，即判断字符串的长度大于 15 时，截取字符串内容，str.slice(0, 15)，再在末尾加上 \u0026hellip;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .blue { color: lightskyblue; } .red { color: red; } .orange { color: orange; } .gray { color: gray; } .omit{ width: 200px; text-overflow: ellipsis; text-wrap: nowrap; overflow: hidden; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in list\u0026#34; class=\u0026#34;omit\u0026#34;\u0026gt; \u0026lt;span :class=\u0026#34;item.title | hot\u0026#34;\u0026gt;{{item.title}}\u0026lt;/span\u0026gt;{{item.news}} \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { list: [ { title: \u0026#39;【公告】\u0026#39;, news: \u0026#39;让“幸福产业”造福群众\u0026#39; }, { title: \u0026#39;【头条】\u0026#39;, news: \u0026#39;韩国宣布多地进入灾难状态沸\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;张文宏谈退休：不会做牛做马一辈子\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;水清岸绿 家门口就有“诗和远方”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;200多万买二手房遭遇“20年租约”\u0026#39; }, { title: \u0026#39;【热点】\u0026#39;, news: \u0026#39;卖一台车亏10万 蔚来必须听劝了\u0026#39; }, { title: \u0026#39;【新闻】\u0026#39;, news: \u0026#39;成都竹子开花 错过再等60年\u0026#39; } ] }, filters: { hot: function (str) { switch (str) { case \u0026#39;【公告】\u0026#39;: return \u0026#39;blue\u0026#39;; case \u0026#39;【头条】\u0026#39;: return \u0026#39;red\u0026#39;; case \u0026#39;【热点】\u0026#39;: return \u0026#39;orange\u0026#39;; default: return \u0026#39;gray\u0026#39;; } }, omit: (str)=\u0026gt;{ if(str.length \u0026gt; 15){ return str.slice(0, 15) + \u0026#39;...\u0026#39;; }else{ return str; } } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习 创建一个数组，当点击页面内按钮时，为数组添加一个 1-100 的随机整数，并在页面内显示数组中所有元素。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- \u0026lt;span v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }}\u0026lt;/span\u0026gt; --\u0026gt; \u0026lt;button @click=\u0026#34;addRandom\u0026#34;\u0026gt;添加\u0026lt;/button\u0026gt; \u0026lt;br\u0026gt; \u0026lt;span\u0026gt;{{list.toString()}}\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { // list: [15, 61, 16, 18, 65, 95] list: [] }, methods: { addRandom() { const random = Math.floor(Math.random() * 100) + 1; this.list.push(random); } } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; 随机给出一个 0 ~ 99（包括 0 和 99）的数字，然后让用户在规定的次数内猜出是什么数字。当用户随便猜一个数字输入后，游戏会提示该数字太大或太小，然后缩小结果范围，最终得出正确结果。界面设计如实验图 2-1 所示。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div { text-align: center; margin: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;猜数字游戏\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;请输入一个0-99之间的随机整数\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; v-model.number=\u0026#34;guess\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;submit\u0026#34; :disabled=\u0026#34;subFlag\u0026#34;\u0026gt;提交\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled v-model=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;start\u0026#34; v-if=\u0026#34;flag\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span\u0026gt;当前还可以猜测次数：\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;\u0026#34; id=\u0026#34;\u0026#34; disabled :value=\u0026#34;count\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button @click=\u0026#34;restart\u0026#34;\u0026gt;再来一局\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const vue = new Vue({ el: \u0026#39;div\u0026#39;, data: { random: 0, flag: true, count: 3, msg: \u0026#39;点击按钮开始游戏！\u0026#39;, guess: \u0026#39;\u0026#39;, subFlag: false }, methods: { start() { this.flag = false; this.random = Math.floor(Math.random() * 100) this.msg = \u0026#39;请输入数字！\u0026#39; }, submit() { if(this.flag == true){ alert(\u0026#39;请先点击开始按钮！\u0026#39;); return; } if (this.count == 1) { console.log(111); this.count--; this.msg = \u0026#39;次数用尽，请重新开始游戏！\u0026#39;; this.subFlag = true; return; } if (this.guess \u0026gt; this.random) { this.msg = \u0026#39;猜大了！\u0026#39;; this.count--; } if (this.guess \u0026lt; this.random) { this.msg = \u0026#39;猜小了！\u0026#39;; this.count--; } if (this.guess == this.random) { this.msg = \u0026#39;猜对了！要再来一局吗？\u0026#39;; this.subFlag = true; } }, restart(){ this.flag = true; this.count = 3; this.msg = \u0026#39;点击按钮开始游戏！\u0026#39; this.guess = \u0026#39;\u0026#39;; this.subFlag = false; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 v-for 指令输出九九乘法表。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div v-for=\u0026#34;a in b\u0026#34;\u0026gt; \u0026lt;span v-for=\u0026#34;b in a\u0026#34;\u0026gt; {{a}} * {{b}} = {{a*b}} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script src=\u0026#34;./vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { a: 9, b: 9, }, methods: { } }) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-14T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-vue-%E5%BB%B6%E4%BC%B8/","title":"第二章 Vue 延伸"},{"content":"Vue 简介 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面（基于数据渲染出用户所看到的页面）的渐进式（使用核心包进行局部模块设计改造，或利用构建工具及插件等进行工程化开发）框架（快速开发中大型项目）。\n与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n1 2 3 4 5 6 title: \u0026#39;清仓大促\u0026#39;, products: [ { id: 1, name: \u0026#39;手机\u0026#39;, price: \u0026#39;1999元\u0026#39; }, { id: 2, name: \u0026#39;平板\u0026#39;, price: \u0026#39;2999元\u0026#39; }, { id: 3, name: \u0026#39;电脑\u0026#39;, price: \u0026#39;3999元\u0026#39; } ] 软件工具 VScode 下载：Visual Studio Code - Code Editing. Redefined\nNode.js Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境（后端）node.js 详解_nodejs-CSDN博客\n下载：Node.js 中文网 (nodejs.com.cn) 或 Node.js (nodejs.org)\nVue.js Vue2官网：Vue2.js (v2.cn.vuejs.org)\nVue3官网：Vue3.js - 渐进式 JavaScript 框架 | Vue3.js (cn.vuejs.org)\n引入 实例 ① 准备容器（Vue所管理的范围）\n1 \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\t\u0026lt;/div\u0026gt; ② 引包（开发环境版本 ✔ / 生产环境版本）https://v2.cn.vuejs.org\n③ 创建实例\n1 const app = new Vue({}) ④ 添加配置项=\u0026gt;完成渲染\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;box\u0026#34;\u0026gt; // 插值表达式 {{ msg }} \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 编写用于渲染的代码 --\u0026gt; {{ msg }} \u0026lt;h5\u0026gt; {{m1}} \u0026lt;/h5\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; // 一旦引入VueJS核心包，在全局环境，就有了Vue构造函数 const app = new Vue({ // el建立关联 el: \u0026#39;#app\u0026#39;, // data提供数据 data: { msg: \u0026#39;Hello World\u0026#39;, m1: \u0026#39;this is m1\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 插值表达式 ⭐ 插值表达式是一种 Vue 的模板语法\n① 作用： 利用表达式进行插值，渲染到页面中\n​\t表达式：是可以被求值的代码，JS 引擎会将其计算出一个结果\n② 语法： {{ 表达式 }}\n1 2 3 4 5 6 7 8 9 10 11 12 13 ## 下列差值表达式，书写正确的有哪些？ \u0026lt;h3\u0026gt;{{ title }}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{{ nickname.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ age \u0026gt;= 18 ? \u0026#39;成年\u0026#39; : \u0026#39;未成年\u0026#39; }}\u0026lt;/P\u0026gt; \u0026lt;p\u0026gt;{{ obj.name }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; \u0026lt;p title=\u0026#34;{{ uesrname }}\u0026#34;\u0026gt;HelloWorld\u0026lt;/p\u0026gt; ③ 注意点：\n​\t(1) 使用的数据必须存在\n​\t(2) 支持的是表达式，而非语句，比如：if 或 for 等\n​\t(3) 不能在标签属性中使用 {{ }} 插值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;app\u0026#39;\u0026gt; \u0026lt;p\u0026gt;{{ m1.toUpperCase() }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ m1 + \u0026#34; and green\u0026#34; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.age - age }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ name + \u0026#39;和\u0026#39; + friend.name + \u0026#39;是朋友\u0026#39; }}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{{ friend.gender }}\u0026lt;/p\u0026gt; \u0026lt;!-- \u0026lt;p\u0026gt;{{ if }}\u0026lt;/p\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;red\u0026#39;, age: \u0026#39;17\u0026#39;, name: \u0026#39;张三\u0026#39;, friend: { name: \u0026#39;李四\u0026#39;, age: \u0026#39;18\u0026#39;, hobby: \u0026#39;篮球\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习差值表达式。\nVue 响应式特性 响应式：数据发生变化，视图自动更新\n① 访问数据：\u0026ldquo;实例.属性名\u0026rdquo;\n② 修改数据：\u0026ldquo;实例.属性名\u0026rdquo; = \u0026ldquo;值\u0026rdquo;\n当我们修改数据时，Vue 监听到数据修改，在底层进行 Dom 操自动更新视图。\n开发者工具安装 极简插件官网_Chrome插件下载_Chrome浏览器应用商店 (zzzmh.cn)\n创建 Vue 工程（废案） 使用 vue-cli 创建 备注：目前 vue-cli 已处于维护模式，官方推荐基于 Vite 创建项目。（点击查看官方文档）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上 vue --version ## 安装或者升级你的@vue/cli npm install -g @vue/cli ## 执行创建命令 vue create vue_test ## 随后选择3.x ## Choose a version of Vue.js that you want to start the project with (Use arrow keys) ## \u0026gt; 3.x ## 2.x ## 启动 cd vue_test npm run serve 使用 vite 创建 vite 是新一代前端构建工具，官网地址：https://vitejs.cn，vite 的优势如下：\n轻量快速的热重载（HMR），能实现极速的服务启动。 对 TypeScript、JSX、CSS 等支持开箱即用，不需要配置其他文件。 真正的按需编译，不再等待整个应用编译完成。 webpack 构建 与 vite 构建对比图如下： 具体操作如下（点击查看官方文档） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 ## 1.创建命令 npm create vue@latest ## 2.具体配置 ## 配置项目名称 √ Project name: vue3_test ## 是否添加TypeScript支持 √ Add TypeScript? » Yes ## 是否添加JSX支持 √ Add JSX Support? » No ## 是否添加路由环境 √ Add Vue Router for Single Page Application development? » No ## 是否添加pinia环境 √ Add Pinia for state management? » No ## 是否添加单元测试 √ Add Vitest for Unit Testing? » No ## 是否添加端到端测试方案 √ Add an End-to-End Testing Solution? » No ## 是否添加ESLint语法检查 √ Add ESLint for code quality? » Yes ## 是否添加Prettiert代码格式化 √ Add Prettier for code formatting? » No 问题：\nnpm create vue@latest、和 npm install 速度慢或无法执行。\n解决方法：\n查看 npm 代理 → npm config get registry\n更换 npm 镜像 → npm config set registry=https://registry.npmmirror.com\n1 2 3 4 5 ## 安装依赖 node_modules npm i ## 让 ts 能够识别 .jpg .txt 等文件 /// \u0026lt;reference types=\u0026#34;vite/client\u0026#34; /\u0026gt; 安装官方推荐的 vscode 插件：\n梳理项目的结构：使用vite创建项目-CSDN博客\nnode_modules 目录用来存放第三方依赖包\npublic 是公共的静态资源目录\nsrc 是项目的源代码目录（程序员写的所有代码都要放在此目录下）\ngitignore 是 Git 的忽略文件\nindex.html 是 SPA 单页面应用程序中唯一的 HTML 页面\npackage.json 是项目的包管理配置文件\nassets 目录用来存放项目中所有的静态资源文件（css、fonts等）\ncomponents 目录用来存放项目中所有的自定义组件\nApp.vue 是项目的根组件\nindex.css 是项目的全局样式表文件\nmain.js 是整个项目的打包入口文件\n自己动手编写一个 App 组件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;你好啊！\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script lang=\u0026#34;ts\u0026#34;\u0026gt; export default { name:\u0026#39;App\u0026#39; //组件名 } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .app { background-color: #ddd; box-shadow: 0 0 10px; border-radius: 10px; padding: 20px; } \u0026lt;/style\u0026gt; 总结：\nVite 项目中，index.html 是项目的入口文件，在项目最外层。 加载 index.html 后，Vite 解析 \u0026lt;script type=\u0026quot;module\u0026quot; src=\u0026quot;xxx\u0026quot;\u0026gt; 指向的 JavaScript。 Vue3 中是通过 createApp 函数创建一个应用实例。 Vue 指令 Vue 会根据不同的 【指令】（带有 v- 前缀的特殊标签属性。），针对标签实现不同的 【功能】。\nv-html 插值表达式不具备解析标签的能力，v-html 相当于动态的设置元素的 innerHTML。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; {{m1}} {{m2}} \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { m1: \u0026#39;\u0026lt;a href=\u0026#34;https://www.baidu.com/\u0026#34;\u0026gt;百度官网\u0026lt;/a\u0026gt;\u0026#39;, m2: \u0026#39;\u0026lt;p\u0026gt;这是一个段落\u0026lt;/p\u0026gt;\u0026#39; } }) \u0026lt;/script\u0026gt; ------------------------------------------------------------------------------------- \u0026lt;div id = \u0026#39;app\u0026#39;\u0026gt; \u0026lt;div v-html=\u0026#34;m1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div v-html=\u0026#34;m2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; v-show 和 v-if ⭐ 作用：控制元素显示或者隐藏，其中 v-show 仅控制显示隐藏，而 v-if 本质上为条件渲染。\n语法：v-show/v-if = \u0026quot;表达式\u0026quot;\t表达式的值为 true 则显示该元素，为 false 则隐藏。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 500px; height: 300px; line-height: 300px; text-align: center; margin: 30px 0px 30px 200px; border: 5px solid black; font-size: 50px } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;div v-show=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-show\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#34;m1\u0026#34; class=\u0026#34;box\u0026#34;\u0026gt;v-if\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const test = new Vue({ el: \u0026#39;#test\u0026#39;, data: { m1: false, m2: true } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-show 通过切换 css 中的 display：none 来控制元素显示或隐藏，v-if 根据判断条件渲染或者销毁元素；由于渲染元素需要消耗资源，因此 v-show 适用于频繁切换显示隐藏效果的场景，如购物车列表，下拉栏等，v-if 适用于广告栏，提示登录或注册等情况。\nv-else 和 v-else-if 作用：辅助 v-if 进行判断渲染。\n语法： v-else\tv-else-if = \u0026quot;表达式\u0026quot;，需要紧挨着 v-if 一起使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p\u0026gt;姓名：{{name}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;gender === 1\u0026#34;\u0026gt;性别：♂ 男\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;性别：♀ 女\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;年龄：{{age + \u0026#39;岁\u0026#39;}}\u0026lt;/p\u0026gt; \u0026lt;p v-if=\u0026#34;math + chinese + english \u0026gt;= 270\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩优秀\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 240\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较好\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 210\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩一般\u0026lt;/p\u0026gt; \u0026lt;p v-else-if=\u0026#34;math + chinese + english \u0026gt;= 180\u0026#34;\u0026gt;数学{{math}}分，语文{{chinese}}分，英语{{english}}分，成绩较差\u0026lt;/p\u0026gt; \u0026lt;p v-else\u0026gt;完了\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { name: \u0026#39;张三\u0026#39;, age: 19, gender: 1, math: 95, chinese: 75, english: 86 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on ⭐ 缩写：@\n预期：Function | Inline Statement | Object\n参数：event\n修饰符：\n.stop - 调用 event.stopPropagation()。 .prevent - 调用 event.preventDefault()。 .capture - 添加事件侦听器时使用 capture 模式。 .self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。 .{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。 .native - 监听组件根元素的原生事件。 .once - 只触发一次回调。 .left - (2.2.0) 只当点击鼠标左键时触发。 .right - (2.2.0) 只当点击鼠标右键时触发。 .middle - (2.2.0) 只当点击鼠标中键时触发。 .passive - (2.3.0) 以 { passive: true } 模式添加侦听器 用法：\n绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略。\n用在普通元素上时，只能监听原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。\n在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 $event property：v-on:click=\u0026quot;handle('ok', $event)\u0026quot;。\n从 2.4.0 开始，v-on 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的。\n语法：\n① 事件名 = \u0026ldquo;内联语句\u0026rdquo;（添加监听）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @mouseenter=\u0026#34;count--\u0026#34;\u0026gt;-\u0026lt;/button\u0026gt; \u0026lt;span\u0026gt;{{ count }}\u0026lt;/span\u0026gt; \u0026lt;button v-on:click=\u0026#34;count++\u0026#34;\u0026gt;+\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { count: 100 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 拓展：使用 v-on 写一个抽取随机数字的程序。\n​int randomInt = (int)(Math.random() * (35 - 10 + 1)) + 10;\n// 输出结果为：10 到 34 的随机整数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;btn\u0026#34; @click=\u0026#34;count = Math.floor(Math.random() * (35 - 1 + 1)) + 1;\u0026#34;\u0026gt;抽取一个幸运同学\u0026lt;/button\u0026gt; {{count}} \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t = new Vue({ el: \u0026#39;#test\u0026#39;, data: { count: 0 } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ​\t② 事件名 = \u0026ldquo;methods中的函数名\u0026rdquo;（提供处理逻辑）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; h1 { color: rgb(50, 209, 50); } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;func\u0026#34;\u0026gt;切换显示隐藏\u0026lt;/button\u0026gt; \u0026lt;h1 v-show=\u0026#34;flag\u0026#34;\u0026gt;Vue\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app4 = new Vue({ el: \u0026#39;#app\u0026#39;, data: { flag: true }, methods: { func() { console.log(\u0026#39;执行函数func\u0026#39;) this.flag = !this.flag } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-on 调用传参 在 mothods 中创建带参方法，使用 v-on 绑定点击事件，完成自动贩售机案例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { border: 3px solid #000000; border-radius: 10px; padding: 20px; margin: 20px; width: 200px; text-align: center; } h3 { margin: 10px 0 20px 0; } p { margin-left: 70px; } button { margin: 5px 1px 0px 0px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;24小时自动贩售机\u0026lt;/h3\u0026gt; \u0026lt;button @click=\u0026#34;buy(3)\u0026#34;\u0026gt;可口可乐3元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(7)\u0026#34;\u0026gt;雀巢咖啡7元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(6)\u0026#34;\u0026gt;光明牛奶6元\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;buy(9)\u0026#34;\u0026gt;珍珠奶茶9元\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;当前余额：{{ money }}元\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { money: 100 }, methods: { buy(price) { this.money -= price } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-bind ⭐ 缩写：:\n预期：any (with argument) | Object (without argument)\n参数：attrOrProp (optional)\n修饰符：\n.prop - 作为一个 DOM property 绑定而不是作为 attribute 绑定。(差别在哪里？) .camel - (2.1.0+) 将 kebab-case attribute 名转换为 camelCase。(从 2.1.0 开始支持) .sync (2.3.0+) 语法糖，会扩展成一个更新父组件绑定值的 v-on 侦听器。 用法：\n动态的设置 html 的标签属性，如 src，url，title 等。\n在绑定 class 或 style attribute 时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。\n在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。\n没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。\n语法：\nv-bind : 属性名 = \u0026ldquo;表达式\u0026rdquo;。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;test\u0026#34;\u0026gt; \u0026lt;img v-bind:src=\u0026#34;url\u0026#34; :title=\u0026#34;title\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const t1 = new Vue({ el: \u0026#39;#test\u0026#39;, data: { url: \u0026#39;/MyPra/img/4f385747a4a5f33cbd1ee49224725e42a69dfd2852e57-BI49c0.png\u0026#39;, title: \u0026#39;水滴\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习：编写程序，通过按钮来切换图片。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img { height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026gt; 0\u0026#34; @click=\u0026#34;index--\u0026#34;\u0026gt;上一页\u0026lt;/button\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img :src=\u0026#34;list[index]\u0026#34; :title=\u0026#34;desc\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button v-show=\u0026#34;index \u0026lt; list.length - 1\u0026#34; @click=\u0026#34;index++\u0026#34;\u0026gt;下一页\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc: \u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 作用：基于数据循环，多次渲染整个元素，如数组、对象、数字等。\n语法：v-for = \u0026quot;(item, index) in 数组\u0026quot;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;p v-for=\u0026#34;(item, index) in list\u0026#34;\u0026gt;{{ item }} 索引号为 {{ index }}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [15, 64, 32, 48, 29] } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例：使用 v-for 渲染书籍列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div li span { line-height: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34;\u0026gt; \u0026lt;span\u0026gt;{{item.name}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;{{book[index].author}}\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;\u0026lt;button @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;删除\u0026lt;/button\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { book: [ { id: 1, name: \u0026#39;《红楼梦》\u0026#39;, author: \u0026#39;曹雪芹\u0026#39; }, { id: 2, name: \u0026#39;《西游记》\u0026#39;, author: \u0026#39;吴承恩\u0026#39; }, { id: 3, name: \u0026#39;《水浒传》\u0026#39;, author: \u0026#39;施耐庵\u0026#39; }, { id: 4, name: \u0026#39;《三国演义》\u0026#39;, author: \u0026#39;罗贯中\u0026#39; } ] }, methods: { del(id) { // 优先使用id来删除 console.log(\u0026#39;删除id为\u0026#39; + id + \u0026#39;的元素\u0026#39;); this.book = this.book.filter(item =\u0026gt; item.id !== id); } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; v-for 的默认行为会尝试原地修改元素（就地复用)。\n可以使用 key 属性给列表项添加的唯一标识，便于 Vue 进行列表项的正确排序复用。\n① key 的值只能是字符串或数字类型\n② key 的值必须具有唯一性\n③ 推荐使用 id 作为 key (唯一)，不推荐使用 index 作为 key (会变化，不对应)\nv-for 中的 key\n语法：key = \u0026quot;唯一标识\n在上述案例中，为第一个 li 元素加上 background: pink ，删除 li 元素，添加 key 属性进行比较。\n1 \u0026lt;li v-for=\u0026#34;(item, index) in book\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; v-model ⭐ 作用：给表单元素使用，双向数据绑定（视图变化数据自动更新），可以快速获取或设置表单元素内容。\n语法：v-model = '变量'\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; 账户：\u0026lt;input type=\u0026#34;text\u0026#34; v-model=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; 密码：\u0026lt;input type=\u0026#34;password\u0026#34; v-model=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;button @click=\u0026#34;login\u0026#34;\u0026gt;登录\u0026lt;/button\u0026gt; \u0026lt;button @click=\u0026#34;reset\u0026#34;\u0026gt;重置\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { username: \u0026#39;\u0026#39;, password: \u0026#39;\u0026#39; }, methods: { login() { console.log(this.username, this.password) }, reset() { this.username = \u0026#39;\u0026#39; this.password = \u0026#39;\u0026#39; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 案例练习 图片切换 编写程序，当鼠标滑入图片时切换图片，且能够循环切换。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; img{ height: 500px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;img :src=\u0026#34;list[index%5]\u0026#34; @mouseenter=\u0026#34;index++\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { index: 0, list: [ \u0026#39;./img/animal_01.png\u0026#39;, \u0026#39;./img/animal_02.png\u0026#39;, \u0026#39;./img/animal_03.png\u0026#39;, \u0026#39;./img/animal_04.png\u0026#39;, \u0026#39;./img/animal_05.png\u0026#39;, ], desc:\u0026#39;动物\u0026#39; } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 备忘录 案例模板：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;1.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;周三下午开会\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; 1 \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 编写程序，完成数据显示、数据统计、添加、删除、清空等功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/MyPra/major/index.css\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;备忘录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34; class=\u0026#34;noteMain\u0026#34;\u0026gt; \u0026lt;!-- 输入框 --\u0026gt; \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;备忘录\u0026lt;/h1\u0026gt; \u0026lt;input placeholder=\u0026#34;请输入...\u0026#34; class=\u0026#34;new-todo\u0026#34; v-model=\u0026#34;input\u0026#34; /\u0026gt; \u0026lt;button class=\u0026#34;add\u0026#34; @click=\u0026#34;add\u0026#34;\u0026gt;添加笔记\u0026lt;/button\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;!-- 列表区域 --\u0026gt; \u0026lt;section class=\u0026#34;main\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;todo-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;todo\u0026#34; v-for=\u0026#34;(item, index) in list\u0026#34; :key=\u0026#34;item.id\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;view\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;index\u0026#34;\u0026gt;{{index+1}}.\u0026lt;/span\u0026gt; \u0026lt;label\u0026gt;{{item.name}}\u0026lt;/label\u0026gt; \u0026lt;button class=\u0026#34;destroy\u0026#34; @click=\u0026#34;del(item.id)\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;!-- 统计和清空 --\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34; v-show=\u0026#34;list.length \u0026gt; 0\u0026#34;\u0026gt; \u0026lt;!-- 统计 --\u0026gt; \u0026lt;span class=\u0026#34;todo-count\u0026#34;\u0026gt;合 计:\u0026lt;strong\u0026gt; {{list.length}} \u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;!-- 清空 --\u0026gt; \u0026lt;button class=\u0026#34;clear-completed\u0026#34; @click=\u0026#34;clear\u0026#34;\u0026gt; 清空 \u0026lt;/button\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { list: [ { id: 1, name: \u0026#39;周三下午开会\u0026#39; }, { id: 2, name: \u0026#39;周末出去吃火锅\u0026#39; }, { id: 3, name: \u0026#39;周五前提交作业\u0026#39; }, { id: 4, name: \u0026#39;放假期间完成三门功课预习\u0026#39; } ], input:\u0026#39;\u0026#39; }, methods:{ del(id){ console.log(id) this.list = this.list.filter(item =\u0026gt; item.id !== id) }, add(){ if(this.input === \u0026#39;\u0026#39;){ alert(\u0026#39;请输入正确的内容\u0026#39;) return } this.list.unshift({ id: +new Date(), name: this.input }) this.input = \u0026#39;\u0026#39; }, clear(){ this.list = [] } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 选择题 在 Vue 中，被用来响应地更新 HTML 属性的指令是（）。\nA. v-on\nB. v-if\nC. v-bind\nD. v-model\n在 Vue 中，下列不属于条件渲染指令的是（）。\nA. v-if\nB. v-else\nC. v-show\nD. v-on\n在Vue中，下列关于Vue实例对象说法不正确的是（）。\nA. Vue 实例对象是通过 new Vue({ }) 方式创建的。\nB. Vue 实例对象只允许有唯一的一个根标签。\nC. 通过 methods 参数可以定义事件处理函数。\nD. Vue 实例对象中 data 数据不具有响应特性。\nVue中表单元素上数据双向绑定的指令是（）。\nA. v-if\nB. v-show\nC. v-model\nD. v-for\n在Vue中，以下表达式正确的是（）。\nA. {{ if(ok) return msg }}\nB. {{ var str = \u0026ldquo;你好\u0026rdquo; }}\nC. {{ ok ? \u0026ldquo;Yes\u0026rdquo; : \u0026ldquo;No\u0026rdquo; }}\nD. {{ msg, num }}\n在Vue中，以下关于 Vue 插值下列说法错误的是（）。\nA. {{ 文本 }} 用于插入与绑定文本。\nB. {{ 表达式 }} 可以使用 JavaScript 表达式进行简单的运算。\nC. {{ }} 中只支持单个表达式。\nD. {{ }} 支持语句和流控制。\n在Vue中，当遍历大数组或者做大量计算时，使用一下哪个选项效率最高。\nA. methods\nB. computed\nC. components\nD. data\nVue常用选项参数中必须的参数是（）。\nA. data\nB. el\nC. mothods\nD. filters\n在Vue中，下列说法正确的是（）。\nA. vue 是后端框架。\nB. vue 是基于 jQuery 开发的框架。\nC. vue 是前端框架。\nD. 以上说法都不对。\n在Vue中，下列说法错误的是（）。\n1 2 3 \u0026lt;div v-show=\u0026#39;flag\u0026#39;\u0026gt;使用v-show控制\u0026lt;/div\u0026gt; \u0026lt;div v-if=\u0026#39;flag\u0026#39;\u0026gt;使用v-if控制\u0026lt;/div\u0026gt; A. 当 flag 是 true 时，两个 div 都能显示出来。\nB. 当 flag 是 false 时，第一个 div 进行了渲染。\nC. 当 flag 是 false 时，第一个 div 设置了 display: none。\nD. 当 flag 是 false 时，第二个 div 设置了 visible: hidden。\n在 HTML 页面中，下列选项不属于键盘相关事件的是（）。\nA. onkeyup。\nB. onkeydown。\nC. oncontextmenu。\nD. onkeypress。\n在 Vue 中，能够实现页面单击事件绑定的代码是（ ）。\nA. v-on:enter。\nB. v-on:click。\nC. v-on:mouseenter。\nD. v-on:doubleclick。\nvue 实现随机抽题 见 JavaScript 第二章 WebAPI（二）2.1.1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 800px; height: 400px; border: 2px solid black; text-align: center; font-size: 36px; position: absolute; } .msg { height: 150px; } button { width: 100px; height: 50px; font-size: 30px; position: relative; top: 100px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34; id=\u0026#34;app\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;msg\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{{msg}}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;start\u0026#34; @click=\u0026#34;b1\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;开始\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;end\u0026#34; @click=\u0026#34;b2\u0026#34; :disabled=\u0026#34;this.ques.length === 1\u0026#34;\u0026gt;结束\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;/MyPra/vue.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const app = new Vue({ el: \u0026#39;#app\u0026#39;, data: { ques: [ \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, \u0026#39;v-on 的作用是什么？缩写是什么？\u0026#39;, \u0026#39;v-for 多次渲染元素的语法是？\u0026#39;, \u0026#39;:src=\u0026#34;list[index]\u0026#34; 使用的是哪个 vue 指令？\u0026#39;, \u0026#39;vue 中哪个指令可以实现数据双向绑定？\u0026#39;, ], random: 0, s1: 0, msg: \u0026#39;v-show 和 v-if 有什么区别？\u0026#39;, }, methods: { b1() { console.log(this.ques[2]); const start = document.querySelector(\u0026#39;.start\u0026#39;); const end = document.querySelector(\u0026#39;.end\u0026#39;); s1 = setInterval(this.r1, 30); }, b2() { clearInterval(s1); this.ques.splice(this.random, 1); }, r1(){ const p = document.querySelector(\u0026#39;p\u0026#39;); this.random = Math.floor(Math.random() * this.ques.length); this.msg = this.ques[this.random]; } } }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-02-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/wrapper_hu_a6a5009b2bf7a02b.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-vue-%E5%9F%BA%E7%A1%80/","title":"第一章 Vue 基础"},{"content":"Junit 单元测试 单元测试概述 单元测试就是针对最小的功能单元（方法），编写测试代码对其进行正确性测试。\n只能在 main 方法编写测试代码，去调用其他方法进行测试。\n无法实现自动化测试，一个方法测试失败，可能影响其他方法的测试。\n无法得到测试的报告，需要程序员自己去观察测试是否成功。\nJunit 框架 JUnit 是一个 Java 语言的单元测试框架。\n可以用来对方法进行测试，多数 Java 的开发环境都已经集成了 JUnit 作为单元测试的工具。\n可以灵活的编写测试代码，可以针对某个方法执行测试，也支持一键完成对全部方法的自动化测试，且各自独立。\nJunit 框架入门 开始测试 需求\n某个系统，有多个业务方法，请使用 Junit 单元测试框架，编写测试代码，完成对这些方法的正确性测试。\n具体步骤\n① 将 Junit 框架的 jar 包导入到项目中（注意：IDEA 集成了 Junit 框架，不需要我们自己手动导入了）。\n② 为需要测试的业务类，定义对应的测试类，并为每个业务方法编写对应的测试方法（测试方法必须是 公共的、无参的、无返回值的 ）。\n③ 测试方法上必须声明 @Test 注解 ，然后在测试方法中，编写代码调用被测试的业务方法进行测试。\n④ 选中测试方法，右键选择 \u0026quot; Junit 运行 \u0026ldquo;，如果 测试通过 则是 绿色 ，如果 测试失败 ，则是 红色 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package mytest; public class StringUtil { public static void main(String[] args) { } // 获取字符串长度 public static void printNumber(String name) { System.out.println(name + \u0026#34;的长度是：\u0026#34; + name.length()); } // 获取字符串最大索引 public static int getMaxIndex(String data){ if (data == null){ return -1; } return data.length(); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package mytest; import org.junit.Test; public class StringUtilTest { @Test public void testPrintNumber(){ StringUtil.printNumber(\u0026#34;test\u0026#34;); StringUtil.printNumber(null); } @Test public void testGetMaxIndex(){ System.out.println(StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); System.out.println(StringUtil.getMaxIndex(null)); } } 我们发现，在上述案例中，System.out.println(StringUtil.getMaxIndex(\u0026quot;test\u0026quot;)); 返回的结果为 4，实际结果应该为 3，但测试结果中却显示测试用例通过，此时可以使用断言机制。\nAssert 断言 编写代码时，我们总是会做出一些假设，断言就是用于在代码中捕捉这些假设，可以将断言看作是异常处理的一种高级形式。\n断言表示为一些布尔表达式，程序员相信在程序中的某个特定点该表达式值为真。可以在任何时候启用和禁用断言验证，因此可以在测试时启用断言，而在部署时禁用断言。同样，程序投入运行后，最终用户在遇到问题时可以重新启用断言。\nJunit 的各种断言介绍如下：\n函数 介绍 assertEquals(a, b) 测试 a 是否等于 b，a 和 b 必须是原始数据类型\n或者是实现了比较方法而且具有 equals 方法 assertFalse(a) 测试 a 是否为 false，a 是一个布尔类型值 assertTrue(a) 测试 a 是否为 true，a 是一个布尔类型值 assertNotNull(a) 测试 a 是否为非空，a 是一个对象或者 NULL assertNull(a) 测试 a 是否为空，a 是一个对象或者 NULL assertNotSame(a, b) 测试 a 和 b 是否没有引用同一个对象 assertSame(a, b) 测试 a 和 b 是否引用自同一个对象 assertEquals(a, b, c) 测试实际结果 c 是否与期望结果 b 一致，若不一致报错 a 1 2 3 4 5 6 7 8 9 10 // 使用方法 Assert.assertEquals(String message, long expected, long actual); @Test public void testGetMaxIndex() { System.out.println(StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); System.out.println(StringUtil.getMaxIndex(null)); Assert.assertEquals (\u0026#34;与正确结果不一致\u0026#34;, 3, StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package mytest; public class StringUtil { public static void main(String[] args) { } // 获取字符串长度 public static void printNumber(String name) { if (name == null) { System.out.println(0); return; } System.out.println(name + \u0026#34;的长度是：\u0026#34; + name.length()); } // 获取字符串最大索引 public static int getMaxIndex(String data) { if (data == null) { return -1; } return data.length() - 1; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package mytest; import org.junit.Assert; import org.junit.Test; public class StringUtilTest { @Test public void testPrintNumber() { StringUtil.printNumber(\u0026#34;test\u0026#34;); StringUtil.printNumber(\u0026#34;helloWorld\u0026#34;); StringUtil.printNumber(\u0026#34;你好\u0026#34;); StringUtil.printNumber(\u0026#34;printNumber\u0026#34;); StringUtil.printNumber(\u0026#34;length\u0026#34;); StringUtil.printNumber(null); } @Test public void testGetMaxIndex() { System.out.println(StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); System.out.println(StringUtil.getMaxIndex(null)); System.out.println(StringUtil.getMaxIndex(\u0026#34;helloWorld\u0026#34;)); System.out.println(StringUtil.getMaxIndex(\u0026#34;ohhhh\u0026#34;)); Assert.assertEquals (\u0026#34;与正确结果不一致\u0026#34;, 3, StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); } } Junit 框架的常见注解 Junit 4 版本 注解 说明 @Test 测试类中的方法必须用它修饰才能成为测试方法，才能启动执行 @Before 用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次 @After 用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次 @BeforeClass 用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次 @AfterClass 用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次 在测试方法执行前执行的方法，常用于：初始化资源。\n在测试方法执行完后再执行的方法，常用于：释放资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package mytest; import org.junit.*; import java.io.IOException; import java.net.Socket; public class StringUtilTest { private Socket socket1; private static Socket socket2; @Before public void before(){ System.out.println(\u0026#34;-------- before --------\u0026#34;); socket1 = new Socket(); } @After public void after() throws IOException { System.out.println(\u0026#34;--------- after --------\u0026#34;); socket1.close(); } @BeforeClass public static void beforeClass(){ System.out.println(\u0026#34;----- beforeClass ------\u0026#34;); socket2 = new Socket(); } @AfterClass public static void afterClass() throws IOException { System.out.println(\u0026#34;------ afterClass ------\u0026#34;); socket2.close(); } @Test public void testPrintNumber() { StringUtil.printNumber(\u0026#34;test\u0026#34;); StringUtil.printNumber(\u0026#34;helloWorld\u0026#34;); StringUtil.printNumber(\u0026#34;你好\u0026#34;); StringUtil.printNumber(\u0026#34;printNumber\u0026#34;); StringUtil.printNumber(\u0026#34;length\u0026#34;); StringUtil.printNumber(null); } @Test public void testGetMaxIndex() { System.out.println(StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); System.out.println(StringUtil.getMaxIndex(null)); System.out.println(StringUtil.getMaxIndex(\u0026#34;helloWorld\u0026#34;)); System.out.println(StringUtil.getMaxIndex(\u0026#34;ohhhh\u0026#34;)); Assert.assertEquals (\u0026#34;与正确结果不一致\u0026#34;, 3, StringUtil.getMaxIndex(\u0026#34;test\u0026#34;)); } } Junit 5 版本 注解 说明 @Test 测试类中的方法必须用它修饰才能成为测试方法，才能启动执行 @BeforeEach 用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次 @AfterEach 用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次 @BeforeAll 用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次 @AfterAll 用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次 Junit 使用 Calculator 类的创建 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package mytest; public class Calculator { public static int result; public void calculator(int n) { result = n; } public void add(int n) { result += n; } public void substract(int n) { // 期望实现 result -= n; result -= 1; } public void multiply(int n) { // 此方法未实现 } public void divide(int n) { result /= n; } public void square(int n) { result *= n; } public void squareRoot(int n) { for (; ; ) { result = n; } } public void clear() { result = 0; } public int getResult() { return result; } public static void main(String[] args) { Calculator c1 = new Calculator(); c1.calculator(100); System.out.println(c1.getResult()); System.out.println(\u0026#34;===== test =====\u0026#34;); c1.clear(); if (result == 0){ System.out.println(\u0026#34;clear方法正确\u0026#34;); }else { System.out.println(\u0026#34;clear方法有bug\u0026#34;); } c1.add(100); if (result == 100){ System.out.println(\u0026#34;add方法正确\u0026#34;); }else { System.out.println(\u0026#34;add方法有bug\u0026#34;); } c1.divide(0); System.out.println(result); } } Calculator 类测试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package mytest; import org.junit.Assert; import org.junit.Test; public class CalculatorTest { Calculator c1 = new Calculator(); @Test public void testAdd() { c1.calculator(100); c1.add(100); } @Test public void testDevide(){ c1.calculator(100); c1.divide(0); } @Test public void testSubstract(){ c1.calculator(100); c1.substract(50); Assert.assertEquals(\u0026#34;substract方法有bug\u0026#34;, 50, c1.getResult()); } } Junit 练习 三角形类型判断 请为三角形类型判断问题编写相应 java 代码，并利用 junit 完成代码的测试。\n编写方法，传入 3 个 int 类型的整数，判断输入的数字能否构成三角形，构成什么三角形？\n使用语句覆盖设计测试用例。\n求第二天的日期 请为求第二天的日期问题编写相应 java 代码，并利用 junit 完成代码的测试。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 switch (month) { case 1, 3, 5, 7, 8, 10: if (day == 31) { return year + \u0026#34;年\u0026#34; + (month + 1) + \u0026#34;月\u0026#34; + 1 + \u0026#34;日\u0026#34;; } else { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + (day + 1) + \u0026#34;日\u0026#34;; } case 2: if ((year % 4 == 0) \u0026amp;\u0026amp; (year % 100 != 0) || (year % 400 == 0)) { if (day \u0026gt;= 30) { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月没有\u0026#34; + day + \u0026#34;天\u0026#34;; } else if (day == 29) { return year + \u0026#34;年\u0026#34; + (month + 1) + \u0026#34;月\u0026#34; + 1 + \u0026#34;日\u0026#34;;） } else { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + (day + 1) + \u0026#34;日\u0026#34;; } } else { if (day \u0026gt;= 29) { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月没有\u0026#34; + day + \u0026#34;天\u0026#34;; } else if (day == 28) { return year + \u0026#34;年\u0026#34; + (month + 1) + \u0026#34;月\u0026#34; + 1 + \u0026#34;日\u0026#34;; } else { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + (day + 1) + \u0026#34;日\u0026#34;; } } case 4, 6, 9, 11: if (day \u0026gt;= 31) { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月没有\u0026#34; + day + \u0026#34;天\u0026#34;; } else if (day == 30) { return year + \u0026#34;年\u0026#34; + (month + 1) + \u0026#34;月\u0026#34; + 1 + \u0026#34;日\u0026#34;; } else { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + (day + 1) + \u0026#34;日\u0026#34;; } case 12: if (day == 31) { return (year + 1) + \u0026#34;年\u0026#34; + 1 + \u0026#34;月\u0026#34; + 1 + \u0026#34;日\u0026#34;; } else { return year + \u0026#34;年\u0026#34; + month + \u0026#34;月\u0026#34; + (day + 1) + \u0026#34;日\u0026#34;; } default: return \u0026#34;输入错误\u0026#34;; } ​\tCalendar 类是一个抽象类，它为特定瞬间与 YEAR 、 MONTH 、 DAY_OF_MONTH 、 HOUR 等日历字段之间的转换提供了一些方法，并为操作日历字段（如获得下星期的日期） 提供了一些方法。 ​ 创建 Calendar 对象不能使用 new 关键字，因为 Calendar 类是一个抽象类，但是它提供了一个 getInstance() 方法来获得 Calendar 类的对象。 getInstance() 方法返回一个 Calendar 对象，其日历字段已由当前日期和时间初始化。 ​\tCalendar对象实例化演示：\n1 Calendar c = Calendar.getInstance(); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class NextDayCalculator { public static String getNextDay(int year, int month, int day) { Calendar calendar = Calendar.getInstance(); calendar.set(year, month - 1, day); calendar.add(Calendar.DAY_OF_MONTH, 1); int nextYear = calendar.get(Calendar.YEAR); int nextMonth = calendar.get(Calendar.MONTH) + 1; int nextDay = calendar.get(Calendar.DAY_OF_MONTH); return nextYear + \u0026#34;-\u0026#34; + nextMonth + \u0026#34;-\u0026#34; + nextDay; } public static void main(String[] args) { System.out.println(NextDayCalculator.getNextDay(2024, 2, 28)); } } ","date":"2024-11-17T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/","title":"第七章 单元测试"},{"content":"原理与环境配置 原理 Selenium 是一套 Web 网站的程序自动化操作解决方案。\n通过它，我们可以写出自动化程序，像人一样在浏览器里操作 web 界面。 比如点击界面按钮，在文本框中输入文字等操作。而且还能从 web 界面获取信息。 比如获取火车、汽车票务信息，招聘网站职位信息，财经网站股票价格信息等等，然后用程序进行分析处理。\nSelenium 的自动化原理是这样的：\n从上图可以看出：我们写的自动化程序需要使用 客户端库，程序的自动化请求都是通过这个库里面的编程接口发送给浏览器。\n比如，我们要模拟用户点击界面按钮， 自动化程序里面就应该调用客户端库相应的函数，就会发送 点击元素 的请求给下方的 浏览器驱动。 然后，浏览器驱动再转发这个请求给浏览器。\n这个自动化程序发送给浏览器驱动的请求是 HTTP请求。\n客户端库从哪里来的？ 是Selenium组织提供的。Selenium 组织提供了多种编程语言的 Selenium 客户端库， 包括 java，python，js，ruby 等，方便不同编程语言的开发者使用。我们只需要安装好客户端库，调用这些库，就可以发出自动化请求给浏览器了。\n1 2 3 4 5 6 7 8 9 10 11 浏览器驱动也是一个独立的程序，是由浏览器厂商提供的，不同的浏览器需要不同的浏览器驱动。 比如Chrome浏览器和火狐浏览器有各自不同的驱动程序。 浏览器驱动接收到我们的自动化程序发送的界面操作请求后，会转发请求给浏览器， 让浏览器去执行对应的自动化操作。 浏览器执行完操作后，会将自动化的结果返回给浏览器驱动， 浏览器驱动再通过HTTP响应的消息返回给我们的自动化程序的客户端库。 自动化程序的客户端库接收到响应后，将结果转化为数据对象返回给我们的代码。 我们的程序就可以知道这次自动化操作的结果如何了。 selenium 自动化流程如下：\n自动化程序调用 Selenium 客户端库函数（比如点击按钮元素）。\n客户端库会发送 Selenium 命令给浏览器的驱动程序。\n浏览器驱动程序接收到命令后，驱动浏览器去执行命令。\n浏览器执行命令。\n浏览器驱动程序获取命令执行的结果，返回给我们自动化程序。\n自动化程序对返回结果进行处理。\n环境配置 安装 python 和 pycharm python 下载地址：https://www.python.org/，下载成功后，双击安装程序，开始安装。\n在命令行中直接运行 python，出现以下类似的代码则表示安装成功。\nPycharm 下载地址：https://www.jetbrains.com/pycharm/\n安装 Selenium 客户端库 不同的编程语言选择不同的Selenium客户端库。\n对应我们 Python 语言来说，Selenium客户端库的安装非常简单，用 pip 命令即可。\n打开命令行程序，运行如下命令：\n1 pip install selenium 如果安装不了，可能是网络问题，可以指定使用国内的清华大学源。\n1 pip install selenium -i https://pypi.tuna.tsinghua.edu.cn/simple 安装 Chrome 浏览器 浏览器驱动 是和 浏览器对应的。不同的浏览器需要选择不同的浏览器驱动。\n目前主流的浏览器中，谷歌 Chrome 浏览器对 Selenium 自动化的支持更加成熟一些。\n可以点击这里，下载安装谷歌浏览器\n安装 Chrome 浏览器驱动 Chrome 浏览器安装好以后，接下来就是安装浏览器驱动 Chrome Driver。\n点击这里： Chrome driver 官方下载地址，选择当前的版本的浏览器对应的驱动。\n安装 Edge 浏览器驱动 如果你选择微软 Edge浏览器做自动化，只需要安装 Edge浏览器驱动，如下：\n点击这里打开Edge浏览器驱动下载页面，选择在 Stable Channel 下载（下图箭头处）\n根据你的电脑运行的平台，选择对应的链接，\n比如：如果你的电脑是 x86架构的CPU（目前的AMD，Intel CPU 都是x86架构）,运行的 Windows系统，现在Windows操作系统基本都是64位，就选择 x64 。 x86 链接对应 32位的浏览器驱动，其实也可以，因为 Windows 操作系统目前都兼容运行32位的程序。\nselenium 基础 简单示例 通过代码自动打开 Chrome 浏览器，浏览百度网站。\n1 2 3 4 5 6 7 8 9 10 11 12 from selenium import webdriver from selenium.webdriver.chrome.service import Service # 创建 WebDriver 对象，指明使用chrome浏览器驱动 wd = webdriver.Chrome(service=Service(r\u0026#39;E:\\chromedriver-win64\\chromedriver.exe\u0026#39;)) # 调用WebDriver 对象的get方法 可以让浏览器打开指定网址 wd.get(\u0026#39;https://www.baidu.com\u0026#39;) # 程序运行完会自动关闭浏览器，就是很多人说的闪退 # 这里加入等待用户输入，防止闪退 input(\u0026#39;等待回车键结束程序\u0026#39;) 其中，第 5 行代码，就会运行浏览器驱动，并且运行Chrome浏览器\n1 wd = webdriver.Chrome(service=Service(r\u0026#39;d:\\tools\\chromedriver.exe\u0026#39;)) 注意，等号右边返回的是 WebDriver 类型的对象，我们可以通过这个对象来操控浏览器，比如打开网址、选择界面元素等。\n而第 8 行代码，就是使用 WebDriver 的 get 方法打开网址百度。\n1 wd.get(\u0026#39;https://www.baidu.com\u0026#39;) 执行上面这行代码时，自动化程序就发起了打开百度网址的请求消息 ，通过浏览器驱动， 给 Chrome 浏览器。\nChome 浏览器接收到该请求后，就会打开百度网址，通过浏览器驱动，告诉自动化程序打开成功。\n注意，执行完自动化代码，如果想关闭浏览器窗口可以调用 WebDriver 对象的 quit 方法，像这样 wd.quit()。\n省略浏览器驱动路径 前面，我们的代码创建 WebDriver对象时，需要指定浏览器驱动路径，比如\n1 2 from selenium.webdriver.chrome.service import Service wd = webdriver.Chrome(service=Service(r\u0026#39;d:\\tools\\chromedriver.exe\u0026#39;)) 我们可以把浏览器驱所在目录加入环境变量 Path ， 写代码时，就可以无需指定浏览器驱动路径了。\n1 wd = webdriver.Chrome() selenium 选择元素 根据 id 选择元素 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from selenium import webdriver from selenium.webdriver.common.by import By # 创建 WebDriver 对象 wd = webdriver.Chrome() wd.get(\u0026#39;https://www.baidu.com\u0026#39;) # 根据id选择元素，返回的就是该元素对应的WebElement对象 element = wd.find_element(By.ID, \u0026#39;kw\u0026#39;) # 通过该 WebElement对象，就可以对页面元素进行操作了 # 比如输入字符串到这个输入框里 element.send_keys(\u0026#39;三一\u0026#39;) # 点击搜索按钮 wd.find_element(By.ID, \u0026#39;su\u0026#39;).click() # 加入等待用户输入，防止闪退 input() 其中，element = wd.find_element(By.ID, \u0026lsquo;kw\u0026rsquo;) 使用了 WebDriver 对象的 find_element 方法，这行代码运行时，会发起一个请求通过浏览器驱动转发给浏览器，让浏览器选择一个 id 为 kw 的元素。\n浏览器找到 id 为 kw 的元素后，将结果通过浏览器驱动返回给自动化程序，find_element 方法会返回一个 WebElement 类型的对象。\n这个 WebElement 对象可以看成是对应页面元素的遥控器，通过这个WebElement对象，就可以操控对应的界面元素。\n根据 class 或 tagName 选择元素 WebDriver 实例对象的 get 方法可以让浏览器打开指定网址，打开 VScode，创建 html 页面。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .animal{ color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;土豆\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;洋葱\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;白菜\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;狮子\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;老虎\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;山羊\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; console.log(document.getElementsByClassName(\u0026#39;animal\u0026#39;)[0]) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; 在文件夹中找到该页面文件所在的位置，使用 wd.get 打开。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 from selenium import webdriver from selenium.webdriver.common.by import By # 创建 WebDriver 实例对象，指明使用 chrome 浏览器驱动 wd = webdriver.Chrome() # WebDriver 实例对象的 get 方法可以让浏览器打开指定网址 wd.get(\u0026#39;D:\\VSCodeProjects\\VSCodeP1\\h4.html\u0026#39;) # 根据 class name 选择元素，返回的是 一个列表 # 里面 都是 class 属性值为 animal 的元素对应的 WebElement 对象 elements = wd.find_elements(By.CLASS_NAME, \u0026#39;animal\u0026#39;) spans = wd.find_elements(By.TAG_NAME, \u0026#39;span\u0026#39;) print(animals) print(spans) # 取出列表中的每个 WebElement 对象，打印出其 text 属性的值 # text 属性就是该 WebElement 对象对应的元素在网页中的文本内容 for i in animals: print(i.text) print(\u0026#39;--------------------\u0026#39;) for i in spans: print(i.text) 使用 find_elements 选择符合条件的所有元素，如果没有符合条件的元素，返回空列表。\n使用 find_element 选择符合条件的第一个元素，如果没有符合条件的元素，抛出异常。\n根据 webElement 选择元素 不仅 WebDriver 对象有选择元素 的方法， WebElement对象也有选择元素的方法。\nWebElement 对象也可以调用 find_elements， find_element 之类的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .animal{ color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;土豆\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;洋葱\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;plant\u0026#34;\u0026gt;\u0026lt;span\u0026gt;白菜\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;狮子\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;老虎\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;山羊\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;豹子\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;大象\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;animal\u0026#34;\u0026gt;\u0026lt;span\u0026gt;河马\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; console.log(document.getElementsByClassName(\u0026#39;animal\u0026#39;)[0]) \u0026lt;/script\u0026gt; \u0026lt;/html\u0026gt; WebDriver 对象选择元素的范围是整个 web 页面， 而 WebElement 对象选择元素的范围是该元素的内部。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.get(\u0026#39;D:\\VSCodeProjects\\VSCodeP1\\h4.html\u0026#39;) # animals = wd.find_elements(By.CLASS_NAME, \u0026#39;animal\u0026#39;) # for i in animals: print(i.text) container = wd.find_element(By.CLASS_NAME, \u0026#39;container\u0026#39;) containerAnimals = container.find_elements(By.TAG_NAME, \u0026#39;span\u0026#39;) print(containerAnimals) for i in containerAnimals: print(i.text) selenium 隐式等待 1 2 3 4 5 6 7 8 9 10 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.get(\u0026#39;https://www.byhy.net/cdn2/files/selenium/stock1.html\u0026#39;) wd.find_element(By.ID, \u0026#39;kw\u0026#39;).send_keys(\u0026#39;长沙\u0026#39;) wd.find_element(By.ID, \u0026#39;go\u0026#39;).click() print(wd.find_element(By.ID, \u0026#39;1\u0026#39;).text) wd.quit() 在我们进行网页操作的时候，有的元素内容不是可以立即出现的，可能会等待一段时间。\n比如我们点击搜索后，浏览器需要把这个搜索请求发送给服务器，服务器进行处理后，再把搜索结果返回给我们。\n所以，从点击搜索到得到结果，需要一定的时间，只是通常服务器的处理比较快，我们感觉好像是立即出现了搜索结果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import time from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.get(\u0026#39;https://www.byhy.net/cdn2/files/selenium/stock1.html\u0026#39;) wd.find_element(By.ID, \u0026#39;kw\u0026#39;).send_keys(\u0026#39;长沙\u0026#39;) wd.find_element(By.ID, \u0026#39;go\u0026#39;).click() time.sleep(1) print(wd.find_element(By.ID, \u0026#39;1\u0026#39;).text) # while True: # try: # print(wd.find_element(By.ID, \u0026#39;1\u0026#39;).text) # break # except: # time.sleep(1) wd.quit() Selenium 的 Webdriver 对象有个方法叫 implicitly_wait ，可以称之为隐式等待，或者 全局等待。\n该方法接受一个参数，用来指定最大等待时长，如果我们加入如下代码：\n1 wd.implicitly_wait(10) 那么后续所有的 find_element 或者 find_elements 之类的方法调用都会采用以下策略：如果找不到元素， 每隔半秒钟再去界面上查看一次，直到找到该元素或者超过最大时长。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import time from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.implicitly_wait(10) wd.get(\u0026#39;https://www.byhy.net/cdn2/files/selenium/stock1.html\u0026#39;) wd.find_element(By.ID, \u0026#39;kw\u0026#39;).send_keys(\u0026#39;长沙\u0026#39;) wd.find_element(By.ID, \u0026#39;go\u0026#39;).click() print(wd.find_element(By.ID, \u0026#39;1\u0026#39;).text) wd.quit() selenium 操作元素 点击元素 输入字符串就是调用元素 WebElement 对象的 click 方法\n1 2 element = wd.find_element(By.ID, \u0026#39;go\u0026#39;) element.click() 输入字符串 输入字符串就是调用元素 WebElement 对象的 send_keys 方法，如果要输入的输入框中已有字符，则需要使用 clear 方法清除内容。\n1 2 3 element = wd.find_element(By.ID, \u0026#39;kw\u0026#39;) element.clear() element.send_keys(\u0026#39;长沙\u0026#39;) 获取元素信息 获取元素的文本内容 通过 WebElement 对象的 text 属性，可以获取元素展示在界面上的文本内容。\n1 2 element = wd.find_element(By.ID, \u0026#39;animal\u0026#39;) print(element.text) 获取元素属性 通过 WebElement 对象的 get_attribute 方法来获取元素的属性值。\n比如要获取元素属性 class 的值，就可以使用 element.get_attribute(\u0026lsquo;class\u0026rsquo;)。\n1 2 element = wd.find_element(By.ID, \u0026#39;input_name\u0026#39;) print(element.get_attribute(\u0026#39;class\u0026#39;)) 获取整个元素对应的 HTML 获取整个元素对应的 HTML 文本内容，可以使用 element.get_attribute(\u0026lsquo;outerHTML\u0026rsquo;)。\n获取某个元素内部的 HTML 文本内容，可以使用 element.get_attribute(\u0026lsquo;innerHTML\u0026rsquo;)。\n获取输入框里面的文字 对于 input 输入框的元素，要获取里面的输入文本，用 text 属性是不行的，这时可以使用 element.get_attribute(\u0026lsquo;value\u0026rsquo;)。\n1 2 element = wd.find_element(By.ID, \u0026#34;input1\u0026#34;) print(element.get_attribute(\u0026#39;value\u0026#39;)) # 获取输入框中的文本 获取元素文本内容 通过 WebElement 对象的 text 属性，可以获取元素展示在界面上的文本内容。\n但是有时候元素的文本内容没有展示在界面上，或者没有完全完全展示在界面上。 这时，用 WebElement 对象的 text 属性获取文本内容就会有问题。\n可以使用 element.get_attribute(\u0026lsquo;innerText\u0026rsquo;) 或者 element.get_attribute(\u0026rsquo;textContent\u0026rsquo;)。\n使用 innerText 和 textContent 的区别是，前者只显示元素可见文本内容，后者显示所有内容（包括display属性为none的部分）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.get(\u0026#39;https://www.byhy.net/cdn2/files/selenium/stock1.html\u0026#39;) # 获取元素的文本内容 print(wd.find_element(By.TAG_NAME, \u0026#39;nav\u0026#39;).text) # 获取元素属性 print(wd.find_elements(By.TAG_NAME, \u0026#39;input\u0026#39;)[0].get_attribute(\u0026#39;style\u0026#39;)) # 获取整个元素对应的 HTML print(wd.find_elements(By.TAG_NAME, \u0026#39;input\u0026#39;)[0].get_attribute(\u0026#39;outerHTML\u0026#39;)) print(wd.find_elements(By.CLASS_NAME, \u0026#39;result-item\u0026#39;)[0].find_elements(By.TAG_NAME, \u0026#39;p\u0026#39;)[1].get_attribute(\u0026#39;innerHTML\u0026#39;)) # 获取输入框里面的文字 print(wd.find_elements(By.TAG_NAME, \u0026#39;input\u0026#39;)[0].get_attribute(\u0026#39;value\u0026#39;)) # 获取元素文本内容 print(wd.find_element(By.TAG_NAME, \u0026#39;strong\u0026#39;).get_attribute(\u0026#39;innerText\u0026#39;)) print(wd.find_element(By.TAG_NAME, \u0026#39;strong\u0026#39;).get_attribute(\u0026#39;textContent\u0026#39;)) wd.quit() CSS 表达式 根据 tagName、id、class 选择元素 通过 CSS Selector 选择元素的方法是：\n1 2 3 4 # 选择单个元素 find_element(By.CSS_SELECTOR, CSS Selector参数) # 选择所有元素 find_elements(By.CSS_SELECTOR, CSS Selector参数) 要选择 所有的 tagName 为 div 的元素，就可以是这样：\n1 2 3 elements = wd.find_elements(By.CSS_SELECTOR, \u0026#39;div\u0026#39;) # 等价于 elements = wd.find_elements(By.TAG_NAME, \u0026#39;div\u0026#39;) 以百度为例，通过 CSS Selector 选择元素。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.implicitly_wait(3) wd.get(\u0026#39;https://www.baidu.com\u0026#39;) # 通过 tagName 获取 print(wd.find_elements(By.CSS_SELECTOR, \u0026#39;meta\u0026#39;)[0].get_attribute(\u0026#39;content\u0026#39;)) # 通过 class 获取 print(wd.find_elements(By.CSS_SELECTOR, \u0026#39;.title-content-title\u0026#39;)[0].get_attribute(\u0026#39;innerHTML\u0026#39;)) # 通过 id 获取 print(wd.find_element(By.CSS_SELECTOR, \u0026#39;#s-top-left\u0026#39;).find_elements(By.CSS_SELECTOR, \u0026#39;.mnav\u0026#39;)[0].text) wd.quit() 选择子元素和后代元素 如果元素2是元素1的直接子元素， CSS Selector 选择后代元素的语法为：\n1 元素1 \u0026gt; 元素2 \u0026gt; 元素3 \u0026gt; 元素4 如果元素2是元素1的后代元素， CSS Selector 选择后代元素的语法为：\n1 元素1 元素2 创建 html 页面如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#39;container\u0026#39;\u0026gt; \u0026lt;div id=\u0026#39;layer1\u0026#39;\u0026gt; \u0026lt;div id=\u0026#39;inner11\u0026#39;\u0026gt; \u0026lt;span\u0026gt;内层11\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#39;inner12\u0026#39;\u0026gt; \u0026lt;span\u0026gt;内层12\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#39;layer2\u0026#39;\u0026gt; \u0026lt;div id=\u0026#39;inner21\u0026#39;\u0026gt; \u0026lt;span\u0026gt;内层21\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;http://www.baidu.com\u0026#34;\u0026gt;百度一下\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在该页面中选中 span 标签下的内层11。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.implicitly_wait(3) wd.get(\u0026#39;D:\\VSCodeProjects\\VSCodeP1\\h4.html\u0026#39;) # 直接子元素 print(wd.find_element(By.CSS_SELECTOR, \u0026#39;#container \u0026gt; #layer1 \u0026gt; #inner11 \u0026gt; span\u0026#39;).text) # 后代元素 print(wd.find_element(By.CSS_SELECTOR, \u0026#39;#container #inner11\u0026#39;).text) wd.quit() 根据属性选择元素 css 选择器支持通过任何属性来选择元素，语法是用一个方括号 []。\n1 2 a = wd.find_element(By.CSS_SELECTOR, \u0026#39;[href=\u0026#34;https://www.baidu.com\u0026#34;]\u0026#39;) print(a.get_attribute(\u0026#39;outerHTML\u0026#39;)) 当然，前面可以加上标签名的限制，比如 div[class=\u0026lsquo;SKnet\u0026rsquo;] 表示选择所有标签名为 div，且 class 属性值为 SKnet 的元素。\n属性值用单引号，双引号都可以。\n根据属性选择，还可以不指定属性值，比如 [href] ， 表示选择所有具有属性名为 href 的元素，不管它们的值是什么。\nCSS 还可以选择属性值包含某个字符串的元素。\n比如，要选择 a 节点，里面的 href 属性包含了 baidu 字符串，就可以这样写：\n1 2 a = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href*=\u0026#34;baidu\u0026#34;]\u0026#39;) print(a.get_attribute(\u0026#39;outerHTML\u0026#39;)) 还可以选择属性值以某个字符串开头的元素。\n比如，要选择 a 节点，里面的 href 属性以 https 开头，就可以这样写：\n1 2 a = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href^=\u0026#34;https\u0026#34;]\u0026#39;) print(a.get_attribute(\u0026#39;outerHTML\u0026#39;)) 还可以选择属性值以某个字符串结尾的元素。\n比如，要选择 a 节点，里面的 href 属性以 .com 结尾，就可以这样写：\n1 2 a4 = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href$=\u0026#34;.com\u0026#34;]\u0026#39;) print(a4.get_attribute(\u0026#39;outerHTML\u0026#39;)) 如果一个元素具有多个属性。\n1 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; CSS 选择器可以指定选择的元素要同时具有多个属性的限制：\n1 2 a = wd.find_element(By.CSS_SELECTOR, \u0026#39;meta[name=\u0026#34;viewport\u0026#34;][content^=\u0026#34;width\u0026#34;][content$=\u0026#34;1.0\u0026#34;]\u0026#39;) print(a.get_attribute(\u0026#39;outerHTML\u0026#39;)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.implicitly_wait(3) wd.get(\u0026#39;D:\\VSCodeProjects\\VSCodeP1\\h4.html\u0026#39;) # 属性 href 值为 https://www.baidu.com a1 = wd.find_element(By.CSS_SELECTOR, \u0026#39;[href=\u0026#34;https://www.baidu.com\u0026#34;]\u0026#39;) print(a1.get_attribute(\u0026#39;outerHTML\u0026#39;)) # 包含 baidu a2 = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href*=\u0026#34;baidu\u0026#34;]\u0026#39;) print(a2.get_attribute(\u0026#39;outerHTML\u0026#39;)) # 以 https 开头 a3 = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href^=\u0026#34;https\u0026#34;]\u0026#39;) print(a3.get_attribute(\u0026#39;outerHTML\u0026#39;)) # 以 .com 结尾 a4 = wd.find_element(By.CSS_SELECTOR, \u0026#39;a[href$=\u0026#34;.com\u0026#34;]\u0026#39;) print(a4.get_attribute(\u0026#39;outerHTML\u0026#39;)) # 同时指定多个限制 a5 = wd.find_element(By.CSS_SELECTOR, \u0026#39;meta[name=\u0026#34;viewport\u0026#34;][content^=\u0026#34;width\u0026#34;][content$=\u0026#34;1.0\u0026#34;]\u0026#39;) print(a5.get_attribute(\u0026#39;outerHTML\u0026#39;)) wd.quit() 其他方法 窗口大小 获取窗口大小 1 webdriver.Chrome().get_window_size() 改变窗口大小 1 webdriver.Chrome().set_window_size(x, y) 获取当前窗口标题 浏览网页的时候，我们的窗口标题是不断变化的，可以使用WebDriver的title属性来获取当前窗口的标题栏字符串。\n1 webdriver.Chrome().title 获取当前窗口 url 1 2 3 4 5 6 7 8 9 10 11 12 13 from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) # 打开网站 driver.get(\u0026#39;https://www.163.com\u0026#39;) # 获取网站标题栏文本 print(driver.title) # 获取网站地址栏文本 print(driver.current_url) 截屏 有的时候，我们需要把浏览器屏幕内容保存为图片文件。\n比如，做自动化测试时，一个测试用例检查点发现错误，我们可以截屏为文件，以便测试结束时进行人工核查。\n可以使用 WebDriver 的 get_screenshot_as_file 方法来截屏并保存为图片。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 方法1 from selenium import webdriver driver = webdriver.Chrome() driver.implicitly_wait(5) # 打开网站 driver.get(\u0026#39;https://www.baidu.com/\u0026#39;) # 截屏保存为图片文件 driver.get_screenshot_as_file(\u0026#39;1.png\u0026#39;) # 方法2 from selenium import webdriver driver = webdriver.Chrome() driver.get(\u0026#39;https://www.baidu.com/\u0026#39;) # 截图保存在本地 x = driver.get_screenshot_as_png() # 将二进制保存成图片形式 file = open(\u0026#39;2.png\u0026#39;, \u0026#34;wb\u0026#34;) file.write(x) 练习 使用 selenium 登录 bysms 系统。\n使用 selenium 查找并在控制台打印 bysms 系统中所有包含 \u0026ldquo;深圳\u0026rdquo; 的客户。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from selenium import webdriver from selenium.webdriver.common.by import By wd = webdriver.Chrome() wd.implicitly_wait(3) wd.get(\u0026#39;http://127.0.0.1:8080/mgr/sign.html\u0026#39;) wd.find_element(By.CSS_SELECTOR, \u0026#39;input[type=\u0026#34;username\u0026#34;][id=\u0026#34;username\u0026#34;]\u0026#39;).send_keys(\u0026#39;byhy\u0026#39;) wd.find_element(By.CSS_SELECTOR, \u0026#39;input[type=\u0026#34;password\u0026#34;][id=\u0026#34;password\u0026#34;]\u0026#39;).send_keys(\u0026#39;88888888\u0026#39;) wd.find_element(By.CSS_SELECTOR, \u0026#39;button[class=\u0026#34;btn btn-primary btn-block btn-flat\u0026#34;]\u0026#39;).click() wd.find_element(By.CSS_SELECTOR, \u0026#39;input[placeholder=\u0026#34;请输入关键词搜索\u0026#34;]\u0026#39;).send_keys(\u0026#39;深圳\\n\u0026#39;) lists = wd.find_elements(By.CSS_SELECTOR, \u0026#39;div[class=\u0026#34;search-result-item\u0026#34;] \u0026gt; div[class=\u0026#34;search-result-item-field\u0026#34;]\u0026#39;) print(lists) for i in lists: print(i.text) wd.close() ","date":"2024-11-10T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-web-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-web-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/","title":"第六章 Web 自动化测试"},{"content":"性能测试概述 性能测试简介 性能测试是通过性能测试工具模拟 正常、峰值和异常负载条件 来对系统的各项性能指标进行测试。性能测试能够验证软件系统是否达到了用户期望的性能需求，同时也可以发现系统中可能存在的性能瓶颈和缺陷，从而优化系统的性能。\n性能测试的目的主要由以下 4 个方面：\n验证系统性能是否满足预期的性能需求，包括系统的执行效率、稳定性、可靠性、安全性等。\n分析软件系统在各种负载水平下的运行状态，提高性能调整效率。\n识别系统缺陷，寻找系统中可能存在的性能问题，定位系统性能瓶颈并解决问题。\n进行系统调优，通过重复的、长时间的测试，找出系统中存在的隐含问题，改善并优化系统的性能。\n性能测试种类 系统的性能覆盖面非常广，包括执行效率、资源占用、系统稳定性、安全性、兼容性、可靠性、可扩展性等。\n性能测试是一个统称，它包含很多种类，例如基准测试、负载测试、压力测试、并发测试、配置测试、稳定性测试、容量测试等。\n测试类型 描述 基准测试 监测被测系统在较低压力下的运行状况并记录相关数据 负载测试 评估被测系统在预期的不同负载下的行为 压力测试 用于评估被测系统在高于预期、高于指定容量负载需求\n或低于最少需求资源的条件下的行为 并发测试 评估被测系统的某些特定操作同时发生时的性能表现 配置测试 测试各种软硬件环境对系统性能的影响 稳定性测试 测试系统在强负载条件下能否长时间稳定运行 容量测试 测试系统能支持的最大用户数、最大存储量等 基准测试 基准测试又称单用户测试，主要用于监测被测系统在较低压力下的运行状况并记录相关数据。当性能测试环境确定以后，通常选取业务模型中的重要业务做基准测试，对被测系统施加一定压力，从而获取被测系统在单用户运行情况下的各项性能指标，为多用户并发测试和混合场景测试等提供参考依据。\n例如，同一个用户登录 10 次软件以测试登录所需的时间，最后得出 10 次登录平均所需时间为 3 秒。\n例如，对于某商城 1.0 版本，模拟 5 万用户同时下单，硬件配置为 8 个 CPU、16 GB 内存，下单响应时间为 3 秒。以此基准线为标准，不改变其他条件，分别模拟 10 万、20 万等多组用户的下单响应时间。\n负载测试 负载测试用于评估被测系统在预期的不同负载下的行为。负载测试关注系统处理不同负载的能力，这些负载可通过控制并发用户或者进程的数量来实现。\n例如，一个软件系统的响应时间要求不超过 2 秒，如果在这个前提下不断增加用户访问量，系统的响应时间就会变长。假设当访问量超过 1 万人时系统的响应时间超过 2 秒，那么就可以确定在系统响应时间不超过 2 秒的前提下，系统的最大负载量是 1 万人。\n压力测试 压力测试用于评估被测系统在高于预期、高于指定容量负载需求或低于最少需求资源的条件下的行为。进行压力测试时通常采用逐步增加系统负载的方式，使系统某些资源达到饱和甚至失效，从而发现那些只有在高负载条件下才会出现的缺陷，如同步问题、内存泄漏等。\n压力测试与负载测试不同。负载测试是在保持性能指标要求的前提下测试系统能够承受的最大负载，而压力测试则是测试系统性能达到极限的状态。\n例如，当系统访问量增加到 2 万时，发现系统响应时间延迟到 5 秒，而当访问量增加到 3 万时，系统则崩溃，无法做出响应。由此可以确定系统能达到的极限访问量是 3 万。\n并发测试 并发测试用于评估被测系统的某些特定操作同时发生时的性能表现，如被测系统被多个用户同时登录时的响应能力，或系统的某一功能被多个用户同时操作时的性能表现。\n通过并发测试，不仅可以获得被测系统在多用户并发操作时的性能指标，还可以发现被测系统在并发条件下可能发生的问题，如内存泄漏、线程锁、资源争用问题。\n例如，通过模拟多个用户同时访问某一条件数据，或模拟多个用户同时更新数据，可能会发现被测系统的数据库访问错误、写入错误等。\n配置测试 配置测试是指调整软件系统的软硬件环境，测试各种环境对系统性能的影响，从而找到系统各项资源的最优分配原则。\n例如，安装版本更高的数据库、配置性能更好的 CPU 和内存等。\n稳定性测试 稳定性测试指让系统在强负载情况下，持续运行一段时间（如 7 * 24 小时），测试系统在这种条件下能否稳定运行。\n由于系统在强负载下有业务压力且运行时间较长，所以稳定性测试可以检测系统是否存在内存泄露问题。\n容量测试 容量测试是指在一定的软硬件及网络环境下，测试系统能支持的最大用户数、最大存储量等。容量测试通常与数据库、系统资源（如 CPU、内存、磁盘等）有关，用于规划将来需求增长（如用户增长、业务量增加等）时，对数据库和系统资源的优化。\n性能测试指标 性能测试不同于功能测试，功能测试只要求测试软件的功能是否实现，而性能测试要求测试软件功能的执行效率是否达到要求。\n性能测试通常的指标包括响应时间、吞吐量、并发用户数、每秒查询数（QPS）、每秒事务数（TPS）、点击率、错误率、资源利用率等。\n测试指标 描述 响应时间 用户从客户端发出请求到用户接收到返回数据的整个过程所需的时间 吞吐量 单位时间内，系统能够完成的工作量，如请求数/秒、访问人数/秒 并发用户数 在同一时间内，请求和访问的用户数量 每秒查询数 系统每秒能够响应的查询次数 每秒事务数 系统每秒能够处理的事务数量 点击率 用户每秒向 Web 服务器提交的 HTTP 请求数量 错误率 系统在负载情况下，业务失败的概率 资源利用率 软件系统对系统资源的利用率，如 CPU/内存/磁盘利用率等 JMeter 入门 安装 JMeter 登录 Apache JMeter 官网，Apache JMeter - Apache JMeter™，单击 apache-jmeter-5.6.3.zipsha512pgp，下载安装文件。\nJMeter 目录 bin 目录用于存储可执行文件和配置文件，bin 目录中常用的文件有以下 6 个：\njmeter.bat： JMeter 的 Windows 系统的启动文件，双击该文件可以启动 JMeter。\njmeter.log： JMeter 的日志文件。\njmeter.properties： JMeter 的配置文件，JMeter 的所有配置都在该文件中完成。\njmeter.sh：Linux/macOS 启动文件。\njmeter-server：Linux/macOS 分布测试启动文件。\njmeter-server.bat：Windows 系统分布式测试启动文件。\ndocs 目录为接口文档目录，存储 JMeter 官方的 API 文档。\nextras 目录为扩展插件目录，存储 JMeter 与其他工具集成所需要的一些组件。\nlib 目录用于存储 JMeter 依赖的 JAR 包和用户扩展（第三方）所依赖的 JAR 包。\nlicenses 目录存储的是 JMeter 的软件许可证，可以查看软件许可文件。\nprintable_docs 目录存储的是 JMeter 官方的帮助文档，可以查看 index.html 文件。\n界面汉化 可以通过在菜单栏单击 \u0026ldquo;Options\u0026rdquo; → \u0026ldquo;Choose Language\u0026rdquo; → \u0026ldquo;Chinese（Simplified）\u0026ldquo;设置汉化页面。\n但是这样设置的界面汉化只是临时性的，JMeter 重启之后，界面汉化就消失了，如果想永久汉化界面，需要在 jmeter.properties 文件中进行设置。\n打开 jmeter.properties 文件，修改 language 的值为 zh_CN，配置完成后，取消前面的注释，保存文件后重启 JMeter 即可看到汉化界面。\n第一个 JMeter 测试 添加测试计划 测试计划是 JMeter 的根元素，也是 JMeter 的管理单元。JMeter 中的所有测试内容都基于测试计划，每一个测试计划都可以模拟一定的特定场景，用户可以通过添加各种元件制定测试计划。\n每次启动 JMeter 后，主界面都默认有一个空的测试计划，用户也可以在菜单栏单击 \u0026ldquo;文件，在弹出的下拉菜单中选择 \u0026ldquo;新建\u0026rdquo; 选项，添加测试计划。\n添加线程组 保存好测试计划之后便可以添加线程组，线程组是测试计划的入口。右键单击 JMeter 左侧的测试计划，在弹出的菜单栏中选择 \u0026ldquo;添加\u0026rdquo; → \u0026ldquo;线程（用户）\u0026rdquo; → \u0026ldquo;线程组\u0026rdquo;。\n此处线程组有 3 个选项，分别是 \u0026ldquo;setUp 线程组\u0026rdquo;、\u0026ldquo;tearDown 线程组\u0026rdquo;、\u0026ldquo;线程组\u0026rdquo;。\nsetUp 线程组： 一种特殊类型的线程组，用于执行测试前的初始化操作。例如，测试购物网站在购物之前需要先登录，登录操作就可以在 setUp 线程组中配置。setUp 线程组执行顺序在普通线程组之前。 tearDown 线程组： 一种特殊类型的线程组，用于执行测试结束周后的回收工作。例如，测试购物网站在购物结束之后需要退出登录，退出登录的操作就可以在 tearDown 线程组中配置。tearDown 线程组的执行顺序在普通线程组之后。 线程组： 普通线程组，一个线程组可以表示一个虚拟用户组，在线程组中可以设置线程数量，每一个线程都可以模拟一个虚拟用户。 线程组配置 线程组的主要配置项有以下几个：\n名称： 用于为线程组命名。 线程数： 用于设置线程数量，即要模拟多少个用户。 Ramp-Up 时间（秒）： 用于设置线程全部启动的时间。若线程数设置为 100，Ramp-Up 时间设置为 5，表示在 5 秒内启动 100 个线程，每秒启动的线程数为 20。 循环次数： 用于设置线程循环次数。如果勾选了 \u0026ldquo;永远\u0026rdquo; 复选框，则线程会一直循环。 调度器： 用于打开时间调试配置。勾选该复选框后，下方的 \u0026ldquo;持续时间（秒）\u0026rdquo; 和 \u0026ldquo;启动延迟（秒）\u0026rdquo; 才能设置。 持续时间（秒）： 用于设置线程组测试的持续时间。如果设置了持续时间，则以该事件为准，时间到则线程组测试结束，即使在循环次数中勾选了 \u0026ldquo;永远\u0026rdquo; 复选框，线程也不会一直循环。需要注意的是，持续时间设置的时间要比 Ramp-Up 时间设置的时间长，否则线程还未全部启动，测试就结束了。 启动延迟（秒）： 表示启动测试后多久开始创建线程，通常用于定时。 添加 HTTP 请求 HTTP 请求是用于发送请求的原件，在界面中选中 \u0026ldquo;线程组\u0026rdquo; 并右键单击，在弹出的快捷菜单中依次选择 \u0026ldquo;添加\u0026rdquo; → \u0026ldquo;取样器\u0026rdquo; → \u0026ldquo;HTTP请求\u0026rdquo;。\n添加成功后，在新界面中配置要发送的请求，例如请求的协议、服务器名称或 IP 地址、端口号、请求方式、路径等信息。\n添加查看结果树 完成 HTTP 请求的配置后，即可发送请求，但为了查看请求的结果信息，需要添加查看结果的元件。\n选中 \u0026ldquo;线程组\u0026rdquo; 并右键单击，在弹出的快捷菜单中选择 \u0026ldquo;添加\u0026rdquo; → \u0026ldquo;监听器\u0026rdquo; → \u0026ldquo;查看结果树\u0026rdquo;。\n在查看结果树下方，可以选择创建汇总报告，查看所有样本情况。\n测试执行 查看结果树添加成功之后，单击工具栏中的绿色三角形启动按钮，JMeter 就会发送请求并接受服务器返回的结果。\n什么是多线程 ​\t线程 是操作系统能够进行运算调度的最小单位。它被包含在 进程 之中，是进程中的实际运作单位。\n进程 ​\t进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体 —— 进程就是正在运行中的程序（进程是驻留在内存中的）。\n是系统执行资源分配和调度的独立单位。 每一进程都有属于自己的存储空间和系统资源。 注意：进程 A 和进程 B 的内存独立不共享。 线程 ​\t线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流， 一个进程中可以并发多个线程 ，每条线程并行执行不同的任务。\n​\t可以简单的将多线程理解为应用软件中的多个相互独立，可以同时运行的功能，有了多线程，我们就可以同时让程序做多件事情，提高效率。\n单线程：一个进程中包含一个顺序控制流（一条执行路径）。\n多线程：一个进程中包含多个顺序控制流（多条执行路径）。\n对于单核的 CPU 来说，不能够做到真正的多线程并发，但是可以做到给人一种 “多线程并发” 的感觉。对于单核的 CPU 来说，在某一个时间点上实际上只能处理一件事情，但是由于 CPU 的处理速度极快，多个线程之间频繁切换执行，跟人来的感觉是多个事情同时在做。\n并发 并发 ：在同一时刻，有多个指令在 单个 CPU 上 交替 执行。\n​\t早期计算机的 CPU 都是单核的，一个 CPU 在同一时间只能执行一个进程/线程，当系统中有多个进程/线程等待执行时，CPU 只能执行完一个再执行下一个。\n​\t计算机在运行过程中，有很多指令会涉及 I/O 操作，而 I/O 操作又是相当耗时的，速度远远低于 CPU，这导致 CPU 经常处于空闲状态，只能等待 I/O 操作完成后才能继续执行后面的指令。\n​\t为了提高 CPU 利用率，减少等待时间，人们提出了一种 CPU 并发工作的理论。\n​\t所谓并发，就是通过一种算法将 CPU 资源合理地分配给多个任务，当一个任务执行 I/O 操作时，CPU 可以转而执行其它的任务，等到 I/O 操作完成以后，或者新的任务遇到 I/O 操作时，CPU 再回到原来的任务继续执行。\n​\t虽然 CPU 在同一时刻只能执行一个任务，但是通过将 CPU 的使用权在恰当的时机分配给不同的任务，使得多个任务在视觉上看起来是一起执行的。CPU 的执行速度极快，多任务切换的时间也极短，用户根本感受不到，所以并发执行看起来才跟真的一样。\n​\t操作系统负责将有限的 CPU 资源分配给不同的任务，但是不同操作系统的分配方式不太一样，常见的有：\n当检测到正在执行的任务进行 I/O 操作时，就将 CPU 资源分配给其它任务。 将 CPU 时间平均分配给各个任务，每个任务都可以获得 CPU 的使用权。 在给定的时间内，即使任务没有执行完成，也要将 CPU 资源分配给其它任务，该任务需要等待下次分配 CPU 使用权后再继续执行。 ​\t将 CPU 资源合理地分配给多个任务共同使用，有效避免了 CPU 被某个任务长期霸占的问题，极大地提升了 CPU 资源利用率。\n并行 并行 ：在同一时刻，有多个指令在 多个 CPU 上 同时 执行。\n​\t并发是针对单核 CPU 提出的，而并行则是针对多核 CPU 提出的。和单核 CPU 不同，多核 CPU 真正实现了“同时执行多个任务”。\n1 多核 CPU 内部集成了多个计算核心（Core），每个核心相当于一个简单的 CPU，如果不计较细节，你可以认为给计算机安装了多个独立的 CPU。 ​\t多核 CPU 的每个核心都可以独立地执行一个任务，而且多个核心之间不会相互干扰。在不同核心上执行的多个任务，是真正地同时运行，这种状态就叫做并行。\n​\t例如，同样是执行两个任务，双核 CPU 的工作状态如下图所示：\n​\t双核 CPU 执行两个任务时，每个核心各自执行一个任务，和单核 CPU 在两个任务之间不断切换相比，它的 执行效率更高 。\n并发 + 并行 ​\t在上图中，执行任务的数量恰好等于 CPU 核心的数量，是一种理想状态。但是在实际场景中，处于运行状态的任务是非常多的，尤其是电脑和手机，开机就几十个任务，而 CPU 往往只有 4 核、8 核或者 16 核，远低于任务的数量，这个时候就会同时存在并发和并行两种情况：所有核心都要并行工作，并且每个核心还要并发工作。\n​\t例如一个双核 CPU 要执行四个任务，它的工作状态如下图所示：\n​\t每个核心并发执行两个任务，两个核心并行的话就能执行四个任务。当然也可以一个核心执行一个任务，另一个核心并发执行三个任务，这跟操作系统的分配方式，以及每个任务的工作状态有关系。\n线程数量如何控制 创建单个线程，设定持续时间，测试单个线程在一定时间内发起的请求数。\n有明确的并发量目标时 并发量：1秒钟内服务器收到多少次请求\t\u0026mdash;\t4600/s 线程数量理论计算公式 = 并发目标 / 单线程能够发起的请求量 查看系统性能 在实际性能测试中，我们很难得出精确的线程数量。\nJMeter 自动化测试 测试片段 测试片段可以把对应的模块放到对应的位置，支持即插即卸载，每个模块之间都是完全独立的，添加一个测试片段【测试计划\u0026ndash;右键\u0026ndash;添加\u0026ndash;测试片段\u0026ndash;测试片段】。\n公共变量维护 1、创建：添加-\u0026gt;配置元件-\u0026gt;用户定义的变量。\n2、作用：当前的线程组内所有Sampler都可以引用变量，方便脚本更新；当参数发生变化时，只要在【用户定义的变量】中更新对应变量的参数即可，不需要逐个修改每个http中的参数。\n3、变量定义：可以是具体的值，也可以是函数。\n4、变量引用：Sample中引用变量的格式为${变量名}。\nCSV数据文件设置 CSV（CSV Data Set Config） 数据文件变量是指从外部 csv 文件读取数据出来作为变量。\n测试计划-\u0026gt;添加-\u0026gt;配置元件-\u0026gt;CSV 数据文件设置，查看CSV数据文件的各个要素。\n如果需要多次执行，需要添加循环控制器，测试计划-\u0026gt;添加-\u0026gt;逻辑控制器-\u0026gt;循环控制器。\nJMeter 断言 响应断言 选中 JMeter 主界面的测试计划或 HTTP 请求并右键单击，在弹出的快捷菜单中依次选择 \u0026ldquo;添加\u0026rdquo; → \u0026ldquo;断言\u0026rdquo; → \u0026ldquo;响应断言\u0026rdquo;，会添加一个响应断言界面。\n界面主要分为 3 个部分，分别为测试字段、模式匹配规则、测试模式。\nJSON 断言 选中 JMeter 主界面的测试计划或 HTTP 请求并右键单击，在弹出的快捷菜单中依次选择 \u0026ldquo;添加\u0026rdquo; → \u0026ldquo;断言\u0026rdquo; → \u0026ldquo;JSON 断言\u0026rdquo;，会添加一个 JSON 断言界面。\n其中，各配置项含义如下：\nAssert JSON Path exists：用于配置要断言的 JSON 元素的路径。 Additionally assert value：是否要使用指定的值生成断言。 Match as regular expression：使用正则表达式断言。 Expected Value：期望值，如果勾选了 \u0026ldquo;Additionally assert value\u0026rdquo; 复选框，则填写。 Expected null：期望值为 null。 Invert assertion：反转断言，断言成功时，如果勾选该复选框，则断言失败。 案例练习 创建公共变量，定义变量 host，值为 127.0.0.1，定义变量 port，值为 80。\n创建线程组 1，设置线程数为 1，持续时间为 3 秒。\n在线程组 1 中创建请求，使用 post 方法登录 byhy 系统，创建汇总报告，观察吞吐量。\n禁用线程组 1，创建线程组 2，创建 csv 文件，包含 3 组数据。\n在线程组 2 中使用该数据发送登录 http 请求并创建 json 断言，判断 ret 的值。\n","date":"2024-11-03T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/","title":"第五章 性能测试"},{"content":"接口测试技术 接口测试概念 接口一般又称为 API ，全称为 Application Programming Interface，人们无时不刻不在使用 Interfaces，例如乘坐电梯里面的按钮是一个 Interface，开车的油门也是 Interface，计算机操作系统也有很多的接口。\n接口测试是指 系统或组件之间进行信息交互的通道 。在软件开发的过程中，随着项目需求越来越多，软件的功能会越来越复杂，接口也会不断增多，为了确保软件系统中的接口能够正常进行 信息交互和传输数据 ，就需要开展接口测试。\n接口测试是对系统组件间接口进行的测试，其原理是模拟客户端向服务端发送请求，服务器接收到请求后进行相应的业务处理，并向客户端返回响应数据。\n测试人员在进行接口测试时，需要关注软件系统中被测接口之间数据的传递、交换和控制管理过程，以及接口与接口之间是否存在逻辑依赖关系，并检测服务器向客户端返回的相应数据是否符合预期结果。\n通过工具实现接口测试 常用的接口测试工具有 Postman、JMeter 等。\nJMeter 是 Apache 基于 Java 开发的一款免费开源工具，它支持多个协议，具有丰富的第三方插件，不仅可以进行性能测试，而且可以进行接口测试。\nPostman 是一款简单易操作的接口测试工具，支持批量运行、保存历史记录，容易学习。\n通过代码实现接口测试 测试人员使用 Java、Python 等语言编写代码也可以实现接口测试，在使用 Java 语言编写接口测试的代码时，通常需要结合 HttpClient 技术；在使用 Python 语言编写接口测试的代码时，通常需要结合 Request 框架。\n虽然通过代码实现接口测试能够让测试人员与开发人员使用相同的技术栈，更好地对接测试流程，但是这种方式要求测试人员具备一定的编程能力，难度较大。\n接口类型 HTTP 接口 HTTP 协议是建立在 TCP 协议基础之上的，当浏览器需要从服务器获取网页数据的时候，会发出一次 HTTP 请求。HTTP 会通过 TCP 建立起一个到服务器的连接通道，当获取本次请求需要的数据后，HTTP 会立即将 TCP 连接断开，这个过程是很短的。所以 HTTP 连接是一种短连接，是一种无状态的连接。\nWeb Service 接口 Web Service 是一种跨编程语言和跨操作系统平台的远程调用技术。Web Service 使用了最初设计用于人机交流的基于 HTTP 的 Web 技术，用于系统间以 XML 进行通讯。\nWeb Service 有以下特征：\n可以用于互联网或局域网、使用标准 XML 消息系统、跨编程语言跨操作系统、通过 XML 语法自描述、可以通过简单的查找机制发现。\nRPC 接口 RPC（Remote Procedure Calls，远程过程调用）是一种协议，程序可以使用这种协议向网络中的另一台计算机上的程序请求服务。由于使用 RPC 的程序不必了解支持通信的网络协议的情况，因此 RPC 提高了程序的互操作性。\n在 RPC 中，发出请求的程序是客户程序，提供服务的程序是服务器。RPC 是一项广泛用于支持分布式应用程序的技术，主要目的是为组件提供一种相互通信的方式，是这些组件之间能够相互发出请求并传递这些请求的结果。\nRMI 接口 \u0026hellip;\nRESTful 接口 \u0026hellip;\n网络基础 TCP/IP 计算机与网络设备要相互通信，双方就必须基于相同的方法。比如如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信、不同的硬件与操作系统之间怎么通信等，所有的这一切都需要一种规则，这种规则被称为 协议 （protocol）。\n像这样把与互联网相关联的协议集合起来总称 TCP/IP 协议族，其最重要的一点是分层。TCP/IP 协议族按层次分为 应用层、传输层、网络层、数据链路层 。\n应用层\n应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务，比如FTP（File Transfer Protocol，文件传输协议）、DNS（Domain Name System，域名系统）、HTTP 协议。\n传输层\n传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：TCP（Transmission Control Protocol，传输控制协议）和 UDP（User Data Protocol，用户数据报协议）。\n网络层\n网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位，该层规定了通过怎样的路径（传输路线）到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。\n数据链路层\n用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card，网络适配器，即网卡）、光纤等物理可见部分（还包括连接器等一切传输媒介），硬件上的范畴均在链路层的作用范围之内。\nTCP 三次握手 为了准确无误地将数据送达目标处，TCP 协议采用了 三次握手 策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了 TCP 的标志 —— SYN（synchronize） 和 ACK（acknowledgement）。\n发送端首先发送一个带 SYN 标志的数据包给对方\n接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息\n发送端再回传一个带 ACK 标志的数据包，代表“握手”结束\n若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发送相同的数据包。\nTCP 四次挥手 确保当前数据完全被接收后再关闭连接，TCP协议采用 四次挥手 策略。\n客户端向服务器发送一个数据包，主动断开连接（序列号 X），客户端仍可接收数据。\n服务器向客户端发送确认包，表明服务器已经收到客户端的报文（序列号X + 1）。服务器告知客户端数据没有发送完毕，暂时不能进行第三次挥手。\n服务器向客户端发送数据包和确认包，用来停止向客户端发送数据（序列号Y）。服务器告知客户端数据已发送完毕，可以断开链接。\n客户端向服务器发送一个响应数据包（序列号Y + 1 ），规定时间后发送确认包并进入关闭状态。\n负责域名解析的 DNS 服务 DNS（Domain Name System）服务是和 HTTP 协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务，如通过域名查找 IP 地址，或逆向从 IP 地址反查域名。\n计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名，DNS 服务就是为了解决计算机对域名的理解。\nHTTP 协议 统一资源定位符 URI （统一资源标识符）是 Uniform Resource Identifier 的缩写。\nUniform：规定统一的格式处理多种不同类型的资源，不用根据上下文环境来识别资源指定的访问方式。 Resource：资源的定义是“可标识的任何东西”，不仅是文档文件、图像或服务等。 Identifier：可标识的对象，也称为标识符。 URI 就是由某个协议方案表示的资源的定位标识符 ，协议方案是指访问资源所使用的协议类型名称，如采用 HTTP 协议时，协议方案就是 http，除此之外，还有 ftp、mailto、file、telnet 等。\nURI 用字符串标识某一互联网资源，而 URL 表示资源的地点 （互联网上所处的位置），所以 URL 是 URI 的子集。\n1 2 3 4 5 6 7 协议://hostname[:port]/path[?查询参数1\u0026amp;查询参数2] 协议://域名+端口号/资源路径+参数 https://www.bilibili.com/movie/?spm_id_from=333.1007.0.0 http://127.0.0.1:5500/test.html 协议： 数据传输的格式，如 http、https 等。\n服务器地址： 域名或 IP，.com域名是使用最早也最广泛的域名，还有例如表示工商企业的 .top，表示网络提供商的 .net，表示非盈利组织的 .org 等。\n端口： 应用程序对外访问的唯一标识，常用端口号有 80（http）、443（https），协议默认的端口号可以省略，如 https://www.baidu.com/:443。\n资源路径： 主机资源的具体地址，包括目录和文件名等，用 \u0026ldquo;/\u0026rdquo; 隔开，如 /movie。\n参数： 客户端向服务器传递的数据，参数与路径之间用 \u0026ldquo;?\u0026rdquo; 符号隔开，多个参数之间用 \u0026ldquo;\u0026amp;\u0026rdquo; 符号隔开。\nHTTP 请求 HTTP 协议和 TCP/IP 协议族内的其他众多的协议相同，用于客户端和服务器之间的通信。\nHTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的， 服务器端在没有接收到请求之前不会发送响应 。\n请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。\n请求行： 位于请求数据的第一行，作用是说明请求方法、访问的资源、协议版本，常用的请求方法如下：\n请求方法 说明 GET 用于请求服务器获取指定的资源 POST 用于请求服务器提交指定的资源 PUT 用于请求服务器更新指定的资源 DELETE 用于请求服务器删除指定的资源 请求头： 位于第二行到空白行之间，作用是通知服务器客户端的请求信息，请求头部由键值对组成，每行一对，常见的请求头字段如下：\n请求头字段 说明 Host 表示接收请求的服务器地址 User-Agent 表示产生请求的浏览器地址 Accept 表示客户端可以识别的内容类型列表 Content-Type 表示请求体数据的类型 Accept-Encoding 表示服务器可以发送的数据压缩格式 Accept-Language 表示服务器可以发送的语言 Connection 指定与连接相关的属性 请求体： 位于空白行之后，是传输给服务器数据的实体，常在 POST、PUT 方法中使用，常配合的请求头有 content-type 和 content-length，，参数 content-type 用于规定请求体数据类型，取值类型有 text/html、image/jpeg、application/json、application/x-www-form-urlencoded、multipart/form-data 等，请求报文中可以没有请求体。\nHTTP 响应 响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。\n状态行： 位于响应数据的第一行，用来描述服务器的处理结果，由协议版本号、状态码、状态消息组成，其中状态码由三位数字组成，第一个数字定义响应类别。\n响应类型 含义 1xx 表示指示信息 2xx 表示请求成功 3xx 表示请求重定向 4xx 表示客户端错误 5xx 表示服务器错误 在接口测试中，常见的状态码和描述如下：\n状态码 描述 200 OK，客户端请求成功 400 Bad Request，客户端请求有语法错误 401 Unauthorized，客户端请求未经授权 403 Forbidden，服务器收到请求，但是拒绝提供服务 404 Not Found，客户端请求的资源不存在 500 Internal Server Error，服务器发生错误 503 Server Unavailable，服务器当前不能处理客户端的请求 响应头： 响应头是指服务器对客户端请求的应答信息，它位于状态行的下方，主要由键值对组成，与 HTTP 协议中的请求头类似，常见的响应头字段如下：\n请求头字段 说明 Server 表示服务器用到的软件信息 Content-Type 表示服务器实际返回给客户端的内容类型 Connection 表示服务器与客户端的连接类型 Connection-Length 表示服务器告知浏览器需要接收的数据长度 Connection-Language 表示服务器可以识别的内容语言列表 Accept-Encoding 表示服务器可以发送的数据压缩格式 响应体： 响应体是服务器发送到客户端的实际内容，它位于响应头的下方，响应体的内容类型由响应头中的 Content-Type 指定。\n使用开发者工具进行抓包 打开浏览器访问指定网页，按键盘上的 F12 键，或者邮件空白处选择打开开发者工具，单击 “Network” 可以查看抓取的相关数据信息。\n其中，“ALL” 或者 “全部” 是默认被选中的，由于先访问网页再打开开发者工具，所以没有显示抓取的请求资源信息，此时需要刷新浏览器，重新抓取请求资源信息。\nPostman 入门 Postman 是谷歌开发的一款用于网页调试和接口测试的工具，Postman 能够模拟客户端发送 HTTP 请求至服务器，同时能够接收服务器返回的 HTTP 响应。测试人员通过验证接收到的响应数据是否与预期数据一致，从而判定接口数据是否存在缺陷。\n安装 Postman 进入 Postman 官网 Postman API Platform | Sign Up for Free，选择 windows 版本，单击 Windows 64-bit 按钮后即可下载 Postman 安装包。\n运行程序，如果没有账号可以点击 Create Free Account 注册账号，完成后进入主页面。\n点击左侧栏的扩展符号可以管理选项：\nCollections：表示集合，可以对项目模块中的接口进行分类和管理。\nAPIs：表示应用程序接口，用于定义集合和环境。\nEnvironments：表示环境，可以定义全局变量和环境变量。\nMock Servers：表示模拟服务器。\nMonitors：表示监听器，能够定期运行集合中的请求。\nFlows：表示流程，能够通过逻辑连接请求模拟实际项目中的流程。\nHistory：表示历史记录。\n发送第一个 HTTP 请求 创建集合 在 Postman 的主窗口中，首先单击左侧的 Collection 选项，然后单击 Collection 选项右侧的加号图标即可创建集合 New Collection。\n添加 HTTP 请求 点击 New Collection 条目右侧的省略号，在下拉表中选择 Add request 选项即可添加一个 HTTP 请求。\n添加的 HTTP 请求默认名称为 New Request，默认的请求方法为 GET，在 New Request 下方可以根据实际测试需求设置请求方法和请求地址。\n请求方法和请求地址下方的标签的具体介绍如下：\nParams：表示参数，单击该标签可以在下方设置请求地址参数。\nAuthorization：表示授权，单击该标签可以了解授权信息，通常在发送请求时，在其下方会自动生成授权的请求头。\nHeaders：表示请求头，单击该标签可以在下方设置请求头。\nBody：表示请求体，单击该标签可以在下方设置请求体参数。\nPre-request Script：表示预请求脚本，单击该标签可以在下方编写预请求脚本代码。\nTests：表示测试，单击该标签可以在下方编写测试脚本代码，例如断言代码、关联代码等。\nSettings：表示设置，单击该标签可以在下方进行相关的设置操作，例如启用 SSL 证书验证、自动跟随重定向等。\n在创建 HTTP 请求时，默认选中的标签为 “Params”，接口测试的过程中，常用的标签分别是 “Params”、“Headers”、“Body”、“Tests”。\n填写百度网站的请求信息并发送请求。 在上述步骤后，设置请求方法为 “GET”，将请求地址设置为 www.baidu.com，点击 “Save” 按钮或者通过 “Ctrl + S” 保存，最后单击 “Send” 按钮发送请求。\n可以看到在响应结果区域的右上角显示了 “200 OK”，说明请求发送成功，在 “Body” 下方展示了具体的响应结果，说明服务器已经接收到客户端的请求信息，并成功将响应结果返回给客户端。\nPostman 的基本使用 Postman 断言 断言是程序中的一种逻辑判断式，目的是验证软件开发的预期结果与实际结果是否一致。\n常用的断言有 响应状态码断言、包含指定字符串断言、JSON 数据断言 等。\n响应状态码断言 响应状态码断言是对 HTTP 响应的状态码进行断言。在 Postman 中，有 2 种方式实现响应状态码断言。\n第一种方式是在 HTTP 请求中单击 “Test” 标签，在其下方空白区域手动编写响应状态码断言的代码；\n第二种是首先在 HTTP 请求中单击 “Test” 标签，然后单机 Postman 主窗口右侧的 “Staus code:Code is 200”，自动生成响应状态码断言的代码模板。\n1 2 3 pm.test(\u0026#34;Status code is 200\u0026#34;, function () { pm.response.to.have.status(200); }); 代码中，pm 是一个实例，表示 Postman，test() 是 pm 实例中的一个测试方法，该方法有 2 个参数，分别是 \u0026ldquo;function () {pm.response.to.have.status(200);}\u0026rdquo; 和 \u0026ldquo;Status code is 200\u0026rdquo; ，具体说明如下：\n\u0026ldquo;Status code is 200\u0026rdquo;：该参数的作用是显示断言结果的文字，可以根据实际测试需求自定义，不会影响断言结果。 \u0026ldquo;function () {pm.response.to.have.status(200);}\u0026quot;：该参数是一个匿名函数，作用是判断响应结果中的状态码是否是 200。 包含指定字符串断言 包含指定字符串断言是指对 HTTP 响应中的某个字符串进行断言，可以手动编写，也可以选择主窗口右侧的 “Response body:Contains string” 自动生成模板。\n1 2 3 pm.test(\u0026#34;Body matches string\u0026#34;, function () { pm.expect(pm.response.text()).to.include(\u0026#34;string_you_want_to_search\u0026#34;); }); \u0026ldquo;function(){pm.expect(pm.response.text()).to.include(\u0026rdquo;\u0026hellip;\u0026rdquo;);})\u0026quot;：该参数用于断言响应文本中是否包含想要搜索的字符串，其中 \u0026ldquo;string_you_want_to_search\u0026rdquo; 需要根据接口文档的描述修改为预期结果。 \u0026ldquo;Body matches string\u0026rdquo;：该参数用于显示断言结果的提示文字，可以根据实际测试需求自定义，不会影响断言结果。 JSON 数据断言 JSON 数据断言是对 HTTP 响应中的 JSON 数据进行断言，可以手动编写，也可以选择主窗口右侧的 “Response body:JSON value check” 自动生成模板。\n1 2 3 4 pm.test(\u0026#34;Your test name\u0026#34;, function () { var jsonData = pm.response.json(); pm.expect(jsonData.value).to.eql(100); }); \u0026ldquo;function () {var jsonData = pm.response.json();pm.expect(\u0026hellip;).to.eql(100);})\u0026quot;：该参数用于将响应结果中的 JSON 数据全部赋值给变量 jsonData， 其中 \u0026ldquo;pm.expect(jsonData. value).to.eql(100)\u0026rdquo; 用于断言响应结果中 JSON 数据的值 value 是否等于 100。在实际接口测试中需要根据接口文档的描述填写 value 及对应的值。 \u0026ldquo;Your test name\u0026rdquo;：该参数用于像是断言结果的提示文字，可以根据实际测试需求自定义，不会影响断言结果。 Postman 关联 在接口测试中，关联是指两个或两个以上的接口相互依赖关系，例如，某个接口请求地址中的参数是另一个接口的影响结果中的数据，则说明这两个接口之间存在关联关系。\n在使用 Postman 做接口测试时，实现接口关联的方式是在 Postman 中设置环境变量或全局变量，具体实现步骤如下：\n（1）获取第 1 个接口请求的响应结果。\n（2）提取响应结果中的某个字段，将其保存到 Postman 环境变量或全局变量中。\n（3）在第 2 个接口的请求地址中引用环境变量或全局变量，引用方式为 \u0026ldquo;{{环境变量或全局变量}}\u0026quot;。\nPostman 参数化 Postman 生成测试报告 API 接口服务系统 启动系统 本节内容参考 白月黑羽 教程，地址：https://www.byhy.net/ 白月黑羽 B 站地址：https://space.bilibili.com/401981380\n下载压缩包 bysms.zip，解压bysms.zip后，进入bysms目录，双击运行 runserver.bat 即可启动系统。\n启动系统后会弹出一个窗口，不要关闭，否则 web 系统会停止。\n如果启动运行 出现闪退或者如下错误提示，很可能 是因为web服务的80端口已经被使用了。\n1 2 3 **!!! runtime error: invalid memory address or nil pointer dereference Serve HTTP on 0.0.0.0:80 listen tcp 0.0.0.0:80: bind: An attempt was made to access a socket in a way forbidden by its access permissions 两种解决方法：\n请检查关闭占用 80 端口的程序，可能是 Apache、IIS 等 web 服务。 修改 bysms 使用的 web 服务端口，可以用 文本编辑器编辑 runserver.bat，如果你是 Mac 电脑，修改 runserver.sh。 1 2 3 解决方法：将端口号 80 修改成其他端口 bysms.exe 0.0.0.0:80\t→\tbysms.exe 0.0.0.0:8047 保存后，重新运行即可，注意，修改后访问网址要加上端口号，http://127.0.0.1:8047\n构建 HTTP 请求 根据协议规范， HTTP头里面的 Content-Type 字段指明消息体格式，比如 urlencoded 为 application/x-www-form-urlencoded，json 为 application/json，当请求被发送的时候，Postman会根据你设定的消息体格式，自动加上对应的 Content-Type 消息头。\n以 bysms 系统为例， 登录接口消息体的格式是 urlencoded， 所以，Postman中应该这样设置。\n而添加客户接口消息体的格式是 json， 所以，Postman中应该这样设置。\n系统接口文档 本接口中，所有请求 ( 除了登录请求之外 )，必须在 cookie 中携带有登录的成功后，服务端返回的 sessionid。\n登录系统 请求消息\n1 2 POST /api/mgr/signin HTTP/1.1 Content-Type: application/x-www-form-urlencoded 请求参数\nhttp 请求消息 body 中 参数以 格式 x-www-form-urlencoded 存储，需要携带如下参数：\nusername 用户名。\npassword 密码。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果登录成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示登录成功，如果登录失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;用户名或者密码错误\u0026#34; } ret 不为 0 表示登录失败， msg 字段描述登录失败的原因。\n列出客户 请求消息\n1 GET /api/mgr/customers HTTP/1.1 请求参数\nhttp 请求消息 url 中需要携带如下参数：\naction\n必填项，填写值为 list_customer。\npagesize\n必填项，分页的每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;江苏省常州武进市白云街44号\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;武进市 袁腾飞\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13886666666\u0026#34; }, { \u0026#34;address\u0026#34;: \u0026#34;北京海淀区\u0026#34;, \u0026#34;id\u0026#34;: 4, \u0026#34;name\u0026#34;: \u0026#34;北京海淀区代理 蔡国庆\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13990123456\u0026#34; } ] , \u0026#39;total\u0026#39;: 2 } ret 为 0 表示登录成功，total 为 2 表示系统中全部（不仅仅是这一页）有多少客户，retlist 里面包含了所有的客户信息列表，每个客户信息以如下格式存储：\n1 2 3 4 5 6 { \u0026#34;address\u0026#34;: \u0026#34;江苏省常州武进市白云街44号\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;武进市 袁腾飞\u0026#34;, \u0026#34;phonenumber\u0026#34;: \u0026#34;13886666666\u0026#34; } 添加一个客户 请求消息\n1 2 POST /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加客户的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_customer\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;武汉市桥西医院\u0026#34;, \u0026#34;phonenumber\u0026#34;:\u0026#34;13345679934\u0026#34;, \u0026#34;address\u0026#34;:\u0026#34;武汉市桥西医院北路\u0026#34; } } 其中 action 字段固定填写 add_customer 表示添加一个客户，data 字段中存储了要添加的客户的信息。\n其中 name 字段长度范围是 2-20，phonenumber 字段长度范围是 8-15，address 字段长度范围是 2-100。\n服务端接受到该请求后，应该在系统中增加一位这样的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加客户的 id 号。\n如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;客户名已经存在\u0026#34; } ret 不为 0 表示登录失败， msg 字段描述登录失败的原因。\n修改客户信息 请求消息\n1 2 PUT /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带修改客户的信息，消息体的格式是 json，如下示例：\n1 2 3 4 5 6 7 8 9 { \u0026#34;action\u0026#34;:\u0026#34;modify_customer\u0026#34;, \u0026#34;id\u0026#34;: 6, \u0026#34;newdata\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;武汉市桥北医院\u0026#34;, \u0026#34;phonenumber\u0026#34;:\u0026#34;13345678888\u0026#34;, \u0026#34;address\u0026#34;:\u0026#34;武汉市桥北医院北路\u0026#34; } } 其中 action 字段固定填写 modify_customer 表示修改一个客户的信息，id 字段为要修改的客户的 id 号，newdata 字段中存储了修改后的客户的信息。\n服务端接受到该请求后，应该在系统中做相应修改。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果修改成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果修改失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;客户名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n删除客户信息 请求消息\n1 2 DELETE /api/mgr/customers HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除客户的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;del_customer\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中 action 字段固定填写 del_customer 表示删除一个客户，id 字段为要删除的客户的 id号。\n服务端接受到该请求后，应该在系统中尝试删除该 id 对应的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id为 566 的客户不存在\u0026#34; } ret 不为 0 表示失败， msg字段描述添加失败的原因。\n列出药品 请求消息\n1 GET /api/mgr/medicines HTTP/1.1 请求参数\nhttp 请求消息 url 中 需要携带如下参数：\naction\n必填项，填写值为 list_medicine。\npagesize\n必填项，分页的每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ {\u0026#34;id\u0026#34;:1, \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;sn\u0026#34;:\u0026#34;234324234234\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;青霉素\u0026#34;}, {\u0026#34;id\u0026#34;:2, \u0026#34;name\u0026#34;: \u0026#34;红霉素\u0026#34;, \u0026#34;sn\u0026#34;:\u0026#34;234545534234\u0026#34;, \u0026#34;desc\u0026#34;:\u0026#34;红霉素\u0026#34;} ] , \u0026#39;total\u0026#39;: 2 } ret 为 0 表示登录成功，total 为 2 表示总共有多少药品，retlist 里面包含了所有的药品信息列表，每个药品信息以如下格式存储：\n1 {\u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;红霉素\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;234545534234\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;红霉素\u0026#34;} 添加一个药品 请求消息\n1 2 POST /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加药品的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_medicine\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;青霉素 国字号\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;099877883837\u0026#34; } } 其中，action 字段固定填写 add_medicine 表示添加一个药品，data 字段中存储了要添加的药品的信息。\nname 字段长度范围是 2-20，desc 字段长度范围是 2-500，sn 字段长度范围是 8-20。\n服务端接受到该请求后，应该在系统中增加这样的药品。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为 添加药品的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;药品名已经存在\u0026#34; } ret 不为 0 表示失败， msg字段描述添加失败的原因。\n修改药品信息 请求消息\n1 2 POST /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加药品的信息，消息体的格式是json，如下示例：\n1 2 3 4 5 6 7 8 { \u0026#34;action\u0026#34;:\u0026#34;add_medicine\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;: \u0026#34;青霉素\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;青霉素 国字号\u0026#34;, \u0026#34;sn\u0026#34;: \u0026#34;099877883837\u0026#34; } } 其中，action 字段固定填写 add_medicine 表示添加一个药品，data 字段中存储了要添加的药品的信息。\nname 字段长度范围是 2-20，desc 字段长度范围是 2-500，sn 字段长度范围是 8-20。\n服务端接受到该请求后，应该在系统中增加这样的药品。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加药品的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;药品名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n删除药品信息 请求消息\n1 2 DELETE /api/mgr/medicines HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除客户的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;del_customer\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中，action 字段固定填写 del_customer 表示删除一个客户，id 字段为要删除的客户的id号。\n服务端接受到该请求后，应该在系统中尝试删除该 id 对应的客户。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id 为 566 的客户不存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述添加失败的原因。\n列出订单 请求消息\n1 GET /api/mgr/orders HTTP/1.1 请求参数\nhttp 请求消息 url 中 需要携带如下参数：\naction\n必填项，填写值为 list_order。\npagesize\n必填项，分页的 每页获取多少条记录。\npagenum\n必填项，获取第几页的信息。\nkeywords\n可选项， 里面包含的多个过滤关键字，关键字之间用空格分开。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果获取信息成功，返回如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 { \u0026#34;ret\u0026#34;: 0, \u0026#34;retlist\u0026#34;: [ {id: 1, name: \u0026#34;华山医院订单001\u0026#34;, create_date: \u0026#34;2018-12-26T14:10:15.419Z\u0026#34;, customer_name: \u0026#34;华山医院\u0026#34;, customerid : 13, medicinelist: \u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:3,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; }, {id: 2, name: \u0026#34;华山医院订单002\u0026#34;, create_date: \u0026#34;2018-12-27T14:10:37.208Z\u0026#34;, customer_name: \u0026#34;华山医院\u0026#34;, customerid : 13, medicinelist: \u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:4,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; } ] } ret 为 0 表示登录成功，retlist 里面包含了所有的订单信息列表，每个订单信息以如下格式存储：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;id\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;华山医院订单002\u0026#34;, \u0026#34;create_date\u0026#34;: \u0026#34;2018-12-27T14:10:37.208Z\u0026#34;, \u0026#34;customer_name\u0026#34;: \u0026#34;华山医院\u0026#34;, \u0026#34;customerid\u0026#34; : 13, \u0026#34;medicinelist\u0026#34;:\u0026#34;[ {\\\u0026#34;id\\\u0026#34;:16,\\\u0026#34;amount\\\u0026#34;:4,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;环丙沙星\\\u0026#34;}, {\\\u0026#34;id\\\u0026#34;:15,\\\u0026#34;amount\\\u0026#34;:5,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;克林霉素\\\u0026#34;} ]\u0026#34; } 其中 medicinelist 里面的 amount 表示药品数量 ， id 表示药品的id， name 是药品名称，注意，这个 medicinelist 值是另外一个 json 格式的字符串。\n###0 添加一个订单\n请求消息\n1 2 POST /api/mgr/orders HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带添加订单的信息，消息体的格式是 json，如下示例：\n1 2 3 4 5 6 7 8 9 10 11 { \u0026#34;action\u0026#34;:\u0026#34;add_order\u0026#34;, \u0026#34;data\u0026#34;:{ \u0026#34;name\u0026#34;:\u0026#34;华山医院订单002\u0026#34;, \u0026#34;customerid\u0026#34;:3, \u0026#34;medicinelist\u0026#34;:[ {\u0026#34;id\u0026#34;:16,\u0026#34;amount\u0026#34;:\u0026#34;5\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;环丙沙星\u0026#34;}, {\u0026#34;id\u0026#34;:15,\u0026#34;amount\u0026#34;:\u0026#34;5\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;克林霉素\u0026#34;} ] } } 其中，action 字段固定填写 add_order 表示添加一个订单，data 字段中存储了要添加的订单的信息。\n订单名称 name 字段长度范围是 2-100，medicinelist 是订单中药品的信息列表，amount 表示数量，name表示名称。\n服务端接受到该请求后，应该在系统中增加这样的订单。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果添加成功，返回如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 0, \u0026#34;id\u0026#34; : 677 } ret 为 0 表示成功，id 为添加订单的 id 号，如果添加失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;订单名已经存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述失败的原因。\n###1 删除订单\n请求消息\n1 2 DELETE /api/mgr/orders HTTP/1.1 Content-Type: application/json 请求参数\nhttp 请求消息 body 携带要删除订单的 id，消息体的格式是 json，如下示例：\n1 2 3 4 { \u0026#34;action\u0026#34;:\u0026#34;delete_order\u0026#34;, \u0026#34;id\u0026#34;: 6 } 其中，action 字段固定填写 delete_order 表示删除一个订单，id 字段为要删除的订单的id号。\n服务端接受到该请求后，应该在系统中尝试删除该id对应的订单。\n响应消息\n1 2 HTTP/1.1 200 OK Content-Type: application/json 响应内容\nhttp 响应消息 body 中， 数据以 json 格式存储，如果删除成功，返回如下：\n1 2 3 { \u0026#34;ret\u0026#34;: 0 } ret 为 0 表示成功，id 为添加订单的 id 号，如果删除失败，返回失败的原因，示例如下：\n1 2 3 4 { \u0026#34;ret\u0026#34;: 1, \u0026#34;msg\u0026#34;: \u0026#34;id为 566 的订单不存在\u0026#34; } ret 不为 0 表示失败， msg 字段描述失败的原因。\n案例练习 创建一个集合（Collection），在该集合中创建一个 HTTP 请求，访问任意网站，并通状态码断言和包含指定字符串断言判断通信是否成功。\n创建 http 请求，使用正确的账号密码登录系统，返回 ret:0 则表示登录成功。\n创建 http 请求，列出所有客户。\n创建 http 请求，添加一个客户，客户名为长沙市中心医院。\n创建 http 请求，列出所有订单。\n创建 http 请求，添加一个订单，订单中客户为长沙市中心医院。\n创建 http 请求，添加一个订单，订单中客户为香港大学深圳医院。\n创建 http 请求，将长沙市中心医院的订单删除。\n","date":"2024-09-13T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/","title":"第四章 接口测试"},{"content":"白盒测试又称为透明盒测试、结构测试，它基于程序的内部逻辑结构进行测试，而不是程序的功能（黑盒测试）。因此，进行白盒测试时，测试人员需要了解程序的内部逻辑结构，根据使用的编程语言设计测试用例。白盒测试可用于单元测试、集成测试和系统测试。白盒测试的方法包括基本路径法、逻辑覆盖法、程序插桩法。\n基本路径法 基本路径法概述 基本路径法是一种将程序的流程图转化为程序控制流图，并在程序控制流图的基础上，分析被测程序控制构造的环路复杂性，导出基本可执行路径集合，从而设计测试用例的方法。\n使用基本路径法设计的测试用列需要确保被测程序中的每条可执行语句至少被执行一次。\n使用基本路径法设计测试用例主要包括4个步骤，具体如下。\n1．画出流程图\n首先需要分析被测程序的源代码，并画出程序的流程图。\n2．画出控制流图\n控制流图是描述程序控制流的一种图示方法，由程序流程图转化而来。如果测试的源程序的代码简洁，也可以直接通过分析源程序的代码画出控制流图。\n在画程序的控制流图时，使用圆圈表示一条或多条无分支的语句；使用箭头表示控制流方向。程序中常见的控制流图如下所示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 顺序结构 int a = 1; int b = 2; int c = a + b; // if条件语句结构 if (a \u0026lt; b) { a = 0; b = b + 1; } else { a = b; } // while循环语句结构 while (a \u0026lt; b) { a = a + 1; } c = a + b; // until/do-while循环语句结构 do { a = a + 3; } while (a \u0026lt; 100); 图中，圆圈称为控制流图的节点，通常表示程序流程图中的矩形或菱形，箭头称为控制流图的边或连接，由边和节点限定的范围称为区域。\n3．计算程序的圈复杂度⭐\n圈复杂度是一种代码复杂度的衡量标准，用来衡量一个模块的复杂程度。通过计算程序的圈复杂度可以得到程序基本的独立路径数目，从而确定测试用例的数目。\n计算程序圈复杂度的方法有3种，具体如下：\n使用公式计算：V(G)=E-N+2，其中V(G)表示程序的圈复杂度，E表示控制流图中边的数量，N表示控制流图中节点的数量。 使用公式计算：V(G)=P+1，P表示控制流图中判定节点的数量。在控制流图中，当一个节点分出2条或多条指向其他节点的边时，这个节点就是一个判定节点。 程序的圈复杂度等于控制流图中的区域数量。 图中，一共有10条边、8个节点、4个区域，其中判定节点有3个，分别是1、2、4。\n如果使用 V(G)=E-N+2 计算圈复杂度，则 V(G)=10-8+2=4；\n如果使用 V(G)=P+1 计算圈复杂度，则 V(G)=3+1=4；\n由于计算区域包括控制流图外部的区域，所以区域数量为4，圈复杂度也为4；\n由此可见，通过这3种方法计算出的圈复杂度的结果都是相同的。\n4．设计测试用例\n根据计算出的程序圈复杂度导出基本可执行路径集合，从而设计测试用例的输入数据和预期结果。以图中的控制流图为例，由于圈复杂度为4，所以可以得到4条独立的路径，具体如下。\n路径1：1→7。 路径2：1→2→3→7。 路径3：1→2→4→5→8→1→7。 路径4：1→2→4→6→8→1→7。 根据以上4条独立的路径即可设计测试用例，从而确保每一条路径都能被执行。\n5．将程序流程图转换为控制流程图\n将程序流程图转化为控制流图时，在顺序结构、if 条件语句结构、while 循环语句结构、until 循环语句结构和多分支选择语句结构中，分支的汇聚处需要有一个汇聚节点。如果判断条件表达式是由一个或多个逻辑运算符（如or、and）连接的复合条件表达式，则需要将其修改为只有单个条件的嵌套判断。\n实例：判断是否是闰年 当年份能够被 4 但不能被 100 整除时为闰年，或者年份能够被 400 整除时为闰年，据此可以设计判断输入的年份是否为闰年的 C 语言程序代码，具体代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // 引入C语言的头文件 #include \u0026lt;stdio.h\u0026gt;\t#include \u0026lt;stdlib.h\u0026gt; // 定义了main()函数主函数，是所有程序运行的入口 int main()\t{ // 定义了2个int类型的变量，分别是year和leap int year, leap;\t// 分别调用print()函数和scanf()函数，用于输出结果\tprintf(\u0026#34;Enter year:\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;year);\tif(year % 4 == 0) { if(year % 100 == 0) { // 判断变量year是否能被4、100、400整除 if(year % 400 == 0)\tleap = 1; else // 能够被400整除的数一定能被4和100整除 leap = 0;\t} else // 能被4和100整除的数不一定能被400整除 leap = 1;\t} else leap = 0; // leap=0为平年，leap=1为闰年\treturn 0; } 通过分析上述代码画出程序的流程图和控制流程图。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.util.Scanner; public class runnian { public static void main(String[] args) { System.out.printf(\u0026#34;请输入年份：\u0026#34;); Scanner sc = new Scanner(System.in); int year = sc.nextInt(); int result = 0; // if (year % 4 == 0) { // if (year % 100 == 0) { // if (year % 400 == 0) { // result = 1; // } // } else { // result = 1; // } // } if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)){ result = 1; } if (result == 1) { System.out.println(year + \u0026#34;年是闰年\u0026#34;); } else { System.out.println(year + \u0026#34;年是平年\u0026#34;); } } } 图中，一共有10条边、8个节点、4个域，其中判定节点有3个，分别是1、3、4，程序的圈复杂度为4。\n根据圈复杂度可以得到4条独立的路径，具体如下：\n路径1：1→2→8\n路径2：1→3→4→6→8\n路径3：1→3→4→7→8\n路径4：1→3→5→8\n根据这4条独立路径即可设计测试用例。\n实例：while循环+if循环 根据下列代码，绘制程序流程图，控制流程图，计算程序的圈复杂度，设计测试用例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void sort(int a, int b) { int x = 0; int y = 0; while (a \u0026gt; 0) { if (b == 0) { x = y + 2; break; } else if (b == 1) { x = x + 10; } else { x = x + 20; } } } 实例：更复杂的控制流程图 根据代码右侧的步骤注释绘制控制流程图，计算程序的圈复杂度。\n逻辑覆盖法 语句覆盖 语句覆盖（Statement Coverage）又称行覆盖、段覆盖、基本块覆盖，它是最常见的覆盖方式之一。\n语句覆盖的目的是测试程序中的代码是否被执行，它只测试代码中的执行语句，这里的执行语句不包括头文件注释、空行等。\n语句覆盖在多分支的程序中只能覆盖某一条路径，使得该路径中的每一个语句至少被执行一次，不会考虑各种分支组合的情况。\n现有程序伪代码如下：\n1 2 3 4 if x \u0026gt; 0 and y \u0026lt; 0 z = z - (x - y) if x \u0026gt; 2 or z \u0026gt; 0 z = z + (x + y) 根据程序伪代码可以画出流程图：\n图中，a、b、c、d、e表示程序执行分支，Y表示条件成立，N表示条件不成立。在语句覆盖测试用例中，应使程序中的每个可执行语句至少被执行一次，根据图中标示的语句执行路径设计测试用例，具体如下。\n1 test1：x=3 y=-1 z=2 执行上述测试用例，程序的执行路径为 a→\u0026gt;c→e。\n可以看出程序中 a→c→e 路径上的每个语句都能被执行，但是语句覆盖无法全面反映多分支的逻辑，仅仅执行一次不能进行全面覆盖。因此，语句覆盖是弱覆盖方法。\n语句覆盖虽然可以测试执行语句是否被执行，但无法测试程序中存在的逻辑错误，例如，如果上述程序中的逻辑判断符号 “and” 误写成 “or”，使用测试用例 test1 同样可以覆盖 a→c→e 路径上的全部执行语句，但无法发现错误。\n同样，如果将 x\u0026gt;0 误写成 x\u0026gt;=0，使用同样的测试用例 test1 也可以执行 a→c→e 路径上的全部执行语句，但无法发现 x\u0026gt;=0 的错误。\n语句覆盖无须详细考虑每个判断表达式，可以直观地在源程序中有效测试执行语句是否全部被覆盖。由于程序在设计时语句之间存在许多内部逻辑关系，而语句覆盖不能发现其中存在的缺陷，所以语句覆盖并不能满足白盒测试中测试所有逻辑语句的基本需求。\n判定覆盖 判定覆盖（Decision Coverage）又称为分支覆盖，其原则是设计足够多的测试用例，在测试过程中保证每个判定条件至少有一次为真值、有一次为假值。\n判定覆盖的作用是使真假分支均被执行，虽然判定覆盖比语句覆盖测试能力强，但仍然具有与语句覆盖一样的单一性。\n由表可知，这 4个测试用例分别覆盖了 a→c→d、a→b→d、a→c→e、a→b→e执行语句路径，使得每个判定条件的取值满足了各有一次真与一次假。相比于语句覆盖，判定覆盖的覆盖范围更广。\n判定覆盖虽然保证了每个判定条件至少有一次为真值、有一次为假值，但是没有考虑到程序内部的取值情况，例如测试用例 test4，没有将 x\u0026gt;2 作为条件进行判断，仅仅判断了条件 z\u0026gt;0。\n判定覆盖语句一般是由多个逻辑条件组成的，如果仅仅判断测试程序执行的最终结果而忽略每个条件的取值，必然会遗漏部分测试路径。因此，判定覆盖也属于弱覆盖。\n条件覆盖 条件覆盖（Condition Coverage）是指设计足够多的测试用例，使判定语句中的每个逻辑条件取真值与取假值至少出现一次，例如，对于判定语句（a\u0026gt;1 or c\u0026lt;0）中存在 a\u0026gt;1 和 c\u0026lt;0 这 2 个逻辑条件，设计条件覆盖测试用例时，要保证 a\u0026gt;1、c\u0026lt;0 的真值、假值至少出现一次。\n设计测试用例时，要保证每种状态至少出现一次。\n可以看出，S1、S2、S3、S4、-S1、-S2、-S3、-S4 都至少出现了一次，但执行路径没有覆盖到 a→c→d。\n判断——条件覆盖 判定——条件覆盖（Decision-Condition Coverage）要求设计较多的测试用例，使得判定语句中所有条件的可能取值至少出现一次，同时，所有判定语句的可能结果也至少出现一次。\n例如，对于判定语句 if(a\u0026gt;1 and c\u0026lt;1)，该判定语句有 a\u0026gt;1、c\u0026lt;1 这2个条件，则在设计测试用例时，要保证 a\u0026gt;1 和 c\u0026lt;1 这 2 个条件取真值、假值至少一次，同时，判定语句 if(a\u0026gt;1and c\u0026lt;1) 取真值、假值也至少出现一次。判定——条件覆盖弥补了判定覆盖和条件覆盖的不足之处。\n相比条件覆盖、判定覆盖，判定——条件覆盖弥补了前两者的不足，但是由于判定——条件覆盖没有考虑判定语句与条件判断的组合情况，其覆盖范围并没有比条件覆盖更全面，判定——条件覆盖也没有覆盖 a→c→d 路径，因此判定——条件覆盖也存在遗漏测试的情况。\n条件组合覆盖 条件组合覆盖（Multiple Condiion Coverage）是指设计足够多的测试用例，使判定语句中每个条件的所有可能情况至少出现一次，并且每个判定语句本身的判定结果也至少出现一次。\n它与判定——条件覆盖的区别是它不是简单地要求每个条件都出现真与假 2 种结果，而是要求让这些结果的所有可能组合都至少出现一次。\n以上述程序为例，程序中共有4个条件：x\u0026gt;0、y\u0026lt;0、x\u0026gt;2、z\u0026gt;0。S1、S2、S3、S4 表示条件成立，-S1、-S2、-S3、-S4 表示条件不成立。\nS1 和 S2 属于同一个判定语句，有 4 种组合情况：S1/S2、S1/-S2、-S1/S2、-S1/-S2；\nS3 和 S4 属于同一个判定语句，有 4 种组合情况：S3/S4、S3/-S4、-S3/S4、-S3/-S4。\n在执行程序时，只要能分别覆盖2个判定语句的组合情况即可（出现一次），因此，条件组合覆盖至少要 4 个测试用例。\n设计测试用例如下：\n与判定——条件覆盖相比，条件组合覆盖包括了所有判定——条件覆盖，因此它的覆盖范围更广。但是当程序中的条件比较多时，条件组合的数量会呈线性增长，组合情况非常多，要设计的测试用例也会增加，这样反而会使测试效率降低。\n实例：三角形的判定覆盖 根据三角形三边关系可知可能出现4种情况：不构成三角形、一般三角形、等腰三角形、等边三角形。据此实现一个判断三角形的程序。\n程序插桩法 程序插桩法是一种被广泛使用的软件测试技术,简单来说，程序插桩法就是往被测试程序中插入测试代码，以达到测试目的的方法，插入的测试代码被称为探针。根据测试代码插入的时间不同可以将程序插桩法分为目标代码插桩和源代码插桩。\n目标代码插桩 目标代码插桩是指向目标代码（即二进制代码）插入测试代码，以获取程序运行信息的测试方法，也称为动态程序分析方法。在进行目标代码插桩之前，测试人员要对目标代码的逻辑结构进行分析，从而确认需要插桩的位置。\n目标代码插桩对程序运行时的内存监控、指令跟踪、错误检测等有着重要意义。相比于逻辑覆盖法，目标代码插桩在测试过程中不需要重新编译代码或链接程序，并且目标代码的格式与具体的编程语言无关，主要与操作系统相关，因此目标代码插桩被广泛使用。\n目标代码插桩的原理 目标代码插桩的原理是在程序运行平台和底层操作系统之间建立中间层，通过中间层检查执行程序、修改指令，开发人员、软件分析工程师等对运行的程序进行观察，判断程序是否被恶意攻击或者出现异常行为，从而提高程序的整体质量。\n目标代码插桩的两种方式 由于目标代码是可执行的二进制代码，所以目标代码的插桩可分为两种方式。\n第1种方式是对未运行的目标代码插桩，首先从头到尾插入测试代码，然后执行程序。这种方式适用于需要实现完整系统或仿真（模拟真实系统）时进行的代码覆盖测试。\n第2种方式是向正在运行的程序插入测试代码，用来检测程序在特定时间的运行状态信息。\n目标代码插桩的执行模式 目标代码插桩具有以下3种执行模式。\n（1）即时模式（Just-In-Time Mode）\n原始的二进制或可执行文件没有被修改或执行，将修改部分的二进制代码以副本的形式存储在新的内存区域中，在测试时仅执行修改部分的目标代码。\n（2）解释模式（Interpretation Mode）\n在解释模式中目标代码被视为数据，测试人员插人的测试代码作为目标代码指令的解释语言。每当执行一条目标代码指令时，程序就会在测试代码中查找并执行相应的替代指令，测试通过替代指令的执行信息就可以获取程序的运行信息。\n（3）探测模式（Probe Mode）\n探测模式使用新指令覆盖旧指令进行测试，这种模式在某些体系结构（如x86体系结构）中比较适用。\n目标代码插桩工具 由于目标程序是可执行的二进制文件，人工插人代码是无法实现的，所以目标代码插桩一般通过相应的插桩工具实现，插桩工具提供的 API（Application Program Interace，API）可以为用户提供访问指令。\n常见的目标代码插桩工具主要有 Pin-A Dynamic Binary Instrumentation Tool（Pin）和 DynamoRIO。\n源代码插桩 源代码插桩是指对源文件进行完整的词法、语法分析后，确认插桩的位置，插入探针代码（测试代码）。相比目标代码插桩，源代码插桩具有针对性和更高的精确性，实现复杂度更低。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include \u0026lt;stdio.h\u0026gt; // 定义ASSERT(y) #define ASSERT(y) if(y){\tprintf(\u0026#34;出错文件: %s\\n\u0026#34;, _FILE_);\\ printf(\u0026#34;在%d行: \\n\u0026#34;, _LINE_\\); printf(\u0026#34;提示: 除数不能为0! \\n\u0026#34;);\\ } int main() { int x, y; printf(\u0026#34;请输入被除数: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); printf(\u0026#34;请输入除数: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;y); // 插入的桩(即探针代码) ASSERT(y == 0);\tprintf(\u0026#34;%d\u0026#34;, x/y); return 0; } 为了监视除法运算中的除数输入是否正确，在第14行插入宏函数ASSERT(y==0)，当除数为0时输出错误原因、出错文件、出错所在行的行号等提示信息。宏函数 ASSERT(y)中使用了C语言标准库的宏定义 \u0026ldquo;__FILE__\u0026rdquo; 提示出错文件、\u0026quot;__LINE__\u0026quot; 提示文件出错位置。\n程序运行后，提示输入被除数和除数，在输入除数后，程序的宏函数ASSERT(y)判断除数是否为0，若除数为0则输出错误信息，程序运行结束；若除数不为0，则进行除法运算并输出计算结果。根据除法运算程序设计测试用例，除法运算测试用例如下表所示。\n对插桩后的 C语言源程序进行编译、链接，生成可执行文件并执行，然后输入表中的测试数据，可以观察测试用例的实际执行结果与预期结果是否一致。\n程序的目标代码插桩与源代码插桩测试方法有效提高了代码测试覆盖率，但是使用插桩测试方法会出现代码膨胀、执行效率低下、HeisenBugs等问题。一般情况下插桩后的代码膨胀率在 20%~40%，甚至能达到100%，导致插测试失败。\n黑盒测试和白盒测试的异同 测试目标 黑盒测试过程中不用考虑程序内部的逻辑结构，仅仅需要验证程序外部功能是否符合用户实际需求。黑盒测试可以发现以下3种类型的缺陷。\n外部逻辑功能缺陷，例如界面显示信息错误、输入框中无法输入内容等 兼容性错误，例如系统版本不支持、运行环境不支持等。 性能问题，例如运行速度慢、响应时间长等。 白盒测试与黑盒测试不同，白盒测试可以设计测试用例尽可能覆盖程序中的分支语句，用于分析程序内部的逻辑结构。白盒测试常用于以下2种情况。\n源程序中含有多个分支，在设计测试用例时要尽可能覆盖所有分支，提高测试覆盖率。 检查内存泄漏。黑盒测试只能在程序长时间运行中发现内存泄漏问题，而白盒测试能立即发现内存泄漏问题。 测试阶段 黑盒测试与白盒测试在不同的测试阶段的使用情况也不同，在测试过程中，黑盒测试与白盒测试结合使用会大幅提升软件测试质量。\n本章习题 填空题 语句覆盖的目的是测试程序中的代码是否被执行，它只测试代码中的（ 执行语句 ）。\n（ 判定覆盖 ）的作用是使真、假分支均被执行。\n（ 条件覆盖 ）是指判定语句中的每个条件都要取真值、假值各一次。\n对于判定语句 if(a\u0026gt;1 and c\u0026lt;1)，测试时要保证 a\u0026gt;1、c\u0026lt;1 两个条件取真值、假值至少一次，同时，判定语句 if(a\u0026gt;1 and c\u0026lt;1)取真值、假值也至少一次，这使用了（ 判断——条件 ）覆盖方法。\n（ 条件组合覆盖 ）要求判定语句中所有条件取值的可能组合至少出现一次。\n判断题 语句覆盖无法考虑分支组合情况。（ √ ）\n语句覆盖可以测试程序中的逻辑错误。（ × ）\n判定——条件覆盖没有考虑判定语句与条件判断的组合情况。（ × ）\n圈复杂度用来衡量一个模块判定结构的复杂程度。（ √ ）\n选择题 下列选项中，哪一项不属于逻辑覆盖法（ D ）？\nA. 语句覆盖\nB. 条件覆盖\nC. 判定覆盖\nD.判定——语句覆盖\n关于逻辑覆盖法，下列说法中错误的是（ C ）。\nA.语句覆盖的语句不包括空行、注释等\nB.相比于语句覆盖，判定覆盖考虑到了每个判定语句的取值情况\nC.条件覆盖考虑到了每个逻辑条件的取值的所有组合情况\nD.在逻辑覆盖法中，条件组合覆盖是覆盖率最大的测试方法\n关于圈复杂度的计算，下列说法中正确的是（ D ）。\nA. 圈复杂度的数量等于控制流图中的节点数量\nB. 使用 V(G)=P+1 可以计算圈复杂度，其中 P 表示控制流图中边的数量\nC. 使用 V(G)=E-N+2 可以计算圈复杂度，其中 E 表示控制流图中节点的数量，N 表示控制流图中边的数量\nD. 圈复杂度等于控制流图中的区域数量\n","date":"2024-08-28T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/","title":"第三章 白盒测试方法"},{"content":"等价类划分法 ⭐ 等价类划分法概述 等价类划分法是一种常用的黑盒测试方法，它主张从大量的数据中选择一部分数据用于测试，即尽可能使用最少的测试用例覆盖最多的数据，以发现更多的软件缺陷。\n使用等价类划分法测试程序需要经过划分等价类和设计测试用例2个步骤，其中等价类可以划分为有效等价类与无效等价类。\n有效等价类指有效值的集合，这些有效值是符合程序要求、合理且有意义的输入数据；\n无效等价类指无效值的集合，这些无效值是不符合程序要求、不合理或无意义的输入数据。\n在划分等价类时，需要遵守以下4个原则：\n（1） 如果程序要求输入值是一个有限区间的值，则可以将输入数据划分为1个有效等价类和2个无效等价类，有效等价类为指定区间中的值的集合，2个无效等价类分别为有限区间两边的值的集合。例如，某程序要求输入值x的范围为[1,100]，则有效等价类为1\u0026lt;=x\u0026lt;=100，无效等价类为x\u0026lt;1和 x\u0026gt;100。\n（2） 如果程序要求输入值“必须成立”，则可以将输入数据划分为1个有效等价类和1个无效等价类。例如，某程序要求密码正确，则正确的密码属于有效等价类，错误的密码属于无效等价类。\n（3） 如果程序要求输入值是一组可能的值，或者要求输入值必须符合某个条件，则可以将输入数据划分为1个有效等价类和1个无效等价类。例如，某程序要求输入数据必须是以数字开头的字符串，则以数字开头的字符串属于有效等价类，不以数字开头的字符串属于无效等价类。\n（4） 如果在某一个等价类中，每个输入值在程序中的处理方式都不相同，则应将该等价类划分成更小的等价类，并建立等价类表。\n实例一：QQ账号合法性的等价类划分 要求：QQ账号是6~10位自然数，在登录QQ时，根据QQ账号的长度判断QQ账号的合法性。\n等价类 说明 有效等价类 6~10位自然数 无效等价类 少于6位自然数（包括0位） 无效等价类 多于10位自然数 无效等价类 6~10位非自然数 无效等价类 少于6位非自然数（包括0位） 无效等价类 多于10位非自然数 基于等价类划分法设计QQ账号的测试用例：\n测试用例编号 用例标题 项目/模块 优先级 前置条件 测试步骤 测试数据 预期结果 Tec_acc_001 账号适长 账号 / 已打开\u0026hellip; 先打开\u0026hellip; 12345678 账号合法 Tec_acc_002 账号过短 \u0026hellip; / \u0026hellip; \u0026hellip; 123 不合法 \u0026hellip; 账号过长 / 12345678910 \u0026hellip; \u0026hellip; 适长非法 / abc\u0026laquo;\u0026lt; \u0026hellip; \u0026hellip; 过短非法 / 空值 \u0026hellip; Tec_acc_006 过长非法 / abc\u0026laquo;\u0026lt;abc\u0026laquo;\u0026lt; \u0026hellip; 实例二：三角形问题的等价类划分 要求：程序要求输入3个数作为三角形的3条边，判断这3个数构成的是一般三角形、等边三角形、等腰三角形，还是无法构成三角形。\n等价类 说明 有效等价类 输入3个数 无效等价类 输入0个数 无效等价类 输入1个数 无效等价类 输入2个数 无效等价类 输入大于3个数 在上述有效等价类“输入3个数”中，又可以分为：\n等价类 说明 有效等价类 3个数都是正数 无效等价类 3个数中有1个数小于0 无效等价类 3个数中有2个数小于0 无效等价类 3个数都小于0 在上述有效等价类“3个数都是正数”中，又可以分为：\n等价类 说明 有效等价类 任意2个数之和大于第3个数（能构成三角形） 无效等价类 有2个数之和小于第3个数（不能构成三角形） 在上述有效等价类“任意2个数之和大于第3个数”中，又可以分为：\n等价类 说明 有效等价类 恰好只有2个数相等（等腰三角形） 有效等价类 3个数均相等（等边三角形） 无效等价类 3个数均不相等（普通三角形） 综上，可以总结三角形问题的等价类表如下：\n基于等价类划分法设计三角形问题的测试用例：\n实例三：余额宝提现的等价类划分 余额宝的提现方式有2种：快速到账（2小时），每日最高提现额度为 10000元；普通到账，可提取金额为余额宝中的最大余额，但到账时间会慢一些。\n对余额宝的提现功能进行测试，首先对余额宝提现功能进行等价类划分。\n对于快速到账：\n等价类 说明 有效等价类 0 \u0026lt; 提现金额 \u0026lt;= 10000 无效等价类 提现金额 \u0026lt;= 0 无效等价类 提现金额 \u0026gt;= 10000 无效等价类 提现金额 \u0026gt;= 余额 对于普通到账：\n等价类 说明 有效等价类 0 \u0026lt; 提现金额 \u0026lt;= 余额 无效等价类 提现金额 \u0026lt;= 0 无效等价类 提现金额 \u0026gt;= 余额 基于等价类划分法设计余额宝提现的测试用例：\n边界值分析法 ⭐ 边界值分析法概述 边界值分析法是对软件的输入或输出边界进行测试的一种方法，它通常作为等价类划分法的一种补充测试方法。对于软件来说，错误经常发生在输入或输出值的关键点，即从符合需求到不符合需求的关键点，因此边界值分析法在等价类的边界上执行软件测试工作，它的所有测试用例都是在等价类的边界处设计的。\n在等价类划分法中，无论是输入值还是输出值，都会有多个边界，而边界值分析法是在这些边界附近寻找某些点作为测试值，而不是在等价类内部选择测试值。在使用边界值分析法时，可以通过确定边界的3个点来设计测试用例，这3个点分别是上点、离点和内点。\n上点是指边界上的点，离点是指距离边界最近的点，内点是指需求给定范围内的点。\n在等价类中选择边界值时，如果输入条件规定了取值范围或取值个数，则在选取边界值时可选取5个测试值或7个测试值。\n如果选取5个测试值，即在2个边界值内选取5个测试值：最小值、略大于最小值、正常值、略小于最大值、最大值。例如，输入条件规定取值范围为1~100，则可以选取1、1.1、50、99.9和100作为测试值。\n如果选取7个测试值，则在取值范围两侧再各选取一个测试值，这7个测试值分别是略小于最小值、最小值、略大于最小值、正常值、略小于最大值、最大值、略大于最大值，对于上述输入条件，可选取0.9、1、1.1、50、99.9、100和100.1作为测试值。\n如果软件要求输入或输出是一组有序集合（如数组、链表等），则可选取第一个和最后一个元素作为测试值。如果被测试程序中有循环，则可选取第0次、第1次与最后2次循环作为测试值。除了上述讲解到的边界值选取外，软件还有其他边界值的选取情况，在对软件进行测试时，要仔细分析软件规格需求，找出其可能的边界条件。\n边界值分析法只在边界取值上考虑测试的有效性。相对于等价类划分法来说，它的执行更加简单易行，但缺乏充分性，不能整体、全面地测试软件，因此它通常作为等价类划分法的补充测试方法。\n实例一：QQ账号合法性的边界值分析 要求：QQ账号是6~10位自然数，在登录QQ时，根据QQ账号的长度判断QQ账号的合法性。\n测试用例如下所示：\n测试用例编号 用例标题 项目/模块 优先级 前置条件 测试步骤 测试数据 预测结果 Tec_acc_001 上点（6） 账号 / 已打开\u0026hellip; 先打开\u0026hellip; 123456 合法 Tec_acc_002 上点（10） \u0026hellip; / \u0026hellip; \u0026hellip; 1234567890 合法 \u0026hellip; 离点（5） / 12345 不合法 \u0026hellip; 离点（7） / 1234567 合法 \u0026hellip; 离点（9） / 123456789 合法 Tec_acc_006 离点（11） / 12345678910 不合法 Tec_acc_007 内点（8） / 12345678 合法 实例二：三角形问题的边界值分析 要求：输入3个数作为三角形的3条边，判断这3个数构成的是一般三角形、等边三角形、等腰三角形，还是无法构成三角形。\n要求：三边取值范围为1~100。\n实例三：余额宝提现的边界值分析 要求：快速到账额度为 10000元；普通到账可提取金额为余额宝中的最大余额。\n因果图法与决策表法 等价类划分法与边界值分析法主要侧重于输入条件，却没有考虑输入条件之间的关系，例如，组合关系、约束关系等。由于程序输入之间有作用关系，等价类划分法与边界值分析法很难描述输入之间的作用关系，无法保证测试效果，所以需要学习一种新的方法来描述多个输入之间的作用关系，即因果图法。\n因果图法概述 在因果图法中，原因表示输入条件，结果表示输入执行后得到的输出，最终根据因果图法的分析绘制决策表。决策表法适用于检查程序输入条件的各种组合情况。\n例如，某一软件要求输入的地址具体到市区，例如 “北京→昌平区” “天津→南开区”，其中第二个输入受到第一个输入的约束，输人的城区只能在输入的城市中选择，否则输入的地址无效。\n像这样多个输入之间有相互制约关系的情况，就无法使用等价类划分法和边界值分析法设计测试用例。因果图法就是为了解决多个输入之间的作用关系而产生的测试用例设计方法。\n因果图中的关系 因果图使用一些简单的逻辑符号和直线将程序的原因（输入）与结果（输出）连接起来，一般原因用c表示，结果用 e 表示，c 与 e 可以取值 “0” 或 “1”，其中 “0” 表示状态不出现，“1” 表示状态出现。\n输入与输出之间有恒等、非、或、与这4种关系。\n恒等： 在恒等关系中，要求程序有一个输入和一个输出，输出与输入保持一致。若c为1，则e也为1；若c为0，则e也为0。\n非： 使用符号“~”表示，在非关系中，要求程序有一个输入和一个输出，输出是输入的取反。若为1，则e为0；若c为0，则e为1。\n或： 使用符号“∨”表示，或关系可以有多个输入，只要这些输入中有一个为1，则输出为1，否则输出为0。\n与： 使用符号“∧”表示，与关系也可以有多个输入，但只有这些输入全部为1，输出才能为1，否则输出为0。\n多个输入之间的约束关系 在软件测试中，如果程序有多个输入，那么除了输入与输出之间的作用关系外，这些输入之间往往也会存在某些依赖关系，即某些输入条件本身不能同时出现或某一种输入可能会影响其他输入。\n例如，某一软化用于统计体检信息，在输入个人信息时，性别只能输入男或女，这2种输入不能同时存在，而且如果输入性别为女，那么体检项就会受到限制。\n这些依赖关系在软件测试中称为“约束”，约束的类别可分为4种：异、或、唯一、要求。\nE（Exclusive，异）： a和b中最多只能有一个为1，即a和b 不能同时为1。\nI（At Least One，或）： a、b和c中至少有一个必须是1，即a、b、c不能同时为0。\nO（One and Only One，唯一）： a和b中有且仅有一个为1。\nR（Require，要求）： a和b必须保持一致，即a为1时，b也必须为1， a为0时，b也必须为0。\n强制约束关系 除了输入条件，输出条件之间也会相互约束。输出条件的约束只有一种，即 M（Mask，强制）。\n在输出条件的强制约束关系中，如果a为1，则b强制为0，如果a为0，则b强制为1。\n决策表法概述 在实际测试中，如果输入条件较多，再加上各种输人与输出之间的相互作用关系，画出的因果图就会比较复杂，让人不易理解。为了避免这种情况出现，测试人员往往使用决策表法代替因果图法。\n决策表也称为判定表，其实质就是一种逻辑表。\n在程序设计发展初期，决策表就已经被当作程序开发的辅助工具了，用于帮助开发人员设计开发模式和整理开发流程，因为它可以把复杂的逻辑关系和多种条件组合的情况表达得既具体又明确，利用决策表可以设计出完整的测试用例集合。\n决策表通常由4个部分组成，具体如下。\n条件桩： 用于列出问题的所有条件，除了某些问题对条件的先后次序有要求外，通常决策表中所列条件的先后次序都无关紧要。\n条件项： 条件桩的所有可能取值。\n动作桩： 对问题可能采取的动作，这些动作一般没有先后次序之分。\n动作项： 指出在条件项的各组取值情况下应采取的动作。\n有些工作可能是重复的、无意义的，如表 2-14 中的规则 1 与规则 2，在前两个问题取值相同的情况下，无论是否对内容不理解，建议都是 “停止阅读并休息”，因此第三个问题就称为无关条件项，可以将这两条规则合并，使用 “-” 表示。\n实例一：零食自动售货机售货情况的因果图与决策表绘制 假设零食自动售货机主要售卖糖果和饼干，其中糖果和饼干的单价均为5角，**每次只能投入一枚5角的硬币或一枚1元的硬币，并按“糖果”按钮或“饼干”按钮进行购买，不能同时按“糖果”按钮和“饼干”按钮。**零食自动售货机的具体使用说明如下。\n如果售货机中没有5角的硬币以供找回，则亮红灯，提示顾客此种情况下不要投入1元的硬币；如果有5角的硬币以供找回，则红灯不亮。 如果顾客投入5角的硬币并按“糖果”按钮或“饼干”按钮，则送出糖果或饼干。 如果顾客投入1元的硬币并按“糖果”按钮或“饼干”按钮，且售货机有5角的零钱找回，则退出一枚5角的硬币并送出糖果或饼干。 如果顾客投入1元的硬币并按“糖果”按钮或“饼干”按钮，且售货机没有5角的零钱找回，则亮红灯，然后退出1元的硬币，无法送出糖果或饼干。 绘制决策表：\n简化决策表：\n实例二：三角形问题的因果图与决策表绘制 假设三角形的3边分别为a、b、c，则三角形问题有4个原因（是否构成三角形、a=b?、b=c?、c=a?）和5个结果（不构成三角形、一般三角形、等腰三角形、等边三角形、不符合逻辑）。\n每个原因可取值“Y”和“N”，因此共有2^4^=16条规则。\n设计测试用例：\n实例三：工资发放情况的因果图与决策表绘制 某公司的薪资管理制度如下：员工工资分为年薪制与月薪制2种，员工的犯错类型包括普通错误与严重错误2种，如果是年薪制的员工，犯普通错误扣款2%，犯严重错误扣款4%；如果是月薪制的员工，犯普通错误扣款4%，犯严重错误扣款8%。该公司编写了一款软件用于员工工资的计算发放，现在要对该软件进行测试。\n有4个原因，每个原因有“Y”和“N”2个取值，理论上可以组成2^4^=16条规则。由于c1与c2不能并存，所以只有8条规则。\n根据公司的薪资情况可设计测试用例。\n正交实验设计法 正交实验设计法概述 实际的软件测试中，测试的软件通常很复杂，很难从软件的需求规格说明中得出一一对应的输入、输出关系，不易划分出等价类，如果使用因果图法，则画出的因果图可能会很庞大。为了合理、有效地进行测试，可以利用正交实验法设计测试用例。\n正交实验法是一种高效、快速、经济的实验设计方法。\n正交实验设计法（Orthogonal Experimental Design）是指从大量的实验点中挑选出适量的、有代表性的点，依据 Galois 理论导出“正交表”，从而合理地安排实验的一种实验设计方法。在软件测试中，如果软件比较复杂，也可以利用正交实验法设计测试用例对软件进行测试。\n正交实验设计法包含3个关键因素，具体如下。\n指标： 判断实验结果优劣的标准。 因子： 也称为因素，是指所有影响实验指标的条件。 因子的状态： 也叫因子的水平，它是指因子变量的取值。 利用正交实验设计法设计测试用例时，按照 ① 提取因子，构造因子——状态表，② 加权筛选，简化因子——状态表，③ 构建正交表，设计测试用例 3 个步骤进行。正交表的表现形式如下：\nL 表示正交表。 n 为正交表的行数，每一行可以用于设计一个测试用例，因此行数 n 也表示可以设计的测试用例数。 c 表示正交实验的因子数目，即正交表的列数，因此正交表是一个 n 行 c 列的表。 t 称为水平数，表示每个因子能够取得的最大值，即因子有多少个状态。 例如 L4(2^3^) 是较为简单的正交表，它表示该实验有 3 个因子，每个因子有 2 个状态，可以做 4 次实验。如果用 0 和 1 表示每个因子的2种状态，正常情况下需要设计 2^3^ = 8 个测试用例。\n根据正交表查询网站 support.sas.com/techsup/technote/ts723_Designs.txt 可以得知，使用正交表只需要设计 4 个测试用例也可以达到相同效果，则该正交表就是一个 4 行 3 列的表。\n在实际软件测试中，大多数情况下，软件有多个因子，每个因子的状态数目都不相同，即各列的水平数不等，这样的正交表称为混合正交表，例如 L8(2^4^*4^1^)，这个正交表表示有 4 个因子有 2 种状态，有 1 个因子有 4 种状态。\n对于受多因子、多水平影响的软件，正交实验法可以高效、适量地生成测试用例，减少测试工作量，并且利用正交实验法得到的测试用例具有一定的覆盖率，检错率可在50%以上。正交实验法虽然好用，但在选择正交表时要注意先确定实验因子、因子的状态及它们之间的交互作用，同时还要考虑实验的精度要求、费用、时长等因素。\n实例一：微信Web页面运行环境正交实验设计 微信是一款手机App软件，但也有Web版微信可以登录。如果要测试微信Web页面运行环境，需要考虑多种因素，在众多的因素中，可以选出几个影响比较大的因素，例如服务器、操作系统、插件和浏览器。对于选出的4个影响因素，每个因素又有不同的取值。同样，在每个囚素的多个取值中，可以选出几个比较重要的值，具体如下。\n服务器：IIS、Apache、Jetty。 操作系统：Windows 7、Windows 10、Linux g 插件：无、小程序、微信插件。 浏览器：IE11、Chrome、Firefox。 正交实验法虽然高效，但并不是对每种软件测试都适用。在实际测试中，正交实验法其实使用得比较少。\n实例二：用户筛选功能正交实验设计 假设有一个招聘软件，招聘人员可以根据多个因素来筛选求职者。下面选择城市、招聘岗位、学历、计算机等级和工作经验作为关键因素，每个因素都有不同的取值，具体如下。\n城市：北京、上海、深圳、广州。\n招聘岗位：产品运营、产品经理、软件测试、软件工程师。\n学历：高中、专科、本科、研究生。\n计算机等级：计算机一级、计算机二级、计算机三级、计算机四级。\n工作经验：1年、2年、3年、4年。\n场景法 场景法概述 场景法也叫流程图法，是指通过模拟用户操作软件时的场景来对系统的功能或业务流程进行测试。场景法通常用于测试多个功能之间的组合使用情况，以及用于集成测试、系统测试和验收测试阶段。\n根据用户操作流程的正确性来划分时，场景法将用户的操作流程分为基本流和备选流。基本流也称为有效流，用来模拟用户正确的操作流程；备选流也称为无效流、错误流，用来模拟用户错误的操作流程。\n由图可知，基本流有1条，备选流有4条。备选流可以从基本流开始，例如备选流1、备选流2和备选流3；备选流也可以从备选流开始，例如备选流4。测试场景如下：\n场景1：基本流。 场景2：基本流→备选流1。 场景3：基本流→备选流1→备选流2。 场景4：基本流→备选流1→备选流3。 场景5：基本流→备选流1→备选流3→备选流4。 场景6：基本流→备选流2。 场景7：基本流→备选流3。 场景8：基本流→备选流3→备选流4。 在场景法中每一个场景是一条流程路径，根据流程路径的数量即可设计测试用例。 使用场景法设计测试用例可以按照以下4个步骤进行：\n步骤1：分析需求规格说明书。 步骤2：根据需求规格说明书绘制流程图。 步骤3：根据流程图确定测试场景。 步骤4：根据测试场景设计测试用例。 在绘制流程图时，首先需要确定测试场景中的关键业务以及各个业务之间的操作顺序，然后用箭头连接即可。\n实例一：电商网站购物场景分析 如今电商行业的发展非常迅速，许多公司开始研发电商网站，为用户提供更多的购物渠道。\n假设某公司研发了一个电商网站，现需要测试人员按照 “注册→登录→挑选商品→将商品加入购物车→支付→查看订单” 的流程进行测试。\n在使用电商网站进行购物时，首先进行注册，如果注册失败，则需要重新注册，直到注册成功后才可以登录电商网站。如果登录失败，则需要重新登录。\n该电商网站的支付方式有3种，分别是微信、银行卡和支付宝，如果用这3种方式都支付失败，则需要返回支付环节重新支付，直到支付成功后才能查看订单。\n分析图可知，基本流有1条，备选流有3条，具体如下。\n基本流：注册→登录→挑选商品→将商品加入购物车→支付→查看订单。 备选流1：注册失败。 备选流2：注册成功→登录失败。 备选流3：注册成功→登录成功→挑选商品→将商品加入购物车→支付失败。 通过对基本流和备选流进行分析，可以得出4个测试场景，具体如下。\n场景1：基本流。 场景2：基本流+备选流1。 场景3：基本流+备选流2。 场景4：基本流+备选流3。 基本流+备选流1+备选流2+备选流3 多次注册后成功，多次登录后成功，支付均失败\n基本流+备选流1+备选流2 基本流+备选流1+备选流3 基本流+备选流2+备选流3 在使用场景法设计测试用例时，每一个场景对应一个测试用例，根据4个测试场景来设计测试用例。\n在实际的测试过程中，首先应使用等价类划分法或边界值分析法对单个功能（例如注册功能、登录功能、支付功能等）设计测试用例进行测试，然后结合场景法设计测试用例对整个购物流程开展测试。\n实例二：ATM取款场景分析 假设需要使用场景法测试某银行ATM的取款业务流程，银行给出的需求规格说明是：用户在ATM中插入有效的银行卡，输入正确的密码后选择取款业务，然后输入取款金额，待出钞后选择退卡即可完成取款。在取款的过程中，如果出现以下4种情况将取款失败，此时选择退卡，结束流程。\n密码输入错误的次数超过3次。 输入的取款金额不是100的倍数。 输入的取款金额大于账户余额。 输入的取款金额大于ATM取款额度。 通过上述需求规格说明，画出取款的流程图。\n由图可知，基本流有1条，备选流有5条，具体如下。\n基本流：插卡→输入密码→选择取款→输入取款金额→出钞→退卡。 备选流1：插卡→输入密码错误（3次以内）→选择取款→输入取款金额→出钞→退卡。 备选流2：插卡→输入密码错误（超过3次）→退卡。 备选流3：插卡→输入密码→选择取款→输入的取款金额不是100的倍数→退卡。 备选流4：插卡→输入密码选择取款→输入的取款金额大于账户余额→退卡。 备选流5：插卡→输入密码→选择取款→输入的取款金额大于ATM取款额度→退卡。 通过对基本流和备选流进行分析，可以得出6个测试场景，具体如下。\n场景1：基本流。（预期结果：取款成功） 场景2：基本流+备选流1。（预期结果：取款成功） 场景3：基本流+备选流1+备选流3。（预期结果：取款失败） 场景4：基本流+备选流1+备选流4。（预期结果：取款失败） 场景5：基本流+备选流1+备选流5。（预期结果：取款失败） 场景6：基本流+备选流2。（预期结果：取款失败） 其他\n场景7：基本流+备选流3。 场景8：基本流+备选流4。 场景9：基本流+备选流5。 假设测试的银行卡有效，密码为123456，账户余额为5000元，ATM取款额度为3000元。\n状态迁移图法 状态迁移图法概述 状态迁移图法（State Transition Diagram，STD）是黑盒测试的一种方法，状态迁移图用来描述系统或对象的状态，以及导致系统或对象状态发生改变的事件。\n状态迁移图法是通过分析被测系统的状态，以及这些状态之间的转换条件和路径来设计测试用例的一种方法，它主要用于验证在给定的条件内，系统对象是否能够发生状态的改变，以及是否存在不可能达到的状态或非法的状态等。在状态迁移图中，由一个状态、事件所确定的下一个状态可能会有多个，实际迁移到哪一个状态，由触发条件决定。\n状态迁移图法主要关注测试状态转移的正确性，将被测系统中业务流程的每个节点用状态来描述，通过触发的事件来完成各个状态之间的迁移。使用状态迁移图法设计测试用例的具体步骤如下。\n1. 绘制状态迁移图\n在使用状态迁移图法设计测试用例时,首先需要根据需求规格说明书分析被测系统中有哪些状态以及每个状态之间的迁移关系，然后绘制状态迁移图。在状态迁移图中，通常使用圆圈表示状态，使用箭头表示迁移的方向，在箭头的上方或下方描述状态迁移的条件。\n2. 列出状态——事件表\n根据绘制好的状态迁移图，分析各个状态之间不同的输入导致的状态迁移，列出状态——事件表。\n3. 绘制状态转换树并推导测试路径\n为了更好地推导测试路径，通常会借助状态转换树。首先确定一个根节点，然后向后延伸，直到所有的状态都包含在状态转换树中，从根节点到每一个子节点的路径即测试路径。\n4. 设计测试用例\n在设计测试用例时，选取达到规定的测试覆盖率的测试路径，并针对每条路径设计一个或多个测试用例。需要说明的是，状态迁移图法通常也需要结合等价类划分法和边界值分析法来设计测试用例。\n实例一：商城订单状态迁移图 假设商城的需求是：\n用户在搜索商品后，将商品加入购物车进行购买，用户提交订单后生成订单，订单状态转变为待支付，若支付失败，则订单状态转变为订单取消，若支付成功，则订单状态转变为待发货； 商家发货后，订单状态转变为待收货； 买家确认收货后，订单状态转变为订单完成； 用户可在待发货状态和待收货状态下申请退货或取消申请，若用户申请退货，则订单状态均转变为售后； 商家同意退货后，订单状态转变为已退货； 退货成功时，订单状态转变为订单完成； 如果用户在申请退货后，又取消申请，则订单状态转变为待发货或待收货； 商家发货并且买家确认收货后订单状态才转变为订单完成。 在图中，一共有8个状态，分别是提交订单、待支付、订单取消、待发货、待收货、售后、已退货和订单完成。商城订单状态——事件表如下所示：\n为了能够更好地确定测试路径，需要根据状态迁移图画出商城订单状态转换树。\n通过分析可知，一共有6条测试路径，具体如下。\n测试路径1：提交订单→待支付→订单取消。 测试路径2：提交订单→待支付→待发货→售后→待发货。 测试路径3：提交订单→待支付→待发货→售后→待收货。 测试路径4：提交订单→待支付→待发货→售后→已退货→订单完成。 测试路径5：提交订单→待支付→待发货→待收货→订单完成。 测试路径6：提交订单→待支付→待发货→待收货→售后。 则商场订单状态迁移的测试用例如下。\n由于状态迁移图法主要用于验证被测系统在特定条件下状态的转移过程是否合法，所以本实例设计的测试用例中，测试步骤描述的使用余额不足的银行卡支付、商家发货、买家确认收货等均是在前置条件成立的情况下进行测试的。在实际的测试工作中，需要结合用户的真实购物场景进行测试，这样才能减少被测系统或软件出现的缺陷。\n实例二：飞机售票系统状态迁移图 假设飞机售票系统的需求是：\n乘客可以通过小程序预约购买机票，预约成功时，机票状态为已预订； 乘客提交订单并成功支付机票费用后，机票状态为已支付； 乘客到机场取出机票后，机票状态为已出票； 乘客登机检票后，机票状态为已使用； 在登机前，例如在已预订、已支付或已出票的状态下，乘客可以取消订单，在这3种情况下取消订单时，机票状态都为已取消。\n根据上述给出的需求测试飞机售票系统中机票状态迁移的过程，分析需求，画出状态迁移图。\n机票状态迁移图一共由5个状态组成，分别是已预订、已支付、已出票、已使用和已取消。根据机票状态迁移图绘制机票状态——事件表。\n为了能够更好地确定测试路径，需要根据状态迁移图画出状态转换树。\n通过分析可知，一共有4条测试路径，具体如下。\n测试路径1：已预订→已取消。\n测试路径2：已预订→已支付→已取消。\n测试路径3：已预订→已支付→已出票→已取消。\n测试路径4：已预订→已支付→已出票→已使用。\n假设需要测试用户从预订机票到使用机票过程中机票状态的迁移过程，根据上述4条测试路径可以设计4个测试用例。\n在使用黑盒测试方法设计测试用例的过程中：\n① 如果测试模块具有输入功能，但是输入功能之间没有组合关系，则选择等价类划分法；\n② 如果测试模块的功能对输入有边界限制，例如长度范围、数值类型等方面的限制，则选择边界值分析法；\n③ 如果测试模块具有多输入、多输出、输入与输入之间存在组合关系、输入与输出之间存在依赖或制约关系的情况，则可以选择因果图法与决策表法；\n④ 如果想要用最少的测试用例获得测试模块的最大测试覆盖率，则可以选择正交实验设计法；\n⑤ 如果测试模块包含多个功能的组合，则可以选择场景法；\n⑥ 如果测试模块在特定条件下会发生状态的改变，则可以选择状态迁移图法；\n通常，对于测试经验丰富的测试人员来说，还会使用错误推测法来进一步补充测试用例的设计。\n本章习题 填空题 等价类划分就是将输入数据按照输入需求划分为若干个子集，这些子集称为（ 等价类 ）。\n（ 边界值分析法 ）通常作为等价类划分法的补充。\n因果图中的（ 恒等 ）关系要求程序有一个输入和一个输出，输出与输入保持一致。\n因果图的多个输入之间的约束包括（ 异 ）、（ 或 ）、（ 唯一 ）、（ 要求 ）共4种。\n决策表通常由（ 动作桩 ）、（ 动作项 ）、（ 条件桩 ）、（ 条件项 ）共4个部分组成。\n根据用户操作流程的正确性来划分，场景法通常分为（ 基本流 ）和（ 备选流 ）。\n判断题 有效等价类可以捕获程序中的缺陷，而无效等价类不能捕获缺陷。（ x ）\n如果程序要求输入值是一个有限区间内的值，可以划分一个有效等价类和一个无效等价类。（ x ）\n使用边界值分析法测试时，只取边界两个值即可完成边界测试。（ x ）\n因果图考虑了程序输入、输出之间的各种组合情况。（ √ ）\n决策表法是由因果图法演变而来的。（ √ ）\n正交实验设计法比较适用于复杂的大型项目。（ √ ）\n单选题 下列选项中，哪一项不是因果图中输入与输出之间的关系？（ ）\nA. 恒等\nB. 或\nC. 要求\nD. 非\n下列选项中，哪一项是因果图中输出之间的约束关系？（ ）\nA. 异\nB. 或\nC. 强制\nD. 要求\n下列选项中，哪一项不是正交实验设计法的关键因素？（ ）\nA. 指标\nB. 因子\nC. 因子状态\nD. 正交表\n","date":"2024-08-26T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95/","title":"第二章 黑盒测试方法"},{"content":"软件测试的背景意义 计算机发展史上几大著名的软件缺陷 1、Ariane 5 Crash\nAriane 5 是一种可以发射航天器的火箭。这种火箭在升空后 40 秒就会发生爆炸，原因是系统软件中的整数溢出漏洞，当在系统中输入一个比软件内置的最大整数还要大的整数时，系统内存将不会存储这个整数数字，由此引起软件崩溃，导弹爆炸。一枚火箭价值 3 亿 7000 万美元。\n2、爱国者导弹软件错误\n在第一次海湾战争期间，一枚伊拉克导弹击中了美军军营导致 28 死 98 伤，而部署在周围的爱国者导弹系统没有及时对对方的导弹进行拦截，原因是爱国者导弹雷达追踪系统有软件缺陷，没有发现导弹。\n3、千年虫\n在一些计算机系统中，不能把2000年识别为闰年，即在该计算机系统的日历中没有2000年2月29日这一天，而是直接由2000年2月28日过渡到了2000年3月1日；一些比较老的计算机系统中，在程序中使用了数字串99（或99/99等）来表示文件结束、永久性过期、删除等一些特殊意义的自动操作，这样当1999年9月9日（或1999年4月9日即1999年的第99天）来临时，计算机系统在处理到内容中有日期的文件时，就会遇到99或99/99等数字串，从而将文件误认为已经过期或者将文件删除等错误操作，引发系统混乱甚至崩溃等故障\n4、PayPal软件错误\n来自宾夕法尼亚的 Chris Reynold 一度成为了世界上最有钱的人，原因是 PayPal 错误的向他的账户里打了 9 亿 2000 万美元。\n5、《江南style》打破Youtube观看记录\nYoutube 网站使用 32 位有符号的整数来记录视频的观看次数。最初网站设定的视频最大观看次数被《江南style》打破，因此《江南style》的观看此数超过最大值后，变成了负数。之后谷歌将最大值扩大成了 64 位有符号的整数。\n6、软件中竞争条件缺陷导致50万人受到停电影响\n2003 年 8 月 14 日，一场大规模停电影响到了美国 8 个州和加拿大，总共 50 万人的生活。电脑专家指出是由于软件中的一个竞争条件缺陷导致的，单个操作中的 2 个独立线程使用了同一个代码，由于没有正常同步，2 个线程导致了整个电厂系统瘫痪，最终使 256 个发电厂的发电机停转。当时最大的影响应该是很多无线基站没有信号不能上网，因此很多人将笔记本电脑通过古老的拨号上网方式进行上网。\n软件的定义及分类方法 人们通常把各种不同功能的程序，包括系统程序、应用程序、自己编写的程序等称为软件。然而，当计算机的应用日益普及，软件产品日益复杂，软件规模日益增大时，人们意识到软件不仅仅等于程序。\n程序是人们为了完成特定的功能而编制的一组指令集，它由计算机语言描述，并且能够在计算机系统上执行。而软件不仅包括程序，还包括程序的处理对象——数据以及程序开发、维护和使用有关的图文资料。\n计算机软件是由专业人员开发并长期维护的软件产品，有以下 8 个特点。\n软件是一种逻辑实体，而不是具体的物理实体，因而它具有抽象性。 软件没有明显的制造过程，要提高软件质量，必须在软件开发方面下功夫。 软件不会出现机械磨损、老化等问题，但仍需要多次修改与维护。 软件的开发与运行受到计算机系统的限制，为了解决这个问题提出了软件移植。 软件的开发至今尚未完全摆脱人工的开发方式。 软件是复杂的，包括反映问题的复杂性和程序逻辑的复杂性。 软件开发需要投入大量成本。 软件工作涉及到社会因素。 根据软件规模不同，可以分为微型、小型、中型、大型、超大型软件；\n根据软件运行平台不同，可以分为个人计算机软件、嵌入式软件、基于Web的软件等；\n根据软件使用范围不同，软件可以分为应用软件和系统软件。\n软件概述 软件生命周期 软件生命周期分为多个阶段，每个阶段都有明确的任务，这样就使结构复杂、管理复杂的软件开发变得容易控制和管理。通常，可将软件生命周期划分为6个阶段。\n软件开发模型 软件开发模型规定了软件开发应遵循的步骤，是软件开发的“导航图”，它能够清晰、直观地表达软件开发的全过程，以及每个阶段要进行的活动和要完成的任务。开发人员在选择开发模型时，要根据软件的特点、开发人员的参与方式选择稳定、可靠的开发模型。\n常见的软件开发模型有：瀑布模型、快速原型模型、迭代模型、螺旋模型、敏捷模型。\n**瀑布模型：**瀑布模型采用从上至下一次性完成整个软件产品的开发的方式，该模型将软件开发过程分为6个阶段：计划→需求分析→软件设计→编码→测试→运行维护。\n瀑布模型是按照线性方式进行的，无法适应用户的需求变更，用户只能等到最后才能看到开发成果，这增加了开发风险。此外，对于现代软件来说，软件开发各阶段之间的关系大部分不会是线性的，很难使用瀑布模型开发软件，因此瀑布模型不再适合现代软件的开发，已经被逐渐废弃。\n**快速原型模型：**快速原型模型在最初确定用户需求时快速构造出一个可以运行的软件原型，用户对该原型进行审核评价，然后给出具体的需求意见，这样逐步丰富、细化需求，最后开发人员与用户达成最终共识，确定用户的真正需求。\n快速原型模型的关键在于快速构建软件原型，但准确地设计出软件原型存在一定的难度，此外，这种开发模型也不利于开发人员对产品进行扩展。\n**迭代模型：**迭代模型又称为增量模型或演化模型，它将一个完整的软件拆分成不同的组件，然后对每个组件进行开发测试，每测试完一个组件就将结果展现给用户，确定此组件的功能和性能是否满足用户需求，最终确定无误后，将组件集成到软件体系结构中。\n迭代模型需要将开发完成的组件集成到软件体系结构中，这样会有集成失败的风险，因此要求软件必须有开放式的体系结构。此外，迭代模型以逐个组件的形式开发、修改，很容易退化为“边做边改”的开发形式，从而失去对软件开发过程的整体控制。\n**螺旋模型：**螺旋模型融合了瀑布模型和快速原型模型，它最大的特点是引入了其他模型所忽略的风险分析。如果项目不能排除重大风险，就停止项目从而减小损失，这种模型比较适用于开发复杂的大型软件。\n**敏捷模型：**敏捷模型以用户的需求进化为核心，采用迭代、循序渐进的方式进行软件开发。敏捷模型可以及时响应用户的需求变更，不断适应新的趋势，但是在开发灵活的同时也带来了一定程度的混乱，例如，缺乏文档资料，软件旧版本部分功能的重现、回溯较为困难。对于较大的项目，参与开发的人员越多，有效沟通越困难，因此敏捷模型比较适用于小型项目的开发，而不太适用于大型项目的开发。\n软件质量概述 软件质量的概念 软件质量是指软件产品满足基本需求和隐式需求的程度。软件产品满足基本需求是指其能满足软件开发时所规定需求的特性，这是软件产品最基本的质量要求，其次是软件产品满足隐式需求的程度，例如，产品界面更美观、用户操作更简单等。\n从软件质量的定义可知，为了开发高质量的软件，需要满足以下3个需求，具体如下：\n**满足需求规定：**软件产品符合开发者明确给定的目标，并且能可靠运行。 **满足用户基本需求：**软件产品的需求是由用户给出的，软件开发最终的目的就是满足用户基本需求，解决用户的实际问题。 **满足用户隐式需求：**软件产品除了满足用户的基本需求外，如果还能满足用户的隐式需求，将会极大地提升用户满意度，这就意味着软件质量更高。 所谓高质量的软件，除了满足上述需求外，对于内部人员来说，它应该也是易于维护与升级的。软件开发时，统一的符合标准的编码规范、清晰合理的代码注释、形成文档的需求分析、软件设计等资料对于软件后期的维护与升级都有很大的帮助，同时，这些资料也是软件质量的重要体现。\n软件质量模型 ⭐ ISO/IEC 9126:1991是一个通用的评价软件质量的国际标准，它不仅对软件质量进行了定义，而且制定了软件测试的规范流程，包括测试计划的撰写、测试用例的设计等。\n**功能性：**在指定条件下，软件产品满足用户基本需求和隐式需求的能力。\n**可靠性：**在指定条件下使用时，软件产品维持规定的性能级别的能力。\n**可使用性：**在指定条件下，软件产品被使用、理解、学习的能力。\n**效率：**在指定条件下，相对于所有资源的数量，软件产品可提供适当性能的能力。\n**可维护性：**指软件产品被修改的能力，修改包括修正、优化和功能规格变更的说明。\n**可移植性：**指软件产品从一个环境迁移到另一个环境的能力。\n例：以微信为例，验证微信的软件质量。\n影响软件质量的因素 由于软件自身的特点和目前的软件开发模式存在不足，隐藏在软件内部的质量缺陷无法完全被根除，所以每一款软件都会存在一些质量问题。影响软件质量的因素有很多，常见的有：需求模糊、软件开发缺乏规范性文件的指导、软件开发人员变化、缺乏软件质量的管控等。\n软件缺陷管理 软件缺陷产生的原因 软件缺陷就是通常所说的 bug，它是指软件中存在的影响软件正常运行的问题。从产品内部看，缺陷是产品开发或维护过程中存在的错误、问题等；从产品外部看，缺陷是系统运行过程中某种功能的失效。\n软件缺陷产生的原因主要有：需求不明确、软件结构复杂、编码问题、项目期限短、使用新技术等。\n软件缺陷的分类 软件缺陷有很多，从不同的角度可以将软件缺陷划分为不同的种类，具体划分如下：\n按照测试种类，可以将软件缺陷划分为界面缺陷、功能缺陷、性能缺陷、安全性缺陷、兼容性缺陷等。 按照缺陷的严重程度，可以将软件缺陷划分为严重缺陷、一般缺陷、次要缺陷、建议缺陷。 按照缺陷的优先级不同，可以将软件缺陷划分为立即解决缺陷、高优先级缺陷、正常排队缺陷、低优先级缺陷。 按照缺陷的发生阶段不同，可以将软件缺陷划分为需求阶段缺陷、架构阶段缺陷、设计阶段缺陷、编码阶段缺陷、测试阶段缺陷。 软件缺陷的处理流程 （1）提交：测试人员发现缺陷之后，将缺陷提交给测试组长。\n（2）分配：测试组长接收到测试人员提交的缺陷之后，将其移交给开发人员。\n（3）确认：开发人员接收到移交的缺陷之后，会与团队甚至测试人员一起商议，确定其是否是一个缺陷。\n（4）拒绝/延期：如果经过商议之后，发现其不是一个真正的缺陷，则拒绝处理此缺陷，对其进行关闭处理。如果经过商议之后，确定其是一个真正的缺陷，则可以根据缺陷的严重程度或优先级等立即处理或延期处理。\n（5）处理：开发人员修改缺陷。\n（6）复测：开发人员修改好缺陷之后，测试人员重新进行测试（复测)，检测缺陷是否已经修改。如果未被正确修改，则重新提交缺陷。\n（7）关闭：测试人员重新测试之后，如果缺陷已经被正确修改，则将缺陷关闭，整个缺陷处理完成。\n软件缺陷报告 在实际软件测试过程中，测试人员在提交软件测试时都会按照公司规定的模板将缺陷的详细情况记录下来并生成软件缺陷报告。每个公司的软件缺陷报告模板通常并不相同，但一般都会包括缺陷的ID、类型、严重程度、优先级，以及测试环境等，有时还会有测试人员的建议。\n软件测试概述 软件测试简介 软件测试是使用人工或自动手段运行或测定某个系统的过程，其目的在于检验它是否满足规定的需求或是弄清楚预期结果与实际结果之间的差异。\n敏捷模型促使人们对软件测试重新进行了思考，更多的人倾向于软件开发与软件测试的融合，即不再是在软件完成之后再进行测试，而从软件需求分析阶段，测试人员就参与其中，了解整个软件的需求、设计等。\n软件开发与软件测试融合后，虽然两者的界限变得模糊，但软件开发与软件测试的工作效率都得到了极大的提高，这种工作模式至今依然盛行。\n软件测试的目的 从软件开发角度来说，软件测试通过找到的缺陷帮助开发人员找到开发过程中存在的问题，包括软件开发的模式、工具、技术等方面存在的问题，从而预防缺陷的产生。 从软件测试角度来说，主要目的是使用最少的人力、物力、时间等找到软件中隐藏的缺陷，保证软件的质量，也为以后的软件测试积累丰富的经验。 从用户需求角度来说，软件测试能够检验软件是否符合用户需求，对软件质量进行评估和度量，可为用户评审软件提供有力的依据。 软件测试的分类 按测试阶段分类 ⭐ 测试阶段 说明 单元测试 验证软件单元是否符合用户需求与设计需求。单元测试大多是开发人员进行的自测。 冒烟测试 对新构建版本软件进行的最基本的测试。\n如果测试未通过，需要返回给开发人员进行修正；如果测试通过则再进行其他测试。 集成测试 将已经测试过的软件单元组合在一起并测试它们之间的接口，验证软件是否满足设计需求。 系统测试 系统测试将经过测试的软件放在实际环境中运行，并将其与其他系统的成分\n（如数据库、硬件和操作人员等）组合在一起进行测试。 验收测试 逐行逐字地按照说明书的描述对软件产品进行测试，确保其符合用户的各项要求。 按是否需要查看代码分类 ⭐ 测试技术 说明 黑盒测试 黑盒测试又叫功能测试、数据驱动测试、基于需求规格说明书的功能测试，\n它把软件当作一个有输入与输出的“黑匣子”，只要输入的数据能输出预期的结果\n即可，不必关心软件内部是怎样实现的，注重于测试软件的功能性需求。 白盒测试 白盒测试又叫透明盒测试、结构测试、逻辑驱动测试或基于代码的测试，\n它是指测试人员了解软件程序的逻辑结构、路径和运行过程，\n在测试时，按照程序的执行路径得出结果。\n白盒测试把软件（程序）当作一个透明的“盒子”，\n测试人员清楚地知道从输入到输出的每一步过程。 灰盒测试 灰盒测试是介于黑盒测试与白盒测试之间的一种软件测试方法，\n它由方法和工具组成，这些方法和工具取决于应用程序内部交互的环境。\n灰盒测试通常用于集成测试阶段，测试人员在使用灰盒测试方法时，\n不仅需要关注输入、输出的正确性，而且需要关注程序内部的情况，\n通常根据—些现象、事件、标志来判断内部的运行状态。 相对于黑盒测试来说，白盒测试对测试人员的要求会更高一点，它要求测试人员具有一定的编程能力，而且要熟悉各种脚本语言。\n但是在企业中，黑盒测试与白盒测试并不是界限分明的，在测试一款软件时往往将黑盒测试与白盒测试相结合对软件进行完整、全面的测试。\n灰盒测试虽然没有白盒测试详细、完整，但是比黑盒测试更关注程序的内部逻辑，能够用于黑盒测试以提高测试的效率。\n按软件质量特性分类 软件质量特性 说明 功能测试 测试软件的准确性、易用性、适合性、互操作性等是否满足用户的需求。 性能测试 测试软件的是否满足用户的需求，包括负载测试、压力测试、兼容性测试、\n可移植性测试和健壮性测试等。 按自动化程度分类 自动化程度 说明 人工测试 人工测试是测试人员编写与执行测试用例的过程。人工测试比较耗时、费力，\n而且测试人员如果在疲惫状态下，很难保证测试的效果。 自动化测试 借助脚本、自动化测试工具等完成相应的测试工作，它也需要人工的参与，\n但是它可以将要执行的测试代码或流程写成脚本，通过执行脚本完成整个测试工作。 按测试项目分类 测试项目 说明 界面测试 验证软件界面是否符合用户需求，包括界面布局是否美观、按钮是否齐全等。 文档测试 文档测试以需求分析说明书、软件设计文档、用户手册、安装手册为主，\n主要验证文档说明与实际软件情况之间是否存在差异。 安全性测试 测试软件在受到没有授权的内部或外部用户的攻击或恶意破坏时如何进行处理，\n是否能保证软件与数据的安全。 功能测试 / 性能测试 / 其他分类 其他分类 说明 α测试 α测试是指对软件最初版本进行测试。软件最初版本一般不对外发布，\n在上线之前，由开发人员和测试人员或者用户协助进行测试。\n测试人员记录软件最初版本在使用过程中出现的错误和问题，整个测试过程是可控的。 β测试 β测试是指对上线之后的软件版本进行测试，此时软件已上线发布，\n但发布的版本中可能会存在较小的bug，\n由用户在使用过程中发现错误和问题并进行记录，然后反馈给开发人员进行修复。 回归测试 当测试人员发现缺陷以后，会将缺陷提交给开发人员，开发人员对程序进行修改；\n修改之后，测试人员会对修改后的程序重新进行测试，\n确认原有的缺陷已经消除并且没有引入新的缺陷，\n这个重新测试的过程称为回归测试。\n回归测试是软件测试工作中非常重要的一部分，软件开发的各个阶段都会进行多次回归测试。 随机测试 随机测试是没有测试用例、检查列表、脚本或指令的测试，\n它主要根据测试人员的经验对软件进行功能和性能抽查。\n随机测试是根据测试用例说明书执行测试用例的重要补充手段，\n是保证测试覆盖完整性的有效方式。 按照软件开发版本周期进行划分，可以将软件测试分为预览版本Pre-α测试、内部测试版本α测试、公测版本β测试、候选版本Release测试。在这些测试完成之后产品就可以正式上线发布了。\n练习 张三开发实现完成注册功能，针对自己开发的该功能代码进行测试属于（ A ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n项目相关开发人员完成了全部系统的核心业务实现，最最后提交给测试全面测试，属于（ C ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n从注册、登录、下单联动一起的测试属于（ B ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n整个电商系统测试通过后，最后交付给用户正式使用，一般需要完成（ D ）\nA. 单元测试\nB. 集成测试\nC. 系统测试\nD. 验收测试\n登录界面输入账号、密码、验证码，点击登录测试属于（ A ）\nA. 黑盒测试\nB. 灰盒测试\nC. 白盒测试\n无界面，通过工具/代码实现登录功能测试属于（ B ）\nA. 黑盒测试\nB. 灰盒测试\nC. 白盒测试\n无界面，直接对开发实现的登录功能的源代码进行测试属于（ C ）\nA. 盒测试\nB. 盒测试\nC. 盒测试\n软件测试的目的和原则 ⭐ 软件测试的目的 软件测试的目的是发现软件中存在的缺陷和系统不足，定义系统的能力和局限性，提供组件、工作产品和系统的质量信息；提供预防和减少可能错误的信息，在过程中尽早检测错误以防止错误传递到下一阶段，提前确认问题和识别风险；最终获取系统在可接受风险范围内的可用信息，确认系统在非正常情况下的功能和性能，保证一个产品是完整的，并且是可用的或者可被集成的。\n软件测试的原则 1．测试应基于用户需求\n所有的测试工作都应该建立在满足用户需求的基础上。从用户角度来看，最严重的错误就是软件无法满足需求。有时候，软件产品的测试结果非常完美，但不是用户最终想要的产品，那么软件产品的开发就是失败的，而测试工作也是没有任何意义的。因此测试应依照用户的需求配置环境并且按照用户的使用习惯进行，以及给出评价结果。\n2．测试要尽早进行\n软件的错误存在于软件生命周期的各个阶段，因此应该尽早开展测试工作，把软件测试贯穿到软件生命周期的各个阶段中，这样测试人员能够尽早地发现和预防错误，降低错误修复的成本。尽早地开展测试工作有利于帮助测试人员了解软件产品的需求和设计，从而预测测试的难度和风险，制定出完善的计划和方案，提高测试的效率。\n3．不能做到穷尽测试\n由于时间和资源的限制，进行完全（各种输入和输出的全部组合）的测试是几乎不可能的，测试人员可以根据测试的风险和优先级等确定测试的关注点，从而控制测试的工作量,在测试成本、风险和收益之间求得平衡。\n4．遵循 GoodEnough 原则\nGoodEnough 原则是指测试的投入与产出要适当平衡，形成充分的质量评估过程，这个过程建立在测试付出的代价之上。测试不充分无法保证软件产品的质量，但测试投入过多会造成资源的浪费。随着测试资源投入的增加，测试的产出也是增加的，但当投入达到一定的比例后，测试的效果就不会明显增强了。因此在测试时要根据实际要求和产品质量考虑测试的投入，最好使测试的投入与产出达到一个足够好的状态。\n5．测试缺陷要符合“二八”定理\n缺陷的“二八”定理也称为 Pareto 原则、缺陷集群效应。一般情况下，软件中80%的缺陷会集中在20%的模块中，缺陷并不是均匀分布的。因此在测试时，要抓住主要矛盾，如果发现某些模块比其他模块具有更多的缺陷，则要投入更多的人力、精力重点测试这些模块以提高测试效率。\n6．避免缺陷免疫\n我们都知道虫子的抗药性原理，即一种药物使用久了，虫子就会产生抗药性，而在软件测试中，缺陷也是会产生免疫性的。同样的测试用例被反复使用，其发现缺陷的能力就会越来越差；测试人员对软件越熟悉越会忽略一些看起来比较小的问题，发现缺陷的能力也越差，这种现象被称为软件测试的“杀虫剂”现象。它的产生主要是由于测试人员没有及时更新测试用例或者是对测试用例和测试对象过于熟悉形成了思维定势。\n要想应对这种情况，就要不断对测试用例进行修改和评审，不断增加新的测试用例。同时，测试人员也要发散思维，不能只是为了完成测试任务而做一些输入、输出的对比。\n没有缺陷的软件是不存在的，软件测试是为了找出软件中的缺陷，而不是为了证明软件没有缺陷。\n① 不可能进行完全测试\n② 测试中有风险存在\n③ 软件测试中只能证明缺陷存在，不能证明产品已经没有缺陷\n④ 软件产品中所存在的缺陷数与已发现的缺陷数成正比\n⑤ 要避免软件测试的杀虫剂现象\n⑥ 及早地和不断地进行软件测试\n⑦ 进行回归测试\n⑧ 软件测试应该有计划、有组织地进行\n软件测试与软件开发 软件测试与软件开发的关系 软件测试贯穿软件项目的整个过程，但它的实施过程与软件开发的并不相同。\n软件开发是自顶向下、逐步细化的过程，除此之外，软件开发中的计划阶段的任务是定义软件作用域，软件需求分析阶段的任务是确定软件信息域、功能和性能需求等，软件设计阶段的任务是选定编程语言、设计模块接口等。\n软件测试与软件开发的实施过程相反，它是自底向上、逐步集成的过程。首先进行单元测试，排除模块内部逻辑与功能上的缺陷，然后按照软件设计将模块集成并进行集成测试,检测子系统或系统结构上的错误，最后运行完整的系统，进行系统测试，检验其是否满足用户需求。\n常见的软件测试模型 V模型 V模型在瀑布模型的基础上进行了改变，在瀑布模型的后半部分添加了测试工作。\nV模型应用瀑布模型的思想将复杂的测试工作分成了目标明确的小阶段来完成，具有阶段性、顺序性和依赖性，它既包含对源代码的底层测试也包含对软件需求的高层测试。\n但是V模型也有一定的局限性，它只有在编码之后才能开始测试，早期的需求分析等前期工作没有涵盖其中，因此它不能发现需求分析等早期阶段的错误，这为后期的系统测试、验收测试埋下了隐患。\nW模型 W模型是由V模型演变而来的，它强调测试应伴随着整个软件生命周期。其实W模型是一个双V模型，软件开发是一个V模型，而软件测试是与软件开发同步进行的另一个V模型。\nW模型的测试范围不仅包括程序，而且包括需求分析、概要设计、详细设计等前期工作，这样有利于尽早、全面地发现问题。\n但是W模型也有自己的局限性，它将软件开发过程分成需求分析、设计、编码、集成等一系列的串行活动，无法支持迭代、自发性等需要变更调整的项目。\nH模型 H模型将测试活动完全独立出来，形成一个完全独立的流程，这个流程将测试准备活动和测试执行活动清晰地体现出来。测试流程和其他工作流程是并发执行的，只要某一个工作流程的条件成熟就可以开始进行测试。\nX模型 X模型的设计原理是将程序分成多个片段反复迭代测试，然后将多个片段集成再进行迭代测试。\nX模型左边描述的是针对单独程序片段进行的相互分离的编码和测试，多个程序片段进行频繁的交接，在X模型的右上部分，将多个片段集成为一个可执行的程序再进行测试。通过集成测试的产品可以进行更大规模的集成，也可以进行封装提交给用户。\n在X模型的右下部分还设置了探索性测试，它能够帮助有经验的测试人员发现更多测试计划之外的软件缺陷,但这对测试人员的要求会高一些。\n软件测试的基本流程 软件测试的流程 分析测试需求 测试人员一般会根据软件开发需求文档制作一个需求规格说明书检查列表，按照各个检查项对用户需求进行分析、校验。\n制定测试计划 **确定测试范围险：**明确哪些对象是需要测试的，哪些对象是不需要测试的。 **制定测试策略险：**测试策略是测试计划中最重要的部分，它将要测试的内容划分出不同的优先级，以确定测试重点，并根据测试模块的特点和测试类型（如功能测试、性能测试）选定测试环境和测试方法（如人工测试、自动化测试）。 安排测试资源险：通过考虑测试难度、时间、工作量等因素，对测试资源进行合理安排，包括人员分配、工具配置等。 安排测试进度险：根据软件开发计划、产品的整体计划来安排测试工作的进度，同时还要考虑各部分工作的变化。在安排测试进度时，最好在各项测试工作之间预留一个缓冲时间以应对计划变更。 预估测试风险：罗列出测试工作过程中可能会出现的不确定因素，并制定应对策略。 设计测试用例 ⭐ 测试用例编写的原则是尽量用最少的测试用例达到最大的测试覆盖率。测试用例常用的设计方法包括等价类划分法、边界值分析法、因果图法与决策表法、正交实验设计法、逻辑覆盖法等。\n测试用例的编写一般包含以下几个分类：\n1.用例编号： 项目+模块+数字\n2.用例标题： 预期执行结果(测试点)\n3.所属模块： 模块名\n4.优先级： 用例的重要程度(高P0~P3低)\n5.前置条件： 执行操作步骤的前置条件 1、账号已注册 2、已打开登录页面\n6.测试步骤： 测试点执行的关键步骤 1、输入账号 2、输入密码 3、点击登录按钮\n7.测试数据： 输入数据\n8.预期结果： 预期执行结果及隐性结果\n执行测试 根据测试用例的优先级执行测试，当提交后的缺陷被开发人员修改之后，测试人员还需要进行回归测试。\n编写测试报告 测试报告是对一个测试活动的总结,包括对项目测试过程进行归纳、对测试数据进行统计、对项目的测试质量进行客观评价。测试报告通常包括引言、测试概要、测试内容及执行情况、缺陷统计与分析、测试结论与分析等。\n实例:微信朋友圈功能的测试流程 微信朋友圈功能的测试流程主要包括6个，分别是开始、注册/登录、发布朋友圈、查看朋友圈、点赞/评论朋友圈、结束。本次主要对发布朋友圈功能进行测试。\n分析测试需求： 发布的朋友圈内容主要有5种形式，分别是文字、照片、视频、文字+照片、文字+视频，假设5种朋友圈内容的要求为文字1-500字、照片1-9张、视频1-15秒。\n制定测试计划：\n设计测试用例：\n**执行测试：**执行测试用例，对测试过程进行记录和跟踪。将测试发现的缺陷整理成缺陷报告。\n编写测试报告：\n一、引言\n目的 术语解释 参考资料 二、测试概要\n项目简介 测试环境 测试时间、地点及人员 回归测试 三、测试内容及执行情况\n测试目标 测试范围 测试用例使用情况 四、缺陷统计与分析\n缺陷数目与类型 缺陷的解决情况 缺陷的趋势分析 五、测试分析\n测试覆盖率分析 需求符合度分析 功能正确性分析 产品质量分析 测试局限性 六、测试总结\n遗留问题 测试经验总结 七、附件\n测试用例清单 缺陷清单 交付的测试工作产品 遗留问题报告 本章习题 填空题 软件从 “出生” 到 “消亡” 的过程称为（ 软件生命周期 ） 。\n引入风险分析的开发模型为（ 螺旋模型 ）模型。\nISO/IEC 9126:1991标准提出的质量模型包括（ 功能性 ）、可靠性、（ 可使用性 ）、效率、可维护性、（ 可移植性 ）六大特性。\n按照缺陷的严重程度可以将缺陷划分为（ 严重缺陷 ）、一般缺陷、次要缺陷、（ 建议缺陷 ）。\n验证软件单元是否符合软件需求与设计的测试称为（ 单元测试 ）。\n对程序的逻辑结构、路径与运行过程进行的测试称为（ 白盒测试 ）。\n有一种测试模型，测试与开发并行进行，这种测试模型称为（ H ）模型。\n判断题 软件存在缺陷是由于开发人员水平有限引起的，优秀的开发人员可以开发出零缺陷的软件。（ × ）\n软件缺陷都存在于程序代码中。（ × ）\n软件测试是为了证明程序无错。（ × ）\n软件测试要投入尽可能多的精力以达到100%的覆盖率。（ × ）\n单选题 下列选项中，不属于软件开发模型的是（ A ）\nA. V模型\nB. 快速原型模型\nC. 螺旋模型\nD. 敏捷模型\n下列选项中，哪一项不是影响软件质量的因素（ C ）\nA．需求模糊\nB. 缺乏规范的文档指导\nC. 软件测试要求太严格\nD. 开发人员技术有限\n下列哪一项不是软件缺陷产生的原因（ B ）\nA. 需求不明确\nB. 测试用例设计不好\nC. 软件结构复杂\nD. 项目周期短\n下列选项中，关于软件缺陷的说法错误的是（ C ）\nA. 软件缺陷是软件（包括程序和文档）中存在的影响软件正常运行的问题、错误、隐藏的功能缺失或多余\nB. 按照缺陷的优先级不同可以将缺陷划分为立即解决缺陷、高优先级缺陷、正常排队缺陷、低优先级缺陷\nC. 缺陷报告有统一的模板，该模板是根据IEEE729-1983标准制定的\nD. 每个缺陷都有一个唯一的编号，这是缺陷的标识\n下列选项中，关于软件测试的说法错误的是（ D ）\nA. 在早期的软件开发中，测试就等同于调试\nB. 软件测试是使用人工或自动手段来运行或测定某个系统的过程\nC. 软件测试的目的在于检验软件是否满足规定的需求或弄清楚预期结果与实际结果之间的差异\nD. 软件测试与软件开发是两个独立、分离的过程\n下列选项中，不属于软件测试原则的是（ B ）\nA. 测试应基于用户需求\nB. 测试越晚进行越好\nC. 穷尽测试是不可以的\nD. 软件测试遵循 GoodEnough 原则\n","date":"2024-08-25T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/b781bf2786f7d8f0ada8aaf7851a7a62_hu_61c44bd66136deb0.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/","title":"第一章 软件测试基础"},{"content":"编写思路 本次页面编写参考网页为 FastAdmin – 基于ThinkPHP和Bootstrap的极速后台开发框架。\n完成响应式页面编写，尽量使用 bootstrap 组件，减少工作量，大致实现效果如下，部分代码尚未完善。\n需要用到的组件 导航栏 参考组件 navbar，需要图标以及导航栏跳转标题，可以将两段代码整合。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;nav class=\u0026#34;navbar navbar-expand-lg bg-body-tertiary\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Navbar\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; type=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; data-bs-target=\u0026#34;#navbarSupportedContent\u0026#34; aria-controls=\u0026#34;navbarSupportedContent\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-label=\u0026#34;Toggle navigation\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;collapse navbar-collapse\u0026#34; id=\u0026#34;navbarSupportedContent\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav me-auto mb-2 mb-lg-0\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link active\u0026#34; aria-current=\u0026#34;page\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Link\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; role=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; Dropdown \u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;hr class=\u0026#34;dropdown-divider\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link disabled\u0026#34; aria-disabled=\u0026#34;true\u0026#34;\u0026gt;Disabled\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;form class=\u0026#34;d-flex\u0026#34; role=\u0026#34;search\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;form-control me-2\u0026#34; type=\u0026#34;search\u0026#34; placeholder=\u0026#34;Search\u0026#34; aria-label=\u0026#34;Search\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-outline-success\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; 1 2 3 4 5 6 7 8 \u0026lt;nav class=\u0026#34;navbar bg-body-tertiary\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/docs/5.3/assets/brand/bootstrap-logo.svg\u0026#34; alt=\u0026#34;Logo\u0026#34; width=\u0026#34;30\u0026#34; height=\u0026#34;24\u0026#34; class=\u0026#34;d-inline-block align-text-top\u0026#34;\u0026gt; Bootstrap \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; 不难发现，下面这段代码中，a 标签中为 logo 以及标题，可以将其向上方代码合并，多于的搜索框可以删除，再对文本进行修改后可以得到导航栏。\n在修改时，可能会因为改变原本的 flex 布局导致页面缩放时导航栏图标位置发生改变，可以在外层嵌套 div 设置弹性盒布局，使得图标靠右。\n轮播图 参考 Carousel 组件，在下方找到类似的组件模板。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;div id=\u0026#34;carouselExampleCaptions\u0026#34; class=\u0026#34;carousel slide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-indicators\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;0\u0026#34; class=\u0026#34;active\u0026#34; aria-current=\u0026#34;true\u0026#34; aria-label=\u0026#34;Slide 1\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;1\u0026#34; aria-label=\u0026#34;Slide 2\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;2\u0026#34; aria-label=\u0026#34;Slide 3\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;...\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;First slide label\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;Some representative placeholder content for the first slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;...\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;Second slide label\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;Some representative placeholder content for the second slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;...\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;Third slide label\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;Some representative placeholder content for the third slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-prev\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;prev\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Previous\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-next\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;next\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Next\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; 更改 img 标签中的 src 以及下方的文本介绍即可达到类似效果，背景图片自适应需要额外添加部分 css 效果，具体代码如下。\n1 2 3 4 5 6 7 8 .wrapper img { height: 550px; width: auto; overflow: hidden; object-fit: cover; /* 将图片的水平位置设置在正中间 */ object-position: center; } 卡片 通过媒体查询监测页面大小变化，设置断点使得页面元素响应的进行改变。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 @media screen and (max-width:1400px) { .addon-list .row { height: 550px; } .addon-list .row .grid-item { width: 270px; height: 252px; padding: 0; background-color: #fff; border-radius: 3px; } .addon-item { width: 270px; height: 252px; } .addon-item .addon-img { width: 270px; height: 180px; } .addon-item .addon-img img { width: 270px; height: 180px; } main .sec3 { background-color: rgb(245, 245, 245); /* height: 797px; */ } } 可以通过 min-width 属性设置页面的最小宽度，使得在页面宽度过小的情况下展示一定内容。\n参考代码 index.htmlu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;FastAdmin – 基于Bootstrap的极速后台开发框架\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;./favicon.ico\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;./css/index.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;./js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!-- https://www.fastadmin.net/ --\u0026gt; \u0026lt;header\u0026gt; \u0026lt;nav class=\u0026#34;navbar navbar-expand-lg bg-body-tertiary\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/logo.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;navbar-toggler\u0026#34; type=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; data-bs-target=\u0026#34;#navbarNavDropdown\u0026#34; aria-controls=\u0026#34;navbarNavDropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-label=\u0026#34;Toggle navigation\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;navbar-toggler-icon\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026#34;collapse navbar-collapse\u0026#34; id=\u0026#34;navbarNavDropdown\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;navbar-nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link active\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;首页\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;插件市场\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Uni-app\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;下载\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;演示\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;文档\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; role=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; 精选 \u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; role=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; 问答 \u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item dropdown\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;nav-link dropdown-toggle\u0026#34; href=\u0026#34;#\u0026#34; role=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; 更多 \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Another action\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Something else here\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;main\u0026gt; \u0026lt;!-- 轮播图 --\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;carouselExampleCaptions\u0026#34; class=\u0026#34;carousel slide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-indicators\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;0\u0026#34; class=\u0026#34;active\u0026#34; aria-current=\u0026#34;true\u0026#34; aria-label=\u0026#34;Slide 1\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;1\u0026#34; aria-label=\u0026#34;Slide 2\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;2\u0026#34; aria-label=\u0026#34;Slide 3\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;3\u0026#34; aria-label=\u0026#34;Slide 4\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;4\u0026#34; aria-label=\u0026#34;Slide 5\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/b1.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;模块化开发\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;一键生成CRUD/一键生成菜单/一键生成API文档\u0026lt;br\u0026gt; 强大的一键生成功能快速简化你的开发流程,加快你的项目开发\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/b2.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Second slide label\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;Some representative placeholder content for the second slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/b3.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;响应式布局\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;基于ThinkPHP和Bootstrap进行二次开发,手机、平板、PC均自动适配,无需要担心兼容性问题\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/b4.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Third slide label\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;Some representative placeholder content for the third slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/b5.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;Third slide label\u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;Some representative placeholder content for the third slide.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-prev\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;prev\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Previous\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-next\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;next\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Next\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;section class=\u0026#34;sec1\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-m cc\u0026#34; id=\u0026#34;cc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-line\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;适用人群\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subtitle\u0026#34;\u0026gt;FastAdmin是你不错的选择！\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-30\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/code.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;一般开发者\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; 你可以使用FastAdmin快速开发你的后台管理、会员中心、API接口、移动应用等等功能 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/whatisfastadmin.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;什么是FastAdmin\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/browser.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;应用(插件)开发者\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; 你可以在FastAdmin分享你开发的完整应用或插件，共享FastAdmin开放的生态资源。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/developer.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;加入开发者\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/laptop.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;普通使用者\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; 你可以在FastAdmin找到你需要的应用、小程序，快速部署你自己的完整网站、APP或小程序。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/store.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;插件市场\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;sec2\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-m cc\u0026#34; id=\u0026#34;cc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-line\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;为什么选择我们\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subtitle\u0026#34;\u0026gt;成千上万的小伙伴都选择了FastAdmin\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-30\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;开源免费无加密\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin快速开发框架无需授权即可商业使用，代码全部开源免费且无任何加密。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/whatisfastadmin.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;立即下载\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;应用插件丰富\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin拥有丰富的应用插件市场，商城、CMS、博客、问答、小程序、点餐、订场应有尽有。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/developer.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;插件市场\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;社区氛围好\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin的社区小伙伴都非常热心的互相帮助，免费为大家解决各种使用中的问题。 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/store.html\u0026#34; class=\u0026#34;btn blue-bg pix-white btn-round-lg wide\u0026#34;\u0026gt; \u0026lt;b\u0026gt;我要提问\u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;section store-section pix-padding-bottom-40 sec3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-m cccc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-line\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;span\u0026gt;插件市场\u0026lt;/span\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subtitle\u0026#34;\u0026gt;基于FastAdmin框架开发的应用插件！\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-filter\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;nav nav-pills hidden-xs tab\u0026#34;\u0026gt; \u0026lt;li role=\u0026#34;presentation\u0026#34; class=\u0026#34;active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/store.html\u0026#34;\u0026gt;全部\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li role=\u0026#34;presentation\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/store.html?pay=free\u0026#34; rel=\u0026#34;nofollow\u0026#34;\u0026gt;免费插件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li role=\u0026#34;presentation\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/store.html?pay=price\u0026#34; rel=\u0026#34;nofollow\u0026#34;\u0026gt;付费插件\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026#34;addon-post btn-group pull-right\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/store.html\u0026#34; class=\u0026#34;btn btn-gray gray-3-bg\u0026#34;\u0026gt; 更多 \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-list fadeInDown animated\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/command.html\u0026#34; title=\u0026#34;在线命令\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/command.png!addon\u0026#34; srcset=\u0026#34;./img/command.png 2x\u0026#34; alt=\u0026#34;在线命令\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/command.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;在线命令\u0026#34;\u0026gt;在线命令\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;302382\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/example.html\u0026#34; title=\u0026#34;开发示例\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/example.png!addon\u0026#34; srcset=\u0026#34;./img/example.png 2x\u0026#34; alt=\u0026#34;开发示例\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/example.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;开发示例\u0026#34;\u0026gt;开发示例\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;175524\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/darktheme.html\u0026#34; title=\u0026#34;后台深色模式插件\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/darktheme.svg\u0026#34; srcset=\u0026#34;./img/darktheme.svg 2x\u0026#34; alt=\u0026#34;后台深色模式插件\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/darktheme.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;后台深色模式插件\u0026#34;\u0026gt;后台深色模式插件\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;4135\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tags tags-hot\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/cms.html\u0026#34; title=\u0026#34;CMS内容管理系统\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/cms.svg\u0026#34; srcset=\u0026#34;./img/cms.svg 2x\u0026#34; alt=\u0026#34;CMS内容管理系统\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/cms.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;CMS内容管理系统\u0026#34;\u0026gt;CMS内容管理系统\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;115943\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-danger\u0026#34;\u0026gt;￥299.00\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/epay.html\u0026#34; title=\u0026#34;微信支付宝整合插件\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/epay.png!addon\u0026#34; srcset=\u0026#34;./img/epay.png 2x\u0026#34; alt=\u0026#34;微信支付宝整合插件\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/epay.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;微信支付宝整合插件\u0026#34;\u0026gt;微信支付宝整合插件\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;103436\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/filewatcher.html\u0026#34; title=\u0026#34;文件修改自动刷新页面插件\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/filewatcher.svg\u0026#34; srcset=\u0026#34;./img/filewatcher.svg 2x\u0026#34; alt=\u0026#34;文件修改自动刷新页面插件\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/filewatcher.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;文件修改自动刷新页面插件\u0026#34;\u0026gt;文件修改自动刷新页面插件\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;1050\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/department.html\u0026#34; title=\u0026#34;组织架构部门管理\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/department.svg\u0026#34; srcset=\u0026#34;./img/department.svg 2x\u0026#34; alt=\u0026#34;组织架构部门管理\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/department.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;组织架构部门管理\u0026#34;\u0026gt;组织架构部门管理\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;11444\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-item weixin\u0026#34; data-type=\u0026#34;free\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;addon-img\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/wechat.html\u0026#34; title=\u0026#34;微信管理\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://cdn.fastadmin.net/uploads/addons/wechat.png!addon\u0026#34; srcset=\u0026#34;./img/wechat.png 2x\u0026#34; alt=\u0026#34;微信管理\u0026#34; class=\u0026#34;img-responsive\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;addon-info\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://www.fastadmin.net/store/wechat.html\u0026#34; target=\u0026#34;_blank\u0026#34; title=\u0026#34;微信管理\u0026#34;\u0026gt;微信管理\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;metas clearfix\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;addon-author\u0026#34;\u0026gt;\u0026lt;svg t=\u0026#34;1745380386839\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 1107 1024\u0026#34; version=\u0026#34;1.1\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; p-id=\u0026#34;3484\u0026#34; width=\u0026#34;16\u0026#34; height=\u0026#34;16\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M1107.495 745.828v212.847c0 17.737-6.057 32.879-18.603 45.425-12.546 12.546-27.687 18.602-45.424 18.602H64.027c-17.737 0-32.879-6.056-45.425-18.602C6.057 991.554 0 976.412 0 958.675V745.828c0-17.737 6.057-32.878 18.602-45.424C31.148 687.858 46.29 681.8 64.027 681.8h309.32l89.984 90.417c25.524 24.66 55.807 37.205 90.416 37.205 34.61 0 64.893-12.546 90.417-37.205l90.416-90.417h308.888c17.737 0 32.878 6.057 45.424 18.603 12.546 12.546 18.603 27.687 18.603 45.424z m-216.308-378.97c7.355 18.17 4.326 33.744-9.517 46.722L583.598 711.652c-7.787 8.652-18.17 12.546-29.85 12.546-12.114 0-22.064-4.326-29.851-12.546L225.825 413.58c-13.844-12.978-16.872-28.553-9.517-46.722 7.354-17.305 20.765-25.957 39.368-25.957h170.45V42.829c0-11.68 4.326-21.63 12.546-29.85 8.22-8.22 18.602-12.546 29.85-12.546h170.45c11.681 0 21.631 4.326 29.851 12.545 8.22 8.22 12.546 18.603 12.546 29.85v298.073h170.45c18.603 0 32.014 8.652 39.368 25.957zM839.273 924.93c8.22-8.22 12.546-18.602 12.546-29.85 0-11.68-4.326-21.631-12.546-29.85-8.652-8.22-18.602-12.547-29.85-12.547-11.68 0-21.63 4.327-29.85 12.546-8.22 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.545 29.851 8.22 8.22 18.603 12.546 29.85 12.546 11.682 0 21.632-4.326 29.851-12.546z m170.45 0c8.22-8.22 12.547-18.602 12.547-29.85 0-11.68-4.327-21.631-12.546-29.85-8.22-8.22-18.603-12.547-29.85-12.547-11.681 0-21.631 4.327-29.851 12.546-8.652 8.653-12.546 18.603-12.546 29.85 0 11.681 4.326 21.631 12.546 29.851 8.22 8.22 18.602 12.546 29.85 12.546 11.248 0 21.198-4.326 29.85-12.546z m0 0\u0026#34; fill=\u0026#34;#C1C1C1\u0026#34; p-id=\u0026#34;3485\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;56899\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;addon-price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;price\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;text-success\u0026#34;\u0026gt;免费\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;sec4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container-m cc\u0026#34; id=\u0026#34;cc\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;text-line\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;为什么选择我们\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;subtitle\u0026#34;\u0026gt;成千上万的小伙伴都选择了FastAdmin\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-30\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-1.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;开源免费无加密\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin快速开发框架无需授权即可商业使用，代码全部开源免费且无任何加密。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-2.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;应用插件丰富\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin拥有丰富的应用插件市场，商城、CMS、博客、问答、小程序、点餐、订场应有尽有。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;社区氛围好\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin的社区小伙伴都非常热心的互相帮助，免费为大家解决各种使用中的问题。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;社区氛围好\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin的社区小伙伴都非常热心的互相帮助，免费为大家解决各种使用中的问题。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;社区氛围好\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin的社区小伙伴都非常热心的互相帮助，免费为大家解决各种使用中的问题。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4 col-xs-12 col-sm-4 suitable-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-content text-center pix-padding-v-50 pix-margin-v-10 pix-padding-h-20\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pix-margin-bottom-20 suitable-img img-zoom\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;./img/features-3.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;suitable-title\u0026#34;\u0026gt; \u0026lt;strong\u0026gt;社区氛围好\u0026lt;/strong\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p class=\u0026#34;suitable-intro\u0026#34;\u0026gt; FastAdmin的社区小伙伴都非常热心的互相帮助，免费为大家解决各种使用中的问题。 \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section class=\u0026#34;sec5\u0026#34; style=\u0026#34;height: 500px;\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;footer-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;footer-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;footer-top\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;footer-ul\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;title\u0026#34;\u0026gt;FastAdmin\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;关于我们\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;联系我们\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;站点地图\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;安全公告\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;footer-ul\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;title\u0026#34;\u0026gt;商务合作\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;解决方案\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;广告投放\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;业务合作\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;赞助投资\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;footer-ul\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;title\u0026#34;\u0026gt;服务支持\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;插件协议\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;用户协议\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;云大使中心\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;开发者中心\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul class=\u0026#34;footer-ul\u0026#34;\u0026gt; \u0026lt;li\u0026gt; FastAdmin是一款基于ThinkPHP+Bootstrap开发的快速后台开发框架，软件著作权编号：2018SR1065394。FastAdmin基于Apache2.0开源协议发布，免费且不限制商业使用，目前被广泛应用于各大行业应用后台管理。 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; index.css{ font-family: \u0026#39;Source Sans Pro\u0026#39;, \u0026#39;Helvetica Neue\u0026#39;, Helvetica, \u0026#39;Microsoft Yahei\u0026#39;, Arial, sans-serif; } /* body{ min-width: 700px; } */ .navbar, .sec1, .sec2, .sec3, .sec4, .wrapper { min-width: 765px; } .navbar { padding: 0; justify-content: space-between; } .navbar-nav .nav-item .nav-link { padding: 16px 15px; font-size: 14px; line-height: 28px; } .navbar .container-fluid .navbar-brand img { height: 50px; } .navbar-toggler { text-align: right; } #navbarNavDropdown { justify-content: end; } .wrapper, #carouselExampleCaptions, .carousel-inner, .carousel-item { height: 550px; width: 100%; } .wrapper img { height: 550px; width: auto; overflow: hidden; object-fit: cover; /* 将图片的水平位置设置在正中间 */ object-position: center; } .wrapper .carousel-caption { color: black; } .wrapper .carousel-caption h3 { font-weight: 700; } main .sec1 { background-color: rgb(245, 245, 245); height: 575px; } main .sec2 { background-color: rgb(255, 255, 255); height: 550px; } main .container-m { /* box-sizing: border-box; */ padding: 0 15px; } main .container-m .text-line { padding: 30px 0; text-align: center; width: 100%; } main .container-m .text-line h2 { font-size: 32px; margin: 20px 0; } main .container-m .text-line .subtitle { color: rgb(145, 145, 145); } main .row { justify-content: space-between; padding: 0 12px; } main .row .suitable-item { background-color: #fff; width: 400px; height: 380px; padding: 50px 20px; text-align: center; } .container-m { width: 1320px; margin: 0 auto; } @media screen and (max-width:1400px) { main .row .suitable-item { width: 350px; height: 380px; padding: 50px 20px; } .container-m { width: 1140px; margin: 0 auto; } } @media screen and (max-width:1200px) { main .row .suitable-item { width: 300px; height: 380px; padding: 50px 20px; } .container-m { width: 960px; margin: 0 auto; } } @media screen and (max-width:992px) { main .row .suitable-item { width: 240px; height: 380px; padding: 50px 20px; } .container-m { width: 770px; margin: 0 auto; } } @media screen and (max-width:770px) { main .sec1 .suitable-item { width: 100%; height: 300px; padding: 20px 20px; margin: 0 0 20px 0; } main .sec2 .suitable-item { width: 100%; height: 300px; padding: 20px 20px; margin: 0 0 20px 0; } main .sec1 { height: 1150px; } main .sec2 { height: 1150px; } } .pix-margin-bottom-20 { width: 120px; height: 120px; padding: 10px; display: inline-block; } .pix-margin-bottom-20 img { width: 100px; } .suitable-title { padding: 10px 0; } .btn-round-lg b { width: 122px; padding: 6px 34px; background-color: rgb(89, 163, 252); color: #fff; border-radius: 30px; font-size: 13px; } section .suitable-intro { color: rgb(145, 145, 145); font-size: 14px; } .addon-filter { display: flex; justify-content: space-between; height: 42px; line-height: 42px; margin-bottom: 20px; } .addon-filter li { margin-right: 30px; font-size: 14px; transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out; } .addon-filter li a { padding: 10px 15px; color: rgb(97, 97, 97); text-decoration: none; } .addon-filter li:hover { background-color: #fff; border-radius: 3px; } .addon-filter li.active { background-color: rgb(51, 99, 223); border-radius: 3px; } .addon-filter li.active a { color: #fff; } .addon-filter .pull-right a { position: relative; top: 6px; height: 30px; box-sizing: border-box; padding: 6px 12px; line-height: 18px; font-size: 13px; color: rgb(33, 37, 41); background-color: rgb(248, 249, 250); border-radius: 3px; } .addon-filter .pull-right a:hover { background-color: rgb(226, 230, 234); } .addon-item { height: 267px; /* padding: 0 15px; */ width: 292.5px; } .addon-item .addon-img { width: 292.5px; height: 195px; } .addon-item .addon-img img { width: 292.5px; height: 195px; } /* .cccc{background-color: aqua;} */ .addon-list { width: 100%; /* width: 1290px; */ height: 594px; } .addon-list .row { height: 594px; } .addon-list .row .grid-item { width: 292.5px; padding: 0; height: 267px; background-color: #fff; border-radius: 3px; } .grid-item .addon-info .title { font-size: 14px; padding: 0 10px; margin-top: 10px; } .grid-item .addon-info .title a { color: rgb(51, 51, 51); text-decoration: none; } .grid-item .addon-info .metas { padding: 10px; } .grid-item .addon-info .metas .addon-author { color: rgb(193, 193, 193); font-size: 14px; } .grid-item .addon-info .metas .addon-author svg { position: relative; top: -3px; } .grid-item .addon-info .metas .addon-price { color: #1DB367; font-size: 14px; float: right; } main .sec3 { background-color: rgb(245, 245, 245); height: 857px; } @media screen and (max-width:1400px) { .addon-list .row { height: 550px; } .addon-list .row .grid-item { width: 270px; height: 252px; padding: 0; background-color: #fff; border-radius: 3px; } .addon-item { width: 270px; height: 252px; } .addon-item .addon-img { width: 270px; height: 180px; } .addon-item .addon-img img { width: 270px; height: 180px; } main .sec3 { background-color: rgb(245, 245, 245); /* height: 797px; */ } } @media screen and (max-width:1200px) { .addon-list .row { height: 850px; } .addon-list .row .grid-item { width: 290px; height: 270px; padding: 0; background-color: #fff; border-radius: 3px; } .addon-item { width: 290px; height: 270px; } .addon-item .addon-img { width: 290px; height: 195px; } .addon-item .addon-img img { width: 290px; height: 195px; } .weixin { position: relative; left: -320px; } main .sec3 { background-color: rgb(245, 245, 245); height: 1150px; } } @media screen and (max-width:992px) { main .sec3 { height: 1650px; } .addon-list .row { height: 1400px; } .addon-list .row .grid-item { width: 355px; height: 310px; padding: 0; background-color: #fff; border-radius: 3px; } .addon-item { width: 355px; height: 310px; } .addon-item .addon-img { width: 355px; height: 236px; } .addon-item .addon-img img { width: 355px; height: 236px; } .weixin { /* position: relative; */ /* left: -320px; */ position: static; } } main .sec4 { background-color: rgb(89, 163, 252); height: 950px; color: #fff; } main .sec4 .suitable-item { background-color: rgb(89, 163, 252); } main .sec4 .suitable-intro { font-size: 16px; } main .sec4 .text-line .subtitle, main .sec4 .suitable-intro { color: #fff; } @media screen and (max-width:770px) { main .sec4 .suitable-item { width: 100%; height: 300px; padding: 20px 20px; margin: 0 0 20px 0; } main .sec4 { height: 2100px; } } /* --------footer-------- */ .footer-container { height: 400px; background-color: rgb(22, 30, 38); color: rgb(170, 170, 170); font-size: 14px; } .footer-container .footer-inner { background-color: rgb(37, 48, 60); } .footer-container .footer-top{ width: 1260px; height: 250px; margin: 0 auto; box-sizing: border-box; padding: 27px 15px; display: flex; justify-content: space-between; } .footer-container .footer-ul { list-style: none; padding: 0; width: 280px; height: 180px; } .footer-container .footer-ul li{ line-height: 30px; } .footer-container .title { color: #fff; margin-bottom: 10px; } ","date":"2024-04-26T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2%E7%BC%96%E5%86%99/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AB%E7%AB%A0-%E5%93%8D%E5%BA%94%E5%BC%8F%E9%A1%B5%E9%9D%A2%E7%BC%96%E5%86%99/","title":"第八章 响应式页面编写"},{"content":"内容布局 标题类 设置标题 用户在浏览网页时最先关注的就是文章的标题，Bootstrap 和普通的 HTML 页面一样，都是使用 \u0026lt;h1\u0026gt; 到 \u0026lt;h6\u0026gt; 标签来定义标题。同时 Bootstrap 还提供了一系列标题类和 display 类来设置标题样式。\n\u0026lt;h1\u0026gt; ~ \u0026lt;h6\u0026gt; 标题描述具体如下表所示。\n标签 描述 字体大小 计算比例 —级标题 36px 14px × 2.60 二级标题 30px 14px x 2.15 三级标题 24px 14px × 1.70 四级标题 18px 14px x 1.25 五级标题 14px 14px x 1 六级标题 12px 14px × 0.85 上表中，Bootstrap 标题的具体使用和平时的使用方法是一样的，从一级标题到六级标题，数字越大所代表的级别越小，文本也越小。\n在Bootstrap中定义了 6 个类名 h1~h6 来让非标题元素实现标题效果，与 \u0026lt;h1\u0026gt; ~ \u0026lt;h6\u0026gt; 不同的是，使用类名 h1 ~ h6 的文本段不会视作 HTML 的标题元素，没有标题的含义。\nBootstrap 还提供了一系列 display 类，也能用来设置标题样式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;h1~6 一级标题\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h1~6 二级标题\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h1~6 三级标题\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h1~6 四级标题\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h1~6 五级标题\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h1~6 六级标题\u0026lt;/h6\u0026gt; \u0026lt;div class=\u0026#34;h1\u0026#34;\u0026gt;class 一级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h2\u0026#34;\u0026gt;class 二级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h3\u0026#34;\u0026gt;class 三级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h4\u0026#34;\u0026gt;class 四级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h5\u0026#34;\u0026gt;class 五级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h6\u0026#34;\u0026gt;class 六级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-1\u0026#34;\u0026gt;display 一级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-2\u0026#34;\u0026gt;display 二级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-3\u0026#34;\u0026gt;display 三级标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-4\u0026#34;\u0026gt;display 四级标题\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 副标题 在 Web 开发中，我们常常会看到一个标题后面紧跟着一行小的副标题的形式。在 Bootstrap 中也可以实现这种效果，我们可以使用 \u0026lt;small\u0026gt; 标签来实现缩小字体，通常与 .text-muted 样式一起使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;h1~6 一级标题\u0026lt;small\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h1~6 二级标题\u0026lt;small\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h1~6 三级标题\u0026lt;small\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h1~6 四级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h1~6 五级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h1~6 六级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/h6\u0026gt; \u0026lt;div class=\u0026#34;h1\u0026#34;\u0026gt;class 一级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h2\u0026#34;\u0026gt;class 二级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h3\u0026#34;\u0026gt;class 三级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h4\u0026#34;\u0026gt;class 四级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h5\u0026#34;\u0026gt;class 五级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;h6\u0026#34;\u0026gt;class 六级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-1\u0026#34;\u0026gt;display 一级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-2\u0026#34;\u0026gt;display 二级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-3\u0026#34;\u0026gt;display 三级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;display-4\u0026#34;\u0026gt;display 四级标题\u0026lt;small class=\u0026#34;text-muted\u0026#34;\u0026gt;副标题\u0026lt;/small\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文本类 强化文本 对文本进行强化突显重要内容，以实现风格统一、布局美观的效果，见下表所示。\n标签 描述 标签 描述 \u0026lt;b\u0026gt;和\u0026lt;strong\u0026gt; 文本加粗 \u0026lt;mark\u0026gt; 标记，高亮显示 \u0026lt;del\u0026gt;和\u0026lt;s\u0026gt; 删除线 \u0026lt;address\u0026gt; 表示地址 \u0026lt;ins\u0026gt;和\u0026lt;u\u0026gt; 下划线 \u0026lt;footer\u0026gt; 页脚或出处 \u0026lt;em\u0026gt;和\u0026lt;i\u0026gt; 斜体 \u0026lt;cite\u0026gt; 出处 \u0026lt;blockquote\u0026gt; 引用块，长引用 \u0026lt;abbr\u0026gt; 缩略语，鼠标悬停在该文本上时显示 title 的属性值 针对上表中的内联元素进行介绍。\n\u0026lt;b\u0026gt; 和 \u0026lt;strong\u0026gt; 默认情况下是加粗字体。前者是给其包裹的文本设置为 bold 粗体效果。而后者表示加强字符的语气，使用 bold 粗体来起到强调的作用。 \u0026lt;del\u0026gt; 和 \u0026lt;s\u0026gt; 都可以实现删除效果，但是 \u0026lt;del\u0026gt; 更具有语义化，能更形象的描述删除意思。 \u0026lt;i\u0026gt; 和 \u0026lt;em\u0026gt; 具有斜体作用，但 \u0026lt;em\u0026gt; 起到强调的作用，有利于 SEO。 \u0026lt;ins\u0026gt; 和 \u0026lt;u\u0026gt; 都可以实现下划线效果，前者用来定义已经被插入文档中的文本，而后者表示为文本添加下划线。 \u0026lt;footer\u0026gt; 和 \u0026lt;cite\u0026gt; 通常表示所包含的文本对某个参考文献的引用，区别在于后者引用的文本将以斜体显示。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;b\u0026gt;b文本加粗\u0026lt;/b\u0026gt; \u0026lt;strong\u0026gt;strong文本加粗\u0026lt;/strong\u0026gt; \u0026lt;mark\u0026gt;mark标记/高亮显示\u0026lt;/mark\u0026gt; \u0026lt;del\u0026gt;del删除线\u0026lt;/del\u0026gt; \u0026lt;s\u0026gt;s删除线\u0026lt;/s\u0026gt; \u0026lt;address\u0026gt;address地址\u0026lt;/address\u0026gt; \u0026lt;ins\u0026gt;ins下划线\u0026lt;/ins\u0026gt; \u0026lt;u\u0026gt;i下划线\u0026lt;/u\u0026gt; \u0026lt;footer\u0026gt;footer页脚或出处\u0026lt;/footer\u0026gt; \u0026lt;em\u0026gt;em斜体\u0026lt;/em\u0026gt; \u0026lt;i\u0026gt;i斜体\u0026lt;/i\u0026gt; \u0026lt;cite\u0026gt;cite出处\u0026lt;/cite\u0026gt; \u0026lt;blockquote\u0026gt;blockquote引用块/常引用\u0026lt;/blockquote\u0026gt; \u0026lt;abbr title=\u0026#34;title\u0026#34;\u0026gt;鼠标悬停在该文本上时显示 title 的属性值\u0026lt;/abbr\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 除了使用特定的内联元素外，还可以通过给其他元素添加 .mark、.small、.blockquote 样式来实现同样的样式效果。\n.mark：高亮显示\n.small：小号字体\n.blockquote：引用块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .blockquote-footer{ margin-top: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--使用.blockquote样式定义引用块--\u0026gt; \u0026lt;blockquote class=\u0026#34;blockquote\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;small\u0026#34;\u0026gt;朝辞白帝彩云间\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;千里江陵一日还\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;两岸猿声啼不住\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;mark\u0026#34;\u0026gt;轻舟已过万重山\u0026lt;/p\u0026gt; \u0026lt;!--使用.blockquote-footer样式来设置底部备注来源--\u0026gt; \u0026lt;footer class=\u0026#34;blockquote-footer\u0026#34;\u0026gt;李白《早发白帝城》\u0026lt;/footer\u0026gt; \u0026lt;/blockquote\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文本颜色 Bootstrap 定义了一套类名，可以为文本设置颜色，见下表所示。\n类名 描述 .text-primary 首选文本颜色，重要的文本 .text-secondary 副标题颜色 .text-success 成功文本颜色 .text-muted 柔和颜色 .text-danger 危险提示文本颜色 .text-info —般提示信息文本颜色 .text-warning 警告信息文本颜色 .text-dark 深灰色文本 .text-body body 文本颜色 .text-light 浅灰色文本 .text-white 白色文本 .text-black 黑色文本 文本颜色样式的使用细节：\n可以使用 .text-* 将文本设置为指定的颜色。 .text-light 和 .text-white 在白色背景下看不清楚，可以设置一个黑色的背景来辅助查看效果。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026#34;text-primary\u0026#34;\u0026gt;.text-primary 效果(蓝色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-muted\u0026#34;\u0026gt;.text-muted 效果(灰色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-success\u0026#34;\u0026gt;.text-success 效果(绿色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-info\u0026#34;\u0026gt;.text-info 效果(青色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-warning\u0026#34;\u0026gt;.text-warning 效果(黄色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-danger\u0026#34;\u0026gt;.text-danger 效果(红色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-white\u0026#34;\u0026gt;.text-white 效果(白色)\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-black\u0026#34;\u0026gt;.text-black 效果(黑色)\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文本格式 在网页布局中经常会用到文本对齐方式，在 CSS 中常常使用 text-align 属性来设置文本对齐方式。在 Bootstrap 中，为了简化操作，方便开发者使用，Bootstrap 中提供了一系列的文本对齐样式和大小写相关的样式，具体见下表。\n类名 描述 .text-left 左对齐，默认由浏览器决定 .text-right 右对齐 .text-center 居中对齐 .text-justify 实现两端对齐文本效果 .text-nowrap 段落中超出屏幕部分不换行 .text-uppercase 设置英文大写 .text-lowercase 设置英文小写 .text-capitalize 设置每个单词首字母大写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p class=\u0026#34;text-left\u0026#34;\u0026gt;left 左对齐\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-start\u0026#34;\u0026gt;start 左对齐\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-center\u0026#34;\u0026gt;cneter 居中\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-right\u0026#34;\u0026gt;right 右对齐\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-end\u0026#34;\u0026gt;end 右对齐\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-justify\u0026#34;\u0026gt;hello bootstrap hello bootstrap hello bootstrap hello bootstrap hello bootstrap\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-nowrap\u0026#34;\u0026gt;nowrap 不换行 hello bootstrap hello bootstrap hello bootstrap hello bootstrap hello bootstrap\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-uppercase\u0026#34;\u0026gt;uppercase 英文大写 bootstrap\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-lowercase\u0026#34;\u0026gt;lowercase 英文小写 BOOTSTRAP\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;text-capitalize\u0026#34;\u0026gt;capitalize 首字母大写 bootstrap\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表类 默认列表 在 HTML 文档中提供了 3 种列表结构，分别是有序列表、无序列表和定义列表，这 3 种列表语法结构如下。\n无序列表：\u0026lt;ul\u0026gt;\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;\n有序列表：\u0026lt;ol\u0026gt;\u0026lt;li\u0026gt;\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;\n定义列表：\u0026lt;dl\u0026gt;\u0026lt;dt\u0026gt;\u0026lt;dd\u0026gt;\u0026lt;/dd\u0026gt;\u0026lt;/dt\u0026gt;\u0026lt;/dl\u0026gt;\nBootstrap 对这 3 种列表默认形式进行了细微的改动，以达到风格统一美观的目的。\nBootstrap 中无序列表和有序列表默认是带有项目符号的，但在实际开发中，为了方便使用，列表通常是不需要带有前面编号的。考虑到这种情况，Bootstrap 中提供了 .list-unstyled 样式来对列表进行初始化，这样可以去除默认的列表样式风格。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul class=\u0026#34;list-unstyled\u0026#34;\u0026gt; \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol class=\u0026#34;list-unstyled\u0026#34;\u0026gt; \u0026lt;li\u0026gt;1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;1\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;2\u0026lt;/dt\u0026gt; \u0026lt;dt\u0026gt;3\u0026lt;/dt\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 内联列表 Bootstrap 中使用 .list-inline 结合 .list-inline-item 样式来实现多列并排列表，也就是说把垂直列表转换成水平列表，并且去掉项目符号，通常使用内联列表来制作水平导航。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul class=\u0026#34;list-inline\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;1\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ol class=\u0026#34;list-inline\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;1\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item\u0026#34;\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;dl class=\u0026#34;list-inline\u0026#34;\u0026gt; \u0026lt;dt class=\u0026#34;list-inline-item\u0026#34;\u0026gt;1\u0026lt;/dt\u0026gt; \u0026lt;dt class=\u0026#34;list-inline-item\u0026#34;\u0026gt;2\u0026lt;/dt\u0026gt; \u0026lt;dt class=\u0026#34;list-inline-item\u0026#34;\u0026gt;3\u0026lt;/dt\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 定义列表水平显示 在 Bootstrap 中可以使用栅格系统的预定义类来对定义列表内容实现水平对齐效果，对于较长的内容可以使用 .text-truncate 省略溢出部分，并使用 \u0026hellip; 省略号来代替。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body{ text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;dl class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;dt class=\u0026#34;col-4\u0026#34;\u0026gt;标题\u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-8 text-truncate\u0026#34;\u0026gt;标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述标题内容描述\u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-4\u0026#34;\u0026gt;标题\u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-8 text-truncate\u0026#34;\u0026gt;标题内容描述\u0026lt;/dd\u0026gt; \u0026lt;dt class=\u0026#34;col-4\u0026#34;\u0026gt;标题\u0026lt;/dt\u0026gt; \u0026lt;dd class=\u0026#34;col-8 text-truncate\u0026#34;\u0026gt;标题内容描述\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 代码和图文布局 代码样式 Bootstrap 提供了一些内联元素用来控制编程代码的显示风格，常见的代码标签如下表所示。\n标签 描述 \u0026lt;code\u0026gt; 计算机代码，用来显示单行内联代码 \u0026lt;pre\u0026gt; 预格式化文本，保留所有格式，显示多行代码 \u0026lt;kbd\u0026gt; 键盘输入文本，显示用户输入代码 \u0026lt;var\u0026gt; 定义变量 \u0026lt;samp\u0026gt; 程序输出文本 上表中，\u0026lt;code\u0026gt; 常用于单个单词或单行句子的代码；\u0026lt;pre\u0026gt; 常用于多行代码；\u0026lt;kbd\u0026gt; 表示用户要输入的内容。在实际开发中，用户可以根据具体的需求来使用某种类型。需要注意的是，不管使用哪种编程代码风格，都需要手动转义特殊符号。例如，小于号使用 \u0026amp;lt; 代替，大于号使用 \u0026amp;gt; 代替。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;code\u0026gt; \u0026amp;lt;!DOCTYPE html\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;html lang=\u0026#34;en\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;head\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;title\u0026amp;gt;Document\u0026amp;lt;/title\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;/head\u0026amp;gt;\u0026lt;br\u0026gt; \u0026lt;/code\u0026gt; \u0026lt;p\u0026gt;------------------------------------------------------------------\u0026lt;/p\u0026gt; \u0026lt;pre class=\u0026#34;pre-scrollable\u0026#34; style=\u0026#34;height: 100px;\u0026#34;\u0026gt; \u0026amp;lt;!DOCTYPE html\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;html lang=\u0026#34;en\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;head\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;title\u0026amp;gt;Document\u0026amp;lt;/title\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026amp;gt;\u0026lt;br\u0026gt; \u0026amp;lt;/head\u0026amp;gt;\u0026lt;br\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;p\u0026gt;------------------------------------------------------------------\u0026lt;/p\u0026gt; \u0026lt;kbd\u0026gt;ctrl + s\u0026lt;/kbd\u0026gt; \u0026lt;p\u0026gt;------------------------------------------------------------------\u0026lt;/p\u0026gt; \u0026lt;var\u0026gt;number\u0026lt;/var\u0026gt; \u0026lt;p\u0026gt;------------------------------------------------------------------\u0026lt;/p\u0026gt; \u0026lt;samp\u0026gt;程序输出文本\u0026lt;/samp\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; img-fluid 类 .img-fluid 是 Bootstrap 预定义好的，用来实现图片响应式的类，它给图片设置了 max-width: 100%，height: auto;，在开发中可以实现响应式图片的效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img src=\u0026#34;/vue-study/img/mi4.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;img src=\u0026#34;/vue-study/img/mi4.jpg\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; picture 标签 \u0026lt;picture\u0026gt; 标签是 HTML5 新增的标签元素，可以实现图片的响应式效果。常适用于在固定的区域下使用固定的图片尺寸，例如在大屏幕下使用大尺寸图片，在小屏幕下使用小尺寸图片，这样可以减少流量的使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;picture\u0026gt; \u0026lt;source srcset=\u0026#34;/vue-study/img/mi3.webp\u0026#34; media=\u0026#34;(max-width: 1000px)\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/vue-study/img/mi4.jpg\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;img-fluid\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 图文布局模式 在网页制作中，通常会使用浮动来设置元素在页面中的显示位置。Bootstrap 中也提供了一系列的样式来设置图片或文字的显示位置，具体内容如下表所示。\n类名 描述 .float-left（×） 设置元素左浮动 .float-right（×） 设置元素右浮动 .clearfix 清除浮动 .img-thumbnail 为图片添加边框 .rounded 设置图片为圆角 .mx-auto 设置 x 轴的 margin 为 auto .d-block 设置图片为块元素 在制作网页时，常常会遇到图片和文字组合显示的效果，Bootstrap 为 \u0026lt;figure\u0026gt; 和 \u0026lt;figcaption\u0026gt; 标签预定义了图文组合样式，可以实现图文组合效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt; \u0026lt;figure class=\u0026#34;figure\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/vue-study/img/film1.webp\u0026#34; alt=\u0026#34;\u0026#34; class=\u0026#34;img-fluid figure-img\u0026#34;\u0026gt; \u0026lt;figcaption class=\u0026#34;figure-caption\u0026#34;\u0026gt;电影\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 表格布局 在网页制作中，通常会用到表格的鼠标悬停、隔行变色等功能。Bootstrap 中提供了一系列表格布局样式，利用该样式可以帮助开发者快速开发出美观的表格，作用于 \u0026lt;table\u0026gt; 标签的表格样式如下表所示。\n类名 描述 .table 基类，也就是表格的基本样式 .table-dark 设置深色表格效果 .table-light/primary/success\u0026hellip; 设置表格不同颜色 .table-striped 条纹表格，设置斑马线效果，实现隔行换色 .table-bordered 带边框表格 .table-borderless 无边框表格 .table-hover 鼠标悬停效果，鼠标移动到行或单元格上，表格行变色 .table-sm 紧凑型表格 .table-responsive 响应式表格 table \u0026gt; thead \u0026gt; tr \u0026gt; th\ntable \u0026gt; tbody \u0026gt; tr \u0026gt; td\n上表中，.table 是表格的一个基类，如果想要加其他的样式，都要在 .table 的基础上去添加。表内的样式可以组合使用，多个样式之间只需使用空格隔开即可，并且都支持 .table-dark 样式，适用于反转色调。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;table class=\u0026#34;table table-striped text-center table-bordered table-hover table-responsive\u0026#34;\u0026gt; \u0026lt;thead class=\u0026#34;table-dark\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;000\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;000\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;000\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody class=\u0026#34;table-striped\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;table-primary\u0026#34;\u0026gt;111\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;table-success\u0026#34;\u0026gt;111\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026#34;table-danger\u0026#34;\u0026gt;111\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;222\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;222\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;222\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;333\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;333\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;333\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;444\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;444\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;444\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;555\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;555\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;555\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 辅助样式 添加或移除边框 Bootstrap 给元素边框设置了 .border 基类，如果想要加其他的样式，都要在 .border 的基础上添加。边框的样式可以组各使用，多个样式之间只需使用空格隔开即可；添加 .border-*-0 类可以取消对应边的边框。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; div{ width: 100px; height: 30px; margin: 20px auto; background-color: #eee; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;border\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;border border-0\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;border border-top-0\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 设置边框颜色 考虑到 Bootstrap 提供的 .border 类默认边框颜色是淡灰色，在实际开发中如果想要修改边框颜色，可以使用 .border-* 来设置想要的场景颜色。\n\u0026ldquo;*\u0026rdquo; 的取值有：primary、secondary、success、danger、warning、info、light、dark、white。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; div{ width: 100px; height: 30px; margin: 20px auto; background-color: #eee; } .colorful{ border-top: 1px solid blue; border-right: 1px solid red; border-bottom: 1px solid green; border-left: 1px solid black; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;border\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;border border-primary\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;colorful\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 背景颜色 Bootstrap 中定义了一套类名，用来设置背景色，具体说明见下表。\n类名 描述 .bg-primary 重要的背景颜色 .bg-secondary 副标题背景颜色 .bg-success 成功背景颜色 .bg-danger 危险提示背景颜色 .bg-info 一般提示信息背景颜色 .bg-warning 警告信息背景颜色 .bg-dark 深灰色背景 .bg-light 浅灰色背景 .bg-white 白色背景 .bg-transparent 透明背景色 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; div{ width: 100px; height: 100px; margin: 20px auto; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;bg-primary\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-success\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-danger\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-info\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bg-transparent\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-04-19T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-bootstrap-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E6%A0%B7%E5%BC%8F/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-bootstrap-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80%E6%A0%B7%E5%BC%8F/","title":"第七章 Bootstrap 常用布局样式"},{"content":"组件基础 什么是组件 在 Bootstrap 中，组件是对网页中常用的公共代码的封装，使代码可以复用。Bootstrap 提供了各种各样的组件，如导航、表单、按钮、轮播图等。\n组件的组成 Bootstrap 组件由结构和样式组成。\n结构需要参考官方文档来编写。 样式是 Bootstrap 预定义好的，直接通过设置样式类（class）即可使用。 使用组件时，需要先查询官方文档，找到想用的组件；编写组件的 html 结构；为组件设置样式类。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;alert alert-primary\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple primary alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-secondary\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple secondary alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-success\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple success alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-danger\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple danger alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-warning\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple warning alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-info\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple info alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-light\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple light alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;alert alert-dark\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; A simple dark alert—check it out! \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 组件的优势和引入 组件可以复用 代码更易维护和管理 降低代码之间的耦合程度 提高开发效率 组件是模块化的 1 2 3 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.2.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; jQuery 文件 jQuery 是一个快速的、简洁的 JavaScript 库。\n官网：jQuery\n更多版本：jQuery CDN\nCDN 引入：在联网情况下直接引入，其中，integrity 和 crossorigin 属性用于验证 jQuery 文件完整性，防止文件被篡改。 1 \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.7.1.slim.js\u0026#34; integrity=\u0026#34;sha256-UgvvN8vBkgO0luPSUl2s8TIlOSYRoGFAX4jlCIm9Adc=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 本地引入：进入 https://code.jquery.com/jquery-3.7.1.slim.js，选中文本存储在本地文件中再引入。 Bootstrap 常用组件 按钮 Bootstrap 中的按钮一般使用 \u0026lt; a \u0026gt; 标签、\u0026lt; button \u0026gt; 标签或 \u0026lt; input \u0026gt; 标签（type 为 button、submit 或 reset）定义，给这 3 种标签添加按钮样式类即可设置成 Bootstrap 提供的按钮效果。\n类 描述 .btn 按钮的基础样式类 .btn-danger 危险按钮 .btn-lg 大号按钮 .btn-warning 警示按钮 .btn-sm 小号按钮 .btn-info 信息按钮 .btn-primary 主要按钮 .btn-light 亮色按钮 .btn-dark 暗色按钮 .btn-secondary 次要按钮 .btn-success 成功按钮 .btn-link 链接按钮 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Primary\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-secondary\u0026#34;\u0026gt;Secondary\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-success\u0026#34;\u0026gt;Success\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-danger\u0026#34;\u0026gt;Danger\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-warning\u0026#34;\u0026gt;Warning\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-info\u0026#34;\u0026gt;Info\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-light\u0026#34;\u0026gt;Light\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-dark\u0026#34;\u0026gt;Dark\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-link\u0026#34;\u0026gt;Link\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 导航 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul class=\u0026#34;nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;1\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;2\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;3\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;4\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link\u0026#34;\u0026gt;5\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;nav-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;nav-link disabled\u0026#34;\u0026gt;6\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 面包屑导航 Breadcrumb Bootstrap 常用组件提供了面包屑导航，通过为导航层次结构自动添加分隔符来实现面包屑导航的页面效果。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav aria-label=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item active\u0026#34; aria-current=\u0026#34;page\u0026#34;\u0026gt;Home\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;nav aria-label=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item active\u0026#34; aria-current=\u0026#34;page\u0026#34;\u0026gt;Library\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;nav aria-label=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;ol class=\u0026#34;breadcrumb\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;Library\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;breadcrumb-item active\u0026#34; aria-current=\u0026#34;page\u0026#34;\u0026gt;Data\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 分页 Pagination 在前端页面开发的过程中，经常会使用到分页器的功能，分页器的功能是帮助用户快速的跳转到指定页码的页面，当用户想要打开指定页面时，不需要用户多次操作，实现了一步到位的效果，提高了用户的使用体验。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav aria-label=\u0026#34;Page navigation example\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;pagination\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Previous\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Next\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列表 List-group 在学习 Bootstrap 常用组件之前，为了实现列表页面，我们首先要编写列表结构，然后再根据页面的样式需求编写 CSS 代码。\n为了提高开发的效率，在 Bootstrap 中可以直接通过列表组件来实现列表页面结构。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul class=\u0026#34;list-group\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;list-group-item active\u0026#34;\u0026gt;列表1\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-group-item\u0026#34;\u0026gt;列表2\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-group-item\u0026#34;\u0026gt;列表3\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-group-item\u0026#34;\u0026gt;列表4\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 输入框组 Input-group 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .container{ margin-top: 50px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;input-group-prepend\u0026#34;\u0026gt; \u0026lt;!-- input 前方的文字 --\u0026gt; \u0026lt;span class=\u0026#34;input-group-text\u0026#34;\u0026gt;姓名\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;请输入姓名\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input-group mb-3\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-text\u0026#34;\u0026gt;家庭住址\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;请输入家庭住址\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;input-group\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;input-group-text\u0026#34;\u0026gt;联系方式\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;请输入联系方式\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Bootstrap 实现菜单功能 折叠菜单 Collapse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a class=\u0026#34;btn btn-primary\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; href=\u0026#34;#collapseExample\u0026#34; role=\u0026#34;button\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-controls=\u0026#34;collapseExample\u0026#34;\u0026gt; Link with href \u0026lt;/a\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; data-bs-target=\u0026#34;#collapseExample\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-controls=\u0026#34;collapseExample\u0026#34;\u0026gt; Button with data-bs-target \u0026lt;/button\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger. \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger. \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 模仿 Bootstrap 编写折叠菜单代码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; .btn { color: gray; border: 1px solid black; margin: 20px 0 0 20px; } .card { border: none; } .last { border-top: 1px solid gray; border-radius: 0; margin: 20px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a class=\u0026#34;btn btn-light\u0026#34; data-bs-toggle=\u0026#34;collapse\u0026#34; href=\u0026#34;#collapseExample\u0026#34; role=\u0026#34;button\u0026#34; aria-expanded=\u0026#34;false\u0026#34; aria-controls=\u0026#34;collapseExample\u0026#34;\u0026gt; = \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Bootstrap v3 中文文档 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Bootstrap v4 中文文档 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Bootstrap v5 中文文档 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; 网站实例 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; 精选模板 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse last\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;collapse\u0026#34; id=\u0026#34;collapseExample\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-body\u0026#34;\u0026gt; Bootstrap v2 中文文档 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 下拉菜单 Dropdowns 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;dropdown\u0026#34;\u0026gt; \u0026lt;!-- 添加 dropdown-toggle 类在按钮右侧出现向下箭头 --\u0026gt; \u0026lt;button class=\u0026#34;btn btn-secondary dropdown-toggle\u0026#34; type=\u0026#34;button\u0026#34; data-bs-toggle=\u0026#34;dropdown\u0026#34; aria-expanded=\u0026#34;false\u0026#34;\u0026gt; 菜单 \u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026#34;dropdown-menu\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;菜单1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;菜单2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a class=\u0026#34;dropdown-item\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;菜单3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Bootstrap 实现轮播图功能 轮播图 为 \u0026lt;a\u0026gt; 标签定义类名为 carousel-control-prev，表示设置左侧箭头的样式;定义 \u0026lt;a\u0026gt; 标签的 href 属性的值为 #carouselExampleControls，表示与轮播图最外层盒子绑定；定义 role 的值为 button 表示按钮角色;定义 data-slide 属性的值为 prev；表示查看上一张图片；在 \u0026lt;a\u0026gt; 标签的内部定义类名为 carousel-control-prev-icon 的 span 元素，表示左侧箭头图标；并且定义类名 sr-only 的 span 元素，设置内容为 Previous。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;carouselExampleCaptions\u0026#34; class=\u0026#34;carousel slide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-indicators\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;0\u0026#34; class=\u0026#34;active\u0026#34; aria-current=\u0026#34;true\u0026#34; aria-label=\u0026#34;Slide 1\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;1\u0026#34; aria-label=\u0026#34;Slide 2\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;2\u0026#34; aria-label=\u0026#34;Slide 3\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;3\u0026#34; aria-label=\u0026#34;Slide 4\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;4\u0026#34; aria-label=\u0026#34;Slide 5\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;5\u0026#34; aria-label=\u0026#34;Slide 6\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide-to=\u0026#34;6\u0026#34; aria-label=\u0026#34;Slide 7\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-item active\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi1.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第一张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi2.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第二张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi3.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第三张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi4.jpg\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第四张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi5.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第五张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi6.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第六张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;carousel-item\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/mi7.webp\u0026#34; class=\u0026#34;d-block w-100\u0026#34; alt=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;carousel-caption d-none d-md-block\u0026#34;\u0026gt; \u0026lt;h5\u0026gt;第七张图片\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;图片描述\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-prev\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;prev\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-prev-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Previous\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;carousel-control-next\u0026#34; type=\u0026#34;button\u0026#34; data-bs-target=\u0026#34;#carouselExampleCaptions\u0026#34; data-bs-slide=\u0026#34;next\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;carousel-control-next-icon\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;visually-hidden\u0026#34;\u0026gt;Next\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-04-12T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-bootstrap-%E6%A1%86%E6%9E%B6%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-bootstrap-%E6%A1%86%E6%9E%B6%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/","title":"第六章 Bootstrap 框架常用组件"},{"content":"Bootstrap 响应式布局 下载 Bootstrap Bootstrap 提供了 3 种下载方式供开发者进行选择，具体如下。\n第 1 种方式是下载预编译的文件。\n第 2 种方式是下载源文件进行手动编译，Bootstrap 4 的源文件采用了 Sass 进行编写。\n第 3 种方式是使用 CDN 来引入。\nBootstrap 官网：Bootstrap · The most popular HTML, CSS, and JS library in the world. (getbootstrap.com)\nBootstrap 中文网：Bootstrap中文网 (bootcss.com)\nBootstrap 自带的大部分组件都需要依赖 JavaScript 才能起作用。将 \u0026lt;script\u0026gt; 标签粘贴到页面底部，并且是在 \u0026lt;/body\u0026gt; 标签之前，就能起作用了。\n注意：要确保 bootstrap.min.css 和 bootstrap.bundle.min.js 确实在这个路径。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/js/bootstrap.bundle.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用 jsDelivr 的话可以跳过下载文件的操作，直接在你的项目中使用 Bootstrap 编译过的 CSS 和 JS 文件。\n1 2 3 \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-/mhDoLbDldZc3qpsJHpLogda//BVZbgYuw6kof4u2FrCedxOtgRZDTHgHUhOCVim\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Bootstrap 栅格系统 栅格系统（Grid Systems），即网格系统，它是一种清晰、工整的设计风格，用固定的格子进行网页布局。栅格系统最早应用于印刷媒体上，一个印刷版面上划分了若干个格子，非常方便排版。\n后来，栅格系统被应用于网页布局中，使用响应式栅格系统进行页面布局时，可以让一个网页在不同大小的屏幕上，呈现出不同的结构。例如，在小屏幕设备上有某些模块将按照不同的方式排列或者被隐藏。\n实现简单的栅格系统 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div{ text-align: center; font-size: 50px; } .row{ width: 100%; } .col1{ width: 25%; float: left; background-color: lightgray; } .col2{ width: 50%; float: left; background-color: gray; } @media (max-width: 768px){\t/* 媒体查询 */ .col1{ float: none; width: 100%; } .col2{ float: none; width: 100%; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;header\u0026gt;页头\u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;nav class=\u0026#34;col1\u0026#34;\u0026gt;导航栏\u0026lt;/nav\u0026gt; \u0026lt;div class=\u0026#34;col2\u0026#34;\u0026gt;主要内容\u0026lt;/div\u0026gt; \u0026lt;aside class=\u0026#34;col1\u0026#34;\u0026gt;侧边栏\u0026lt;/aside\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;footer\u0026gt;页尾\u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Bootstrap 布局容器 container 类 容器是 Bootstrap 一个基本的构建块，它包含、填充和对齐给定设备或视口中的内容。\nBootstrap 需要一个容器元素来包裹网站的内容。\n我们可以使用以下三个容器类：\n.container 类用于固定宽度并支持响应式布局的容器。（会根据屏幕宽度改变） .container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 .container-{breakpoint} 容器在每个响应断点处设置布局容器的宽度为 100%，直到达到指定断点为止。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; div{ /* text-align: center; */ background-color: blanchedalmond; margin: 10px 0; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;container\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt;container-fluid\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-md\u0026#34;\u0026gt;container-md\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 超小屏幕\u0026lt;576px 小屏幕≥576px 中等屏幕≥768px 大屏幕≥992px 特大屏幕≥1200px 超大屏幕≥1400px max-width 100% 540px 720px 960px 1140px 1320px 可以使用 .container-sm/md/lg/xl 类来创建响应式容器，容器的 max-width 属性值会根据屏幕的大小来改变。\n类名/屏幕类型 超小屏幕\u0026lt;576px 小屏幕≥576px 中等屏幕≥768px 大屏幕≥992px 特大屏幕≥1200px 超大屏幕≥1400px .container 100% 540px 720px 960px 1140px 1320px .container-sm 100% 540px 720px 960px 1140px 1320px .container-md 100% 100% 720px 960px 1140px 1320px .container-lg 100% 100% 100% 960px 1140px 1320px .container-xl 100% 100% 100% 100% 1140px 1320px .container-xxl 100% 100% 100% 100% 100% 1320px .container-fluid 100% 100% 100% 100% 100% 100% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; div{ /* text-align: center; */ background-color: blanchedalmond; margin: 10px 0; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;container\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-fluid\u0026#34;\u0026gt;container-fluid\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-sm\u0026#34;\u0026gt;container-sm\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-md\u0026#34;\u0026gt;container-md\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-lg\u0026#34;\u0026gt;container-lg\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-xl\u0026#34;\u0026gt;container-xl\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;container-xxl\u0026#34;\u0026gt;container-xxl\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 栅格系统的行和列 Bootstrap 栅格系统将页面布局划分为行和列。随着屏幕或视口尺寸的增加，系统会自动分为 1-12 列。\n栅格系统用于通过一系列的 行（row）与列（column） 的组合来创建页面布局。 开发者可以将内容放入这些创建好的布局中，然后通过列数的定义来模块化页面布局。 栅格系统页面的内容可以放入这些创建好的布局容器中，并且会根据父元素盒子（布局容器）尺寸的大小进行适当地调节，从而达到响应式页面布局的效果。 1 2 3 4 5 6 7 # Bootstrap 栅格系统为不同屏幕宽度定义了不同的类，直接为元素添加类名即可。 # 行必须包含在布局容器中，以便为其赋予合适的排列和内补。 # 通过行可以在水平方向创建一组列并且只有列可以作为行的直接子元素。 # 行使用样式 .row，列使用样式 .col-*-*，内容应当放置于列内，列大于 12 时，将会另起一行排列。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .container{ text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;9\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;10\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;11\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-1\u0026#34;\u0026gt;12\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 学生信息表格案例 首先需要在布局容器中创建一个类名为 row 的 div 元素作为行。 然后在行的容器内部创建列，布局容器中的行和列就构成了栅格系统。 栅格系统中的行和列类似于表格中的行和列。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .row{ font-size: 30px; background-color: #eee; } .col-md-4{ border: 2px solid white; text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;姓名\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;年龄\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;性别\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;张三\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;26\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;男\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 栅格系统的类前缀 基本类前缀 栅格系统提供了基本的前缀，用于在不同宽度的屏幕中实现不同的排列方式，列的类名可以写多个，也就是可以同时设置 .col-、.col-sm-、 .col-md-、.col-lg- 和 .col-xl- 类名。当同时使用这些类的时候，它会根据当前屏幕的大小来使相应的类生效，实现在不同屏幕下展示不同的页面结构。\n超小屏幕\u0026lt;576px 小屏幕≥576px 中等屏幕≥768px 大屏幕≥992px 特大屏幕≥1200px 超大屏幕≥1400px max-width 100% 540px 720px 960px 1140px 1320px 类前缀 .col- .col-sm- .col-md- .col-lg- .col-xl- .col-xxl 使用类前缀设置列的宽度 由于栅格系统就是默认将父元素分成 12 等份，所以可根据占据的份数来设置子元素的宽度，在设置列的宽度时，只需要在不同的类前缀后面加上栅格数量即可。\n案例需求：① 在超小屏幕上，一列占一行。② 在小屏幕上，一列占三分之一。③ 在中等屏幕上，一列占二分之一。④ 在超大屏幕上，一列占一行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .row{ background-color: #eee; } .col-sm-4{ border: 2px solid white; text-align: center; font-size: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-12 col-sm-4 col-md-6 col-xl-12\u0026#34;\u0026gt;第一列\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-12 col-sm-4 col-md-6 col-xl-12\u0026#34;\u0026gt;第二列\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-12 col-sm-4 col-md-6 col-xl-12\u0026#34;\u0026gt;第三列\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 栅格系统实现导航栏效果 首先定义导航栏页面结构，通过 Bootstrap 栅格系统中的 .container 设置导航栏的布局容器。 在导航栏布局容器中设置行和列。 在中等屏幕设备下，占 3 份，即每列宽度为 33.33%; 在小屏幕设备下，占 12 份，即每列宽度为 100%。然后再去定义导航栏的页面样式。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; ul{ padding: 0px; } li{ list-style: none; cursor: pointer; } .container{ background-color: #eee; } li{ text-align: center; font-size: 30px; padding: 10px; } /* li:hover{ background-color: white; } */ .active{ background: lightgray; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;col-md-3 col-sm-12 active\u0026#34;\u0026gt;首页\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;col-md-3 col-sm-12\u0026#34;\u0026gt;新闻资讯\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;col-md-3 col-sm-12\u0026#34;\u0026gt;关于我们\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;col-md-3 col-sm-12\u0026#34;\u0026gt;客户服务\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const lis = document.querySelectorAll(\u0026#39;li\u0026#39;); for(let i = 0; i \u0026lt; lis.length; i++){ lis[i].addEventListener(\u0026#39;mouseenter\u0026#39;, function(){ document.querySelector(\u0026#39;.active\u0026#39;).classList.remove(\u0026#39;active\u0026#39;); this.classList.add(\u0026#39;active\u0026#39;); }) } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列嵌套和列偏移 列嵌套 栅格系统内允许列的嵌套，在嵌套时也需要先创建 row 行，在创建 col 列，同样是分为 12 份。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .row{ background-color: #eee; } .col-md-4{ border: 2px solid white; text-align: center; font-size: 30px; } .col-md-6{ border: 2px solid white; text-align: center; font-size: 30px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;嵌套一\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-6\u0026#34;\u0026gt;嵌套二\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;第二列\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt;第三列\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 列偏移 栅格系统使用 .offset-md- 类将列向右侧偏移，主要是通过使用 .offset-md- 获取到当前元素并且增加了当前元素左侧的边距（margin）来实现的。\nmd 可以使用 sm、xl 和 lg 等替代，分别表示在不同屏幕下设置列的偏移。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/bootstrap/bootstrap-5.3.0-alpha1-dist/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; .row div{ height: 50px; background-color: #eee; font-size: 30px; text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-3\u0026#34;\u0026gt;左侧\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-3 offset-md-6\u0026#34;\u0026gt;右侧\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-04-05T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-bootstrap-%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-bootstrap-%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/","title":"第五章 Bootstrap 栅格系统"},{"content":"流式布局 流式布局介绍 移动端页面的常用布局方式包括 流式布局 、 弹性盒布局 和 Rem适配布局 。\n流式布局也称为百分比自适应布局，是移动 Web 开发中比较常见的布局方式。流式布局在 CSS 代码中需要使用百分比来设置盒子的宽高，例如，把盒子的宽度设置成百分比，网页就会根据浏览器的宽度和屏幕的大小来自动调整显示效果。其换算公式如下：\n$$ 目标元素宽度 / 父盒子宽度 = 百分数宽度 $$ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; header, nav, section, footer { width: 980px; height: auto; margin: 0 auto; margin-top: 10px; border: 1px solid #000; padding: 10px; } header { height: 50px; } section { height: 300px; } footer { height: 30px; } aside, article { height: 100%; border: 1px solid #000; float: left; } aside { width: 250px; } article { width: 715px; margin-left: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt;header\u0026lt;/header\u0026gt; \u0026lt;nav\u0026gt;nav\u0026lt;/nav\u0026gt; \u0026lt;section\u0026gt; \u0026lt;aside\u0026gt;aside\u0026lt;/aside\u0026gt; \u0026lt;article\u0026gt;article\u0026lt;/article\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用流式布局。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { width: 80%; margin: 0 auto; } header, nav, section, footer { width: 95%; height: auto; margin: 0 auto; margin-top: 10px; border: 1px solid #000; padding: 1%; } header { height: 50px; } section { height: 300px; } footer { height: 30px; } aside, article { height: 100%; border: 1px solid #000; float: left; } aside { width: 25%; } article { width: 73%; margin-left: 1%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt;header\u0026lt;/header\u0026gt; \u0026lt;nav\u0026gt;nav\u0026lt;/nav\u0026gt; \u0026lt;section\u0026gt; \u0026lt;aside\u0026gt;aside\u0026lt;/aside\u0026gt; \u0026lt;article\u0026gt;article\u0026lt;/article\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer\u0026gt;footer\u0026lt;/footer\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 弹性盒布局 什么是弹性盒布局 弹性盒布局（Flexible Box）是 CSS3 中的一种新布局模式，可以轻松地创建响应式网站布局。弹性盒布局为盒子增加了灵活性，可以让人们告别浮动（float），完美地实现垂直居中。目前它得到几乎所有主流浏览器的支持。\n弹性盒由 容器 、 子元素 和 轴 构成，并且默认情况下，子元素的排布方向与横轴的方向是一致的。弹性盒模型可以用简单的方式满足很多常见的复杂的布局需求，它的优势在于开发人员只是声明布局应该具有的行为，而不需要给出具体的实现方式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 80%; height: 300px; background-color: lightgray; } .box div{ width: 120px; float: left; height: 100px; background-color: bisque; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 使用弹性盒布局。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 80%; height: 300px; background-color: lightgray; display: flex; /* 纵轴排列 */ /* flex-direction: column; */ } .box div{ /* width: 120px; */ flex: 1; /* width: 33%; */ /* float: left; */ height: 100px; background-color: bisque; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;!-- \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 弹性盒布局的常用属性 display display 属性用于指定元素容器的类型，具体如下：\n默认值为 inline ，这意味着此元素会被显示为一个内联元素，在元素前后没有换行符。 如果设置 display 的值为 flex ，则表示用于指定弹性盒的容器。 如果设置 display 的值为 none ，则表示此元素不会被显示。 当父元素的 display 设为 flex 后，子元素就会按照内容的实际宽度来显示，且子元素的高度会占满父元素的可用高度。\nflex-flow flex-flow 是 flex-direction 的值和 flex-wrap 的值的组合。\nflex-direction 用于调整主轴的方向，默认情况下是横向，此时横轴为主轴，纵轴为侧轴。 取值 描述 row 弹性盒子元素按横轴方向顺序排列(默认值) row-reverse 弹性盒子元素按横轴方向逆序排列 column 弹性盒子元素按纵轴方向顺序排列 column-reverse 弹性盒子元素按纵轴方向逆序排列 flex-wrap 用于让弹性盒元素在必要的时候换行。 取值 描述 nowrap 容器为单行，该情况下 flex 子项可能会溢出容器。该值是默认属性值，不换行 wrap 容器为多行，flex 子项溢出的部分会被放置到新行（换行），第一行显示在上方 wrap-reverse 反转 wrap 排列（换行），第一行显示在下方 例如，将 flex-direction 设为 row，将 flex-wrap 设为 nowrap，等于 flex-flow: row nowrap。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 800px; /* width: 80px; */ padding: 10px; background-color: lightgray; display: flex; /* flex-flow: row wrap-reverse; */ /* flex-direction: column; */ } .box div{ margin: 10px; padding: 5PX; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;11111111111\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;22222222222\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;33333333333\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; justify-content justify-content 属性能够设置子元素在主轴方向的排列方式，其取值如表所示。\n取值 描述 flex-start 弹性盒子元素将向行起始位置对齐（默认值） flex-end 弹性盒子元素将向行结束位置对齐 center 弹性盒子元素将向行中间位置对齐 space-between 弹性盒子元素会平均分布在行里，第一个元素的边界与行的起始位置边界对齐，最后一个元素的边界与行结束位置的边界对齐 space-around 弹性盒子元素会平均分布在行里，两端保留子元素与子元素之间间距大小的一半 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 800px; padding: 10px; background-color: lightgray; display: flex; justify-content: space-around; } .box div{ margin: 10px; padding: 5PX; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;11111111111\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;22222222222\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;33333333333\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; align-items align-items 属性设置在父元素上，用于定义子元素在侧轴上的对齐方式，其取值如表所示。\n取值 描述 flex-start 弹性盒子元素向垂直于轴的方向上的起始位置对齐 flex-end 弹性盒子元素向垂直于轴的方向上的结束位置对齐 center 弹性盒子元素向垂直于轴的方向上的中间位置对齐 baseline 如果弹性盒子元素的行内轴（页面中文字的排列方向）与侧轴方向一致，则该值与 flex-start 等效。其他情况下，该值将与基线（文字底部线条）对齐 stretch 默认值。将子元素在侧轴上拉伸以适合容器，但会受到子元素大小属性（如 \u0026quot; min / max-width / height \u0026ldquo;）的限制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 800px; height: 800px; padding: 10px; background-color: lightgray; display: flex; /* flex-direction: column; */ /* justify-content: space-around; */ align-items: flex-start; /* align-items: flex-end; */ /* align-items: center; */ /* align-items: baseline; */ /* align-items: stretch; */ } .box div{ margin: 10px; padding: 5PX; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; /* height: 500px; */ } /* .box div:nth-child(1){ font-size: 30px; } */ \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;11111111111\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;22222222222\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;33333333333\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; order order 属性用于设置子元素出现的排列顺序。数值越小，排列将会越靠前，默认为 0。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 800px; padding: 10px; background-color: lightgray; display: flex; /* flex-flow: column; */ } .box div{ margin: 10px; padding: 5PX; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;order: 2;\u0026#34;\u0026gt;11111111111\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;order: 0;\u0026#34;\u0026gt;22222222222\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;order: 1;\u0026#34;\u0026gt;33333333333\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; flex flex 属性能够设置子元素的伸缩性，它是 flex-grow（放大比例，默认为0）、flex-shrink（缩小比例，默认为 1）和 flex-basis（宽度，像素值，默认为 auto）的简写形式，后两个为可选属性。在这些属性中，最常用的是 flex-grow。\nflex-grow：子元素按比例 “索取” 父元素的 “剩余空间”。 flex-shrink：子元素按比例 “吸收” 父元素超出的宽度。 flex-basis：设置子元素的占用空间（覆盖width宽度），默认为 auto。 1 2 3 4 5 6 7 当 flex-shrink 的值为 1 时，子元素不会超出父元素的宽度，设置为 0 时，子元素可以超出父元素。 当 flex-grow 属性为默认值 0 时，如果存在剩余空间，也不会放大。 如果所有项目的 flex-grow 属性都为 1，且存在剩余空间的话，那么将等分剩余空间。 如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 1000px; padding: 10px; background-color: lightgray; display: flex; } .box div{ width: 50px; margin: 10px; padding: 5px; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; box-sizing: border-box; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;flex: 0 1 50px;\u0026#34;\u0026gt;0\u0026lt;/div\u0026gt; \u0026lt;!-- \u0026lt;div style=\u0026#34;flex-shrink: 5; width: 1500px;\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;div style=\u0026#34;flex-grow: 2;\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;flex-basis: 300px;\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;flex: 10 0 300px;\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; align-self align-self 属性取值与 align-items 属性的取值类似，但是是设置在子元素上的，默认值为 auto。\n取值 描述 flex-start 弹性盒子元素向垂直于轴的方向上的起始位置对齐 flex-end 弹性盒子元素向垂直于轴的方向上的结束位置对齐 center 弹性盒子元素向垂直于轴的方向上的中间位置对齐 baseline 如果弹性盒子元素的行内轴（页面中文字的排列方向）与侧轴方向一致，则该值与 flex-start 等效。其他情况下，该值将与基线对齐 stretch 默认值。如果指定侧轴大小的属性值为 auto，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照 min / max-width / height 属性的限制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box{ width: 600px; height: 600px; padding: 10px; background-color: lightgray; display: flex; /* align-items: center; */ } .box div{ margin: 10px; padding: 5PX; background-color: antiquewhite; border: 1PX solid black; margin-right: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;align-self: flex-end;\u0026#34;\u0026gt;111\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;align-self: flex-start;\u0026#34;\u0026gt;222\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;align-self: baseline; font-size: 24px;\u0026#34;\u0026gt;333\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;align-self: baseline;\u0026#34;\u0026gt;444\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;align-self: stretch; height: 300px;\u0026#34;\u0026gt;555\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 媒体查询 什么是媒体查询 媒体查询是 CSS3 新增的一种语法，用来根据窗口宽度、屏幕比例和设备方向等差异来改变页面的显示方式。使用媒体查询能够在不改变页面内容的情况下，为特定的输出设备制定显示效果。媒体查询的基本语法形式如下：\n1 2 3 4 5 @media mediatype and / not / only (media feature) { html{ font-size: 20px; } } @media 表示声明媒体查询; mediatype 表示媒体类型; and、not 和 only 是逻辑操作符，用于联合构造复杂的媒体查询; media feature 表示媒体特性。 如果当前设备符合媒体类型和媒体特性，则大括号 {} 中的 CSS 代码就会生效。\n1 2 3 - 媒体类型可以设置成 screen （屏幕）、print（打印机）、speech（屏幕阅读器）或 all（所有设备）等，如果只考虑屏幕上的显示效果，则将媒体类型设为 screen 即可。 - 逻辑操作符 and 用于将多个媒体特性连接到一起，相当与 “且”；not 用于排除某个媒体特性，相当于 “非”；only 用于指定特定的媒体特性。 媒体特性是由 “属性：值” 组成的，常用的属性有 width、min-width 和 max-width，具体解释如下。\nwidth：定义输出设备中页面可见区域的宽度。 min-width：定义输出设备中页面可见区域的最小宽度。 max-width：定义输出设备中页面可见区域的最大宽度。 媒体查询使用方式 媒体查询的使用方法有两种，即内联式和外联式。下面利用媒体查询实现当文档宽度大于等于 640px 时，对 CSS 样式进行修改。内联式是直接在 CSS 中使用，示例代码如下。\n1 2 3 4 5 6 \u0026lt;!-- 内联式 --\u0026gt; \u0026lt;style\u0026gt; @media screen and (min-width: 640px) { CSS代码 } \u0026lt;/style\u0026gt; 外联式是作为单独的 CSS 文件从外部引入的，示例代码如下。\n1 2 \u0026lt;!-- 外联式 --\u0026gt; \u0026lt;link href=\u0026#34;style.css\u0026#34; media=\u0026#34;screen and (min-width: 640px)\u0026#34; ref=\u0026#34;stylesheet\u0026#34;\u0026gt; 响应式布局容器 首先创建基本样式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container{ height: 50px; background-color: lightgray; margin: 0 auto; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;布局容器\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 其中，container 类为 bootstrap 中常用的布局容器类名。\n编写 CSS 代码，当媒体类型为 screen，且屏幕大于等于 576px（min-width: 576px）时，将 container 类的宽度设置为 540px，当屏幕大于等于 768px 时，将 container 类的宽度设置为 720px。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .container{ height: 50px; background-color: lightgray; margin: 0 auto; } @media screen and (min-width: 576px){ .container{ width: 540px; } } @media screen and (min-width: 768px){ .container{ width: 720px; } } @media screen and (min-width: 992px){ .container{ width: 960px; } } @media screen and (min-width: 1200px){ .container{ width: 1140px; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;布局容器\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Rem 适配布局 rem 单位 Rem 适配布局一般采取 Less + Rem + 媒体查询来实现响应式布局设计。使用媒体查询可以根据不同的设备按比例设置页面的字体大小，然后在页面中使用 rem 单位，可以通过修改 html 里面的文字大小来改变页面中的元素的大小从而进行整体控制。rem 是 CSS3 中新增的一种相对长度单位。当使用 rem 单位时，根节点 \u0026lt; html \u0026gt; 的字体大小（font-size）决定了 rem 的尺寸。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;style\u0026gt; html{ font-size: 16px; } .box{ background: lightgray; width: 10rem; height: 10rem; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 通过媒体查询和 rem 单位实现元素大小动态变化 利用媒体查询和rem单位，可以实现元素大小的动态变化。其开发思路是:\n通过媒体查询来更改不同屏幕宽度下 \u0026lt; html \u0026gt; 的字体大小 页面中的元素盒子都使用 rem 单位，从而让它们能够进行等比例缩放 编写代码，如果屏幕宽度大于等于320px，就设置 \u0026lt; html \u0026gt; 元素根节点的 font-size 的值为 20px；如果屏幕宽度大于等于 750px，那么就设置 \u0026lt; html \u0026gt; 元素根节点的 font-size 的值为 50px；定义 div 的宽度和高度分别为 10rem。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;style\u0026gt; .box{ background: lightgray; width: 10rem; height: 10rem; } @media screen and (min-width: 500px) { html{ font-size: 30px; } } @media screen and (min-width: 750px) { html{ font-size: 50px; } } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Sass 什么是 Sass 在 Node.js 环境中使用 Sass Sass 语法格式 Sass 编译 Sass 嵌套 Sass 运算 Less 练习 制作移动端页面哪个布局方式不适合？（）\nA. 响应式 Responsive（使用 @media 媒体查询，给不同尺寸和介质的设备切换不同的样式）\nB. 伸缩 Flexbox（使用 CSS3 Flex 系列属性进行相对布局）\nC. 固定 Fixed（使用 px 和 pt 这样的绝对单位进行固定布局）\nD. 流动 Fluid（使用 % 百分比进行相对布局）\n采用流式布局方式进行移动端页面布局时，各内容区块最好采用（）。\nA．标准布局\nB．浮动布局\nC．相对定位布局\nD．绝对定位布局\nHTML5 提供了（）方法用于关闭全屏显示。\nA. exitFullscreen()\nB. closeFullscreen()\nC. requestFullscreen\nD. overFullscreen\n当手指触摸屏幕是触发的是什么事件？（）\n​A. ontouchstart\nB. ontouchcancle\nC. touchstart\nD. ontouch\n在拖曳操作中，（）和（）默认是可以拖曳的？\n​A. 图片和视频\nB. 链接和文字\nC. 文字和图片\nD. 图片和链接\n下列选项中，说法错误的是（）。\nA. window.sessionStorage 对象用于区域存储\nB. window.localStorage 对象用于本地存储\nC. Web Storage 接口提供的 clear(key) 方法，用于删除键名为 key 的存储内容\nD. 使用 sessionStorage 存储的数据，当浏览器关闭后，内存将被自动清除\n设置一个盒子的样式如下，此时该盒子的大小为多少？\n1 2 3 4 5 6 box-sizing: border-box; margin-top: 28.54px; margin-bottom: 14.63px; padding: 0 16.44px; width: 72px; height: 60px; A. 宽 88.44px 高 60px\nB. 宽 88.44px 高 103.17px\nC. 宽 72px 高 103.17px\nD. 宽 72px 高 60px\n使用媒体查询设置屏幕高度大于等于 500px 时，字体大小变为 32px，正确的代码是？（）\nA. @media screen when (min-width: 500px){ html{ font-size: 32px; } }\nB. @media screen and (min-height: 500px){ html{ font-size: 32px; } }\nC. @media screen and (max-width: 500px){ html{ font-size: 32px; } }\nD. @media screen and (max-height: 500px){ html{ font-size: 32px; } }\n关于下列代码说法正确的是？（）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;style\u0026gt; .box{ height: 500px; width: 500px; display: flex; flex-flow: row-reverse wrap; } .box div{ width: 200px; margin: 10px; } .box div:nth-child(1){ align-self: stretch; width: 600px; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;div\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; A. 页面中 \u0026lt; div \u0026gt;1\u0026lt; /div \u0026gt; \u0026lt; div \u0026gt;2\u0026lt; /div \u0026gt; \u0026lt; div \u0026gt;3\u0026lt; /div \u0026gt; 都在同一行显示\nB. 页面中 \u0026lt; div \u0026gt;1\u0026lt; /div \u0026gt; 的宽度是 \u0026lt; div \u0026gt;2\u0026lt; /div \u0026gt; 的 3 倍\nC. 页面中元素从上到下从左到右依次是 \u0026lt; div \u0026gt;1\u0026lt; /div \u0026gt; \u0026lt; div \u0026gt;3\u0026lt; /div \u0026gt; \u0026lt; div \u0026gt;2\u0026lt; /div \u0026gt;\nD. 通过 display: flex; 设置弹性盒布局，当屏幕大小变化时页面元素的大小也会随之变化\n下列说法正确的是？（）\nA. 当 flex-shrink 的值为 1 时，子元素可以超出父元素的宽度\nB. 如果一个项目的 flex-grow 属性为 5，其他项目都为 1，则前者宽度是其他元素的 5 倍\nC. align-items 属性为 baseline，表示行内轴与侧轴方向一致时，子元素基线对齐\nD. flex-direction 用于调整主轴的方向，默认情况下横轴为主轴，纵轴为侧轴\n","date":"2024-03-29T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/","title":"第四章 移动端页面布局"},{"content":"HTML5 常用 API 检测网络连接 在 HTML5 出现之前，可以通过 window.navigator.onLine 来检查用户当前的网络状态，它会返回一个布尔值，false 表示没有连接网络，true 表示已连接网络。需要注意的是，这种方式在不同浏览器中会存在差异。\n为了更好地实现网络连接的检测，HTML5 提供了 online 和 offline 两个事件，它们监听的都是 window 对象。其中，online在用户网络连接时调用，offline在用户网络断开时调用。\n1 window.addEventListener 全屏操作 HTMIL5 提供了 requestFullscreen() 方法，允许用户自定义网页上任一元素的全屏显示，并提供了 exitFullscreen() 方法关闭全屏显示。需要注意的是，这两个方法存在兼容性问题，不同浏览器需要添加不同的私有前缀。\n浏览器 前缀 方法 Chrome（WebKit 内核） webkit webkitRequestFullScreen() 或 webkitCancelFullScreen() 火狐（Gecko 内核） moz mozRequestFullScreen() 或 mozCancelFullScreen() Opera（Presto 内核） o oRequestFullScreen() 或 oCancelFullScreen() IE（Trident 内核） ms msRequestFullscreen() 或 msExitFullscreen() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/icon.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button id=\u0026#34;full\u0026#34;\u0026gt;全屏显示\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;cancelFull\u0026#34;\u0026gt;取消全屏\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;isFull\u0026#34;\u0026gt;判断当前是否全屏\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const div = document.querySelector(\u0026#39;div\u0026#39;); // document.querySelector(\u0026#39;#full\u0026#39;) 返回表示 \u0026lt;div id=\u0026#34;full\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 的DOM元素 document.querySelector(\u0026#39;#full\u0026#39;).onclick = function () { if (div.requestFullscreen) { div.requestFullscreen(); } else if (div.webkitRequestFullscreen) { div.webkitRequestFullScreen(); // webkit } else if (div.mozRequestFullScreen) { div.mozRequestFullScreen(); // moz } else if (div.msRequestFullscreen) { div.msRequestFullscreen(); // ms } else if (div.oRequestFullScreen) { div.oRequestFullScreen(); // o } else { alert(\u0026#39;浏览器不支持全屏\u0026#39;); } }; document.querySelector(\u0026#39;#cancelFull\u0026#39;).onclick = function () { if (document.exitFullscreen) { document.exitFullscreen(); } else if (document.webkitCancelFullscreen) { document.webkitCancelFullScreen(); // webkit } else if (document.mozCancelFullScreen) { document.mozCancelFullScreen(); // moz } else if (document.msExitFullscreen) { document.msExitFullscreen(); // ms } else if (document.oCancelFullScreen) { document.oCancelFullScreen(); // o } else { alert(\u0026#39;浏览器不支持\u0026#39;); } }; document.querySelector(\u0026#39;#isFull\u0026#39;).onclick = function () { alert(document.webkitIsFullScreen); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文件读取 如果想要把图片的缩略图显示到页面中，这就需要用到 HTML5 给我们提供的文件读取接口来实现。该接口通过 FileReader 对象来读取本地存储的文件，然后使用 File 对象来指定读取的文件或数据。\nFile 对象可以是来自用户在一个元素上（如 \u0026lt;input\u0026gt;）选择文件后返回的 FileList 对象，也可以是自由拖放操作生成的 DataTransfer 对象。dataTransfer 对象只能访问文件的一些基本的信息。\n由于 Web 环境的特殊性，为了考虑文件安全问题，浏览器不允许 JavaSctipt 直接访问文件系统，使用 \u0026lt;input\u0026gt; 表单元素的文件域 \u0026lt;input type=\u0026quot;file\u0026quot;\u0026gt; 来实现文件的上传。\ninput 元素还有一个 multiple 属性（HTML 5 新增），可以实现一次上传多个文件。在用户选择文件以后，可以得到一个 FileList 对象，它代表所选的文件列表。\n地理定位 拖曳 拖曳操作需要借助鼠标来实现，如文件或图片的移动操作等。在开发中，经常使用原生的 JavaScript 来实现拖曳效果，实现起来比较复杂。因此，HTML5 提供了更好用的接口或者事件，在很大程度上降低了页面中拖曳交互的实现难度。\n在 HTML5 中，任何元素都能够实现拖曳操作，可以通过为元素添加属性 draggable = \u0026ldquo;true\u0026rdquo; 来实现。需要注意的是，图片和链接默认是可以拖曳的，它们不用添加 draggable 属性。一个完整的拖曳效果是由拖曳（Drag）和释放（Drop）组成的。在拖曳操作中， 被拖动的元素称作源对象 ，是指页面中设置了draggable = \u0026ldquo;true\u0026rdquo; 属性的元素； 源对象进入的元素称作目标元素 ，目标元素可以是页面中的任一元素。\n事件 事件描述 ondragstart 当拖曳开始时触发 ondrag 作用于整个拖曳过程（鼠标可能移动或不移动） ondragend 当拖曳结束时触发 ondragenter 当源对象进入目标元素时触发 ondragover 当源对象悬停在目标元素上方时触发 ondragleave 当源对象离开目标元素时触发 ondrop 当源对象在目标元素上方释放鼠标时触发 需要注意的是，只有当源对象上的 鼠标点 进入目标元素时，才会触发 ondragenter 事件。默认情况下，浏览器会默认阻止 ondrop 事件，如果想要触发该事件，则需要在 ondragover 事件中使用 \u0026ldquo;return false;\u0026quot;（或者 e.preventDefault()）来阻止其默认行为。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div { border: 2px solid black; width: 285px; height: 500px; float: left; margin: 10px; text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;d0\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;课程列表\u0026lt;/h3\u0026gt; \u0026lt;p id=\u0026#34;p1\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;数据结构（周一9-10节）\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p2\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;数据结构（周二9-10节）\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p3\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;移动技术应用开发（周三1-4节）\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p4\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;移动技术应用开发（周四1-4节）\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p5\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;移动技术应用开发（周五1-4节）\u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;p6\u0026#34; draggable=\u0026#34;true\u0026#34;\u0026gt;前端技术应用（周五5-8节）\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;d1\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;周一课程\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;d2\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;周二课程\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;d3\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;周三课程\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;d4\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;周四课程\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;d5\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;周五课程\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; document.ondragstart = function (e) { console.log(\u0026#39;源对象开始被拖动\u0026#39; + \u0026#39;，目标id为：\u0026#39; + e.target.id); e.dataTransfer.setData(\u0026#39;text\u0026#39;, e.target.id); }; document.ondrag = function (e) { console.log(\u0026#39;源对象拖动中\u0026#39;); }; document.ondragend = function (e) { console.log(\u0026#39;源对象结束拖动\u0026#39;); }; document.ondragenter = function (e) { console.log(\u0026#39;源对象进入目标对象\u0026#39;); console.log(e.target) }; document.ondragover = function (e) { console.log(\u0026#39;源对象悬停\u0026#39;); return false; }; document.ondragleave = function (e) { console.log(\u0026#39;源对象离开目标对象\u0026#39;); }; document.ondrop = function (e) { console.log(\u0026#39;源对象在目标对象上释放\u0026#39;); let\tid = e.dataTransfer.getData(\u0026#39;text\u0026#39;); e.target.appendChild(document.getElementById(id)); }; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Web 存储 Web Storage 随着互联网的快速发展，基于网页的应用越来越普遍，同时也变得越来越复杂。为了满足各种各样的需求，会经常在本地设备上存储大量的数据。\n例如，记录历史活动信息。传统的方式是使用 document.cookie 来进行存储，但是由于其存储空间有限（大约4KB），并且需要复杂的操作来解析，给开发者带来了诸多不便。为此，HTMIL5 规范提出了网络存储相关的解决方案，即 Web Storage （Web存储）和本地数据库 Web SQL Database。\nWeb Storage API 中包含 window. sessionStorage 和 window.localStorage 两个关键的对象。前者用于区域存储，后者用于本地存储。Web Storage 具有以下特点：\n容量较大，sessionStorage 大约为 5MB，localStorage 大约为 20MB。 在移动平台上具有良好的兼容性，能够减少网络流量的使用。 可以临时存储数据，在用户浏览页面期间使用，关闭窗口就可以丢弃。 从本地读取数据比从服务器获取数据要快很多，能快速显示数据，且网页通过本地缓存可以立即显示。 方法/属性 描述 key(n) 该方法用于返回存储对象中第 n 个 key 的名称 setItem(key,value) 该方法接收一个键名和值作为参数，将会把键值对存储起来，如果键名存在，则更新其对应的值 getItem(key) 该方法接收一个键名作为参数，返回键名对应的值 removeltem(key) 该方法删除键名为 key 的存储内容 clear() 该方法清空所有存储内容 length 该属性返回 Storage 存储对象中包含的 item 的数量 由于 sessionStorage 对象和 localStorage 对象都是 Storage 的实例，所以都可以使用 Storage 接口提供的方法和属性。\nsessionStorage 对象 sessionStorage 是 HTML5 新增的一个 会话存储 对象，用于 临时 保存同一窗口（或标签页）的数据，在关闭窗口或标签页之后将会删除这些数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;username\u0026#34;\u0026gt; \u0026lt;button id=\u0026#34;setData\u0026#34;\u0026gt;设置数据\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;getData\u0026#34;\u0026gt;获取数据\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026#34;delData\u0026#34;\u0026gt;删除数据\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const username = document.querySelector(\u0026#39;#username\u0026#39;); document.querySelector(\u0026#39;#setData\u0026#39;).onclick = function(){ let data = username.value; window.sessionStorage.setItem(\u0026#39;username\u0026#39;, data); }; document.querySelector(\u0026#39;#getData\u0026#39;).onclick = function(){ alert(window.sessionStorage.getItem(\u0026#39;username\u0026#39;)); }; document.querySelector(\u0026#39;#delData\u0026#39;).onclick = function(){ window.sessionStorage.removeItem(\u0026#39;username\u0026#39;); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; localStorage对象 localStorage 作为 HTML5 Web Storage 的 API 之一，主要作用是本地存储。localStorage可以将数据按照 键值对 的方式保存在客户端计算机中，直到用户或者脚本主动清除数据，否则该数据会一直存在。也就是说，使用了本地存储的数据将被持久化保存。\nlocalStorage 与 sessionStorage 唯一的区别就是存储数据的 生命周期不同 。locaStorage 是永久性存储，而 sessionStorage 的生命周期与会话保持一致，会话结束时数据消失。\n从硬件方面理解，localStorage 的数据是存储在硬盘中的，关闭浏览器时数据仍然在硬盘上，再次打开浏览器仍然可以获取。而sessionStorage 的数据保存在浏览器的内存中，当浏览器关闭后，内存将被自动清除。\n播放视频和音频 \u0026lt;video\u0026gt; 标签用来定义视频播放器，它不仅是一个播放视频的标签，而且其控制栏还实现了包括播放、暂停、进度和音量控制、全屏等功能，更重要的是，用户可以自定义这些功能和控制栏的样式。video 标签基本语法如下：\n1 \u0026lt;video src=\u0026#34;视频文件路径\u0026#34; controls\u0026gt;你的浏览器不支持video标签\u0026lt;/video\u0026gt; 视频格式 不支持 支持 支持 支持 不支 Ogg IE 9 Firefox 4.0 Opera 10.6 Chrome 6.0 Safari 3.0 MPEG4 支持 不支持 不支持 支持 支持 WebM 不支持 支持 支持 支持 不支持 可以看到，目前没有一种视频格式能让所有浏览器都支持。为此，HTMIL5中提供了 \u0026lt;source\u0026gt; 标签，用于指定多个备用的不同格式的文件路径，语法如下：\n1 2 3 4 \u0026lt;video controls\u0026gt; \u0026lt;source src=\u0026#34;视频文件地址\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;video/Pragmata_delay_ex.mp4\u0026#34;\u0026gt; \u0026lt;/video\u0026gt; \u0026lt;audio\u0026gt; 标签用来定义 Web 上的声音文件或音频流，使用方法与 \u0026lt;video\u0026gt; 标签基本相同。\n1 2 3 4 \u0026lt;audio src=\u0026#34;audio/FinalFantasy_p4s.mp3\u0026#34; controls\u0026gt;你的浏览器不支持audio标签\u0026lt;/audio\u0026gt; \u0026lt;audio controls\u0026gt; \u0026lt;source srcset=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/audio\u0026gt; 你的浏览器不支持audio标签\n移动端常用事件 touch 事件 touch 事件即触屏操作事件，大部分主流浏览器支持 4 种最基本的 touch 事件。\n事件 事件描述 touchstart 当手指触摸屏幕时触发 touchmove 当手指在屏幕上移动时触发 touchend 当手指离开屏幕时触发 touchcancel 当系统取消 Touch 事件的时候触发（如来电、弹出信息等） 在使用这些触摸事件时，需要通过 addEventListener() 方法向指定元素添加事件句柄，示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 500px; height: 500px; border: 2px solid black; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; window.onload = function () { const box = document.querySelector(\u0026#39;.box\u0026#39;); box.addEventListener(\u0026#39;touchstart\u0026#39;, function () { console.log(\u0026#39;touchstart\u0026#39;); }); box.addEventListener(\u0026#39;touchmove\u0026#39;, function () { console.log(\u0026#39;touchmove\u0026#39;); }); box.addEventListener(\u0026#39;touchend\u0026#39;, function () { console.log(\u0026#39;touchend\u0026#39;); }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在 PC 端中，当一个事件发生后，与事件相关的一系列信息数据的集合都会放到这个对象中，这个对象称为 event 事件对象。与 PC 端一样，移动端也有自己的事件对象，touch 触摸事件发生后也会产生 TouchEvent 对象，该对象包含了 3 个用于跟踪触摸的属性，用于返回不同的触摸点集合。\n属性 属性描述 touches 表示当前屏幕上所有触摸点的列表 targetTouches 表示当前对象上所有触摸点的列表 changedTouches 返回在上一次触摸和此触摸之间状态发生变化的所有触摸对象的列表 需要注意的是，touches 和 targetTouches 只存储接触屏幕的触点，如果想要获取触点最后离开的状态就要使用 changedTouches。另外，touches 和 targetTouches 在 Chrome 浏览器测试和真机测试中是没有区别的，推荐使用 targetTouches。\n上述触摸点集合中每个 touch 对象代表一个触点，它包含一些用于获取触摸信息的常用属性，如位置、大小、形状、压力大小和目标 element 属性等。\n属性 属性描述 clientX 触摸目标在视口中的 x 坐标 clientY 触摸目标在视口中的 y 坐标 identifier 标识触摸的唯一 ID pageX 触摸目标在页面中的 x 坐标 pageY 触摸目标在页面中的 y 坐标 screenX 触摸目标在屏幕中的 x 坐标 screenY 触摸目标在屏幕中的 y 坐标 target 触摸的 DOM 节点目标 touch 事件实现轮播图效果 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .banner{ width: 100%; overflow: hidden; position: relative; } .bannerImg{ width: 100%; position: relative; } .bannerImg \u0026gt; li{ width: 10%; float: left; list-style: none; } .bannerImg \u0026gt; li \u0026gt; img{ display: block; width: 100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;banner\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;bannerImg clearfix\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a1.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a2.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a3.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a4.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a5.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a6.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/MyPra/img/bili/a7.avif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const banner = document.querySelector(\u0026#39;.banner\u0026#39;); const imgBox = document.querySelector(\u0026#39;.bannerImg\u0026#39;); const first = imgBox.querySelector(\u0026#39;li:first-of-type\u0026#39;); const last = imgBox.querySelector(\u0026#39;li:last-of-type\u0026#39;); imgBox.appendChild(first.cloneNode(true)); imgBox.insertBefore(last.cloneNode(true), imgBox.firstChild); const lis = imgBox.querySelectorAll(\u0026#39;li\u0026#39;); const count = lis.length; const bannerWidth = banner.offsetWidth; imgBox.style.width = count * bannerWidth + \u0026#39;px\u0026#39;; for( let i = 0; i \u0026lt; lis.length; i++){ lis[i].style.width = bannerWidth + \u0026#39;px\u0026#39;; }; let index = 1; imgBox.style.left = -bannerWidth + \u0026#39;px\u0026#39;; let startX, moveX, distanceX; imgBox.addEventListener(\u0026#39;touchstart\u0026#39;, function(e){ startX = e.targetTouches[0].clientX; }); imgBox.addEventListener(\u0026#39;touchmove\u0026#39;, function(e){ moveX = e.targetTouches[0].clientX; distanceX = moveX - startX; imgBox.style.transition = \u0026#39;none\u0026#39;; imgBox.style.left = (-index * bannerWidth + distanceX) + \u0026#39;px\u0026#39;; }); imgBox.addEventListener(\u0026#39;touchend\u0026#39;, function(e){ if(Math.abs(distanceX) \u0026gt; 80){ if(distanceX \u0026gt; 0){ index --; }else{ index ++; } imgBox.style.transition = \u0026#39;left 0.5s ease-in-out\u0026#39;; imgBox.style.left = (-index * bannerWidth) + \u0026#39;px\u0026#39;; }else if(Math.abs(distanceX) \u0026gt; 0){ imgBox.style.transition = \u0026#39;left 0.5s ease-in-out\u0026#39;; imgBox.style.left = -index * bannerWidth + \u0026#39;px\u0026#39;; } }); imgBox.addEventListener(\u0026#39;webkitTransitionEnd\u0026#39;, function(){ if(index == count - 1){ index = 1; }else if( index == 0){ index = count -2; } imgBox.style.transition = \u0026#39;none\u0026#39;; imgBox.style.left = - index * bannerWidth + \u0026#39;px\u0026#39;; }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-03-22T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B8%8B/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B8%8B/","title":"第三章 移动Web开发基础（下）"},{"content":"视口 什么是视口 视口（Viewport）是移动 Web 开发中一个非常重要的概念，最早由苹果公司为 iOS 系统的 Safari 浏览器引入，其目的是让 iPhone 的小屏幕尽可能完整地显示整个网页。通过设置视口，不管网页原始的分辨率有多大，都能将其缩小显示在手机浏览器上，这样保证网页在手机上看起来更像在桌面浏览器中的样子。\n简单来说， 视口就是浏览器显示页面内容的区域 。在移动端浏览器中，存在着3种视口，分别是布局视口（Layout Viewport）、视觉视口（Visual Viewport）和理想视口（Ideal Viewport）。\n布局视口 布局视口是指浏览器绘制网页的视口，一般移动端浏览器都默认设置了布局视口的宽度。根据设备的不同，布局视口的默认宽度有可能是 980px 或1024px等，这个宽度并不适合在手机屏幕中展示。移动端浏览器之所以采用这样的默认设置，是为了解决早期的 PC 端页面在手机上显示的问题。\n当移动端浏览器展示PC端网页内容时，由于移动端设备屏幕比较小，不能像PC端浏览器那样完美地展示网页，这是布局视口比设备屏幕宽造成的。这样的网页在手机的浏览器中会出现左右滚动条，用户需要左右滑动才能查看完整的一行内容。\n视觉视口 视觉视口是指用户所看到的网站的区域，这个区域的宽度等同于移动设备的浏览器窗口的宽度。\n需要注意的是，当在手机上缩放网页时，操作的是视觉视口，而布局视口仍然保持原来的宽度。\n理想视口 理想视口是指对设备来讲最理想的视口。采用理想视口的方式，可以使网页在移动端浏览器上获得最理想的浏览和阅读的宽度。在理想视口情况下， 布局视口的宽度和屏幕宽度是一致的 ，这样就不需要左右滑动页面了。在开发中，为了实现理想视口，需要为移动端页面添加 标签来配置视口，通知浏览器来进行处理。\n利用 \u0026lt; meta \u0026gt; 标签设置视口 在传统的 PC 端网页开发中，并没有使用过 \u0026lt; meta \u0026gt; 标签来设置视口，此时浏览器会按照默认的布局视口宽度来显示网页。如果希望自己开发的网页在浏览器中以理想视口的形式呈现，就需要利用 \u0026lt; meta \u0026gt; 标签设置视口。\n在 \u0026lt; meta \u0026gt; 标签中，将 name 属性设为 viewport，即可设置视口，示例代码如下。\n1 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 视口的常用设置 在使用 \u0026lt; meta \u0026gt; 标签设置视口时，可以在 content 属性中添加一些参数，格式为 \u0026ldquo;参数名 = 参数值\u0026rdquo;，多个参数用 \u0026ldquo;,\u0026rdquo; 分开。以前面演示过的 \u0026ldquo;width=device-width\u0026rdquo; 为例，width 就是参数名，device-width 是参数值。\n参数名 说明 width 设置视口宽度，可以设为正整数（像素）或特殊值 device-width height 设置视口高度，可以设为正整数（像素）或特殊值 device-height initial-scale 初始缩放比，取值范围为 0.0 ~ 10.0 maximum-scale 最大缩放比，取值范围为 0.0 ~ 10.0 minimum-scale 最小缩放比，取值范围为 0.0 ~ 10.0 user-scalable 用户是否可以缩放，其值为 yes 或 no 可以通过动态的改变缩放值 initial-scale 来进行适配。\n这种方式虽然能够解决适配问题，但也会过于简单粗暴，主要有以下两个问题：\n1. 全局缩放，把不需要缩放的也影响了; 2. 如果有第三方 UI 库，会影响了第三方库的显示效果； rem 适配 rem（font size of the root element）是指相对于根元素的字体大小的单位，简单的说它就是一个相对单位；em（font size of the element）指相对于父元素的字体大小的单位。它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。\n移动端H5开发之页面适配篇-腾讯云开发者社区-腾讯云 (tencent.com)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; html { font-size: 100px; } p { font-size: 1rem; /* 100px */ } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;rem布局下的p标签\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; (function (window, html) { // 规定默认的设计稿宽度720px const designWidth = 1080; function recalc() { const windowWidth = html.clientWidth \u0026lt; designWidth ? html.clientWidth : designWidth; // *100 之后，则样式中rem的值就需要相应的缩小100倍 // 即：设计稿中的20px，在样式中就要写成0.2rem const fontSize = windowWidth / designWidth * 100; setFontSize(fontSize); } function setFontSize(fontSize) { html.style.fontSize = `${fontSize}px`; } // 监听resize window.addEventListener(\u0026#39;resize\u0026#39;, recalc); recalc(); }(window, document.documentElement)); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; html{ /* 100vw 375px */ /* a 100px */ font-size: 26.66667vw; } .box{ /* 相对于 html 的 font-size */ font-size: 0.16rem; /* 此时 1 rem 相当于 100 px */ position: absolute; top: 5%; left: 50%; /* 往上（x轴）、左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */ transform: translate(-50%, -50%); text-align: center; box-sizing: border-box; padding: 3px 0; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;这是一个div标签\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 移动 Web 样式的编写 利用 Normalize.css 初始化默认样式 在开发中，为了确保不同浏览器的默认样式统一，通常会对样式进行初始化，也就是在页面中定义一些初始样式，用来覆盖浏览器的默认样式。\nNormalize.IO · GitHub\nnormalize.github.io/index.css at master · normalize/normalize.github.io · GitHub\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/Bootstrap/normalize.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt;引入 Normalize.css\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 设置 box-sizing 为 border-box 在 CSS3 中，通过 box-sizing 属性可以更改盒子尺寸的计算方式。将 box-sizing 设为 content-box（默认值）时，表示使用传统的计算方式；设为 border-box 时，表示使用 CSS3 的一种新的计算方式，通过这种方式可以解决传统盒子在添加了边框和内边距后，盒子被撑大的问题。示例代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // 传统计算方式（标准盒子、内容盒子、W3C盒子） box-sizing: content-box; // 使用 content-box 计算方式的盒子模型，其宽度的计算公式如下。 // 盒子的宽度 = css 中设置的 width + border(left+right) + padding(left+right) // 盒子的高度 = css 中设置的 height + border(top+buttom) + padding(top+buttom) ------------------------------------------------------------------------- // 新的计算方式（IE盒子、边框盒子、怪异盒子） box-sizing: border-box; // 使用 border-box 计算方式的盒子模型，其宽度的计算公式如下。 // 盒子的宽度 = css 中设置的 width // 盒子的高度 = css 中设置的 height 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; div{ width: 200px; height: 200px; padding: 20px; background-color: paleturquoise; } .b1{ border: 10px solid black; box-sizing: content-box; margin: 10px 10px; } .b2{ border: 10px solid rgb(0, 0, 0); box-sizing: border-box; margin: 10px 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;b1\u0026#34;\u0026gt;content-box\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;b2\u0026#34;\u0026gt;border-box\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 设置移动端的特殊样式 在实际开发中，移动 Web 页面的设计风格更接近 APP（手机应用），而不是传统的网页。为了有更好的用户体验，可以给移动 Web 页面设置一些特殊样式。\n样式 说明 -webkit-tap-highlight-color: transparent; 去除超链接按下时默认的高亮效果（设为透明) -webkit-appearance: none; 去除按钮的原生样式 -webkit-touch-callout: none; 禁止长按页面时弹出菜单 -webkit-user-select: none; 禁止文本被手动选择 需要注意的是，上述样式是非标准的，因此加上了私有前缀 \u0026ldquo;-webkit-\u0026quot;，该前缀在 WebKit 和 Blink 内核的浏览器中有效，适用于 Chrome 浏览器和大多数移动端浏览器。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; a{ -webkit-tap-highlight-color: transparent; } button{ -webkit-appearance: none; } p{ -webkit-user-select: none; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;https://www.baidu.com/\u0026#34;\u0026gt;百度官网\u0026lt;/a\u0026gt; \u0026lt;button\u0026gt;点一下\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;文本被禁止选中了\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 分辨率和设备像素比 分辨率 ① 屏幕分辨率 屏幕分辨率（ 物理分辨率 ）是指一个屏幕上可以显示多少信息，通常以像素（px）为单位来衡量。例如，1920 × 1080px 表示水平方向含有1920，垂直方向含有1080，将两者相乘可知，屏幕上总共有2073600px。\n在屏幕的大小相同的情况下，如果屏幕的分辨率低（如 640 × 480px )，则屏幕上显示的像素少，单个像素点比较大，看起来会有种颗粒感；如果屏幕的分辨率高（如 1920 × 1080px），则屏幕上显示的像素多，单个像素点比较小，看起来会比较清晰。\n② 图像分辨率 在同一台设备上，图片的像素点和屏幕的像素点通常是一一对应的。图片的分辨率越高，图片越清晰；图片的分辨率越低，图片越模糊。\n在屏幕上把图片放大时，会发现图片在屏幕上显示的像素也变大，这是因为软件通过算法对图像进行了像素补充，虽然图片本身的像素没有变，但是在显示时已经补充了很多个屏幕像素（ 逻辑分辨率 ）；同理，把图片缩小时，也是通过算法减少了显示的图片像素。\n前端页面往往参考 逻辑分辨率 进行开发。\n二倍图 为了 防止图片在高分辨率屏幕下模糊失真 ，在设计页面时往往使用更高分辨率的图片，保证图片的原有清晰度。目前二倍图以 iPhone 6/7/8 分辨率为标准，即 375 × 667px 。\n在实际开发中，除了设置二倍图外，还可以设置成三倍图、四倍图等。其实现思路都是相同的，可根据项目的实际需要来设置。\n背景图片的缩放 在开发中，除了使用插入的图片，还会用到背景图片，所以背景图片也需要设置缩放效果。在CSS3中，提供了 background-size 属性来规定背景图片的尺寸，从而达到背景图片的缩放效果。\n1 background-size: 背景图片的宽度 背景图片的高度; background-size 设置的宽度和高度可以是像素或百分比。除此之外，background-size还可以用其他的属性值来实现不同的缩放效果。\n属性值 说明 cover 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域 contain 把背景图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; /* body{ background-image: url(/MyPra/img/gravel.jpg); } */ div{ width: 800px; height: 600px; border: 2px solid black; background: url(/MyPra/img/icon.jpg) no-repeat; margin: 10px 0; } .d1{ width: 256px; height: 256px; border: 2px solid rgb(255, 0, 0); background: url(/MyPra/img/icon.jpg) no-repeat; } .d2{ width: 256px; height: 256px; border: 2px solid rgb(255, 0, 0); background: url(/MyPra/img/icon.jpg) no-repeat; background-size: 256px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;background-size: cover;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;background-size: contain;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;background-size: 800px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026#34;background-size: 50%;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;d1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;d2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; SVG 矢量图 什么是 SVG 矢量图是根据几何特性来绘制图形，矢量可以是一个点或一条线，矢量图只能靠软件生成。可缩放矢量图形（Scalable Vector Graphics，SVG）是一种开放标准的描述矢量图形的语言，它基于 XML（extensible Markup Language，可扩展标记语言）。在 2003 年 1 月，SVG 1.1 被确立为 W3C 标准。与其他图像格式相比，使用 SVG 的优势如下。\nSVG 可被非常多的工具读取和修改（如记事本）。 SVG 与 JPEG、GIF 图像相比， 文件体积更小 ，且 可压缩性更强 。 SVG 图像中的文本是可选的，同时也是可搜索的（很适合制作地图）。 SVG 是开放的标准。 SVG 文件是用 XML 编写的。 SVG 矢量图形 可伸缩 ，可在任何的分辨率下被高质量地打印，可在 图像质量不下降 的情况下被放大。 \u0026lt; svg \u0026gt; 标签和样式 属性 说明 width 用来控制 SVG 视图的宽度 height 用来控制 SVG 视图的高度 viewBox 定义用户视野的位置和大小 viewBox 可以定义用来观察 SVG 视图的一个矩形区域，它的属性主要包括 x、y、width、height，用数字表示，每个数字之间用空格或逗号隔开，表示定义一个在左上角（x , y）坐标位置且宽度为 width、高度为 height 的矩形。\n在 \u0026lt; svg \u0026gt; 标签的内部，可以使用 SVG 提供的一些预定义的标签来绘制图形，或者绘制文字。常用的内部标签如下表所示。\n标签名 说明 \u0026lt; rect \u0026gt; 矩形标签 \u0026lt; ellipse \u0026gt; 椭圆形标签 \u0026lt; circle \u0026gt; 圆形标签 \u0026lt; line \u0026gt; 线段标签 \u0026lt; polyline \u0026gt; 折线标签 \u0026lt; polygon \u0026gt; 多边形标签 \u0026lt; path \u0026gt; 路径标签 \u0026lt; lext \u0026gt; 文字标签 \u0026lt; tspan \u0026gt; 类似 \u0026lt; span \u0026gt; ，用在 \u0026lt; text \u0026gt; 内部单独设置样式 上述标签还可以通过属性来设置样式。\n属性名 属性值 说明 fill String 定义填充颜色和文字颜色 fill-opacity 0 ～ 1 之间的浮点数 定义填充颜色的透明度 stroke String 定义描边的颜色 stroke-width 大于 0 的浮点数 定义描边的宽度 stroke-opacity 0 ～ 1 之间的浮点数 定义描边的颜色的透明度 opacity 0 ～1 之间的浮点数 定义整个图形元素的透明度 transform translate(x,y) 平移 transform scale(x,y) 缩放 transform rotate(angle, [cx,cy]) 旋转 transform skewX(angel) skewY(angel) 倾斜 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body{ height: 900px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;svg width=\u0026#34;100%\u0026#34; height=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;circle cx=\u0026#34;50\u0026#34; cy=\u0026#34;50\u0026#34; r=\u0026#34;40\u0026#34; stroke=\u0026#34;black\u0026#34; stroke-width=\u0026#34;2px\u0026#34; fill=\u0026#34;pink\u0026#34;\u0026gt;\u0026lt;/circle\u0026gt; \u0026lt;rect width=\u0026#34;80px\u0026#34; height=\u0026#34;80px\u0026#34; stroke=\u0026#34;black\u0026#34; stroke-width=\u0026#34;2px\u0026#34; fill=\u0026#34;pink\u0026#34; transform=\u0026#34;translate(100,100)\u0026#34; fill-opacity=\u0026#34;20%\u0026#34;\u0026gt;\u0026lt;/rect\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 练习 填空题 视口分为（\t）。\n视口通过（\t）标签来设置。\n初始化移动端默认样式使用的库是（\t）。\nbackground-size 中把背景图片扩展至足够大使背景图像完全覆盖背景区域的属性值是（\t）。\nbackground-size 中的高度可以省略（\t）。\n布局视口是对设备来讲最理想的视口（\t）。\n在开发的时候用到的 1 px 一定就等于 1 个物理像素（\t）。\n在同一台设备上，图片的像素点和屏幕的像素点是一一对应的。如果图片分辨率越高，图片越模糊；图片分辨率越低，图片越清晰（\t）。\nSVG的含义为可缩放矢量图形（\t）。\n选择题 下列选项中，用来设置盒子模型 border-box 计算方式的属性是（\t）。\nA. box-sizing\nB. box\nC. boder-sizing\nD. box-size\n下列选项中，属于Chrome浏览器的内核的是（\t）。\nA. Blink\nB. WebKit\nC. Presto\nD. Gecko\n下列选项中，用来定义矩形的标签是（\t）。\nA. \u0026lt; circle \u0026gt;\nB. \u0026lt; rect \u0026gt;\nC. \u0026lt; line \u0026gt;\nD. \u0026lt; polygon \u0026gt;\n下列选项中，能够清除 \u0026lt; a \u0026gt; 标签单击时高亮效果的是（\t）。\nA. -webkit-tap-highlight-color\nB. -webkit-appearance\nC. -webkit-touch-callout\nD. -webkit-tap-highlight-callout\n下列选项中，用来设置视口初始缩放比的是（\t）。\n​A. initial-scale\nB. maximum-scale\nC. minimum-scale\nD. user-scalable\n编程题 仿照百度热搜，编写页面。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .main-box { position: absolute; top: 30%; left: 50%; /* 往上（x轴）、左（y轴）移动自身长宽的 50%，以使其居于中心位置。 */ transform: translate(-50%, -50%); } img { width: 101px; height: 33px; margin-bottom: -2.5px; } ul { list-style: none; } .list{ height: 30px; padding: 5px 0; box-sizing: border-box; } a{ -webkit-tap-highlight-color: transparent; text-decoration: none; color: rgb(48, 80, 221); font-size: 16px; } a:hover{ color: red; text-decoration: underline; } h2:hover{ color: #5193f5; cursor: pointer; } #s0, #s1{ color: rgb(255, 0, 0); } #s2{ color: rgb(255, 60, 0); } #s3{ color: rgb(255, 102, 0); } span{ border-radius: 50%; width: 20px; height: 20px; color: rgb(112, 94, 94); margin-right: 10px; font-size: 16px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;main-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;/MyPra/img/baidu.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;百度热搜 \u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span id=\u0026#34;s0\u0026#34;\u0026gt;#\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;风好正是扬帆时\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span id=\u0026#34;s1\u0026#34;\u0026gt;1\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;住建部：防止房地产市场大起大落热\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span id=\u0026#34;s3\u0026#34;\u0026gt;2\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;美国共产主义者宣布成立政党\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span id=\u0026#34;s3\u0026#34;\u0026gt;3\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;2024年全国两会新闻中心启用\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;4\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;上海到北京仅需2.5小时\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;5\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;爆火的秦岭隧道视频系拼接 作者道歉\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;6\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;贵州省长：全面清理拖欠企业账款\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;7\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;理想市值一天涨了1个小鹏\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;8\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;#张雪峰称想出国读书先看这本书#\u0026lt;/a\u0026gt;\u0026lt;/div class=\u0026#34;news\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;list\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;news\u0026#34;\u0026gt;\u0026lt;span\u0026gt;9\u0026lt;/span\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;河南多地发生山火？\u0026lt;/a\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-03-15T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%A7%BB%E5%8A%A8-web-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B8%8A/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%A7%BB%E5%8A%A8-web-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E4%B8%8A/","title":"第二章 移动 Web 开发基础（上）"},{"content":"Bootstrap 概述 什么是 Bootstrap Bootstrap 是由 Twitter 公司的设计师 Mark Otto（马克·奥托）和 Jacob Thornton（雅各布·桑顿）合作开发的开源框架，该框架基于 HTML、CSS 和 JavaScript 语言编写，于 2011 年 8 月在 GitHub 上发布，一经推出就颇受欢迎。Bootstrap 具有简单、灵活的特性，常用于开发响应式布局和移动设备优先的 Web 项目，能够帮助开发者 快速搭建前端页面 。\n1 2 3 4 # 所谓框架，顾名思义就是一套架构，它有一套比较完整的解决方案，而且控制权在框架本身。 # Bootstrap是一款用于网页开发的框架，它拥有样式库、组件和插件， 使用者需要按照框架所规定的某种规范进行开发。 Bootstrap 特点 响应式设计\nBootstrap 框架为用户提供了一套响应式的移动设备优先的流式栅格系统，拥有完备的框架结构,项目开发方便、快捷，提高了开发效率。 移动设备优先\n随着移动设备的使用者越来越多，自 Bootstrap 3 开始，框架设计理念发生了改变，转为以移动设备优先为目标，Bootstrap 3 默认样式为移动设备提供了友好的支持。 浏览器支持\n目前主流浏览器都支持 Bootstrap 框架，包括 IE、Firefox、Chrome、Safari 等。Bootstrap 4 兼容IE10+和iOS 7+。 低成本、易上手\n学习 Bootstrap 框架的门槛不高，只需要读者具备 HTML、CSS 和 JavaScript 的基础知识即可。\nBootstrap 框架拥有完善的文档，在开发中便于查找，使用起来比较方便。Bootstrap 还具有强大的扩展性，能够很好地与现实中的 Web 开发项目相结合。\nCSS预编译\nCSS 预编译的工作原理是，提供便捷的语法和特性以便开发者编写源码，然后使用专门的编译工具将源码转化为 CSS 语法。Bootstrap 4 中使用 Sass（一种 CSS扩展语言）进行 CSS 编写和预编译，减少了冗余代码，使 CSS 样式代码更容易维护和扩展。 框架成熟\nBootstrap 框架发展比较成熟，它不断适应 Web 技术的发展，在原有的基础上进行更新迭代和完善，并在大量的项目中被广泛使用，并通过不断测试得以完善。 丰富的组件库\nBootstrap 框架提供了功能强大的组件与插件，如小图标、按钮组、菜单导航、标签页等。丰富的组件和插件可以使开发人员快速搭建前端页面。开发人员还可以根据实际需要进行组件和插件的定制。 浏览器 PC 端浏览器 目前，市面上的浏览器种类繁多，如果按照设备类型来划分，主要包括PC端浏览器和移动端浏览器﹔如果按照浏览器的内核来划分，主要包括 Blink、WebKit 和 Trident 等。\nPC 端的浏览器主要包括 Google（谷歌）公司的 Chrome 浏览器、Mozilla 公司的 Firefox 浏览器、苹果公司的 Safari 浏览器、微软公司的 Internet Explorer（简称IE）和 Edge 浏览器等。\n移动端浏览器 随着 Android、iOS 系统手机的不断推出，手机中都会用到移动 Web 浏览器。例如，Android 系统内置的 Android Browser、iOS 系统内置的 Mobile Safari，以及一些国产的浏览器如 UC 浏览器、QQ 浏览器、百度浏览器等。\n这些移动 Web 浏览器不同于过去的 WAP 浏览器，它们可以识别和解析 HTML、CSS、JavaScript 代码。而且大多数移动Web浏览器是基于 WebKit 内核的，可很好地支持 HTML5。\n对于 Web 前端开发人员来说，移动 Web 开发与 PC 端 Web 开发所使用的技术是类似的，都是使用 CSS、HTML 和 JavaScript 等基本语言，但移动端的 Web 项目的呈现依赖于移动端浏览器。因此，在移动 Web 开发中，需要注意以下两点。\n移动端设备受屏幕尺寸限制 ，操作的局限性比较大，所以要注意页面的结构不能过于复杂，要提炼出网站最核心的功能，并简洁清晰地呈现出来。\n要注意移动端的操作方式的改变 。移动端页面的所有交互活动由鼠标控制变为手指触屏控制，操作方式更加丰富，如摇一摇、双指放大、滑动、双击、单击等。\nVisual Studio Code 编辑器 什么是 Visual Studio Code Visual Studio Code（VS Code）是由微软公司推出的一款免费、开源的代码编辑器，一经推出便受到开发者的欢迎。VS Code 编辑器具有如下特点。\n（1）轻巧极速，占用系统资源较少。\n（2）具备语法高亮显示、智能代码补全、自定义快捷键和代码匹配等功能。\n（3） 跨平台 。不同的开发人员为了工作需要，会选择不同平台来进行项目开发，这在一定程度上限制了编辑器的使用范围。VS Code 编辑器不仅是跨平台的（支持 Mac、Windows 和 Linux ），而且使用起来也非常简单。\n（4）提供丰富的 插件 。VS Code 提供了插件扩展功能，用户可根据需要自行下载和安装插件，只需在安装配置成功后重新启动编辑器，即可使用此插件提供的功能。\n下载和安装 Visual Studio Code 下载：Visual Studio Code - Code Editing. Redefined\n移动 Web 开发的主流方案 单独制作移动端页面 通常，单独制作移动端页面并不改变原有的 PC 端页面，而是针对移动端单独开发出一套特定的版本，在网站的域名中使用二级域名 “m”（含义为mobile）来表示移动端网站。例如，在移动端浏览器中访问淘宝网的网址，即可打开淘宝网的移动端页面。有些网站还会智能地根据当前访问的设备来跳转到对应的页面。如果是移动设备，则跳转到移动端页面；如果是 PC 端设备，则跳转到 PC 端页面。\n由于 单独制作移动端网站会产生多个URL （PC端一套 URL，移动端一套 URL），因此重定向移动网站需要花费一些时间。同时，需要对搜索引擎做一些处理，会使 维护成本增加 。而且，它可能需要针对不同的屏幕尺寸去分别制作多个网站，对于开发人员来说， 工作量比较大 。\n制作响应式页面 响应式页面是指同一页面在不同屏幕尺寸下可实现不同的布局，从而使一个页面兼容不同的终端。这里所说的终端主要包括 PC 端和移动端，它们的分辨率和屏幕大小都是不同的。在开发网站时，只需加入响应式设计就可以兼容这些终端，而不必单独制作移动端页面。响应式开发主要是为了解决移动互联网浏览的问题，通过响应式设计能使网站在手机和平板电脑上有更好的浏览、阅读体验。\n在开发移动端页面的过程中，当调整浏览器窗口时，将会 通过判断浏览器窗口的宽度来改变样式 ，页面结构会根据浏览器窗口的大小重新展示，以适应不同的移动终端设备。\n响应式开发的特点 跨平台\n响应式开发具有跨平台的优势，能够快捷地解决多终端设备的显示适配问题，只需开发套网站就可以在多个平台使用，给用户带来风格一致的视觉体验。 便于搜索引擎收录\n响应式网站制作完成后，无论在移动端设备还是 PC 端设备上访问，访问的都是同一个链接地址，这样就不会分散网站的权重，提升网站对搜索引擎的友好度。 节约成本\n响应式网站可以兼容多个终端，开发者不需要为各个终端编写不同的代码。并且响应式网站可以实现只用一个后台来进行管理，多个终端的数据保持同步，这样在制作的时候就可以减少专职程序开发人员的配备。对于开发者而言，减少了大量重复的工作，提高了工作效率；对于公司而言，节省了人员开支，降低了开发成本。 练习 填空题 Bootstrap 框架基于 HTML、CSS 和（ ）技术，可以构建出非常优雅的前端界面。\nBootstrap 4 中使用 CSS 预编译，使得 CSS 样式代码更加容易维护和扩展（\t）。\nVS Code 是由微软公司推出的一款免费、开源的编辑器（ ）。\n响应式 Web 开发是指同一页面在不同屏幕尺寸下有不同的布局（ ）。\n选择题 下列选项中，不属于Bootstrap框架特点的是（\t）。\nA. 提供CSS预编译\nB. 组件丰富\nC. 响应式移动设备优先\nD.学习成本高\n下列选项中，关于Bootstrap的说法正确的是（ ）。\nA. 它提供了一个带有网格系统、链接样式、背景的基本结构\nB. 它自带全局的CSS样式\nC. Bootstrap提供了强大的插件\nD. 以上全部正确\n下列选项中，不属于Chrome浏览器优势的是（\t）。\nA. 市场占有率低，兼容性差\nB. 提供了很多方便开发者使用的插件\nC. 设计简单易用、开发高效的Web浏览工具\nD. 基于强大的JavaScript V8引擎，速度快\n","date":"2024-03-08T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86-bootstrap/image_hu_579e2583ab797c93.png","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E8%AF%86-bootstrap/","title":"第一章 初识 Bootstrap"},{"content":"什么是多线程 线程 是操作系统能够进行运算调度的最小单位。它被包含在 进程 之中，是进程中的实际运作单位。\n进程 进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配的基本单位，是操作系统结构的基础。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。\n程序是指令、数据及其组织形式的描述，进程是程序的实体 —— 进程就是正在运行中的程序（进程是驻留在内存中的）。\n是系统执行资源分配和调度的独立单位。\n每一进程都有属于自己的存储空间和系统资源。\n注意：进程 A 和进程 B 的内存独立不共享。\n线程 线程（thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。\n可以简单的将多线程理解为应用软件中的多个相互独立，可以同时运行的功能，有了多线程，我们就可以同时让程序做多件事情，提高效率。\n单线程：一个进程中包含一个顺序控制流（一条执行路径）。\n多线程：一个进程中包含多个顺序控制流（多条执行路径）。\n在 java 语言中：线程 A 和线程 B，堆内存和方法区内存共享；但是栈内存独立，一个线程一个栈。\n假设启动 10 个线程，会有 10 个栈空间，每个栈和每个栈之间，互不干扰，各自执行各自的，这就是多线程并发。java中之所以有多线程机制，目的就是为了提高程序的处理效率。\n对于单核的 CPU 来说，不能够做到真正的多线程并发，但是可以做到给人一种 “多线程并发” 的感觉。对于单核的 CPU 来说，在某一个时间点上实际上只能处理一件事情，但是由于 CPU 的处理速度极快，多个线程之间频繁切换执行，跟人来的感觉是多个事情同时在做。\n1 2 3 4 5 6 7 8 9 10 11 12 13 package com.company.thread; public class test1 { public static void main(String[] args) { // 定义一个变量a，在内存中开辟存储空间，存储值10 int a = 10; // -\u0026gt; 等待 // 定义一个变量b，在内存中开辟存储空间，存储值20 int b = 20; // -\u0026gt; 等待 // 定义一个变量c，在内存中开辟存储空间，存储值a+b int c = a + b; // -\u0026gt; 等待 System.out.println(c); } } 并发和并行 并发：在同一时刻，有多个指令在 单个 CPU 上 交替 执行。\n并行：在同一时刻，有多个指令在 多个 CPU 上 同时 执行。\n并发 早期计算机的 CPU 都是单核的，一个 CPU 在同一时间只能执行一个进程/线程，当系统中有多个进程/线程等待执行时，CPU 只能执行完一个再执行下一个。\n计算机在运行过程中，有很多指令会涉及 I/O 操作，而 I/O 操作又是相当耗时的，速度远远低于 CPU，这导致 CPU 经常处于空闲状态，只能等待 I/O 操作完成后才能继续执行后面的指令。\n为了提高 CPU 利用率，减少等待时间，人们提出了一种 CPU 并发工作的理论。\n所谓并发，就是通过一种算法将 CPU 资源合理地分配给多个任务，当一个任务执行 I/O 操作时，CPU 可以转而执行其它的任务，等到 I/O 操作完成以后，或者新的任务遇到 I/O 操作时，CPU 再回到原来的任务继续执行。\n虽然 CPU 在同一时刻只能执行一个任务，但是通过将 CPU 的使用权在恰当的时机分配给不同的任务，使得多个任务在视觉上看起来是一起执行的。CPU 的执行速度极快，多任务切换的时间也极短，用户根本感受不到，所以并发执行看起来才跟真的一样。\n操作系统负责将有限的 CPU 资源分配给不同的任务，但是不同操作系统的分配方式不太一样，常见的有：\n当检测到正在执行的任务进行 I/O 操作时，就将 CPU 资源分配给其它任务。\n将 CPU 时间平均分配给各个任务，每个任务都可以获得 CPU 的使用权。 在给定的时间内，即使任务没有执行完成，也要将 CPU 资源分配给其它任务，该任务需要等待下次分配 CPU 使用权后再继续执行。\n将 CPU 资源合理地分配给多个任务共同使用，有效避免了 CPU 被某个任务长期霸占的问题，极大地提升了 CPU 资源利用率。\n并行 并发是针对单核 CPU 提出的，而并行则是针对多核 CPU 提出的。和单核 CPU 不同，多核 CPU 真正实现了 “同时执行多个任务”。\n多核 CPU 内部集成了多个计算核心（Core），每个核心相当于一个简单的 CPU，如果不计较细节，你可以认为给计算机安装了多个独立的 CPU。 多核 CPU 的每个核心都可以独立地执行一个任务，而且多个核心之间不会相互干扰。在不同核心上执行的多个任务，是真正地同时运行，这种状态就叫做并行。\n例如，同样是执行两个任务，双核 CPU 的工作状态如下图所示：\n双核 CPU 执行两个任务时，每个核心各自执行一个任务，和单核 CPU 在两个任务之间不断切换相比，它的 执行效率更高。\n并发 + 并行 在上图中，执行任务的数量恰好等于 CPU 核心的数量，是一种理想状态。但是在实际场景中，处于运行状态的任务是非常多的，尤其是电脑和手机，开机就几十个任务，而 CPU 往往只有 4 核、8 核或者 16 核，远低于任务的数量，这个时候就会同时存在并发和并行两种情况：所有核心都要并行工作，并且每个核心还要并发工作。\n例如一个双核 CPU 要执行四个任务，它的工作状态如下图所示：\n每个核心并发执行两个任务，两个核心并行的话就能执行四个任务。当然也可以一个核心执行一个任务，另一个核心并发执行三个任务，这跟操作系统的分配方式，以及每个任务的工作状态有关系。\n多线程的实现方式 继承 Thread 类 1 2 3 4 5 6 7 8 9 10 11 12 13 package com.company.thread.mt1; public class MyThread extends Thread { // 重写run方法 @Override public void run() { // 在里面写想要线程执行的代码 for (int i = 0; i \u0026lt; 10; i++) { System.out.println(getName()+ \u0026#34;：i =\u0026#34; + i); } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package com.company.thread.mt1; public class ThreadDemo1 { public static void main(String[] args) { /* 多线程的第一种实现方式 1.自己定义一个类继承自Thread类 2.重写run方法 3.创建子类的对象，并启动线程 */ MyThread mt1 = new MyThread(); MyThread mt2 = new MyThread(); // 调用setName方法 mt1.setName(\u0026#34;线程1\u0026#34;); mt2.setName(\u0026#34;线程2\u0026#34;); // 开启线程 mt1.start(); mt2.start(); } } 实现 Runnable 接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.company.thread.mt2; public class MyRunnable implements Runnable { @Override public void run() { // 书写线程要执行的代码 for (int i = 0; i \u0026lt; 10; i++) { // 此时getName方法是Threa类里的，不能直接调用 // System.out.println(getName()+ \u0026#34;：i =\u0026#34; + i); Thread thread = Thread.currentThread(); System.out.println(thread.getName() + \u0026#34;：i =\u0026#34; + i); } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package com.company.thread.mt2; public class ThreadDemo2 { public static void main(String[] args) { /* 多线程的第二种实现方式: 1.自己定义一个类实现Runnable接口 2.重写里面的run方法 3.创建自己的类的对象 4.创建一个Thread类的对象，并开启线程 */ // 创建MyRun对象 MyRunnable mr = new MyRunnable(); // 创建线程对象 Thread t1 = new Thread(mr); Thread t2 = new Thread(mr); t1.setName(\u0026#34;线程1\u0026#34;); t2.setName(\u0026#34;线程2\u0026#34;); t1.start(); t2.start(); } } 接口 implements implements 是一个类实现一个接口用的关键字。实现一个接口，必须实现接口中的所有方法。\n(1) 接口可以被多重实现（implements），抽象类只能被单一继承（extends）。\n(2) 接口只有定义，抽象类可以有定义和实现。\n(3) 接口的字段定义默认为：public static final，抽象类字段默认是 \u0026ldquo;friendly\u0026rdquo;（本包可见）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 比如：People是一个接口，他里面有say这个方法。 接口的定义： public interface People{ public void say(); } 但是接口没有方法体。只能通过一个具体的类去实现其中的方法体。 比如 Chinese这个类，就实现了People这个接口。 接口的实现： public class Chinese implements People{ public void say() { System.out.println(\u0026#34; 你好！\u0026#34;); } } 接口的调用： People chinese = new Chinese() ; chinese.say(); 接口可以有不同的实现，即使用不同的类实现。 在java中extends表示子类继承父类，如类A继承类B写成 class A extends B { //..... } implements 的意思更接近“实现”，比如实现一个接口的方法。 Implements 与 Extends 的区别 ① extends 表示对父类的继承，可以实现父类，也可以调用父类初始化 this.parent()。而且会覆盖父类定义的变量或者函数。\n② implements 表示对接口的实现，接口通过关键字interface 进行定义。eg：public class S implements F，在接口 F 中对方法进行声明，在类 S 中对这些方法进行实现。\n③ 这两种实现的具体使用，是要看项目的实际情况，需要实现，但不可以修改，要求定义接口，用 implements。需要具体实现，或者可以被修改，扩展性好，用 extends。\n利用 Callable 接口和 Future 接口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package com.company.thread.mt3; import java.util.concurrent.Callable; public class MyCallable implements Callable\u0026lt;Integer\u0026gt; { @Override public Integer call() throws Exception { // 求1~100的和 int sum = 0; for (int i = 1; i \u0026lt;= 100; i++) { sum += i; } return sum; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.company.thread.mt3; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; public class ThreadDemo3 { public static void main(String[] args) throws ExecutionException, InterruptedException { /* 多线程的第三种实现方式: 这种方式可以获取到多线程运行的结果 1．创建一个类MyCallable实现callable接口 2．重写call(是有返回值的，表示多线程运行的结果〉 3.创建MyCallable的对象(表示多线程要执行的任务） 4.创建Future抽象类的实现类FutureTask的对象（用于管理多线程运行的结果) 5.创建Thread类的对象，并启动 */ // 创建MyCallable的对象 MyCallable mc = new MyCallable(); // 创建FutureTask的对象 FutureTask\u0026lt;Integer\u0026gt; ft = new FutureTask\u0026lt;\u0026gt;(mc); // 创建线程对象 Thread t1 = new Thread(ft); t1.start(); // 获取多线程返回结果 Integer res = ft.get(); System.out.println(res); } } 多线程中的常用成员方法 方法名称 说明 string getName() 返回此线程的名称 void setName( string name) 设置线程的名字（构造方法也可以设置名字) static Thread currentThread() 获取当前线程的对象 static void sleep( long time) 让线程休眠指定的时间，单位为毫秒 setPriority(int newPriority) 设置线程的优先级（最小是1，最大是10，默认是5） final int getPriority() 获取线程的优先级 final void setDaemon( boolean on) 设置为守护线程 public static void yield() 出让线程/礼让线程 public static void join() 插入线程/插队线程 线程的基本方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 package com.company.thread; public class Test1 { public static void main(String[] args) { /* string getName( ) 返回此线程的名称 void setName(String name) 设置线程的名字（构造方法也可以设置名字) static Thread currentThread() 获取当前线程的对象 static void sleep(long time) 让线程休眠指定的时间，单位为毫秒 */ MyThread1 mt1 = new MyThread1(\u0026#34;构造函数设置的线程名\u0026#34;); MyThread1 mt2 = new MyThread1(); MyThread1 mt3 = new MyThread1(); MyThread1 mt4 = new MyThread1(); mt4.setName(\u0026#34;setName设置的线程名\u0026#34;); mt1.start(); // 构造函数设置的线程名 mt2.start(); // Thread-0 mt3.start(); // Thread-1 mt4.start(); // setName设置的线程名 } } class MyThread1 extends Thread{ @Override public void run() { System.out.println(\u0026#34;运行线程——\u0026#34; + getName()); } public MyThread1() { } public MyThread1(String name) { super(name); } } 即使没有给线程设置名称，线程也有默认的名称，格式为 Thread-x，x 为序号，从 0 开始。\n可以通过生成构造函数的方法，在开启线程时为线程设置名称。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package com.company.thread; public class Test2 { public static void main(String[] args) throws InterruptedException { // 获取当前线程的对象 Thread thread = Thread.currentThread(); String name = thread.getName(); System.out.println(name); // main // 线程休眠 // System.out.println(\u0026#34;sleep\u0026#34;); // Thread.sleep(5000); // System.out.println(\u0026#34;awake\u0026#34;); MyThread2 mt1 = new MyThread2(); mt1.start(); } } class MyThread2 extends Thread{ @Override public void run() { System.out.println(\u0026#34;运行线程——\u0026#34; + getName()); System.out.println(\u0026#34;sleep\u0026#34;); try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\u0026#34;awake\u0026#34;); } public MyThread2() { } public MyThread2(String name) { super(name); } } 当 JVM 虚拟机启动之后，会自动的启动多条线程，其中有一条线程就叫做 main 线程，他的作用就是去调用 main 方法，并执行里面的代码，在以前，我们写的所有的代码，其实都是运行在 main 线程当中的。\n可以在线程中使用 Thread.sleep() 方法休眠线程，注意此时异常需要使用 try catch 包裹，因为父类 Thread 中的 run() 方法是不能抛出异常的。\n线程的优先级 线程的调度：① 抢占式调度，多个线程抢夺 CPU 的执行权。② 非抢占式调度，轮换执行。\n在 Java 中采用的是 抢占式调度 的方式，特点是随机性，线程的优先级越大，则这条线程抢占到 CPU 的概率就越大，就越容易被执行；优先级从 1 到 10，数字越大优先级越高，默认情况下优先级为 5。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package com.company.thread; public class Test3 { public static void main(String[] args) { // 创建 Runnable 对象 MyRunnable1 mr1 = new MyRunnable1(); // 创建线程对象 Thread t1 = new Thread(mr1, \u0026#34;线程1\u0026#34;); Thread t2 = new Thread(mr1, \u0026#34;线程2\u0026#34;); System.out.println(t1.getPriority()); System.out.println(t2.getPriority()); System.out.println(Thread.currentThread().getPriority()); t1.setPriority(1); t2.setPriority(10); t1.start(); t2.start(); } } class MyRunnable1 implements Runnable { @Override public void run() { // System.out.println(\u0026#34;运行线程——\u0026#34; + Thread.currentThread().getName()); for (int i = 0; i \u0026lt;= 100; i++) { if (i == 100){ System.out.println(Thread.currentThread().getName() + \u0026#34;：执行完毕\u0026#34;); }else { System.out.println(Thread.currentThread().getName() + \u0026#34;：\u0026#34; + i); } } } } 守护线程、礼让线程、插入线程 ▷ 守护线程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package com.company.thread; public class Test4 { public static void main(String[] args) { MyThread3 mt1 = new MyThread3(); MyThread4 mt2 = new MyThread4(); // 当其他的非守护线程结束后，守护线程会陆续的结束 mt1.setName(\u0026#34;线程\u0026#34;); mt2.setName(\u0026#34;守护线程\u0026#34;); mt2.setDaemon(true); mt1.start(); mt2.start(); } } class MyThread3 extends Thread { @Override public void run() { for (int i = 1; i \u0026lt;= 10; i++) { System.out.println(getName() + \u0026#34;：\u0026#34; + i); } } } class MyThread4 extends Thread { @Override public void run() { for (int i = 1; i \u0026lt;= 100; i++) { System.out.println(getName() + \u0026#34;：\u0026#34; + i); } } } 守护线程应用场景：传输文件时关闭聊天窗口，则传输线程中断。\n▷ 礼让线程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.company.thread; public class Test5 { public static void main(String[] args) { MyThread4 mt1 = new MyThread4(); MyThread4 mt2 = new MyThread4(); mt1.setName(\u0026#34;线程1\u0026#34;); mt2.setName(\u0026#34;线程2\u0026#34;); mt1.start(); mt2.start(); } } class MyThread5 extends Thread { @Override public void run() { for (int i = 1; i \u0026lt;= 100; i++) { System.out.println(getName() + \u0026#34;：\u0026#34; + i); // 出让当前CPU的执行权，让执行情况更加均匀 Thread.yield(); } } } ▷ 插入线程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package com.company.thread; public class Test6 { public static void main(String[] args) throws InterruptedException { MyThread6 mt1 = new MyThread6(); mt1.setName(\u0026#34;线程\u0026#34;); mt1.start(); // 把线程 mt1 插入到当前线程前 mt1.join(); for (int i = 1; i \u0026lt;= 10; i++) { System.out.println(\u0026#34;main线程\u0026#34; + i); } } } class MyThread6 extends Thread { @Override public void run() { for (int i = 1; i \u0026lt;= 100; i++) { System.out.println(getName() + \u0026#34;：\u0026#34; + i); // 出让当前CPU的执行权，让执行情况更加均匀 Thread.yield(); } } } 练习：使用三种方式创建线程，分别为其设置名称，并将其中一条设置为守护线程。\n线程的生命周期和安全问题 线程的生命周期 就绪状态： 就绪状态的线程又叫做可运行状态，表示当前线程具有抢夺 CPU 时间片的权力（CPU 时间片就是执行权）。当一个线程抢夺到 CPU 时间片之后，就开始执行 run 方法，run 方法的开始执行标志着线程进入运行状态。\n运行状态： run 方法的开始执行标志着这个线程进入运行状态，当之前占有的 CPU 时间片用完之后，会重新回到就绪状态继续抢夺 CPU 时间片，当再次抢到 CPU 时间之后，会重新进入 run 方法接着上一次的代码继续往下执行。\n阻塞状态： 当一个线程遇到阻塞事件，例如接收用户键盘输入，或者 sleep 方法等，此时线程会进入阻塞状态，阻塞状态的线程会放弃之前占有的 CPU 时间片。之前的时间片没了 需要再次回到就绪状态 抢夺 CPU 时间片。\n锁池： 在这里找共享对象的对象锁线程进入锁池找共享对象的对象锁的时候，会释放之前占有 CPU 时间片，有可能找到了，有可能没找到，没找到则在锁池中等待，如果找到了会进入就绪状态继续抢夺 CPU 时间片（这个进入锁池，可以理解为一种阻塞状态）。\n线程的安全问题 同步代码块 练习：某电影院有 3 个售票窗口正在售票，共有 100 张，请使用线程模拟售票情况。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 package com.company.thread; public class Pra2 { public static void main(String[] args) { MyThread8 mt1 = new MyThread8(\u0026#34;窗口1\u0026#34;, 0); MyThread8 mt2 = new MyThread8(\u0026#34;窗口2\u0026#34;, 0); MyThread8 mt3 = new MyThread8(\u0026#34;窗口3\u0026#34;, 0); mt1.start(); mt2.start(); mt3.start(); } } class MyThread8 extends Thread { // 表示这个类所有的对象都共享ticket这个数据 static int ticket = 0; public MyThread8(int ticket) { this.ticket = ticket; } public MyThread8(String name, int ticket) { super(name); this.ticket = ticket; } @Override public void run() { while (true) { if (ticket \u0026lt; 100) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } ticket++; System.out.println(getName() + \u0026#34;：售出\u0026#34; + ticket + \u0026#34;张票\u0026#34;); } else { break; } } } } 创建三条线程，通过 static 关键字定义 ticket，使得类中所有的对象都共享 ticket 的值，从而保证三个窗口只售出 100 张票，但此时仍存在一些问题：\n① 当线程抢占到 CPU 后，还没来得及打印售票提示信息，CPU 就又被其他线程抢占了，此时会出现多个线程打印同一条售票信息的情况。\n② 当执行到 99 时，当前线程如果被其他线程抢占 CPU，也会出现 ticket 自增不及时，无法打印正确的售票信息的情况，此时售票数会超出范围限制。\n如果当线程执行到操作数据的代码块时，将这段代码锁起来，使得其他线程即使抢夺到了 CPU 执行权，也需要在外面等待，就可以保证不会出现之前的问题，这种方法叫做 同步代码块，格式：\n1 synchronized (锁对象){操作共享数据的代码} 锁默认是打开的，当有线程进入，锁就会关闭，直到里面的进程执行完毕，锁才会打开。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package com.company.thread; public class Pra2 { public static void main(String[] args) { MyThread8 mt1 = new MyThread8(\u0026#34;窗口1\u0026#34;, 0); MyThread8 mt2 = new MyThread8(\u0026#34;窗口2\u0026#34;, 0); MyThread8 mt3 = new MyThread8(\u0026#34;窗口3\u0026#34;, 0); mt1.start(); mt2.start(); mt3.start(); } } class MyThread8 extends Thread { // 表示这个类所有的对象都共享ticket这个数据 static int ticket = 0; // 创建锁对象，必须保证锁对象是唯一的 // static Object obj = new Object(); public MyThread8(int ticket) { this.ticket = ticket; } public MyThread8(String name, int ticket) { super(name); this.ticket = ticket; } @Override public void run() { while (true) { try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } // 同步代码块 synchronized (MyThread8.class){\t// 锁对象一般写当前类的字节码文件对象 if (ticket \u0026lt; 100) { ticket++; System.out.println(getName() + \u0026#34;：售出\u0026#34; + ticket + \u0026#34;张票\u0026#34;); } else { break; } } } } } 同步方法 1 修饰符 synchronized 返回值类型 方法名(方法参数){...} 同步方法是锁住方法里面所有的代码；同步方法的锁对象不能自己制定，如果当前的方法是非静态的，那么锁对象是当前方法的调用者 this，如果是静态方法，那么锁对象是当前类的字节码文件对象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package com.company.thread; public class SynchronizedDemo1 { public static void main(String[] args) { MyRunnable3 mr = new MyRunnable3(); Thread t1 = new Thread(mr); Thread t2 = new Thread(mr); Thread t3 = new Thread(mr); t1.setName(\u0026#34;窗口1\u0026#34;); t2.setName(\u0026#34;窗口2\u0026#34;); t3.setName(\u0026#34;窗口3\u0026#34;); t1.start(); t2.start(); t3.start(); } } class MyRunnable3 implements Runnable { // 由于此时是通过实现MyRunnable接口来创建线程的 // MyRunnable只会执行一次，之后使用Thread t1 = new Thread(mr)来创建线程对象 // 因此不需要将ticket的数据共享，直接使用int ticket = 0就可以了 int ticket = 0; @Override public void run() { while (true) { try { Thread.sleep(10); } catch (InterruptedException e) { e.printStackTrace(); } // synchronized (MyRunnable3.class) { // 重构 -\u0026gt; ctrl + alt + m 提取方法 if (extracted()) break; // } } } private synchronized boolean extracted() { if (ticket == 100) { return true; } else { ticket++; System.out.println(Thread.currentThread().getName() + \u0026#34;：售出\u0026#34; + ticket + \u0026#34;张\u0026#34;); } return false; } } 锁 ​\t锁的基本原理是防止竞争条件，保证线程安全性和可见性，避免死锁等问题。\n(1) 防止竞争条件\n当多个线程同时访问共享资源时，可能会发生竞争条件。竞争条件是指当多个线程同时执行同一段代码时，由于执行顺序的不同而导致结果的不确定性。\n锁的作用就是在多个线程访问共享资源时保证同一时刻只有一个线程访问，从而避免竞争条件的发生。当一个线程获取到锁时，其他线程必须等待锁的释放才能继续访问共享资源。\n(2) 保证线程安全性和可见性\n线程安全性和可见性是 Java 并发编程中非常重要的概念。线程安全性是指当多个线程同时访问共享资源时，不会出现数据损坏或程序崩溃等问题。可见性是指当一个线程修改了共享资源时，其他线程能够立即看到这个修改。\n锁机制可以保证线程安全性和可见性。当一个线程获取到锁时，其他线程无法修改共享资源，从而避免了数据损坏和程序崩溃等问题。而锁机制也可以保证共享资源的可见性，因为当一个线程释放锁时，其他线程能够立即看到共享资源的最新状态。\n(3) 避免死锁\n死锁是指两个或多个线程相互等待对方释放锁，从而导致程序无法继续执行的情况。死锁是 Java 并发编程中一个非常严重的问题，必须避免发生。\n为了避免死锁，必须采取一些策略，例如避免嵌套锁、避免长时间占用锁、按照相同的顺序获取锁等。另外，还可以使用专门的工具来检测和避免死锁，例如死锁检测器和避免死锁算法等。\nSynchronized 关键字锁 synchronized 关键字是 Java 中最基本和最常用的锁机制。使用 synchronized 关键字可以将一段代码块或一个方法标记为同步代码块，以保证在任何时刻最多只能有一个线程执行它们。synchronized 锁是 Java 内置锁的一种实现。\nLock 锁 虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5 以后提供了一个新的锁对象 Lock。\nLock 实现提供比使用 synchronized 方法和语句可以获得更广泛的锁定操作，Lock中提供了获得锁和释放锁的方法。\n① void lock()：获得锁\n② void unlock()：释放锁\nLock 是接口，不能直接实例化，这里采用它的实现类 ReentrantLock 来实例化 ReentrantLock 的构造方法：\n① ReentrantLock()：创建一个ReentrantLock的实例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package com.company.thread; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; public class LockDemo1 { public static void main(String[] args) { MyThread9 mt1 = new MyThread9(); MyThread9 mt2 = new MyThread9(); MyThread9 mt3 = new MyThread9(); mt1.setName(\u0026#34;窗口1\u0026#34;); mt2.setName(\u0026#34;窗口2\u0026#34;); mt3.setName(\u0026#34;窗口3\u0026#34;); mt1.start(); mt2.start(); mt3.start(); } } class MyThread9 extends Thread { static int ticket = 0; static Lock lock = new ReentrantLock(); @Override public void run() { while (true) { try { Thread.sleep(10); } catch (InterruptedException e) { e.printStackTrace(); } lock.lock(); if (ticket \u0026lt; 100) { ticket++; System.out.println(getName() + \u0026#34;：售出\u0026#34; + ticket + \u0026#34;张票\u0026#34;); } else { lock.unlock(); break; } lock.unlock(); } } } 死锁 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package com.company.thread; public class Pra3 { public static void main(String[] args) { MyThread mt1 = new MyThread(); MyThread mt2 = new MyThread(); mt1.setName(\u0026#34;线程A\u0026#34;); mt2.setName(\u0026#34;线程B\u0026#34;); mt1.start(); mt2.start(); } } class MyThread extends Thread { static Object objA = new Object(); static Object objB = new Object(); @Override public void run() { while (true) { if (\u0026#34;线程A\u0026#34;.equals(getName())) synchronized (objA) { System.out.println(\u0026#34;线程A拿到了A锁，准备拿B锁\u0026#34;); synchronized (objB) { System.out.println(\u0026#34;线程A拿到了B锁，顺利执行完一轮\u0026#34;); } } else if (\u0026#34;线程B\u0026#34;.equals(getName())) { synchronized (objB) { System.out.println(\u0026#34;线程B拿到了B锁，准备拿A锁\u0026#34;); synchronized (objA) { System.out.println(\u0026#34;线程B拿到了A锁，顺利执行完一轮\u0026#34;); } } } } } } ","date":"2023-11-04T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B9%9D%E7%AB%A0-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B9%9D%E7%AB%A0-java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%BA%E5%88%B6/","title":"第九章 JAVA 多线程机制"},{"content":"反射概述 什么是反射 Java 的反射机制是指在运行状态中，对于 任意一个类 都能够知道这个类 所有的属性和方法；并且对于 任意一个对象，都能够调用它的 任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。\n它通过 Java 反射 API 来实现，其中最核心的类位于 java.lang.reflect 包下，如 Class、Constructor、Field 和 Method 等，这些类提供了对类和对象的运行时信息进行检查和操作的方法。反射机制一般用来解决 Java 程序运行期间，对某个实例对象一无所知的情况下，如何 调用该对象内部的方法 问题。\n在创建对象或者调用方法时，传入形参时可以使用 Ctrl + P 提示需要传入的形参，利用反射获取到该方法上的所有形参进行展示。\n创建对象后，使用对象调用方法或成员变量时，IDEA 会利用反射把该类中所有能调用的方法和成员变量获取出来并进行展示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package reflection; public class Student { String name;\t// 成员变量 public Student(){\t// 空参构造方法 } public void method(){\t// 普通成员方法 String name;\t// 局部变量 name = \u0026#34;a\u0026#34;; System.out.println(name); } } 如何区分构造方法 public Student(){} 和普通成员方法 public void method(){\u0026hellip;} ？如何区分成员变量 public class Student{String name; \u0026hellip;} 和局部变量 public void method(){String name; \u0026hellip;} ？\n反射（Reflection） 允许对 封装类 的 字段（成员变量），方法 和 构造函数 的信息进行编程访问。\n反射机制原理 Java 程序在计算机中的三个阶段：① 源代码阶段，② 加载阶段，③ 运行阶段。\n类加载：当 Java 程序运行时，类加载器根据类的名称查找并加载类的字节码文件。类加载器将字节码文件转换为可执行的 Java 类，并将其存储在运行时数据区域的方法区中。\n创建 Class 对象：在类加载过程中，Java 虚拟机会自动创建对应的 Class 对象。这个 Class 对象包含了类的元数据信息，并提供了访问和操作类的接口。\n获取 Class 对象： 我们可以通过多种方式获取 Class 对象。常见的方式有 3 种: 类.class 属性、类实例的 getClass() 方法、Class.forName()。\n访问和操作：通过 Class 对象，我们可以获取类的字段、方法、构造函数等信息。我们可以使用 Field 类和 Method 类来访问和操作字段和方法，甚至可以调用私有的字段和方法。\n反射的应用场景 反射机制在 Java中具有重要的作用和价值，它为我们提供了在运行时动态地获取和操作类的能力。以下是一些使用反射机制的常见场景和原因：\n运行时类型检查： 反射机制允许我们在运行时获取类的信息，包括字段、方法和构造方法等。这使得我们可以进行运行时类型检查，以确保代码在处理不同类型的对象时能够正确地进行操作。\n动态创建对象： 通过反射机制，我们可以在运行时动态地创建对象，而不需要在编译时知道具体的类名。这对于某些需要根据条件或配置来创建对象的情况非常有用，例如工厂模式或依赖注入框架。\n访问和修改私有成员： 反射机制使我们能够绕过访问权限限制，访问和修改类的私有字段和方法。虽然这破坏了封装性原则，但在某些特定情况下，这种能力可以帮助我们进行一些特殊操作，例如单元测试、调试或框架的内部实现。\n动态调用方法： 反射机制允许我们在运行时动态地调用类的方法，甚至可以根据运行时的条件来选择不同的方法。这对于实现插件化系统、处理回调函数或实现动态代理等功能非常有用。\n框架和库的实现： 许多Java框架和库在其实现中广泛使用了反射机制。它们利用反射来自动发现和加载类、实现依赖注入、处理注解、配置文件解析和动态代理等。反射机制使得这些框架和库更加灵活和扩展。\n需要注意的是，虽然反射机制提供了灵活性和动态性，但它也带来了一些潜在的性能开销和安全风险。因此，在使用反射时需要谨慎，并权衡其优缺点。它应该被视为一种强大的工具，用于特定的情况和需求，而不是滥用或不必要地使用。\n反射优点和缺点 反射是一项强大的技术，可以让我们在运行时动态地获取和操作类的信息。然而，反射也有其优点和缺点。下面是反射的一些优缺点：\n优点：\n动态性：反射允许我们在运行时动态地获取和操作类的信息，而不需要在编译时确定。这为编写灵活的、可扩展的代码提供了便利。\n灵活性：通过反射，我们可以绕过访问修饰符的限制，访问和修改私有成员、调用私有方法等。这为我们在特殊情况下进行一些高级操作提供了可能。\n框架开发：反射在开发框架和库时非常有用。通过反射，框架可以动态地加载和实例化类，解析注解，处理回调等。这为框架提供了更大的灵活性和可扩展性。\n调试和探索：反射使得我们可以在运行时探索代码背后的信息，例如获取类的结构、方法、字段等。这对于调试和理解复杂的代码非常有帮助。\n缺点：\n性能开销：相比于直接调用代码，使用反射会带来更高的性能开销。反射涉及到动态查找、方法调用等操作，这些操作比直接调用代码更加耗时。因此，在对性能要求较高的场景下，过度使用反射可能导致性能下降。\n安全性和稳定性：反射打破了封装性和类型安全性。通过反射，我们可以绕过访问修饰符的限制，调用私有方法等。这可能导致代码的不稳定性和安全隐患。使用反射时需要格外小心，确保代码的正确性和稳定性。\n可读性和可维护性：反射使得代码变得更加动态和复杂，增加了代码的复杂性和可读性的难度。使用过多的反射可能导致代码难以理解和维护，降低代码的可读性和可维护性。\nclass 对象 字节码文件和字节码文件对象 通过反射在获取成员变量 Field、构造方法 Constructor、成员方法 Method 时，不是在 java 文件中获取的，而是从 class 字节码文件对象中获取。\njava 文件： 就是我们自己编写的 java 代码。\n字节码文件： 就是通过 java 文件编译之后的 class 文件。\n字节码文件对象： 当 class 文件加载到内存之后，虚拟机自动创建出来的对象。\n而我们的反射获取的是什么？字节码文件对象，这个对象在内存中是 唯一的。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 package com.company.reflection; public class Student { private String name; private int age; public double grade; public Student() { } private Student(String name) { this.name = name; } protected Student(int age) { this.age = age; } public Student(double grade) { this.grade = grade; } public Student(String name, int age, double grade) { this.name = name; this.age = age; this.grade = grade; } @Override public String toString() { return \u0026#34;Student{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, grade=\u0026#34; + grade + \u0026#39;}\u0026#39;; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getGrade() { return grade; } public void setGrade(double grade) { this.grade = grade; } public void study() { System.out.println(\u0026#34;学习\u0026#34;); } private void play(String game) throws IOException, IndexOutOfBoundsException { System.out.println(\u0026#34;玩\u0026#34; + game); } private String sleep(int time) { System.out.println(time + \u0026#34;点睡觉\u0026#34;); if (time \u0026gt;= 21 \u0026amp;\u0026amp; time \u0026lt;= 23) { return \u0026#34;早睡\u0026#34;; } else { return \u0026#34;晚睡\u0026#34;; } } } 获取 class 对象的三种方式 ① Class.forName(\u0026ldquo;全类名\u0026rdquo;);\n② 类名.class\n③ 对象.getClass();\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package com.company.reflection; public class ReDemo1 { public static void main(String[] args) throws ClassNotFoundException { /* * **① Class.forName(\u0026#34;全类名\u0026#34;);** * *\t**② 类名.class** * *\t**③ 对象.getClass();** */ // 全类名 -\u0026gt; 包名 + 类名 // -\u0026gt; 直接在类文件中选中类名，使用 copy reference 复制引用即可 // 第一种方法最常用 Class clazz1 = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); System.out.println(clazz1); // class com.company.reflection.Student // 多用于参数进行传递 Class clazz2 = Student.class; System.out.println(clazz2); // 当已经有某个类的对象时才能使用 Student stu = new Student(\u0026#34;张三\u0026#34;, 18, 86.5); Class clazz3 = stu.getClass(); System.out.println(clazz3); System.out.println(clazz1 == clazz2); System.out.println(clazz2 == clazz3); } } 利用反射获取构造方法 Constructor Class 类中用于获取构造方法的方法 方法名称 说明 Constructor\u003c?\u003e[] getConstructors() 返回所有公共构造方法对象的数组 Constructor\u003c?\u003e[] getDeclaredConstructors() 返回所有构造方法对象的数组 Constructor getConstructor(Class\u003c?\u003e\u0026hellip; parameterTypes) 返回单个公共构造方法对象 Constructor getDeclaredConstructor(Class\u003c?\u003e\u0026hellip; parameterTypes) 返回单个构造方法对象 List 表示集合里是Java类的实例，List\u003c?\u003e 表示集合里的对象类型不确定，未指定。\n这些方法都是定义在 Class 类中的，其中 get 表示获取。getConstructors 表示将所有 public 修饰的构造方法存入一个 Constructor[] 数组当中返回；getDeclaredConstructor 表示将所有的，即包括 public 修饰的以及 private 修饰的所有构造方法存入数组返回。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 package com.company.reflection; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Modifier; import java.lang.reflect.Parameter; public class ReDemo2 { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException { /* class类中用于获取构造方法的方法 Constructor\u0026lt;?\u0026gt;[] getConstructors( ) Constructor\u0026lt;?\u0026gt;[] getDeclaredConstructors() Constructor\u0026lt;T\u0026gt; getConstructor(class\u0026lt;?\u0026gt;... parameterTypes) Constructor\u0026lt;T\u0026gt; getDeclaredConstructor(Class\u0026lt;?\u0026gt;... parameterTypes) Constructor类中用于创建对象的方法 T newInstance(Object... initargs) setAccessible(boolean flag) */ // 首先要获取class字节码文件 Class clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); Constructor[] cons1 = clazz.getConstructors(); for (Constructor con : cons1) { System.out.println(con); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); Constructor[] cons2 = clazz.getDeclaredConstructors(); for (Constructor con : cons2) { System.out.println(con); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // Constructor\u0026lt;T\u0026gt; getDeclaredConstructor(Class\u0026lt;?\u0026gt;... parameterTypes) Constructor con1 = clazz.getDeclaredConstructor(); System.out.println(con1); Constructor con2 = clazz.getDeclaredConstructor(String.class); System.out.println(con2); Constructor con3 = clazz.getDeclaredConstructor(int.class); System.out.println(con3); Constructor con4 = clazz.getDeclaredConstructor(String.class, int.class, double.class); System.out.println(con4); System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // Constructor\u0026lt;T\u0026gt; getConstructor(class\u0026lt;?\u0026gt;... parameterTypes) Constructor con5 = clazz.getConstructor(); System.out.println(con5); // Constructor con6 = clazz.getConstructor(String.class); // System.out.println(con6); System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取权限修饰符，根据权限修饰符提示可以调用的方法 // 获取权限修饰符public int modifiers1 = con4.getModifiers(); System.out.println(modifiers1); // 获取权限修饰符private int modifiers2 = con2.getModifiers(); System.out.println(modifiers2); // 获取权限修饰符protect int modifiers3 = con3.getModifiers(); System.out.println(modifiers3); System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); System.out.println(con4.getParameterCount()); // 获取参数个数 Class[] parameterTypes = con4.getParameterTypes(); // 获取参数类型 for (Class parameterType : parameterTypes) { System.out.println(parameterType); } Parameter[] parameters = con4.getParameters(); // 获取该方法下的所有参数 for (Parameter parameter : parameters) { System.out.println(parameter); } } } Modifier 类简介 Modifier 类是位于 java.lang.reflect(see) 反射包下的一个类，它提供了有关类或成员变量（字段、方法、构造等）的访问修饰符的信息。\n各成员变量都会有一个 getModifiers() 方法，getModifiers() 方法返回一个包含标志的 int 值，标志描述了为数组元素应用了哪个修饰符 (private、public、protected 等)。\nModifier 类的常用方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.company.reflection; import java.lang.reflect.Constructor; import java.lang.reflect.Method; import java.lang.reflect.Modifier; public class ReDemo4 { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Method[] methods = Student.class.getMethods(); System.out.println(Modifier.isAbstract(methods[0].getModifiers())); System.out.println(Modifier.isPublic(methods[0].getModifiers())); boolean res = Modifier.isPrivate(Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;).getDeclaredConstructor(String.class).getModifiers()); System.out.println(res); /* * ① Class.forName(\u0026#34;全类名\u0026#34;); * ② 类名.class * ③ 对象.getClass(); */ // Constructor con = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;).getDeclaredConstructor(String.class); // System.out.println(con); } } JAVA 反射机制中，Field 的 getModifiers() 方法返回 int 类型值表示该字段的修饰符。\n修饰符 返回值 public 1 private 2 protected 4 static 8 final 16 synchronized 32 volatile 64 transient 128 native 256 interface 512 abstract 1024 strict 2048 Constructor 类中用于创建对象的方法 方法名称 说明 T newInstance(Object\u0026hellip; initargs) 根据指定的构造方法创建对象 setAccessible(boolean flag) 设置为true，表示取消访问检查 使用 Object stuObj = con4.newInstance(\u0026ldquo;张三\u0026rdquo;, 18); 创建 Object 对象，通过 (Student) 强制类型转换可以转换为 Student 对象。在创建对象时，即使使用的是使用 Declared 返回的方法，也只能使用 public 方法，如果想要使用私有方法，需要使用 setAccessible(true) 取消权限校验。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.company.reflection; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; public class ReDemo3 { public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException { // Class clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); Class\u0026lt;Student\u0026gt; clazz = Student.class; Constructor con2 = clazz.getDeclaredConstructor(String.class); Constructor con4 = clazz.getDeclaredConstructor(String.class, int.class, double.class); Object stuObj = con4.newInstance(\u0026#34;张三\u0026#34;, 18 , 86.5); System.out.println(stuObj); Student stu1 = (Student) stuObj; System.out.println(stu1); // Student stu2 = (Student) con2.newInstance(\u0026#34;张三\u0026#34;); // System.out.println(stu2); // 临时取消权限校验 方法.setAccessible(true); con2.setAccessible(true); Student stu2 = (Student) con2.newInstance(\u0026#34;张三\u0026#34;); System.out.println(stu2); } } 利用反射获取成员变量 Field Class 类中用于获取成员变量的方法 方法名称 说明 Field[] getFields() 返回所有公共成员变量对象的数组 Field[] getDeclaredFields() 返回所有成员变量对象的数组 Field getField(String name) 返回单个公共成员变量对象 Field getDeclaredField(String name) 返回单个成员变量对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package com.company.reflection; import java.lang.reflect.Field; import java.lang.reflect.Modifier; public class ReDemo5 { public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException { // 先获取到class字节码文件对象 Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); // 获取所有公有成员变量 Field[] fields1 = clazz.getFields(); for (Field field : fields1) { System.out.println(field); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取所有成员变量 Field[] fields2 = clazz.getDeclaredFields(); for (Field field : fields2) { System.out.println(field); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取单个公有成员变量 Field grade = clazz.getField(\u0026#34;grade\u0026#34;); System.out.println(grade); // 获取单个成员变量 Field name = clazz.getDeclaredField(\u0026#34;name\u0026#34;); System.out.println(name); System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 可以获取到成员变量的权限修饰符，也是int类型的整数 int modifiers1 = grade.getModifiers(); System.out.println(modifiers1); System.out.println(Modifier.isPublic(modifiers1)); int modifiers2 = name.getModifiers(); System.out.println(Modifier.isProtected(modifiers2)); System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取成员变量名 System.out.println(name.getName()); // 获取成员变量数据类型 Class\u0026lt;?\u0026gt; type1 = name.getType(); System.out.println(type1); Class\u0026lt;?\u0026gt; type2 = grade.getType(); System.out.println(type2); } } Field 类中用于创建对象的方法 方法名称 说明 void set(Object obj, Object value) 赋值 object get(Object obj) 获取值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.company.reflection; import java.lang.reflect.Field; public class ReDemo6 { public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, IllegalAccessException { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); Field grade = clazz.getField(\u0026#34;grade\u0026#34;); Field name = clazz.getDeclaredField(\u0026#34;name\u0026#34;); // 获取成员变量记录的值（首先需要创建对象） Student stu = new Student(\u0026#34;张三\u0026#34;, 18, 86.5); Object v1 = grade.get(stu); System.out.println(v1); // cannot access a member of class com.company.reflection.Student with modifiers \u0026#34;private\u0026#34; // IllegalAccessException // Object v2 = name.get(stu); // System.out.println(v2); name.setAccessible(true); System.out.println(name.get(stu)); // 修改对象里记录的值 System.out.println(stu); name.set(stu, \u0026#34;李四\u0026#34;); System.out.println(stu); } } 利用反射获取成员方法 Method Class 类中用于获取成员方法的方法 方法名称 说明 Method[] getMethods() 返回所有公共成员方法对象的数组，包括继承的 Method[] getDeclaredMethods() 返回所有成员方法对象的数组，不包括继承的 Method getMethod(String name, Class\u003c?\u003e\u0026hellip; parameterTypes) 返回单个公共成员方法对象 Method getDeclaredMethod(String name, Class\u003c?\u003e\u0026hellip; parameterTypes) 返回单个成员方法对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 package com.company.reflection; import java.lang.reflect.Method; import java.lang.reflect.Modifier; import java.lang.reflect.Parameter; public class ReDemo7 { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); Method[] publicMethods1 = clazz.getMethods(); for (Method publicMethod : publicMethods1) { // getMethods()获取的方法对象包含父类中所有的公共方法，因此会返回一些没有定义的public方法 System.out.println(publicMethod); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); Method[] declaredMethods = clazz.getDeclaredMethods(); for (Method declaredMethod : declaredMethods) { // getDeclaredMethods()不能获取父类中的方法，但可以获取本类中私有的方法 System.out.println(declaredMethod); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取单个方法 // Method play = clazz.getMethod(\u0026#34;play\u0026#34;, String.class); // NoSuchMethodException Method play = clazz.getDeclaredMethod(\u0026#34;play\u0026#34;, String.class); System.out.println(play); Method study = clazz.getMethod(\u0026#34;study\u0026#34;, null); System.out.println(study); // 获取方法修饰符 System.out.println(Modifier.isPrivate(play.getModifiers())); // 获取方法名字 System.out.println(play.getName()); // 获取方法形参相关 System.out.println(play.getParameterCount()); for (Class\u0026lt;?\u0026gt; parameterType : play.getParameterTypes()) { System.out.println(parameterType); } for (Parameter parameter : play.getParameters()) { System.out.println(parameter); } System.out.println(\u0026#34;------------------------------------------------------\u0026#34;); // 获取方法抛出的异常 Class\u0026lt;?\u0026gt;[] exceptionTypes = play.getExceptionTypes(); for (Class\u0026lt;?\u0026gt; exceptionType : exceptionTypes) { System.out.println(exceptionType); } } } Method 类中用于创建对象的方法 1 Object invoke(Object obj, Object... args)：运行方法 参数一：用 obj 对象调用该方法\n参数二：调用方法的传递的参数（如果没有就不写）\n返回值：方法的返回值（如果没有就不写）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.company.reflection; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class ReDemo8 { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException { Class\u0026lt;?\u0026gt; clazz = Class.forName(\u0026#34;com.company.reflection.Student\u0026#34;); Method play = clazz.getDeclaredMethod(\u0026#34;play\u0026#34;, String.class); Student stu = new Student(\u0026#34;张三\u0026#34;, 18, 86.5); // stu表示方法的调用者，\u0026#34;游戏\u0026#34;表示调用方法时传入的实际参数 play.setAccessible(true); play.invoke(stu, \u0026#34;游戏\u0026#34;); // 如果这个方法有返回值，则等于invoke方法的返回值 Method sleep = clazz.getDeclaredMethod(\u0026#34;sleep\u0026#34;, int.class); sleep.setAccessible(true); String res = (String) sleep.invoke(stu, 3); System.out.println(res); } } 综合练习 反射的作用：\n① 获取一个类里面所有的信息，获取到了之后，再执行其他的业务逻辑\n② 结合配置文件，动态的创建对象并调用方法\n保存任意对象数据 对于任意一个对象，都可以把对象所有的字段名和值，保存到文件中去。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package com.company.reflection; public class Friend { private String name; private double salary; @Override public String toString() { return \u0026#34;Friend{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, salary=\u0026#34; + salary + \u0026#39;}\u0026#39;; } public String getName() { return name; } public void setName(String name) { this.name = name; } public double getSalary() { return salary; } public void setSalary(double salary) { this.salary = salary; } public Friend() { } public Friend(String name, double salary) { this.name = name; this.salary = salary; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 package com.company.reflection; public class People { private String name; private int age; private double height; private double weight; private String hobby; @Override public String toString() { return \u0026#34;People{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, height=\u0026#34; + height + \u0026#34;, weight=\u0026#34; + weight + \u0026#34;, hobby=\u0026#39;\u0026#34; + hobby + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } public double getWeight() { return weight; } public void setWeight(double weight) { this.weight = weight; } public String getHobby() { return hobby; } public void setHobby(String hobby) { this.hobby = hobby; } public People() { } public People(String name, int age, double height, double weight, String hobby) { this.name = name; this.age = age; this.height = height; this.weight = weight; this.hobby = hobby; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 package com.company.reflection; import java.io.*; import java.lang.reflect.Field; public class PraDemo1 { public static void main(String[] args) throws IllegalAccessException, IOException { Friend f = new Friend(\u0026#34;张三\u0026#34;, 8000); People p = new People(\u0026#34;李四\u0026#34;, 23, 175.3, 71.2, \u0026#34;篮球\u0026#34;); // saveObject(f); saveObject(p); } // 把对象里的所有成员变量名和值保存到本地文件中 public static void saveObject(Object obj) throws IllegalAccessException, IOException { // 创建本地文件 File f1 = new File(\u0026#34;src\\\\a.txt\u0026#34;); if (!f1.exists()){ f1.createNewFile(); } // 创建IO流 -\u0026gt; 文件字符输出流 -\u0026gt; 缓冲字符输出流 BufferedWriter bw = new BufferedWriter(new FileWriter(f1)); // 获取class字节码文件 Class\u0026lt;?\u0026gt; clazz = obj.getClass(); // 获取所有成员变量 Field[] declaredFields = clazz.getDeclaredFields(); for (Field declaredField : declaredFields) { declaredField.setAccessible(true); // 获取成员变量的名字 String name = declaredField.getName(); // 获取成员变量的值 Object value = declaredField.get(obj); // System.out.println(name + \u0026#34;=\u0026#34; + value); bw.write(name + \u0026#34;：\u0026#34; + value); bw.newLine(); } bw.close(); } } 利用反射动态的创建对象和运行方法 反射可以跟配置文件结合的方式，动态的创建对象，并调用方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package com.company.reflection; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.IOException; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Properties; public class PraDemo2 { public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException { // 反射可以跟配置文件结合的方式，动态的创建对象，并调用方法。 // 先读取配置文件中的信息 Properties prop = new Properties(); FileInputStream fis = new FileInputStream(\u0026#34;src/com/company/reflection/prop.properties\u0026#34;); prop.load(fis); fis.close(); System.out.println(prop); // 获取全类名和方法名 String className = (String) prop.get(\u0026#34;classname\u0026#34;); String methodName = (String) prop.get(\u0026#34;method\u0026#34;); System.out.println(className); System.out.println(methodName); // 利用反射创建对象并运行方法，首先获取字节码文件，再获取构造方法 Class\u0026lt;?\u0026gt; clazz = Class.forName(className); Constructor\u0026lt;?\u0026gt; con = clazz.getDeclaredConstructor(); // 使用newInstance方法创建对象 Object o = con.newInstance(); // 已过时方法 // clazz.newInstance(); // 根据方法名获取成员方法 Method method = clazz.getDeclaredMethod(methodName); method.setAccessible(true); System.out.println(o); method.invoke(o); // 如果此时想要使用其他类中的方法，直接更改配置文件即可 } } 总结 反射的作用 ① 获取任意一个类中的所有信息\n② 结合配置文件动态创建对象\n获得 class 字节码文件对象的三种方式 ① class.forName(\u0026ldquo;全类名\u0026rdquo;);\n② 类名.class\n③ 对象.getClass();\n如何获取构造方法、成员方法、成员变量 get：获取\tset：设置\nConstructor：构造方法\tParameter：参数\nField：成员变量\tModifiers：修饰符\nMethod：方法\tDeclared：私有的\n","date":"2023-10-27T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AB%E7%AB%A0-java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AB%E7%AB%A0-java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/","title":"第八章 JAVA 反射机制"},{"content":"File 为什么要学习 File ？—— 使用计算机存储数据，需要用一个对象来表示这个文件。\n我们需要了解：\n① 文件存储在哪 ？—— 路径\n绝对路径：绝对路径带盘符。\n1 2 \u0026#34;C:\\VScode\\MainProject_rewrite\\image\\about_img.png\u0026#34; \u0026#34;C:\\VScode\\logindownload\\image\\bg.jpg\u0026#34; 相对路径：相对路径不带盘符，是相对当前项目而言的路径。\n1 2 \u0026#34;MainProject_rewrite\\image\\about_img.png\u0026#34; \u0026#34;logindownload\\image\\bg.jpg\u0026#34; ② 数据怎么传输 ？—— I/O 流\nFile 类的构造方法 构造一个 File 类的实例，需要文件或者目录的路径来创建。\n常用构造方法：\n1 2 3 4 5 File file = new File(“pathname”); String str = \u0026#34;C:\\\\JavaStudy\\\\a.txt\u0026#34;; File f1 = new File(str); System.out.println(f1); 创建一个新的 File 实例，该实例的存放路径是 pathname。\n其它构造方法：\n1 2 3 4 5 6 7 8 File(String parent, String child); String parent = \u0026#34;C:\\\\JavaStudy\u0026#34;; String child = \u0026#34;a.txt\u0026#34;; File f2 = new File(parent, child); // 等价于自己拼接（不推荐） File f3 = new File(parent + \u0026#34;\\\\\u0026#34; + child); 创建一个新的 File 实例，该实例的存放路径是由 parent 和child 拼接而成的。\n1 2 3 4 5 File(File parent, String child); File parent = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); String child = \u0026#34;a.txt\u0026#34;; File f3 = new File(parent, child); 创建一个新的 File 实例，parent 代表目录， child 代表文件名，因此该实例的存放路径是 parent 目录中的 child 文件。\n1 File(URI uri); 创建一个新的 File 实例，该实例的存放路径是由 URI 类型的参数指定的。\n构造 File 时，路径需要符合操作系统的 命名规则。\nFile.pathSeparator：与系统有关的路径分隔符，值是一个字符串，如在 Windows 中的此值是 \u0026quot;;\u0026quot;，在 Linux 中的此值是 \u0026quot;:\u0026quot;。 File.pathSeparatorChar：与系统有关的路径分隔符，值是一个字符，如在 Windows 中的此值是 ';'，在 Linux 中的此值是 ':'。 File.separator：与系统有关的路径层级分隔符，值是一个字符串，如在 Windows 中的此值是 \u0026quot;\\\u0026quot;，在 Linux 中的此值是 \u0026quot;/\u0026quot;。 File.separatorChar：与系统有关的路径层级分隔符，值是一个字符，如在 Windows 中的此值是'\\'，在 Linux 中的此值是'/'。 1 2 3 4 5 6 7 import java.io.File; public class TestFileSeparator { public static void main(String[] args) { System.out.println(\u0026#34;Windows系统中的pathSeparator值为：\u0026#34; + File.pathSeparator); System.out.println(\u0026#34;Windows系统中的separator值为：\u0026#34; + File.separator); } } File API File 的判断与获取 方法名称 说明 public boolean isDirectory() 判断此路径表示的 File 是否为文件夹 public boolean isFile() 判断此路径表示的 File 是否为文件 public boolean exists() 判断此路径表示的 File 是否存在 public long length() 返回文件的大小（字节数量） publi String getAbsoluteFile() 返回文件的绝对路径 publi String getPath() 返回定义文件时使用的路径 publi String getName() 返回文件的名称，带后缀 public long lastModified() 返回文件的最后修改时间（时间毫秒值） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 File f1 = new File(\u0026#34;C:\\\\JavaStudy\\\\HelloWorld.java\u0026#34;); File f2 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); File f3 = new File(\u0026#34;MyProjcet\\\\src\u0026#34;); System.out.println(\u0026#34;f1是否为文件夹： \u0026#34; + f1.isDirectory()); System.out.println(\u0026#34;f2是否为文件夹：\u0026#34; + f2.isDirectory()); System.out.println(\u0026#34;f1是否为文件：\u0026#34; + f1.isFile()); System.out.println(\u0026#34;f1是否存在：\u0026#34; + f1.exists()); // length() 方法返回文件大小 long a = f1.length(); System.out.println(\u0026#34;f1的大小：\u0026#34; + a); // 使用文件夹调用 length() 方法，不同操作系统返回的值不一样，但都是不对的 System.out.println(\u0026#34;f2的大小：\u0026#34; + f2.length()); // getAbsoluteFile() 返回绝对路径 System.out.println(\u0026#34;f1的绝对路径：\u0026#34; + f1.getAbsoluteFile()); System.out.println(\u0026#34;f2的绝对路径：\u0026#34; + f2.getAbsoluteFile()); System.out.println(\u0026#34;f3的绝对路径：\u0026#34; + f3.getAbsoluteFile()); // getPath() 方法返回定义时的路径 System.out.println(\u0026#34;f1的定义时路径：\u0026#34; + f1.getPath()); System.out.println(\u0026#34;f3的定义时路径：\u0026#34; + f3.getPath()); // 文件返回文件名+后缀，文件夹返回文件夹名 String str1 = f1.getName(); String str2 = f2.getName(); System.out.println(\u0026#34;f1的名字：\u0026#34; + str1); System.out.println(\u0026#34;f2的名字：\u0026#34; + str2); // lastModified() 方法返回最后修改时间（时间毫秒值） long b = f1.lastModified(); System.out.println(\u0026#34;f1的最后修改时间：\u0026#34; + b); // 把毫秒值变为字符串表示的时间 SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;yyyy年MM月dd日 HH:mm:ss\u0026#34;); Date date = new Date(f1.lastModified()); System.out.println(sdf.format(date)); File 的创建与删除 方法名称 说明 public boolean createNewFile() 创建一个新的空文件 public boolean mkdir() 创建单级文件夹 public boolean mkdirs() 创建多级文件夹 public boolean delete() 删除文件、文件夹（不走回收站） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 File f1 = new File(\u0026#34;C:\\\\JavaStudy\\\\createNewFile.txt\u0026#34;); boolean a = f1.createNewFile(); System.out.println(\u0026#34;创建文件：\u0026#34; + a); boolean b = f1.createNewFile(); // 1.若不存在，创建成功，返回true；若已存在，创建失败，返回false System.out.println(\u0026#34;重复创建文件：\u0026#34; + b); // 2.尝试在不存在的父级目录下新建文件，出现异常IOException File f2 = new File(\u0026#34;C:\\\\JavaStudy\\\\test\\\\createNewFile.txt\u0026#34;); // 3.如果不写后缀名，则会创建一个没有后缀的文件 File f3 = new File(\u0026#34;C:\\\\JavaStudy\\\\createNewFile\u0026#34;); boolean c = f3.createNewFile(); System.out.println(\u0026#34;创建没有后缀的文件：\u0026#34; + c); // 路径不能重复 File f4 = new File(\u0026#34;C:\\\\JavaStudy\\\\createNewFile\u0026#34;); boolean d = f4.mkdir(); System.out.println(\u0026#34;创建路径相同的文件夹：\u0026#34; + d); // 只能创建单级文件夹 File f5 = new File(\u0026#34;C:\\\\JavaStudy\\\\test\u0026#34;); boolean e = f5.mkdir(); System.out.println(\u0026#34;创建文件夹：\u0026#34; + e); // mkdirs() 方法可以创建单级文件夹，也可以创建多级文件夹 File f6 = new File(\u0026#34;C:\\\\JavaStudy\\\\test\\\\oth\u0026#34;); boolean f = f6.mkdirs(); System.out.println(\u0026#34;创建多级文件夹：\u0026#34; + f); // 1.如果删除的是文件，直接删除 // 2.如果删除的是文件夹，空文件夹直接删除，非空文件夹删除失败 boolean g = f6.delete(); System.out.println(\u0026#34;删除文件或文件夹：\u0026#34; + g); File 的获取并遍历 方法名称 说明 🍀 public File[] listFiles() 获取当前路径下所有内容 1 2 3 4 5 6 File f1 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); File[] files = f1.listFiles(); for (File file : files) { // file 依次表示 JavaStudy 文件夹中的每一个文件 System.out.println(file); } 当调用者 File 表示的路径不存在时，返回 null。 当调用者 File 表示的路径是文件时，返回 null。 当调用者 File 表示的路径是一个空文件夹时，返回一个长度为 0 的数组。 当调用者 File 表示的路径是一个有内容的文件夹时，将里面所有文件和文件夹的路径放在 File 数组中返回。 当调用者File表示的路径是一个有隐藏文件的文件夹时，将里面所有文件和文件夹的路径放在 File 数组中返回，包含隐藏文件。 当调用者 File 表示的路径是需要权限才能访问的文件夹时，返回 null。 File 的其他获取并遍历方法 方法名称 说明 public static File[] listRoots() 列出可用的文件系统根 public string[ ] list() 获取当前该路径下所有内容（仅名字） public string[ ] list(FilenameFilter filter) 利用文件名过滤器获取当前该路径下所有内容 public File[] listFiles() 获取当前该路径下所有内容 public File[] listFiles(FileFilter filter) 利用文件名过滤器获取当前该路径下所有内容 public File[ ] listFiles(FilenameFilter filter) 利用文件名过滤器获取当前该路径下所有内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 // 获取系统中所有盘符 File[] arr = File.listRoots(); System.out.println(\u0026#34;系统盘符：\u0026#34;+Arrays.toString(arr)); // 获取当前路径下所有内容，仅能获取名字 File f1 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); String[] list = f1.list(); String str = \u0026#34;\u0026#34;; for (String s : list) { if (str != \u0026#34;\u0026#34;){ str = str + \u0026#34;, \u0026#34; + s; }else str = s; } System.out.println(\u0026#34;获取当前路径下所有内容为：\u0026#34; + \u0026#34;[\u0026#34;+str+\u0026#34;]\u0026#34;); // 利用文件名过滤器获取当前目录下所有内容 // 例：获取当前目录下所有 txt 文件 String[] arr1 = f1.list(new FilenameFilter() {\t// 匿名内部类 @Override public boolean accept(File dir, String name) { // 拼接父级路径和子级路径 File src = new File(dir,name); // 如果返回值为true，则表示当前路径保留；否则舍弃 return src.isFile() \u0026amp;\u0026amp; name.endsWith(\u0026#34;.txt\u0026#34;); } }); System.out.println(\u0026#34;前目录下所有 txt 文件：\u0026#34; + Arrays.toString(arr1)); // 通过 f1.listFiles() 获取所有内容再根据后缀获取 txt 文件 File[] files = f1.listFiles(); System.out.println(\u0026#34;当前目录下所有内容：\u0026#34; + Arrays.toString(files)); System.out.print(\u0026#34;当前目录下txt文件：\u0026#34;); for (File file : files) { if (file.isFile() \u0026amp;\u0026amp; file.getName().endsWith(\u0026#34;.txt\u0026#34;)) { System.out.println(file); } } // public File[] listFiles(FileFilter filter) File[] arr2 = f1.listFiles(new FileFilter() { @Override public boolean accept(File pathname) { // return true; return pathname.isFile() \u0026amp;\u0026amp; pathname.getName().endsWith(\u0026#34;.txt\u0026#34;); } }); System.out.println (\u0026#34;listFiles(FileFilter filter)方法返回txt文件：\u0026#34; + Arrays.toString(arr2)); // public File[ ] listFiles(FilenameFilter filter) File[] arr3 = f1.listFiles(new FilenameFilter() { @Override // 与 listFiles(FileFilter filter) 不同之处在于返回的是父级路径和子级路径 public boolean accept(File dir, String name) { File src = new File(dir,name); return src.isFile() \u0026amp;\u0026amp; name.endsWith(\u0026#34;.txt\u0026#34;); } }); System.out.println (\u0026#34;listFiles(FilenameFilter filter)方法返回txt文件：\u0026#34; + Arrays.toString(arr3)); 综合练习 ① 在当前模块下的 aaa 文件夹中创建一个 a.txt 文件。\n1 2 3 4 5 6 7 8 9 10 11 12 13 import java.io.File; import java.io.IOException; public class Test1 { public static void main(String[] args) throws IOException { File f1 = new File(\u0026#34;aaa\u0026#34;); if(!f1.exists()){ f1.mkdirs(); } File f2 = new File(f1,\u0026#34;a.txt\u0026#34;); f2.createNewFile(); } } ② 定义一个方法，查找某文件夹内是否有以 mp4 结尾的视频。（不考虑子文件夹）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import java.io.File; public class Test2 { public static void main(String[] args) { File file = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); System.out.println(haveMp4(file)); } public static boolean haveMp4(File file) { File[] files = file.listFiles(); for (File f : files) { if (f.isFile() \u0026amp;\u0026amp; f.getName().endsWith(\u0026#34;.mp4\u0026#34;)) { // System.out.println(f.getName()); return true; } } return false; } } ③ 找到电脑中所有以 mp4 结尾的视频。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.io.File; public class Test3 { public static void main(String[] args) { findMp4(); } public static void findMp4(File f1){ File[] files = f1.listFiles(); // files 不为 null（能够访问盘符或文件夹） if (files != null){ for (File file : files) { if (file.isFile()){ // 如果是文件，再判断后缀 if (file.getName().endsWith(\u0026#34;.mp4\u0026#34;)){ System.out.println(file); } }else { // 不是文件，则一定是文件夹，递归 findMp4(file); } } } } public static void findMp4(){ File[] arr = File.listRoots(); for (File f : arr) { findMp4(f); } } } ④ 删除一个多级文件夹。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import java.io.File; public class Test4 { public static void main(String[] args) { File f1 = new File(\u0026#34;aaa\u0026#34;); deleteFile(f1); } public static void deleteFile(File f1){ File[] files = f1.listFiles(); for (File file : files) { if (file.isFile()){ file.delete(); }else { // 递归 deleteFile(file); } } // 最后删除自己 f1.delete(); } } ⑤ 统计一个文件夹的总大小\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.io.File; public class Test5 { public static void main(String[] args) { File f1 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); System.out.println(getSize(f1)); } public static long getSize(File f1){ long size = 0; File[] files = f1.listFiles(); for (File file : files) { if (file.isFile()){ size += file.length(); }else { // 需要定义全局变量，否则递归时重新定义局部变量 // 在递归时带上 size size += getSize(file); } } return size; } } 🏆 ⑥ 统计各种文件的数量。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 import java.io.File; import java.util.HashMap; import java.util.Map; import java.util.Set; public class Test6 { public static void main(String[] args) { /* 需求：统计文件夹内每种文件的个数并打印。（考虑子文件夹） 输出：txt：3个 doc：4个 jpg：6个 涉及知识：File 递归 Map集合 */ File f1 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); HashMap\u0026lt;String, Integer\u0026gt; m1 = getCount(f1); Set\u0026lt;Map.Entry\u0026lt;String, Integer\u0026gt;\u0026gt; entries = m1.entrySet(); for (Map.Entry\u0026lt;String, Integer\u0026gt; entry : entries) { String key = entry.getKey(); int value = entry.getValue(); System.out.println(key + \u0026#34;：\u0026#34; + value + \u0026#34;个\u0026#34;); } } public static HashMap\u0026lt;String, Integer\u0026gt; getCount(File f1) { HashMap\u0026lt;String, Integer\u0026gt; m1 = new HashMap\u0026lt;\u0026gt;(); File[] files = f1.listFiles(); for (File file : files) { if (file.isFile()) { String name = file.getName(); String[] arr = name.split(\u0026#34;\\\\.\u0026#34;); if (arr.length \u0026gt;= 2) { String endName = arr[arr.length - 1]; if (m1.containsKey(endName)) { int count = m1.get(endName); count++; m1.put(endName, count); } else { m1.put(endName, 1);} } } else { HashMap\u0026lt;String, Integer\u0026gt; m2 = getCount(file); Set\u0026lt;Map.Entry\u0026lt;String, Integer\u0026gt;\u0026gt; entries = m2.entrySet(); for (Map.Entry\u0026lt;String, Integer\u0026gt; entry : entries) { String key = entry.getKey(); int value = entry.getValue(); if (m1.containsKey(key)) { int count = m1.get(key); count += value; m1.put(key, count); } else { m1.put(key, value); } } } } return m1; } } I/O 流 I/O 流简介 File 类只能对文件本身进行操作，不能读写文件里面存储的数据，如果想要读写数据，就需要用到 I/O 流。\nI/O 流可以做到：\n① 将程序中的数据保存到本地文件中（写出 output）\n② 将本地文件中的数据加载到程序中（读取 input）\n字节流 通常用来处理二进制文件，如音乐、图片文件等，并且由于字节是任何数据都支持的数据类型，因此 字节流实际可以处理任意类型的数据。\n而对于 字符流，因为 Java 采用 Unicode 编码，Java 字符流处理的即 Unicode 字符，所以在操作文字、国际化等方面，字符流具有优势。\n纯文本文件：windows 自带的记事本打开能读懂的文件。（txt，md，xml，lrc ✔；docx，xlsx ✖）\nInputStream、OutputStream、Reader、Writer 都是抽象类，不能直接创建他们的对象，需要学习他们的子类。以字节流为例：FileInputStream 表示操作本地文件的字节输入流，File 表示作用，InputStream 表示其继承结构；FileOutputStream 表示操作本地文件的字节输出流；BufferedInputStream 表示带有缓冲区的字节输入流。\n字节流 文件字节输出流 FileOutputStream FileOutputStream：操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。\n书写步骤：① 创建字节输出对象，② 写数据，③ 释放资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import java.io.File; import java.io.FileOutputStream; import java.io.IOException; public class Test7 { public static void main(String[] args) throws IOException { File f1 = new File(\u0026#34;src\\\\a.txt\u0026#34;); if (!f1.exists()){ f1.createNewFile(); } // 创建对象 FileOutputStream fos1 = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;); // FileOutputStream fos1 = new FileOutputStream(new File(\u0026#34;src\\\\a.txt\u0026#34;)); // 写出数据 fos1.write(65); // 释放资源 fos1.close(); } } ① 创建对象时\nFileOutputStream() 中传入的参数可以是字符串表示的路径或 File 对象。\n如果 文件不存在 会创建一个新的文件，但要 保证父级路径是存在的。\n如果文件已经存在，会清空文件内容重新写出数据。\n② 写出数据时\nwrite 方法的参数是 int 类型整数，但实际写到本地文件中的是整数在 ASCII 表上对应的字符。\n如果要写数字 97，则可以执行 fos1.write(57); fos1.write(55); 即可得到结果。\n③ 释放资源时\n每次使用完流之后都要 释放资源，解除资源的占用。\nFileOutputStream 写数据的 3 种方式：\n方法名称 说明 void write (int b) 一次写一个字节数据 void write (byte[] b) 一次写一个字节数组数据 void write (byte[] b, int off, int len) 一次写一个字节数组的部分数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.io.FileOutputStream; import java.io.IOException; public class Test8 { public static void main(String[] args) throws IOException { FileOutputStream fos = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;); fos.write(65); // A byte[] bytes = {66, 67, 68, 69, 70}; // B C D E F fos.write(bytes); // void write (byte[] b, int off, int len) // off 表示开始位置，len 表示字节个数 fos.write(bytes, 1, 2); fos.close(); } } 思考：① FileOutputStream 怎么换行输入？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.io.FileOutputStream; import java.io.IOException; import java.util.Arrays; public class Test9 { public static void main(String[] args) throws IOException { FileOutputStream fos = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;); String str1 = \u0026#34;Hello World\u0026#34;; // 每个操作系统换行符不一样 // windows： \\r\\n // linux： \\n // macos： \\r // 在 windows 系统中，java 对回车换行进行了优化，只要写一个就行 String str2 = \u0026#34;\\r\\n\u0026#34;; byte[] bytes1 = str1.getBytes(); byte[] bytes2 = str2.getBytes(); System.out.println(Arrays.toString(bytes1)); fos.write(bytes1); fos.write(bytes2); fos.write(bytes1); fos.close(); } } 思考：② FileOutputStream 在重新写出时怎么在保存原有的数据？\n1 2 3 4 5 6 7 8 9 10 11 12 13 // FileOutputStream 后还可以传递一个参数，默认为 false，当值为 true 表示可以续写 public FileOutputStream(String name) throws FileNotFoundException { this(name != null ? new File(name) : null, false); } FileOutputStream fos = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;, true); ... if (f1.getName().endsWith(\u0026#34;.txt\u0026#34;) \u0026amp;\u0026amp; f1.length() != 0){ fos.write(bytes2); fos.write(bytes1); }else { fos.write(bytes1); } 文件字节输入流 FileInputStream FileInputStream：操作本地文件的字节输入流，可以把本地文件中的数据读取到程序中。\n书写步骤：① 创建字节输入对象，② 读数据，③ 释放资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.io.FileInputStream; import java.io.IOException; public class Test10 { public static void main(String[] args) throws IOException { FileInputStream fis = new FileInputStream(\u0026#34;src\\\\a.txt\u0026#34;); int a = fis.read(); System.out.println((char) a); int b = fis.read(); System.out.println((char) b); // 当 read() 方法无法获取文件中的数据时，返回 -1 fis.close(); } } ① 创建对象时\nFileInputStream() 中传入的参数可以是字符串表示的路径或 File 对象。\n如果文件不存在，直接报错 FileNotFoundException。\n② 读取数据时\n按字节读取，一次只能读一个字节，读出来的是数据在 ASCII 字符集上对应的数字。\n读到文件末尾，read 方法返回 -1。\n③ 释放资源时\n每次使用完流之后都要 释放资源，解除资源的占用。\nFileInputStream 的循环读取：\n1 2 3 4 5 6 7 8 9 10 11 12 13 import java.io.FileInputStream; import java.io.IOException; public class Test11 { public static void main(String[] args) throws IOException { FileInputStream fis = new FileInputStream(\u0026#34;src\\\\a.txt\u0026#34;); int a; while ((a = fis.read()) != -1){ System.out.print((char) a); } fis.close(); } } 文件拷贝 文件拷贝核心思想：通过遍历的方式，一边读取数据一边写出数据。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class Test12 { public static void main(String[] args) throws IOException { // 读数据 FileInputStream fis = new FileInputStream(\u0026#34;src\\\\note.pdf\u0026#34;); // 写数据 FileOutputStream fos = new FileOutputStream(\u0026#34;out\\\\copy.pdf\u0026#34;); int a; while ((a = fis.read()) != -1) { fos.write(a); } // 释放资源规则：先开的流最后再关闭 fos.close(); fis.close(); } } 如果拷贝的文件比较大，速度会非常慢，因为拷贝的过程中一次只读取一个字节。\n如何一次读取多个字节，提高拷贝速度呢？\nFileInputStream 一次读取多个字节：\n方法名称 说明 public int read() 一次读一个字节数据 public int read(byte[] buffer) 一次读一个字节组数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import java.io.FileInputStream; import java.io.IOException; public class Test13 { public static void main(String[] args) throws IOException { FileInputStream fis = new FileInputStream(\u0026#34;src\\\\a.txt\u0026#34;); byte[] bytes = new byte[5]; // 返回 int 类型的数据，代表本次读取到了多少个数据 // 同时将读取到的数据存储到 bytes 数组中 int num = fis.read(bytes); System.out.println(num); // 将数组里面所有的数据变成字符串并打印输出，bytes 中存储 \u0026#34;Hello\u0026#34; // 打印 \u0026#34;Hello\u0026#34; String str = new String(bytes); System.out.println(str); // 第二次遍历 Hello World，bytes 中存储 \u0026#34; Worl\u0026#34; // 打印 \u0026#34; Worl\u0026#34; int num2 = fis.read(bytes); System.out.println(num2); String str2 = new String(bytes); System.out.println(str2); // 第三次遍历 Hello World，bytes 中存储 \u0026#34;dWorl\u0026#34; // 添加起始位置 0 索引和打印个数 num3，打印 \u0026#34;d\u0026#34; int num3 = fis.read(bytes); System.out.println(num3); String str3 = new String(bytes, 0, num3); System.out.println(str3); fis.close(); } } ① 在拷贝大文件时，可以通过 创建字节数组 的方式读取数据，数组大小一般用 1024 的整数倍，如 1024 * 1024 * 5，因为字节数组也占用内存，因此在创建时不宜过大。\n② 数组读取的时候会尽可能的把数组装满，覆盖上一次读取的结果。\n③ 和普通的 read 方法一样，在读取不到数据时同样返回 -1。\n③ 可以通过添加起始索引和转换个数，把字节数组的一部分变成字符串。\n练习：编写程序将文件夹中的一个 10MB 左右的文件拷贝到另一个文件夹中（需要定义字节数组）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.IOException; public class Test14 { public static void main(String[] args) throws IOException { FileInputStream fis = new FileInputStream(\u0026#34;src\\\\note.pdf\u0026#34;); FileOutputStream fos = new FileOutputStream(\u0026#34;out\\\\copy.pdf\u0026#34;); byte[] bytes = new byte[1024 * 1024 * 5]; int len; while ((len = fis.read(bytes)) != -1) { fos.write(bytes, 0, len); } fos.close(); fis.close(); } } 字符集 GBK 与 ASCII 乱码：读取到的数据与原始数据不一样时，叫做出现乱码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.io.FileInputStream; import java.io.IOException; public class Test15 { public static void main(String[] args) throws IOException { // b.txt 文件内容为 \u0026#34;你好。\u0026#34; FileInputStream fis = new FileInputStream(\u0026#34;src\\\\b.txt\u0026#34;); int a; while ((a = fis.read()) != -1){ System.out.print((char) a); } // 输出 \u0026#34;ä½ å¥½ã ,\u0026#34; } } 在计算机中，任意数据都是以二进制的形式来存储的，如 01100100，一个 0 或 1 叫做 1 bit，我们把 8 个 bit 分为一组，这样一组数据可以存 2^8 = 256 个数据，我们把它叫做字节。字节是计算机中最小的存储单元，而计算机在存储英文时，只需要一个字节就可以了。\n英文存储：ASCII\n​\t英文只需要一个字节存储，二进制第一位一定是 0 ，不足 8 位时在前面补 0 。\n中文存储：GBK\n存储英文时：\n存储中文时：\n汉字需要两个字节才能存储，其中左边的字节叫做高位字节，右边的字节叫做低位字节。高位字节以 1 开头，用于与英文区分，且转换为十进制之后一定为负数，而低位字节可能以 1 开头也有可能以 0 开头。\n​\t① GBK 中，一个英文字母一个字节，二进制第一位是 0；\n​\t② GBK 中，一个中文汉字两个字节，二进制第一位是 1。\n练习1： 以下为 GBK 字符集中编码之后的二进制，请说出有几个中文，几个英文？\n10111010 10111010 01100001\n01100001 01100010 01100011\n10110000 10100010 11100111 11100010 10111010 11000011 11001011 1010011\nUnicode 在 Unicode 中，有很多种编码方案，最先提出的编码规则叫做 UTF-16，其中，UTF 是英文 Unicode Transfer Format，即将 Unicode 里的文字进行格式转换的一种方式。在 UTF-16 的编码规则下，文字可以用 2 ~ 4 个字节保存，常转换为 16 个比特位；后来，又提出了 UTF-32，其内文字固定使用 4 个字节保存，这些编码方式造成了极大的内存浪费，因此，最后采用了 UTF-8 的编码规则。\nUTF-8 编码规则：使用 1 ~ 4 个字节存储。\n其中 ASCII 中的英文使用 1 个字节存储，简体中文采用 3 个字节存储。\n例：a 对应的数字为 97，二进制为 110\t0001，\n使用 UTF-8 编码保存的结果是 0110\t0001。\n设汉字对应的数字为 27721，二进制为 01101100\t01001001，\n使用 UTF-8 编码保存的结果是 1110 0110\t10 110001\t10 001001\n练习2： UTF-8 是一个字符集吗？\n练习3： 以下为 Unicode 字符集中利用 UTF-8 编码之后的二进制数据，请说出有几个中文，几个英文？\n01001010 01100001 01110110 01100001\n01100001 01101001 11100100 10111101 10100000 11100101 10010011 10011111\n乱码、编码、解码 学习完各种编码方式之后，我们再来思考，为什么会有乱码呢？\n① 读取数据时未读完整个汉字（使用字节流读取数据，一次只能读取一个字节）\n② 编码和解码的方式不统一（使用 UTF-8 编码，使用 GBK 解码）\n解决方式：\n① 不要用字节流读取文本文件；\n② 编码解码时使用同一个码表，同一个编码方式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 package com.company.io; import java.io.UnsupportedEncodingException; import java.util.Arrays; public class Test16 { public static void main(String[] args) throws UnsupportedEncodingException { /* Java中编码的方法 public byte[] getBytes() 使用默认方式进行编码 public byte[] getBytes(stringI charsetName) 使用指定方式进行编码 Java中解码的方法 string(byte[] bytes) 使用默认方式进行解码 String(byte[] bytes, string charsetName) 使用指定方式进行解码 */ // 编码 String str = \u0026#34;Hello你好\u0026#34;; byte[] bytes = str.getBytes();\t// 编码后的字节数据，在存储时再以二进制的形式存储 System.out.println(Arrays.toString(bytes)); byte[] gbks = str.getBytes(\u0026#34;GBK\u0026#34;); System.out.println(Arrays.toString(gbks)); // 解码 String trans1 = new String(bytes); System.out.println(trans1); String trans2 = new String(bytes, \u0026#34;GBK\u0026#34;); // 尝试用GKB解码，出现乱码 System.out.println(trans2); } } 字符流 字符流的底层就是字节流，是在字节流的基础上加上了字符集的概念。\n输入流：一次读一个字节，遇到中文时一次读多个字节。\n输出流：底层会把数据按照指定的编码方式进行编码，编程字节再写到文件中。\n文件字符输入流 FileReader FileReader：从纯文本文件中读取数据。\n书写步骤：① 创建字符输入对象，② 读取数据，③ 释放资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package com.company.io; import java.io.FileReader; import java.io.IOException; public class Test17 { public static void main(String[] args) throws IOException { // 创建对象 FileReader fr = new FileReader(\u0026#34;src\\\\c.txt\u0026#34;); // 定义变量存储fr.read()的返回值避免重复调用导致跳读 int ch; while ((ch = fr.read()) != -1){ // 使用强制类型转换输出字符类型 System.out.println((char) ch); } // 释放资源 fr.close(); } } ① 创建对象时\nFileReader() 中传入的参数可以是字符串表示的路径或 File 对象。\n如果文件不存在，直接报错 FileNotFoundException。\n② 写出数据时\n按字节进行读取，遇到中文则一次读多个字节，读取后解码并返回一个整数；读到文件末尾返回 -1。\n方法底层会对读取到的数据进行解码并转换为 十进制，将十进制作为返回值返回。\n返回的十进制代表了该汉字或字符在 字符集上对应的数字；可以通过强制类型转换输出字符。\n③ 释放资源时\n每次使用完流之后都要 释放资源，解除资源的占用。\nFileReader 读取数据的 2 种方式：\n方法名称 说明 public int read() 读取数据，读到末尾返回 -1 public int read(char[] buffer) 读取多个数据，读到末尾返回 -1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package com.company.io; import java.io.FileReader; import java.io.IOException; public class Test17 { public static void main(String[] args) throws IOException { FileReader fr = new FileReader(\u0026#34;src\\\\c.txt\u0026#34;); // int ch; // while ((ch = fr.read()) != -1){ // System.out.println((char) ch); // } // 字节流 byte 字符流 char char[] chars = new char[2]; int len; // 读取数据，解码，强转三步合并了，把强转之后的字符放到了数组当中 // 空参read方法 + 强制类型转换 while ((len = fr.read(chars)) != -1) { // 转换为字符串，输出每次chars数组里的元素 System.out.println(new String(chars, 0, len)); // for (char aChar : chars) { // System.out.print(aChar); // } } fr.close(); } } 文件字符输出流 FileWriter FileWriter：操作本地文件的字符输出流，可以把程序中的数据写到本地文件中。\n书写步骤：① 创建字符输出对象，② 写数据，③ 释放资源。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.company.io; import java.io.FileOutputStream; import java.io.FileWriter; import java.io.IOException; public class Test18 { public static void main(String[] args) throws IOException { FileOutputStream fos = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;); fos.write(25105); fos.close(); FileWriter fw = new FileWriter(\u0026#34;src\\\\b.txt\u0026#34;, true); // 根据字符集的编码方式进行编码，把编码后的数据写到文件中 // IDEA 默认使用 UTF-8 进行编码 fw.write(25105); // 使用 str 字符串写出 String str = \u0026#34;\\r\\n今天天气真不错。\u0026#34;; fw.write(str); //使用 char 数组写出 char chars[] = {\u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;你\u0026#39;, \u0026#39;好\u0026#39;}; fw.write(chars); fw.close(); } } ① 创建对象时\nFileWriter() 中传入的参数可以是字符串表示的路径或 File 对象。\n如果 文件不存在 会创建一个新的文件，但要 保证父级路径是存在的。\n如果文件已经存在，则会清空文件，如果不想清空可以打开续写开关。\n② 写出数据时\n如果 write 方法的参数是整数，但是实际上写到本地文件中的是整数在字符集上对应的字符。\n③ 释放资源时\n每次使用完流之后都要 释放资源，解除资源的占用。\nFileWriter 的 4 种构造方法：\n方法名称 说明 public Filewriter(File file) 创建字符输出流关联本地文件 public Filewriter(string pathname) 创建字符输出流关联本地文件 public Filewriter(File file, boolean append) 创建字符输出流关联本地文件，续写 public Filewriter(string pathname, boolean append) 创建字符输出流关联本地文件，续写 FileWriter 写出数据的 5 种方式：\n方法名称 说明 void write(int c) 写出一个字符 void write(String str) 写出一个字符串 void write(string str, int off, int len) 写出一个字符串的一部分 void write(char[ ] cbuf) 写出一个字符数组 void write(char[] cbuf, int off, int len) 写出字符数组的一部分 小结 笔记 1. 字节流和字符流的使用场景\n字节流：拷贝 任意类型 的文件。\n字符流：① 读取 纯文本文件 中的数据；② 往纯文本文件中写出数据。\n2. 书写步骤\n① 创建字节 / 字符输出对象；\n② 读 / 写数据；\n③ 释放资源。\n3. 字符集\n字符集种类：\n① 中文 —— GBK；\n② 英文 —— ASCII；\n③ 万国码 —— Unicode（UTF-8 编码）\n出现乱码的原因是：\n① 读取数据时未读完整个汉字（使用字节流读取数据，一次只能读取一个字节）\n② 编码和解码的方式不统一（使用 UTF-8 编码，使用 GBK 解码）\n中文占用 3 个字节，二进制以 1 开头；英文占用 1 个字节，二进制以 0 开头。\n4. 常用语句和方法\nFile 文件：\n1 2 3 4 5 6 7 8 File file = new File(“pathname”); public boolean isFile() public boolean exists() public long length() public String getName() public boolean createNewFile() public boolean mkdirs() public File[] listFiles() 字节流中：\n1 2 3 4 FileOutputStream fos = new FileOutputStream(“pathname”); FileInputStream fis = new FileInputStream(“pathname”); void write(byte[] b, int off, int len) public int read(byte[] buffer)\t字符流中：\n1 2 3 4 FileWriter fw = new FileWriter(“pathname”); FileReader fr = new FileReader(“pathname”); void write(string str, int off, int len) public int read(char[] buffer) 拷贝文件夹练习 拷贝一个文件夹，考虑子文件夹。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package com.company.io; import java.io.*; public class Pra1 { public static void main(String[] args) throws IOException { // 源文件地址 File f1 = new File(\u0026#34;C:\\\\JavaStudy\u0026#34;); // 拷贝目的地 File f2 = new File(\u0026#34;Copy\u0026#34;); copy(f1, f2); } // 创建一个方法用来拷贝文件夹，参数1：源文件地址；参数2：拷贝目的地 public static void copy(File f1, File f2) throws IOException { // 需要先把拷贝目的地的文件创建出来 f2.mkdirs(); /* 先进入源文件地址，获取所有文件的地址，存到一个数组中 遍历数组，判断是否是文件，如果是文件则拷贝，是文件夹则递归 */ File[] files = f1.listFiles(); if (files != null) { for (File file : files) { if (file.isFile()) { // 如果是文件，则拷贝（用字节流） // 在拷贝时，是从文件1拷贝到文件2中，因此需要创建一个文件1的同名文件文件2 FileInputStream fis = new FileInputStream(file); // 父级路径是f2文件夹，子级路径是创建一个新的且与file同名的文件 FileOutputStream fos = new FileOutputStream(new File(f2, file.getName())); byte[] bytes = new byte[1024]; int len; while ((len = fis.read(bytes)) != -1) { // 写出bytes数组内的元素，从0索引开始，一共len个元素 fos.write(bytes, 0, len); } fos.close(); fis.close(); } else { copy(file, new File(f2, file.getName())); } } } } } 其他流 字节流、字符流都是无缓冲的输入、输出流，每次的读、写操作都会交给操作系统来处理。对系统的性能造成很大的影响，因为每次操作都可能引发磁盘硬件的读、写或网络的访问，这些磁盘硬件读、写和网络访问会占用大量系统资源，影响效率。\n装饰器模式 后续的缓冲流、转换流、打印流、压缩流等内容，底层都遵循着一个相同的设计模式——装饰器模式。\n装饰器模式就是通过方法，将对象进行包装。比如文件字节输出流 FileOutputStream 放在缓冲字节输出流 BufferedOutputStream 的构造方法中时，就变成了 BufferedOutputStream ；再把缓冲字节输出流 BufferedOutputStream 放在 DataOutputStream 的构造方法中，就变成了 DataOutputStream。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.company.io; import java.io.*; public class OthDemo1 { public static void main(String[] args) throws FileNotFoundException { // 创建文件字节输出流对象 FileOutputStream fos = new FileOutputStream(\u0026#34;src\\\\a.txt\u0026#34;); // 放到 BufferedOutputStream 的构造方法中 BufferedOutputStream bos = new BufferedOutputStream(fos); // 放到 DataOutputStream 的构造方法中 DataOutputStream dos = new DataOutputStream(bos); } } 虽然外观都是 OutputStream，但是功能得到了增强，提供了更加丰富的API。\n缓冲流 字节缓冲流 BufferedInputStream \u0026amp; BufferedOutputStream 为了提高读写效率，我们要学习缓冲流；缓冲流的目的是让原字节流、字符流新增缓冲的功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package com.company.io; import java.io.*; public class OthDemo2 { public static void main(String[] args) throws IOException { // 创建缓冲流对象 BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\u0026#34;src\\\\a.txt\u0026#34;)); BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\u0026#34;src\\\\b.txt\u0026#34;)); // 循环读取并写出到文件中 int len; while ((len = bis.read()) != -1){ bos.write(len); } // 释放资源 bos.close(); bis.close(); } } 同样，可以通过创建数组让缓冲流一次读取多个字节。\n1 2 3 4 5 byte[] bytes = new byte[1024]; int len; while ((len = bis.read(bytes)) != -1) { bos.write(bytes, 0, len); } 字符缓冲流 BufferedReader \u0026amp; BufferedWriter 字符缓冲流特有的方法\n字符缓冲输入流：读取 一行 数据，如果没有数据可读了，会返回 null。\n方法读到回车换行会结束，但不会把回车换行读到内存当中。（使用 print 输出在同一行）\n1 public String readLine() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package com.company.io; import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class OthDemo4 { public static void main(String[] args) throws IOException { BufferedReader br = new BufferedReader(new FileReader(\u0026#34;src\\\\a.txt\u0026#34;)); // String str1 = br.readLine(); // String str2 = br.readLine(); // System.out.println(str1); // System.out.println(str2); String line; while ((line = br.readLine()) != null){ System.out.println(line); } br.close(); } } 字符缓冲输出流：跨平台的换行。\n方法底层先判断操作系统的种类（如果是 windows 则输出 \\r\\n，如果是 macos 则输出 \\r）。\n1 public void newLine() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package com.company.io; import java.io.BufferedReader; import java.io.BufferedWriter; import java.io.FileWriter; import java.io.IOException; public class OthDemo5 { public static void main(String[] args) throws IOException { // 路径文件不存在会创建新文件，重新运行会清空文件，需要开启续写（注意：续写是 FileWriter 的功能） BufferedWriter bw = new BufferedWriter(new FileWriter(\u0026#34;src\\\\d.txt\u0026#34;, true)); bw.write(\u0026#34;你好\u0026#34;); // bw.write(\u0026#34;\\r\\n\u0026#34;); // 如果使用 \\r\\n 换行，其他平台可能无法正确表达 bw.newLine(); bw.write(\u0026#34;今天天气真不错\u0026#34;); bw.newLine(); bw.close(); } } 转换流 InputStreamReader \u0026amp; OutputStreamWriter 转换流是字符流的一员，是 字符流和字节流之间的桥梁，分为转换输入流 InputStreamReader 和转换输出流 OutputStreamWriter。\n应用场景：① 指定字符集读写（在 JDK11 后淘汰了）；② 字节流中想要使用字符流中的方法。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.company.io; import java.io.*; import java.nio.charset.Charset; public class ConvertDemo1 { public static void main(String[] args) throws IOException { // 文件另存为默认编码改为ANSI，使用GBK编码 InputStreamReader isr = new InputStreamReader(new FileInputStream(\u0026#34;C:\\\\JavaStudy\\\\Convert.txt\u0026#34;), \u0026#34;GBK\u0026#34;); // 读取数据，用字符流的方式读取 int len; while ((len = isr.read()) != -1){ System.out.print((char) len); } isr.close(); // 现有替代方法 FileReader fr = new FileReader(\u0026#34;C:\\\\JavaStudy\\\\Convert.txt\u0026#34;, Charset.forName(\u0026#34;GBK\u0026#34;)); int ch; while ((ch = fr.read()) != -1){ System.out.print((char) ch); } fr.close(); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package com.company.io; import java.io.FileOutputStream; import java.io.FileWriter; import java.io.IOException; import java.io.OutputStreamWriter; import java.nio.charset.Charset; public class ConvertDemo2 { public static void main(String[] args) throws IOException { OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(\u0026#34;e.txt\u0026#34;), \u0026#34;GBK\u0026#34;); // 使用GBK编码写出，IDEA默认使用UTF-8编码，因此显示乱码 osw.write(\u0026#34;你好\u0026#34;); osw.close(); // 现有替代方案 FileWriter fw = new FileWriter(\u0026#34;e.txt\u0026#34;, Charset.forName(\u0026#34;GBK\u0026#34;)); fw.write(\u0026#34;你好\u0026#34;); fw.close(); } } 练习：将本地文件中的 GBK 文件，转换为 UTF-8。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 package com.company.io; import java.io.*; import java.nio.charset.Charset; public class ConvertDemo3 { public static void main(String[] args) throws IOException { // JDK11以前 InputStreamReader isr = new InputStreamReader(new FileInputStream(\u0026#34;C:\\\\JavaStudy\\\\convert.txt\u0026#34;), \u0026#34;GBK\u0026#34;); OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(\u0026#34;src\\\\convert.txt\u0026#34;), \u0026#34;UTF-8\u0026#34;); int a; while ((a = isr.read()) != -1){ osw.write(a); } osw.close(); isr.close(); // 替代方案 FileReader fr = new FileReader(\u0026#34;C:\\\\JavaStudy\\\\convert.txt\u0026#34;, Charset.forName(\u0026#34;GBK\u0026#34;)); FileWriter fw = new FileWriter(\u0026#34;src\\\\convert.txt\u0026#34;, Charset.forName(\u0026#34;UTF-8\u0026#34;)); int b; while ((b = fr.read()) != -1){ fw.write(b); } fw.close(); fr.close(); } } 练习：利用字节流读取文件中的数据，但是每次需要读取一整行，且不能出现乱码。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package com.company.io; import java.io.*; public class LaDemo1 { public static void main(String[] args) throws IOException { // 要读取文件，从外往里，因此创建字节输入流对象 FileInputStream fis = new FileInputStream(\u0026#34;src\\\\c.txt\u0026#34;); // 要不能出现乱码，因此需要使用转换流（在JDK11后已经可以直接使用字符输入流FileReader） InputStreamReader isr = new InputStreamReader(fis); // 要一次读取一行数据，因此需要使用字符缓冲流提高读写效率 BufferedReader br = new BufferedReader(isr); // BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\u0026#34;src\\\\c.txt\u0026#34;))); int a; while ((a = br.read()) != -1){ System.out.print((char) a); } br.close(); // isr.close(); // fis.close(); } } 数据流 DataOutputStream \u0026amp; DataInputStream 数据流 DataStream 允许流直接操作基本数据类型和字符串。\n常用的方法有\n① dos.writeUTF(); ② dis.readUTF(); ③ dos.writeInt/Double();\n④ dis.readInt/Double(); ⑤ dis.readByte(); ⑥ dos.writeChar;\n⑦ dis.readChar; ⑧ dos.writeBoolean; ⑨ dis.readBoolean(); ⑩ dos.writeByte();\n注意：读取顺序要和写入顺序一致。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package com.company.io; import java.io.*; public class pra2 { public static void main(String[] args) { try { DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(new File(\u0026#34;src\\\\a.txt\u0026#34;)))); dos.writeBoolean(true); dos.writeChar(\u0026#39;A\u0026#39;); dos.writeDouble(12.3); dos.writeInt(4); dos.writeUTF(\u0026#34;this is\u0026#34;); dos.writeUTF(\u0026#34;DataOutputStream\u0026#34;); dos.close(); DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(new File(\u0026#34;src\\\\a.txt\u0026#34;)))); boolean t = dis.readBoolean(); char y = dis.readChar(); double x = dis.readDouble(); int d = dis.readInt(); String b = dis.readUTF(); String c = dis.readUTF(); System.out.println(t + \u0026#34; \u0026#34; + y + \u0026#34; \u0026#34; + x + \u0026#34; \u0026#34; + d + \u0026#34; \u0026#34; + b + \u0026#34; \u0026#34; + c); dis.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } } XML XML 简介 XML是可拓展标记语言，可以用来 存储数据、系统配置、数据交换。\n① XML 的标签可以自定义，元素之间可以嵌套（但不能交叉）。\n② XML 文档总是以 XML 声明开始，即告知处理程序，本文档是一个 XML 文档。\n③ 在 XML 声明中，通常包括版本、编码等信息，以 \u003c?** 开始，以 **?\u003e 结尾。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project version=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;component name=\u0026#34;ChangeListManager\u0026#34;\u0026gt; \u0026lt;list default=\u0026#34;true\u0026#34; id=\u0026#34;84e1f6fc-df86-47b2-8556-49f0336f0415\u0026#34; name=\u0026#34;Changes\u0026#34; comment=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;SHOW_DIALOG\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;HIGHLIGHT_CONFLICTS\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;HIGHLIGHT_NON_ACTIVE_CHANGELIST\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;LAST_RESOLUTION\u0026#34; value=\u0026#34;IGNORE\u0026#34; /\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;component name=\u0026#34;FileTemplateManagerImpl\u0026#34;\u0026gt; \u0026lt;option name=\u0026#34;RECENT_TEMPLATES\u0026#34;\u0026gt; \u0026lt;list\u0026gt; \u0026lt;option value=\u0026#34;Python Script\u0026#34; /\u0026gt; \u0026lt;/list\u0026gt; \u0026lt;/option\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;component name=\u0026#34;MarkdownSettingsMigration\u0026#34;\u0026gt; \u0026lt;option name=\u0026#34;stateVersion\u0026#34; value=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;component name=\u0026#34;ProjectId\u0026#34; id=\u0026#34;28yhW2JRvVXqQOKiHkafMq6ldRg\u0026#34; /\u0026gt; \u0026lt;component name=\u0026#34;ProjectViewState\u0026#34;\u0026gt; \u0026lt;option name=\u0026#34;hideEmptyMiddlePackages\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;showLibraryContents\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;component name=\u0026#34;RunManager\u0026#34; selected=\u0026#34;Python.demo\u0026#34;\u0026gt; \u0026lt;configuration name=\u0026#34;core\u0026#34; type=\u0026#34;PythonConfigurationType\u0026#34; factoryName=\u0026#34;Python\u0026#34; temporary=\u0026#34;true\u0026#34; nameIsGenerated=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;module name=\u0026#34;pythonProject\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;INTERPRETER_OPTIONS\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;PARENT_ENVS\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;envs\u0026gt; \u0026lt;env name=\u0026#34;PYTHONUNBUFFERED\u0026#34; value=\u0026#34;1\u0026#34; /\u0026gt; \u0026lt;/envs\u0026gt; \u0026lt;option name=\u0026#34;SDK_HOME\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;WORKING_DIRECTORY\u0026#34; value=\u0026#34;$PROJECT_DIR$/noknow-python-master/noknow\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;IS_MODULE_SDK\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;ADD_CONTENT_ROOTS\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;ADD_SOURCE_ROOTS\u0026#34; value=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;SCRIPT_NAME\u0026#34; value=\u0026#34;$PROJECT_DIR$/noknow-python-master/noknow/core.py\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;PARAMETERS\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;SHOW_COMMAND_LINE\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;EMULATE_TERMINAL\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;MODULE_MODE\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;REDIRECT_INPUT\u0026#34; value=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;INPUT_FILE\u0026#34; value=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;method v=\u0026#34;2\u0026#34; /\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;recent_temporary\u0026gt; \u0026lt;list\u0026gt; \u0026lt;item itemvalue=\u0026#34;Python.demo\u0026#34; /\u0026gt; \u0026lt;item itemvalue=\u0026#34;Python.data\u0026#34; /\u0026gt; \u0026lt;item itemvalue=\u0026#34;Python.core\u0026#34; /\u0026gt; \u0026lt;item itemvalue=\u0026#34;Python.test\u0026#34; /\u0026gt; \u0026lt;item itemvalue=\u0026#34;Python.setup\u0026#34; /\u0026gt; \u0026lt;/list\u0026gt; \u0026lt;/recent_temporary\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;component name=\u0026#34;SpellCheckerSettings\u0026#34; RuntimeDictionaries=\u0026#34;0\u0026#34; Folders=\u0026#34;0\u0026#34; CustomDictionaries=\u0026#34;0\u0026#34; DefaultDictionary=\u0026#34;application-level\u0026#34; UseSingleDictionary=\u0026#34;true\u0026#34; transferred=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;component name=\u0026#34;TaskManager\u0026#34;\u0026gt; \u0026lt;task active=\u0026#34;true\u0026#34; id=\u0026#34;Default\u0026#34; summary=\u0026#34;Default task\u0026#34;\u0026gt; \u0026lt;changelist id=\u0026#34;84e1f6fc-df86-47b2-8556-49f0336f0415\u0026#34; name=\u0026#34;Changes\u0026#34; comment=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;created\u0026gt;1652194761520\u0026lt;/created\u0026gt; \u0026lt;option name=\u0026#34;number\u0026#34; value=\u0026#34;Default\u0026#34; /\u0026gt; \u0026lt;option name=\u0026#34;presentableId\u0026#34; value=\u0026#34;Default\u0026#34; /\u0026gt; \u0026lt;updated\u0026gt;1652194761520\u0026lt;/updated\u0026gt; \u0026lt;/task\u0026gt; \u0026lt;servers /\u0026gt; \u0026lt;/component\u0026gt; \u0026lt;/project\u0026gt; 标签可以有属性（属性值要加引号）。属性是对标签的进一步描述和说明，一个标签可以有多个属性，每个属性都有自己的名字和值，属性是标签的一部分。\n解析XML的技术主要有：\n① DOM 即 org.w3c.dom，W3C 推荐的用于使用 DOM 解析 XML 文档的接口\n② SAX 即 org.xml.sax，用 SAX 解析 XML 文档的接口\nDOM 解析 XML DOM 把一个 XML 文档映射成一个分层对象模型，而这个层次的结构，是一棵根据 XML 文档生成的节点树。DOM 在对 XML 文档进行分析之后，不管这个文档有多简单或多复杂，其中的信息都会被转化成一棵对象节点树。在这棵节点树中，有一个根节点，其他所有的节点都是根节点的子节点。节点树生成之后，就可以通过 DOM 接口访问、修改、添加、删除树中的节点或内容了。\nDOM解析过程：\n① 通过 getInstance() 创建 DocumentBuilderFactory，即解析器工厂\n② 通过 build() 创建 DocumentBuilder\n1 2 3 4 5 6 import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.parsers.ParserConfigurationException; ... DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = dbf.newDocumentBuilder();\t③ 解析文件得到 Document 对象\n④ 通过 NodeList，开始解析结点（标签）\n拓展：解析一个 xml 文件，将获得到的所有数据存在 List 集合中并返回。\nxml 文件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;friends\u0026gt; \u0026lt;friend id=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;name\u0026gt;Alice\u0026lt;/name\u0026gt; \u0026lt;age\u0026gt;18\u0026lt;/age\u0026gt; \u0026lt;gender\u0026gt;female\u0026lt;/gender\u0026gt; \u0026lt;/friend\u0026gt; \u0026lt;friend id=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;name\u0026gt;Bob\u0026lt;/name\u0026gt; \u0026lt;age\u0026gt;19\u0026lt;/age\u0026gt; \u0026lt;gender\u0026gt;male\u0026lt;/gender\u0026gt; \u0026lt;/friend\u0026gt; \u0026lt;friend id=\u0026#34;3\u0026#34;\u0026gt; \u0026lt;name\u0026gt;Lisa\u0026lt;/name\u0026gt; \u0026lt;age\u0026gt;17\u0026lt;/age\u0026gt; \u0026lt;gender\u0026gt;female\u0026lt;/gender\u0026gt; \u0026lt;/friend\u0026gt; \u0026lt;/friends\u0026gt; 创建 FriendEx 类，根据 xml 文件的内容定义属性：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package com.company.io; public class FriendEx { private int id; private String name; private int age; private String gender; @Override public String toString() { return \u0026#34;friends{\u0026#34; + \u0026#34;id=\u0026#34; + id + \u0026#34;, name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, gender=\u0026#39;\u0026#34; + gender + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } public FriendEx() { } public FriendEx(int id, String name, int age, String gender) { this.id = id; this.name = name; this.age = age; this.gender = gender; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } } 解析 xml 文件，定义一个方法，传入 xml 文件的 String 类型的地址字符串，输出一个 List：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package com.company.io; import com.company.collection.Friend; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.xml.sax.SAXException; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.parsers.ParserConfigurationException; import java.io.FileInputStream; import java.io.IOException; import java.util.ArrayList; import java.util.List; public class XmlDemo1 { public static void main(String[] args) throws ParserConfigurationException, IOException, SAXException { List\u0026lt;FriendEx\u0026gt; friends = parseXmlToList(\u0026#34;src\\\\friends.xml\u0026#34;); System.out.println(friends); } public static List\u0026lt;FriendEx\u0026gt; parseXmlToList(String file) throws ParserConfigurationException, IOException, SAXException { List\u0026lt;FriendEx\u0026gt; friends = new ArrayList\u0026lt;\u0026gt;(); // 解析friend.xml，输出一个List\u0026lt;FriendEx\u0026gt;，集合名为friends // 创建一个解析器工厂实例，通过解析器获取内容 DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = dbf.newDocumentBuilder(); // 解析为一个可以被java处理的document对象 Document document = builder.parse(new FileInputStream(file)); // 获取所有文档的结点 Element element = document.getDocumentElement(); // 根据friend获取所有的friends NodeList nodeList = element.getElementsByTagName(\u0026#34;friend\u0026#34;); for (int i = 0;i\u0026lt; nodeList.getLength();i++){ FriendEx friend = new FriendEx(); // 获取每个\u0026lt;friend\u0026gt;，里面有id属性，name，age，gender子节点 Element friendElement = (Element)nodeList.item(i); // Node node = nodeList.item(i); // 获取friend的属性id int id = Integer.parseInt(friendElement.getAttribute(\u0026#34;id\u0026#34;)); friend.setId(id); // 获取friend的子节点childNodes NodeList childNodes = friendElement.getChildNodes(); // 遍历子节点 for (int j = 0;j\u0026lt;childNodes.getLength();j++){ Node friendChildNode = childNodes.item(j); // 子节点可能是回车空格等 if (friendChildNode.getNodeType() == Node.ELEMENT_NODE){ if (friendChildNode.getNodeName().equals(\u0026#34;name\u0026#34;)){ String name = friendChildNode.getFirstChild().getNodeValue(); friend.setName(name); }else if (friendChildNode.getNodeName().equals(\u0026#34;age\u0026#34;)){ int age = Integer.parseInt(friendChildNode.getFirstChild().getNodeValue()); friend.setAge(age); }else { String gender = friendChildNode.getFirstChild().getNodeValue(); friend.setGender(gender); } } } friends.add(friend); } return friends; } } Node 常用方法 方法名称 说明 NodeList getChildNodes() 返回此节点的所有子节点的 NodeList Node getFirstChild() 返回此节点的第一个子节点 Node getLastChild() 返回此节点的最后一个子节点 Node getNextSibling() 返回此节点之后的节点 Node getPreviousSibling() 返回此节点之前的节点 Document getOwnerDocument() 返回与此节点相关的 Document 对象 Node getParentNode() 返回此节点的父节点 short getNodeType() 返回此节点的类型 String getNodeName() 根据此节点类型，返回节点名称 String getNodeValue() 根据此节点类型，返回节点值 String getTextContent() 返回此节点的文本内容 void setNodeValue(String nodeValue) 根据此节点类型，设置节点值 void setTextContent(String textContent) 设置此节点的文本内容 Node appendChild(Node newChild) 将节点 newChild 添加到此节点的子节点列表末尾 Node insertBefore(Node newChild,Node refChild) 在现有子节点 refChild 之前插入节点 newChild Node removeChild(Node oldChild) 从子节点列表中移除 oldChild 指示的子节点，并将其返回 Node replaceChild(Node newChild, oldChild) 将子节点列表中的子节点 oldChild 替换为 newChild，并返回 oldChild 节点 Document 常用方法 方法名称 说明 Element getDocumentElement() 返回代表这个 DOM 树根节点的 Element 对象 NodeList getElementsByTagName(String tagname) 按文档顺序返回包含在文档中且具有给定标记名称的所有 Element 的 NodeList NodeList常用方法 方法名称 说明 int getLength() 返回有序集合中的节点数 Node item(int index) 返回有序集合中的第 index 个项 SAX 解析 XML SAX，全称 Simple API for XML，既是一种接口，也是一种软件包。它是一种 XML 解析的替代方法。SAX 不同于 DOM 解析，它逐行扫描文档，一边扫描一边解析。由于应用程序只是在读取数据时检查数据，因此不需要将数据存储在内存中，这对于大型文档的解析是个巨大优势。\nSAX 是事件驱动的。通过继承 DefaultHandler 类，重写五个关键方法实现解析。\n方法名称 说明 startDocument() 开始文档的标志 endDocument() 结束文档的标志 startElement(String uri, String localName, String qName, Attributes attributes) 通过比较 localName，找到指定的元素，打开元素 endElement(String uri, String localName, String qName) 通过比较 localName 找到指定的元素，结束元素 characters(char[] ch, int start, int length) 解析每个元素时调用的方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 /** * @author lastwhisper * @desc 每当遇到起始标签时调用 * @param uri xml文档的命名空间 * @param localName 标签的名字 * @param qName 带命名空间的标签的名字 * @param attributes 标签的属性集 * @param ch 当前读取到的TextNode(文本节点)的字节数组 * @param start 字节开始的位置，为0则读取全部 * @param length 当前TextNode的长度 * @return void */ @Override public void startDocument() throws SAXException { System.out.println(\u0026#34;books2文档开始解析\u0026#34;); } @Override public void endDocument() throws SAXException { System.out.println(\u0026#34;books2文档结束解析\u0026#34;); } @Override public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException { if (qName.equals(\u0026#34;book\u0026#34;)) { for(int i=0;i\u0026lt;attributes.getLength();i++){ System.out.println(\u0026#34;编号：\u0026#34;+attributes.getValue(i)); } } this.tagName = qName; } public void endElement(String uri, String localName, String qName) throws SAXException { if(\u0026#34;book\u0026#34;.equals(localName)){} this.tagName = null; } @Override public void characters(char[] ch, int start, int length) throws SAXException { if (this.tagName != null) { String data = new String(ch, start, length); if (this.tagName.equals(\u0026#34;bookname\u0026#34;)) { System.out.println(\u0026#34;书名：\u0026#34;+data); } if (this.tagName.equals(\u0026#34;bookauthor\u0026#34;)) { System.out.println(\u0026#34;作者：\u0026#34;+data); } if (this.tagName.equals(\u0026#34;bookprice\u0026#34;)) { System.out.println(\u0026#34;价格：\u0026#34;+data); } } } 练习 try catch 异常捕获 如果子类异常块放在父类异常块后面，就会报编译错误。\n1 2 3 4 5 6 7 8 9 10 try { int[] a = {1,2,3}; System.out.print(a[3]); System.out.print(1); } catch(Exception e) { System.out.print(2); System.exit(0); } finally { System.out.print(3); } 不同于 return，System.exit(0) 的优先级高于 finally，在前面遇到会直接退出程序。\nsystem.exit(0)：程序正常执行结束退出，将整个JVM虚拟机里的内容全部关闭。system.exit(1)：程序非正常退出，就是说无论程序正在执行与否，都退出。\n异常向外抛出，再被外部 try catch 接受，会造成死循环\n集合 1 2 3 4 5 6 7 8 ArrayList\u0026lt;String\u0026gt; a = new ArrayList\u0026lt;String\u0026gt;(); a.add(true); a.add(123); a.add(\u0026#34;abc\u0026#34;); System.out.print(a); //执行后，控制台输出为？编译错误 //集合定义时加了泛型后，就不能添加不匹配泛型的元素。 1 2 3 4 5 6 7 List a = new ArrayList(); a.add(1); a.add(2); a.add(3); a.remove(1); System.out.print(a); //执行后，控制台输出为？ 1 3 ArrayList 有 2 个删除方法：a.remove(Object o); 和 a.remove(int index); 那么这里的 1 到底是匹配 Object 还是 int 类型呢？我们考虑一下这两个方法的来历就行了。 a.remove(Object o); 是父接口的方法，a.remove(int index); 是子类重写的方法，所以这里应该是调用子类重写的方法。\n1 2 3 4 5 6 Set ts = new TreeSet(); ts.add(\u0026#34;zs\u0026#34;); ts.add(\u0026#34;ls\u0026#34;); ts.add(\u0026#34;ww\u0026#34;); System.out.print(ts); //执行后，控制台输出为？ TreeSet 对于字符串来说默认按照字典升序进行排序，所以答案为：[ls, ww, zs]\nIO 和 XML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //假设文件 c:/a.txt 的内容为 abc //以下代码 try { File f = new File(\u0026#34;c:/a.txt\u0026#34;); System.out.print(f.length()); OutputStream out = new FileOutputStream(f); System.out.print(f.length()); out.write(97); System.out.print(f.length()); out.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } //执行后，控制台输出为？301 File 对象 new 出来后，f.length() 返回值为 3。\nFileOutputStream 对象 new 出来后，由于默认方法是覆盖已经存在的文件，所以 f.length() 返回值为 0，如果想不覆盖，应该使用 new FileOutputStream(f,false);。\nout.write(97) 写入字母 a 后，f.lenght() 返回值为 1。\n1 2 3 4 5 if(node2 instanceof Element){ String string = node2.getNodeName(); String ste = node2.getTextContent(); System.out.println(string + \u0026#34; \u0026#34; + ste); } 使用 org.w3c.dom.Node 的进行解析时，它会将你的回车也作为一个节点，在你的代码中打印 str.getLenth(); 得到的数值肯定比写定的节点数要多。应该将文件中多余的空格和回车都去掉。\n如果：node2 instanceof Text，则输出：#text\n如果：node2 instanceof Element，则输出：标签名\n","date":"2023-10-20T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-io-%E5%92%8C-xml/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%83%E7%AB%A0-io-%E5%92%8C-xml/","title":"第七章 IO 和 XML"},{"content":"集合框架 为什么要使用集合框架 之前我们学习过数组，知道了数组可以存储多个数据类型相同的元素，但面对 频繁增加、删除、修改 元素的要求以及 动态扩容 要求时显得捉襟见肘。为此，JDK 提供了一套 “集合” 框架，这套框架是对常见数据结构的实现，不仅可存储数据，还提供了丰富的访问和处理数据的操作。在面向对象思想里，数据结构也被认为是一个容器，所以集合、容器等词汇经常被交替使用。\nJava 集合框架支持两种类型的容器：一种是为了存储一个元素集合，简称为 集合(collection) ；另一种是为了存储键/值对，称为 映射(map，或称图) 。\n使用数组存放多个对象的信息会存在很多问题，首先，Java 语言中的数组长度是固定的，旦创建出指定长度的数组以后，就给内存分配了相应的存储空间，如果数组长度设置大了，又会造成空间浪费，删除数组元素全部要前移一位，但这种元素的移动是比较消耗系统资源的。\n集合框架有两个基本接口：Collection 和 Map，此外还有一个迭代器接口：Iterator，及一个标记接口：RandomAccess。\n其中 Collection 又叫单列集合，在添加数据时每次只能添加一个元素，Map 又叫双列集合，再添加数据时每次添加一对数据。\nCollection 接口 集合框架可以分为 Collection 和 Map 两类。\nCollection 是一个顶层接口，一些 Collection 接口的实现类允许有重复的元素，而另一些则不允许；一些 Collection 是有序的，而另一些则是无序的。\nJDK 不提供 Collection 接口的任何直接实现类，而是提供了更具体的子接口，如 Set 接口和 List 接口。这些子接口继承 Collection 接口的方法，然后再对 Collection 接口从不同角度进行重写或扩充。\n⭐\tCollection 接口主要有 Set 接口、List 接口和 Queue 接口 三个子接口。\nSet 接口\nSet 实例用于存储一组 不重复的，无序的，无索引的 元素。\nList 接口\nList 实例是一个 有序集合。程序员可对 List 中每个元素的位置进行精确控制，可以根据 索引 来访问元素，此外 List 中的元素是 可以重复 的。\n这里的有序和排序不一样，指存和取数据的顺序是一样的。\nQueue 接口\nQueue 中的元素遵循 先进先出 的规则，是对数据结构 “队列” 的实现。\nMap 接口 Map 接口定义了存储和操作一组 “键（key）值（value）” 映射对的方法。\n⭐\tMap 接口和 Collection 接口的本质区别在于，Collection 接口里存放的是一系列单值对象，而 Map 接口里存放的是一系列 key-value 对象。\nMap 中的 key 不能重复，每个 key 最多只能映射到一个值。\nHashMap ，Hashtable 和 TreeMap 是 Map 接口的实现类。\n总结 Ⅰ. 集合框架可以分为？\n集合框架可以分为 Collection 和 Map 两类。\nⅡ. Collection 接口主要有哪几个子接口？\nSet 接口、List 接口和 Queue 接口。\nⅢ. Set、List 和 Queue 各有什么特点？\nSet 用于存储一组不重复、无序的元素；List 中的元素有序、可以重复；Queue 中的元素先进先出。\nⅣ. Map 接口和 Collection 接口有什么区别？\nCollection 接口里存放的是一系列单值对象，而 Map 接口里存放的是一系列 key-value 对象。\nⅤ. Map 中的 key 有什么特点？\nMap 中的 key 不能重复，每个 key 最多只能映射到一个值。\nSet 接口 Set 接口的主要方法 Set 接口是 Collection 的子接口。Set 接口中的元素是不能重复的、无序的，这里的 “无序” 是指向 Set 中输入的元素，与从 Set 中输出元素的顺序是不一致的。\n例如，向 Set 接口中依次增加 “北京”、“深圳” 和 “西安” 三个元素，但输出顺序却是 “西安”、“北京”和“深圳” 。对于开发者而言，只需要了解这一 “无序” 的特性即可，不必深究其原因。\n下面列出了 Set 接口继承自 Collection 接口的主要方法。\n1 2 3 4 5 public boolean add(Object obj) Set name = new HashSet(); name.add(\u0026#34;张三\u0026#34;); System.out.println(name.add(\u0026#34;张三\u0026#34;)); 向集合中添加一个 obj 元素，并且 obj 不能和集合中现有数据元素重复，添加成功后返回 true。如果添加的是重复元素，则添加操作无效，并返回 false。\n1 2 3 public void clear() name.clear(); 移除此集合中的所有数据元素，即将集合清空。\n1 2 3 public boolean contains(Object obj) name.contains(\u0026#34;张三\u0026#34;); 判断此集合中是否包含 obj，如果包含，则返回 true。\n1 2 3 public boolean isEmpty() System.out.println(name.isEmpty()); 判断集合是否为空，为空则返回 true。\n1 Iterator iterator() 返回一个 Iterator 对象，可用它来遍历集合中的数据元素。\n1 2 public boolean remove(Object obj) name.remove(\u0026#34;张三\u0026#34;); 如果此集合中包含 obj，则将其删除，并返回 true。\n1 2 3 public int size() System.out.println(name.size()); 返回集合中真实存放数据元素的个数，注意与数组、字符串获取长度的方法的区别。\n1 2 3 4 5 6 public Object[] toArray() TreeSet num = new TreeSet(); ... Integer[] arr1 = new Integer[num.size()]; num.toArray(arr1); 返回一个数组，该数组包含集合中的所有数据元素。\nHashSet 的底层原理 ⭐\tHashSet 和 TreeSet ？\nHashSet 和 TreeSet 都是 Java 中的集合类，它们的主要区别在于底层数据结构和元素的排序方式。\n底层数据结构： HashSet 使用 哈希表 作为底层数据结构，而 TreeSet 使用 红黑树 作为底层数据结构。\n元素的排序方式： HashSet 中的元素是无序的，而 TreeSet 中的元素是有一定规律的排序的，且默认按照元素的自然顺序排序。如果需要按照其他方式排序，则需要在创建 TreeSet 时指定一个 Comparator 对象。\n元素的唯一性： HashSet 中的元素是唯一的，不允许重复，而 TreeSet 中的元素也是唯一的，但是它是通过比较器或元素的自然顺序来判断元素是否相同的。\n性能： HashSet 的插入、删除和查找操作的时间复杂度都是O(1)，而 TreeSet 的这些操作的时间复杂度都是 O(log n)。\n因此，如果需要 快速的插入、删除和查找操作，并且不需要元素有序，则可以选择 HashSet。如果需要 元素有序，或者需要按照其他方式进行排序，则可以选择 TreeSet。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 HashSet 底层原理 - HashSet 底层集合采取哈希表存储数据 - 哈希表是一种对于增删改查数据性能都比较好的结构 // -------------------------------------------------------------------------------- 哈希表的组成 - JDK8以前：数组+链表 //\t属性值不一样，新元素添加到数组，旧元素挂在新元素下方 创建一个默认长度为16，默认加载因子为0.75的数组，数组名为table int index = (数组长度 - 1) \u0026amp; 哈希值; 计算存入位置 如果数组中该位置为null，则存入，如果有元素，则使用equals方法比较属性值 - JDK8开始：数组+链表+红黑树 //\t属性值不一样，新元素挂在旧元素下方 默认加载因子：数组长度 * 0.75 = 12，即数组中存了12个元素时，数组扩容到原来的两倍 当链表长度大大于等于8且数组长度大于等于64时，链表转换为红黑树 // -------------------------------------------------------------------------------- 哈希表中的哈希值 - 哈希值是根据 hashCode 方法计算出来的 int 类型的整数 - 该方法定义在 Object 类中，所有对象都可以调用，默认使用地址值进行计算 - 一般情况下，会重写 hashCode 方法，利用对象内部的属性值计算哈希值 思考：哈希值是对象的整数表现形式，那为什么要把对象变成整数？\n哈希表在底层有数组存在，如果此时我们需要添加数据，不是从 0 索引开始往后存储的，而是根据以下公式计算出在数组中应该存储的位置：\n1 int index = (数组长度 - 1) \u0026amp; 哈希值; 对象无法参与计算，所以我们要把对象转换成整数进行计算，即哈希值。\n对象的哈希值的特点\n如果没有重写 hashCode 方法，则不同对象计算出的哈希值是不同的。 如果重写了 hashCode 方法，不同对象只要属性值相同，计算出的哈希值就是一样的。 在少数情况下，不同属性或者不同地址值计算出的哈希值也有可能一样。（哈希碰撞） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 重写 hashCode 方法 // alt + insert @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; StuTest stuTest = (StuTest) o; return age == stuTest.age \u0026amp;\u0026amp; Objects.equals(name, stuTest.name); } @Override public int hashCode() { return Objects.hash(name, age); } 使用 hashCode() 方法计算哈希值，重写前后进行比较。\n少数情况出现哈希碰撞，哈希值计算结果相同。\n1 2 3 4 5 6 7 8 9 10 11 12 // 实例化对象 StuTest s1 = new StuTest(\u0026#34;张三\u0026#34;,18); StuTest s2 = new StuTest(\u0026#34;张三\u0026#34;,18); // 没有重写 hashCode 方法，计算地址值 // 重写 hashCode 方法，计算属性值 System.out.println(s1.hashCode()); System.out.println(s2.hashCode()); // 哈希碰撞 System.out.println(\u0026#34;abc\u0026#34;.hashCode()); System.out.println(\u0026#34;acD\u0026#34;.hashCode()); HashSet 添加元素的过程？\n首先通过 int index = (数组长度 - 1) \u0026amp; 哈希值; 计算元素应该存储的位置，然后判断当前位置是否为null，如果是则存储，否则则继续使用 equals 方法比较元素的属性值，根据情况挂载在旧元素后。\nHashSet 为什么存和取的顺序不一样？\nHashSet 是从内部数组中的0索引开始，逐条链表查询数据输出的，再输出后面索引的数据。\nHashSet 为什么没有索引？\nHashSet 是链表 + 数组 + 红黑树组成的，不能单纯的以索引来决定元素的位置，因为可能有多个元素挂在同一个索引下。\nHashSet 是利用什么机制保证数据去重的？\n利用 HashCode 获取哈希值，找到元素存储的位置，再调用 equals 方法比较元素内部的属性值。\nHashSet 类的使用 Set 接口的特性：无重复，无序。\nSet 接口下 继承父接口的方法。\nSet 接口的实现类 HashSet 的使用：\n通过 HashSet 无参构造器创建 Set 对象。\n使用了 add()、contains()、remove()、size() 等常用的方法对集合元素进行操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package com.company.collection; import java.util.HashSet; import java.util.Set; public class CllDemo1 { /* * HashSet 类的使用 */ public static void main(String[] args) { //\t创建一个HashSet对象，存放学生姓名信息 Set nameSet = new HashSet(); //\tadd方法 nameSet.add(\u0026#34;王云\u0026#34;); nameSet.add(\u0026#34;刘静涛\u0026#34;); nameSet.add(\u0026#34;南天华\u0026#34;); nameSet.add(\u0026#34;雷静\u0026#34;); //\tadd已有的数据元素 nameSet.add(\u0026#34;王云\u0026#34;); System.out.println(\u0026#34;再次添加王云是否成功：\u0026#34; + nameSet.add(\u0026#34;王云\u0026#34;)); System.out.println(\u0026#34;显示集合内容：\u0026#34; + nameSet); // contains方法 System.out.println(\u0026#34;集合里是否包含南天华：\u0026#34; + nameSet.contains(\u0026#34;南天华\u0026#34;)); // remove方法 System.out.println(\u0026#34;从集合中删除\\\u0026#34;南天华\\\u0026#34;...\u0026#34;); nameSet.remove(\u0026#34;南天华\u0026#34;); System.out.println(\u0026#34;集合里是否包含南天华：\u0026#34; + nameSet.contains(\u0026#34;南天华\u0026#34;)); // size方法 System.out.println(\u0026#34;集合中的元素个数为：\u0026#34; + nameSet.size()); // isEmpty方法 System.out.println(nameSet.isEmpty()); } } 这里，contains 方法底层逻辑为 equals 方法。\n如果集合中存储的是自定义对象，也想通过 contains 方法来判断是否包含的话，那么在 javabean 中，一定要重写 equals 方法。\n我们可以选中 contains 方法，使用 ctrl + alt + B 转到 contains 方法的实现，可以看到，contains 方法调用了 indexOf，而 indexOf 又调用了一个叫做 indexOfRange 的方法，最后在 indexOfRange 中使用了equals 方法。\n那么我们可以自己通过代码测试，了解为什么集合存储自定义对象需要重写 equals 方法，首先我们自定义一个 StuTest 对象，生成 javabean。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 package com.company.collection; public class StuTest {\t// 自定义对象StuTest private String name; private int age; public StuTest() { } public StuTest(String name, int age) { this.name = name; this.age = age; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String toString() { return \u0026#34;StuTest{name = \u0026#34; + name + \u0026#34;, age = \u0026#34; + age + \u0026#34;}\u0026#34;; } } 然后在代码中测试集合存储普通数据和存储自定义对象两种情况下，使用 contains 方法的不同之处。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package com.company.collection; import java.util.HashSet; import java.util.Set; public class CllDemo5 { public static void main(String[] args) { Set nameSet = new HashSet(); // 存储信息，使用equals比较是否相等，如果相等则contians方法返回true String a = \u0026#34;aaa\u0026#34;; nameSet.add(a); String b = \u0026#34;aaa\u0026#34;; System.out.println(nameSet.contains(b)); // 创建实例化对象 StuTest s1 = new StuTest(\u0026#34;张三\u0026#34;,12); StuTest s2 = new StuTest(\u0026#34;李四\u0026#34;,22); StuTest s3 = new StuTest(\u0026#34;王五\u0026#34;,16); // 添加到集合 nameSet.add(s1); nameSet.add(s2); nameSet.add(s3); // 如果姓名和年龄相同，则是同一人 StuTest s4 = new StuTest(\u0026#34;张三\u0026#34;,12); System.out.println(nameSet.contains(s4)); /* 如果集合中存储的是自定义对象，也想通过 contains 方法来判断是否包含的话， 那么在 javabean中，一定要重写 equals方法。 */ } } 练习： 自定义一个 Friend 对象，包含学号 id，姓名 name，年龄 age，身高 hight，爱好 hobby 等属性，创建五个实例化对象，并创建一个 HashSet 集合存储他们的信息，判断集合是否为空，删除第二个元素，并输出此时集合内元素的个数。（要求：对象的成员变量值相同，我们就认为是同一个对象）\n1 2 3 我们知道，hashCode() 和 equals() 两个方法最初都是在 Object 类中定义的，能否直接继承并使用这两个方法？ 不能。Object 中定义的 equals() 方法默认比较的是对象的内存地址；hashCode() 方法的前面有 native 修饰符，表示会通过操作系统底层提供的算法来计算 hash 值。显然，这两个方法的默认实现，与我们 “关注对象内容” 的侧重点不一致，因此需要重写。 HashSet 类无重复特性 我们已知 Set 接口的特性是无序的，不重复的，那么需要思考一个问题：HashSet 是如何判断元素重复的？ 如果逐个比较 HashSet 中的全部元素，显然是一种效率低下的做法。因此 HashSet 的底层引入了 hashcode。\nhashcode 最初定义在 Object 类中，如果两个对象相等，那么这两个对象的 hashcode 值相同，因此根据逆否定理可知如果两个对象的 hashcode 值不同，那么这两个对象不相等。但反之，如果两个对象的 hashcode 值相同，则这两个对象可能相等，也可能不等，需要再通过 equals() 方法 进一步比较这两个对象的内容是否相同。\n​ ⭐\t\u0026ldquo;equals()\u0026rdquo; 和 \u0026ldquo;==\u0026rdquo; 的区别是什么？\nequals 方法是 java.lang.Object 类的方法。\n（1）对于 字符串 变量来说，使用 “==” 和 “equals()” 方法比较字符串时，其比较方法不同。\n“==” 比较两个变量本身的值，即两个对象在内存中的首地址。\n“equals()” 比较字符串中所包含的内容是否相同。\n1 2 3 4 5 6 7 8 String s1,s2,s3 = \u0026#34;abc\u0026#34;, s4 =\u0026#34;abc\u0026#34; ; s1 = new String(\u0026#34;abc\u0026#34;); s2 = new String(\u0026#34;abc\u0026#34;); System.out.println(s1 == s2); System.out.println(s1.equals(s2)); System.out.println(s3 == s4); System.out.println(s3.equals(s4)); （2）对于 非字符串 变量来说，\u0026quot;==\u0026quot; 和 \u0026ldquo;equals\u0026rdquo; 方法的作用是相同的，都是用来比较其对象在堆内存的首地址，即用来比较两个引用变量是否指向同一个对象。\n1 2 3 4 5 6 7 8 CllDemo4 obj1 = new CllDemo4(); // 实例化对象 CllDemo4 obj2 = new CllDemo4(); System.out.println(obj1 == obj2); System.out.println(obj1.equals(obj2)); obj1 = obj2; System.out.println(obj1 == obj2); System.out.println(obj1.equals(obj2)); 功能不同 定义不同 运行速度不同 \u0026ldquo;==\u0026rdquo; 是判断两个变量或实例是不是指向同一个内存空间。 \u0026ldquo;==\u0026rdquo; 在 JAVA 中只是一个运算符号。 \u0026ldquo;==\u0026rdquo; 比 \u0026ldquo;equals\u0026rdquo; 运行速度快，因为它只是比较引用。 \u0026ldquo;equals\u0026rdquo; 是判断两个变量或实例所指向的内存空间的值是不是相同。 \u0026ldquo;equals\u0026rdquo; 在 JAVA 中是一个方法。 \u0026ldquo;equals\u0026rdquo; 比 \u0026ldquo;==\u0026rdquo; 运行速度要慢。 当向 HashSet 中增加元素时，HashSet 会先计算此元素的 hashcode，如果 hashcode 值与 HashSet 集合中的其他元素的 hashcode 值都不相同，那么就能断定此元素是唯一的。否则，如果 hashcode 值与 HashSet 集合中的某个元素的 hashcode 值相同，HashSet 就会继续调用 equals() 方法进一步判断它们的内容是否相同，如果相同就忽略这个新增的元素，如果不同就把它增加到 HashSet 中。\n因此，在实际开发中，当使用 HashSet 存放某个自定义对象时，就得先在这个对象的定义类中重写 hashCode() 和 equals() 方法。hashcode 值是对象的映射地址，而 equals() 用于比较两个对象，判断 2 个元素的地址是否相等。 在重写时，hashCode() 方法需要自定义 “映射地址” 的映射规则，equals() 方法需要自定义对象的 “比较” 规则。一般而言，映射规则和比较规则都需要借助于对象的所有属性进行计算。\n实际上，如何在 hashCode() 方法中设计计算公式是一个数学问题，我们不必深究。计算公式的目的是为了 “尽可能的避免不同对象计算出的 hash 值相同” ，普通开发者通常只需在 hashCode() 方法中使用全部的属性值进行计算即可。 例如，也可以将上面程序中的 hashCode() 方法重写为以下的简易形式。\n1 2 3 4 @Override public int hashCode() { return name.hashCode() \u0026amp; oil; } 小结： 在向 HashSet 集合中增加元素时，会先计算此元素的 hashcode 值，如果 HashSet 集合中没有此 hashcode 值，那么此元素就可以插入。如果 hashcode 值与 HashSet 集合中的某个元素的 hashcode 值相同，HashSet 就会 继续调用 euqals() 方法 进一步判断它们的内容是否相同，如果相同就忽略这个新增的元素，如果不同才能把它增加到 HashSet 集合中。\nTreeSet 类的使用 TreeSet 类在实现 Set 接口的同时，也实现了 SortedSet 接口，是一个具有排序功能的 Set 接口实现类。\nTreeSet 集合中的元素默认是按照自然 升序排列，并且 TreeSet 集合中的对象需要实现 Comparable 接口。Comparable 接口用于 比较集合中各个元素的大小，常用于排序操作。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.util.Set; import java.util.TreeSet; public class TestTreeSet { public static void main(String[] args) { Set ts = new TreeSet(); ts.add(\u0026#34;王云\u0026#34;); ts.add(\u0026#34;刘静涛\u0026#34;); ts.add(\u0026#34;南天华\u0026#34;); System.out.println(ts); ts.add(111); System.out.println(ts); //\tclass java.lang.String cannot be cast to class java.lang.Integer //\t(java.lang.String and java.lang.Integer are in module java.base of loader //\t\u0026#39;bootstrap\u0026#39;) //\t不能将 java.lang.String 类转换为 java.lang.Integer 类（java.lang.String 和 //\tjava.lang.Integer 位于加载器 \u0026#34;bootstrap \u0026#34;的 java.base 模块中） Set num = new TreeSet(); num.add(9); num.add(-3); num.add(27); num.add(12); System.out.println(num); } } 从运行结果可以看出，TreeSet 集合 ts 里面的元素不是毫无规律的排序，而是按照自然升序（这里是指 “字典” 里的顺序）进行了排序。\n这是因为 TreeSet 集合中的元素是 String 类的，而 String 类实现了 Comparable 接口。 但如果 TreeSet 中的元素不是 String 类，如何进行排序呢？后面 “ 比较器 ” 实验中会为大家进行讲解。\n使用 TreeSet 生成数组 toArray() 方法，把集合中的所有数据提取到一个新的数组中。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import java.util.Random; import java.util.TreeSet; /** * 使用 TreeSet 生成数组 */ public class RandomSortArray { public static void main(String[] args) { //\t创建 TreeSet 对象 TreeSet num = new TreeSet(); //\t创建 Random 对象 Random ran = new Random(); int count = 0; while(count \u0026lt; 10){ //\t提取 0 - 99 的随机数加入到集合中 boolean succeed = num.add(ran.nextInt(100)); if(succeed){ count ++; } } int size = num.size(); //\t创建整型数组 Integer[] arr1 = new Integer[size]; //\tint[] arr1 = new int[size]; // 将集合元素转换为数组元素 num.toArray(arr1); System.out.print(\u0026#34;生成不重复随机数组内容如下：\u0026#34;); // for each 循环 for(int value : arr1){ System.out.print(value + \u0026#34; \u0026#34;); } } } Integer 和 int\nInteger 是 int 的包装类、是复杂数据类型、是一个类，而 int 则是 java 的一种基本的数据类型； Integer 的默认值是 null，而 int 的默认值是 0。 int 是基本数据类型，直接存数值，integer 是对象，用一个引用指向这个对象。 Integer 变量必须实例化之后才能使用，而 int 变量不需要实例化； Integer 实际是对象的引用，当 new 一个 Integer 时，实际上生成一个指针指向对象，而 int 则直接存储数值； 类似的还有：float Float，double Double，string String 等。 ⭐\t增强 for 循环\n1 2 3 4 5 6 7 8 9 10 11 12 13 // 普通for循环，利用下标 for(int i =0;i\u0026lt;arr.length;i++){} // 增强 for 循环 arr.for // 又叫做 for each 语句 for(int a:arr){} // for(int value : arr) 即：遍历 arr 数组，每次遍历的整型用 i 这个变量去接收。 for(int value:arr){} // 相当于： int value = 0; //用于接收arr数组中的某一个对象 for(int j = 0;j \u0026lt; arr.length;j++){ value = arr[j]; } 内部比较器 Comparable 接口 JDK 提供了 Comparable 和 Comparator 两个接口，都可以用于定义集合元素的排序规则。 如果程序员想定义自己的排序方式，一种简单的方法就是让加入 TreeSet 集合中的对象所属的类实现 Comparable 接口，通过实现 compareTo(Object o) 方法，达到排序的目的。\n假设有这样的需求，学生对象有两个属性，分别是学号和姓名。希望将这些学生对象加入 TreeSet 集合后，按照学号从小到大进行排序，如果学号相同再按照姓名自然排序。来看 Student 类需要实现 Comparable 接口。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * 学生类实现 Comparable 接口 */ public class Student implements Comparable { // 学生学号 int stuNum = -1; // 学生姓名 String stuName = \u0026#34;\u0026#34;; Student(String name, int num) { this.stuNum = num; this.stuName = name; } // 返回该对象的字符串表示，利于输出 public String toString() { return \u0026#34;学号为：\u0026#34; + stuNum + \u0026#34; 的学生，姓名为：\u0026#34; + stuName; } // 实现 Comparable 的 compareTo() 方法 public int compareTo(Object o) { Student input = (Student) o; // 此学生对象的学号和指定学生对象的学号比较 // 此学生对象学号若大则 res 为 1，若小则 res 为 -1，相同的话 res = 0 int res = stuNum \u0026gt; input.stuNum ? 1 : (stuNum == input.stuNum ? 0 : -1); // 若学号相同，则按照 String 类自然排序比较学生姓名 // 因为 String 类实现了 Comparable 接口 if (res == 0) { res = stuName.compareTo(input.stuName); } return res; // 返回值为 -1，表示左边的数比右边的数小，左右的数不进行交换。 // 返回值为 0，表示左边的数等于右边的数，左右的数不进行交换。 // 返回值为 1，表示左边的数比右边的数大，左右的数进行交换。 } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import java.util.Set; import java.util.TreeSet; /** * 测试类 */ class TestComparable { public static void main(String[] args) { //用有序的 TreeSet 存储学生对象 Set stuTS = new TreeSet(); stuTS.add(new Student(\u0026#34;王云\u0026#34;, 1)); stuTS.add(new Student(\u0026#34;南天华\u0026#34;, 3)); stuTS.add(new Student(\u0026#34;刘静涛\u0026#34;, 2)); stuTS.add(new Student(\u0026#34;张平\u0026#34;, 3)); //循环输出 for(Object stu : stuTS) System.out.println(stu); } } Iterator 迭代器 Iterator 接口的使用 前面学习的 Collection 接口、Set 接口（无索引）和 List 接口，它们的实现类 都没有提供遍历集合元素的方法。\nIterator 接口为遍历集合而生，是 Java 语言解决集合遍历的一个工具。\niterator() 方法定义在 Collection 接口中，因此所有单值集合的实现类，都可以通过 iterator() 方法实现遍历。 iterator() 方法返回值是 Iterator 对象，通过 Iterator 接口的 hasNext() 和 next() 方法即可实现对集合元素的遍历。\n下面是 Iterator 接口的三个方法：\n1 boolean hasNext() 判断是否存在下一个可访问的数据元素。\n1 Object next() 返回要访问的下一个数据元素，通常和 hasNext() 在一起使用。\n1 void remove() 从迭代器指向的 Collection 集合中移除迭代器返回的上一个数据元素。\niterator 使用案例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /** * 自定义车辆信息类 */ public class Vehicle { private String name; private int oil; public Vehicle() { } public Vehicle(String name, int oil) { this.name = name; this.oil = oil; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getOil() { return oil; } public void setOil(int oil) { this.oil = oil; } } //轿车类 class Car extends Vehicle{ //品牌 private String brand = \u0026#34;红旗\u0026#34;; //构造方法，指定车名和品牌 public Car(String name, String brand) { super(name, 20); this.brand = brand; } //获取品牌 public String getBrand() { return brand; } } //卡车类 class Truck extends Vehicle{ // 吨位 private String load = \u0026#34;10吨\u0026#34;; //构造方法，指定车名和品牌 public Truck(String name, String load) { super(name, 20); this.load = load; } //获取吨位 public String getLoad() { return load; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import java.util.HashSet; import java.util.Iterator; import java.util.Set; /** * 使用迭代器遍历集合数据 */ public class TestIterator { public static void main(String[] args) { // 创建 HashSet 集合，用于存放车辆 Set\u0026lt;Vehicle\u0026gt; vehSet = new HashSet\u0026lt;\u0026gt;(); // 创建两个轿车对象、两个卡车对象，并加入 HashSet 集合中 Vehicle c1 = new Car(\u0026#34;战神\u0026#34;, \u0026#34;长城\u0026#34;); Vehicle c2 = new Car(\u0026#34;跑得快\u0026#34;, \u0026#34;红旗\u0026#34;); Vehicle t1 = new Truck(\u0026#34;大力士\u0026#34;, \u0026#34;5吨\u0026#34;); Vehicle t2 = new Truck(\u0026#34;大力士二代\u0026#34;, \u0026#34;10吨\u0026#34;); vehSet.add(c1); vehSet.add(c2); vehSet.add(t1); vehSet.add(t2); // 使用迭代器循环输出 Iterator\u0026lt;Vehicle\u0026gt; it = vehSet.iterator(); System.out.println(\u0026#34;*** 显示集合中元素信息 ***\u0026#34;); while (it.hasNext()) { Vehicle vehicle = it.next();\t// 判断集合是否存在下一个元素 if (vehicle instanceof Car) {\t// 获取集合元素 Car car = (Car) vehicle; //调用 Car 类的特有方法 getBrand() System.out.println(\u0026#34;该车是轿车，其品牌为：\u0026#34; + car.getBrand()); } else { Truck truck = (Truck) vehicle; //调用 Truck 类的特有方法 getLoad() System.out.println(\u0026#34;该车是卡车，其吨位为：\u0026#34; + truck.getLoad()); } System.out.println(\u0026#34;车辆名称：\u0026#34; + vehicle.getName()); // 集合元素分隔显式 System.out.println(\u0026#34;--------------------------\u0026#34;); } } } 使用 Iterator 显示数据信息 我们已经学习到，Iterator 迭代器中有 hashNext()、next()、remove() 方法，迭代器的使用方法是：\n1 Iterator 迭代器名 = 集合名.iterator(); 练习：创建一个 HashSet 集合，只允许添加 String 类型的元素，向该集合中添加 5 个元素，使用迭代器将该集合内的元素个数删减至只有 2 个。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package com.company.collection.Integer; import java.util.HashSet; import java.util.Iterator; import java.util.Set; public class Demo3 { public static void main(String[] args) { Set\u0026lt;String\u0026gt; TT = new HashSet\u0026lt;String\u0026gt;(); TT.add(\u0026#34;aaa\u0026#34;); TT.add(\u0026#34;bbb\u0026#34;); TT.add(\u0026#34;ccc\u0026#34;); TT.add(\u0026#34;ddd\u0026#34;); TT.add(\u0026#34;eee\u0026#34;); TT.add(\u0026#34;fff\u0026#34;); Iterator\u0026lt;String\u0026gt; it = TT.iterator(); while (it.hasNext() \u0026amp;\u0026amp; TT.size() \u0026gt; 2){ it.next(); it.remove(); } System.out.println(TT); } } 练习：键盘录入一个长度为 10 的 int 类型的数组，使用 TreeSet 和 Iterator 将数组中的数从小到大排序，并打印输出。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package com.company.collection.Integer; import java.util.Iterator; import java.util.Scanner; import java.util.Set; import java.util.TreeSet; public class Demo4 { public static void main(String[] args) { // 创建一个 TreeSet 集合，规定里面的元素必须是整数 Set\u0026lt;Integer\u0026gt; treeSet = new TreeSet\u0026lt;Integer\u0026gt;(); int[] arr = new int[10]; Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; arr.length; i++) { System.out.print(\u0026#34;请输入第\u0026#34; + (i + 1) + \u0026#34;个数字：\u0026#34;); arr[i] = sc.nextInt(); } // int[] a = {12, 45, 23, 86, 100, 78, 546, 1, 45, 99, 136, 23}; for (int i = 0; i \u0026lt; arr.length; i++) { treeSet.add(arr[i]); } Iterator\u0026lt;Integer\u0026gt; it = treeSet.iterator(); //\t遍历 TreeSet 集合 while (it.hasNext()) { System.out.print(it.next() + \u0026#34; \u0026#34;); } } } List 接口 List简介 List 是 Collection 接口的子接口，List 中的元素是 有序 的，有索引 的，而且可以重复。List 集合中的数据元素都对应一个整数形式的序号索引，记录其在集合中的位置，可以根据此序号存取元素。JDK 中常用的 List 实现类是 ArrayList 和 LinkedList。\nList 接口继承自 Collection 接口，除了拥有 Collection 接口所拥有的方法外，还拥有下列方法：\n1 2 3 4 5 6 7 8 9 10 11 void add(int index,Object o) List myList = new ArrayList(); myList.add(\u0026#34;aaa\u0026#34;); myList.add(\u0026#34;bbb\u0026#34;); myList.add(\u0026#34;ccc\u0026#34;); System.out.println(myList); myList.add(1,\u0026#34;---\u0026#34;); System.out.println(myList); 在集合的指定 index 位置处，插入指定的 o 元素，如果没有写 index，则默认添加在末尾。\n1 2 3 Object get(int index) System.out.println(myList.get(2)); 返回集合中 index 位置的数据元素。\n1 2 3 int indexOf(Object o) System.out.println(myList.indexOf(\u0026#34;---\u0026#34;)); 返回此集合中第一次出现的指定 o 元素的索引，如果此集合不包含 o 元素，则返回-1。\n1 2 3 int lastIndexOf(Object o) System.out.println(myList.lastIndexOf(\u0026#34;bbb\u0026#34;)); 返回此集合中最后出现的指定 o 元素的索引，如果此集合不包含 o 元素，则返回-1。\n1 2 3 4 5 6 7 Object remove(int index) myList.remove(\u0026#34;ccc\u0026#34;); myList.remove(3); Integer i = Integer.valueOf(1); myList.remove(i); 移除集合中 index 位置的数据元素，返回被删除的元素。\n注意：此处有两个 remove，一个是通过索引号删除元素，另一个是通过元素本身删除元素，那么，如果 List 集合中有元素 1，又有索引 1，此时执行 myList.remove(1); 程序会怎样运行？\n1 2 3 4 5 6 7 8 9 List myList = new ArrayList(); myList.add(\u0026#34;aaa\u0026#34;); myList.add(1); System.out.println(myList); // List 集合中有元素 1，又有索引 1 System.out.println(myList.remove(1)); System.out.println(myList); 在调用方法时，如果方法出现重载现象，优先调用实参和形参类型一致的那个方法，而 1 默认是 int 数据类型，如果是调用 remove(Object o) 方法，还需要把 1 转换为 Integer 类型才能调用。\n1 2 3 Object set(int index,Object o) myList.set(1,\u0026#34;===\u0026#34;); 用指定的 o 元素替换集合中 index 位置的数据元素，返回被修改的元素。\nArrayList 底层原理 ArrayList 实现了 List 接口，其底层采用的数据结构是数组。另一个 List 接口的实现类是 LinkedList，它在存储方式上采用链表进行链式存储。\n根据数据结构的知识可知，数组（顺序表）在插入或删除数据元素时，需要批量移动数据元素，故性能较差；但在根据索引获取数据元素时，因为数组是连续存储的，所以在遍历元素或随机访问元素时效率高。\n那么本实验需要学习的 ArrayList 实现类的底层就是数组，因此 ArrayList 实现类更加适合根据索引访问元素的操作。\n1 2 3 4 5 6 7 8 9 10 ArrayList\u0026lt;String\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); list1.add(\u0026#34;aaa\u0026#34;); list1.add(\u0026#34;bbb\u0026#34;); list1.add(\u0026#34;ccc\u0026#34;); System.out.println(list1); // ArrayList 的 addAll() 方法，添加所有元素 ArrayList\u0026lt;String\u0026gt; list2 = new ArrayList\u0026lt;\u0026gt;(); list2.addAll(list1); System.out.println(list2); ArrayList 集合的扩容机制\n利用空参创建集合，在底层创建一个 默认长度为 0 的数组。注意！没有存入元素的时候，数组长度为0。\n添加第一个元素时，底层会创建一个 新的长度为10 的数组。\n存满时，数组 扩容至 1.5 倍。\n如果一次添加多个元素，即使进行 1.5 倍扩容后也存储不下的话，则新创建数组的长度 以实际需求为准。\nArrayList 的使用 假设车辆管理有如下需求：\n用户可以按照车辆入库的顺序查阅车辆信息。\n所有车辆有连续的编号，当用户输入车辆的编号后系统显示车辆完整信息。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /** * 自定义车辆信息类 */ public class Vehicle { private String name; private int oil; public Vehicle() { } public Vehicle(String name, int oil) { this.name = name; this.oil = oil; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getOil() { return oil; } public void setOil(int oil) { this.oil = oil; } } 创建 ArrayList 集合，存放车辆信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 import java.util.ArrayList; import java.util.List; import java.util.Scanner; /** * ArrayList 类的基本使用 */ public class TestArrayList{ public static void main(String[] args) { Scanner input = new Scanner(System.in); // 创建 ArrayList 集合，用于存放车辆 List vehAL = new ArrayList(); Vehicle c1 = new Car(\u0026#34;战神\u0026#34;,\u0026#34;长城\u0026#34;); Vehicle c2 = new Car(\u0026#34;跑得快\u0026#34;,\u0026#34;红旗\u0026#34;); Vehicle t1 = new Truck(\u0026#34;大力士\u0026#34;,\u0026#34;5吨\u0026#34;); Vehicle t2 = new Truck(\u0026#34;大力士二代\u0026#34;,\u0026#34;10吨\u0026#34;); // 将 c1 添加到 vehAL 集合的末尾 vehAL.add(c1); vehAL.add(c2); vehAL.add(t1); vehAL.add(t2); System.out.println(\u0026#34;*** 显示全部车辆 ***\u0026#34;); // 用于显示序号 int num = 1; // 增强for循环遍历 for(int a:arr){} for(Object obj:vehAL){ if(obj instanceof Car) { // 判断其左边对象是否为其右边类的实例 Car car = (Car)obj; System.out.println(num + \u0026#34; 该车是轿车，其车名为：\u0026#34; + car.getName()); }else{ Truck truck = (Truck)obj; System.out.println(num + \u0026#34; 该车是卡车，其车名为：\u0026#34; + truck.getName()); } num++; } System.out.print(\u0026#34;请输入要显示车名的车辆编号：\u0026#34;); String name = ((Vehicle)vehAL.get(input.nextInt()-1)).getName(); System.out.println(\u0026#34;车辆名称为：\u0026#34;+name); } } //轿车类 class Car extends Vehicle{ //品牌 private String brand = \u0026#34;红旗\u0026#34;; //构造方法，指定车名和品牌 public Car(String name, String brand) { super(name, 20); this.brand = brand; } //获取品牌 public String getBrand() { return brand; } } //卡车类 class Truck extends Vehicle{ // 吨位 private String load = \u0026#34;10吨\u0026#34;; //构造方法，指定车名和品牌 public Truck(String name, String load) { super(name, 20); this.load = load; } //获取吨位 public String getLoad() { return load; } } 练习：创建一个 ArrayList 集合，用来存储 Teacher 对象，其中，Teacher 对象的属性至少包含编号 id，姓名 name，性别 gender，创建5个实例化对象并将其添加到集合中，使用增强 for 循环遍历数组，分别输出每个老师的详细信息。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 package com.company.collection; import java.util.ArrayList; import java.util.List; public class ListDemo2 { public static void main(String[] args) { List\u0026lt;Teacher\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); Teacher t1 = new Teacher(1, \u0026#34;张三\u0026#34;, \u0026#34;男\u0026#34;); Teacher t2 = new Teacher(2, \u0026#34;李四\u0026#34;, \u0026#34;男\u0026#34;); Teacher t3 = new Teacher(3, \u0026#34;王五\u0026#34;, \u0026#34;女\u0026#34;); Teacher t4 = new Teacher(4, \u0026#34;赵六\u0026#34;, \u0026#34;男\u0026#34;); l1.add(t1); l1.add(t2); l1.add(t3); l1.add(0, t4); System.out.println(l1); for (Teacher teacher : l1) { if (teacher.getGender().equals(\u0026#34;男\u0026#34;)) { System.out.println(\u0026#34;男老师：\u0026#34; + teacher.getName() + \u0026#34;，编号为：\u0026#34; + teacher.getId()); } else { System.out.println(\u0026#34;女老师：\u0026#34; + teacher.getName() + \u0026#34;，编号为：\u0026#34; + teacher.getId()); } } } } class Teacher { private int id; private String name; private String gender; // toSting 方法 // get set 方法 // 构造函数 空参 全参 public Teacher() { } public Teacher(int id, String name, String gender) { this.id = id; this.name = name; this.gender = gender; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getGender() { return gender; } public void setGender(String gender) { this.gender = gender; } public String toString() { return \u0026#34;Teacher{id = \u0026#34; + id + \u0026#34;, name = \u0026#34; + name + \u0026#34;, gender = \u0026#34; + gender + \u0026#34;}\u0026#34;; } } class Man extends Teacher { private String car; public Man() { } public Man(String car) { this.car = car; } /** * 获取 * * @return car */ public String getCar() { return car; } /** * 设置 * * @param car */ public void setCar(String car) { this.car = car; } public String toString() { return \u0026#34;Man{car = \u0026#34; + car + \u0026#34;}\u0026#34;; } } class Femal extends Teacher { private String skill; public Femal() { } public Femal(String skill) { this.skill = skill; } /** * 获取 * * @return skill */ public String getSkill() { return skill; } /** * 设置 * * @param skill */ public void setSkill(String skill) { this.skill = skill; } public String toString() { return \u0026#34;Femal{skill = \u0026#34; + skill + \u0026#34;}\u0026#34;; } } LinkedList 与 Comparator 组合 本实验将学习 LinkedList 与 Comparator 结合使用。LinkedList，它在存储方式上采用链表进行链式存储；而 Comparator 是外部比较器。\nLinkedList 的底层是链表。LinkedList 和 ArrayList 在应用层面类似，只是底层存储结构上的差异导致了二者对于不同操作，存在性能上的差异。这其实就是顺序表和链表之间的差异。一般而言，对于 “索引访问” 较多的集合操作建议使用 ArrayList 实现类，而对于 “增删” 较多的集合操作建议使用 LinkedList 实现类。\nLinkedList 实现类除了拥有 ArrayList 实现类提供的方法外，还增加了如下一些方法：\n1 void addFirst(Object o) 将指定数据元素插入此集合的开头。\n1 void addLast(Object o) 将指定数据元素插入此集合的结尾。\n1 Object getFirst() 返回此集合的第一个数据元素。\n1 Object getLast() 返回此集合的最后一个数据元素。\n1 Object removeFirst() 移除并返回此集合的第一个数据元素。\n1 Object removeLast() 移除并返回此集合的最后一个数据元素。\nComparator 可以理解为一个专用的比较器，当集合中的对象不支持自比较或者自比较的功能不能满足程序员的需求时，就可以写一个实现 Comparator 接口的比较器来完成两个对象之间的比较，从而实现按比较器规则进行排序的功能。\n例如，要比较的对象是 JDK 中内置的某个类，而这个类又 没有实现 Comparable 接口，因此我们是 无法直接修改 JDK 内置类的源码 的，因此就 不能通过重写 compareTo(Object o) 方法来定义排序规则 了，而应该 使用 Comparator 接口实现比较器功能。\n接下来，在外部定义一个姓名比较器和一个学号比较器，然后在使用 Collections 工具类的 sort(List list, Comparator c) 方法时选择使用其中一种外部比较器，对集合里的学生信息按姓名、学号分别排序输出。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 import java.util.Collections; import java.util.Comparator; import java.util.LinkedList; /** * LinkedList 与 Comparator 结合使用 */ public class TestLinkedList{ public static void main(String[] args){ //用LinkedList存储学生对象 LinkedList stuLL = new LinkedList(); stuLL.add(new Student(\u0026#34;王云\u0026#34;,1)); stuLL.add(new Student(\u0026#34;南天华\u0026#34;,3)); stuLL.add(new Student(\u0026#34;刘静涛\u0026#34;,2)); //使用sort方法，按姓名比较器进行排序 Collections.sort(stuLL,new NameComparator()); System.out.println(\u0026#34;*** 按学生姓名顺序输出学生信息 ***\u0026#34;); for (Object object : stuLL) { System.out.println(object); } //使用sort方法，按学号比较器进行排序 Collections.sort(stuLL,new NumComparator()); System.out.println(\u0026#34;*** 按学生学号顺序输出学生信息 ***\u0026#34;); for (Object object : stuLL) { System.out.println(object); } } } // 定义学生对象，未实现Comparable接口 class Student{ int stuNum = -1; String stuName = \u0026#34;\u0026#34;; Student(String name, int num) { this.stuNum = num; this.stuName = name; } @Override public String toString() { return \u0026#34;学号为：\u0026#34; + stuNum + \u0026#34; 的学生，姓名为：\u0026#34; + stuName; } } //定义一个姓名比较器 class NameComparator implements Comparator { //实现Comparator接口的compare()方法 public int compare(Object op1, Object op2) { Student eOp1 = (Student)op1; Student eOp2 = (Student)op2; //通过调用String类的compareTo()方法进行比较 return eOp1.stuName.compareTo(eOp2.stuName); } } //定义一个学号比较器 class NumComparator implements Comparator { //实现Comparator接口的compare()方法 public int compare(Object op1, Object op2) { Student eOp1 = (Student)op1; Student eOp2 = (Student)op2; return eOp1.stuNum - eOp2.stuNum; } } ** \u0026lt;font color=\u0026#39;red\u0026#39;\u0026gt;\\\\\\\u0026lt;/font\u0026gt; ** 集合的遍历方式行 普通 for 循环 1 2 3 4 5 6 7 8 9 10 List\u0026lt;Teacher\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); Teacher[] arr = new Teacher[l1.size()]; for (int i = 0; i \u0026lt; l1.size(); i++) { arr[i] = l1.get(i); } for (int i = 0; i \u0026lt; l1.size(); i++) { System.out.println(arr[i]); } 增强 for 循环 1 2 3 4 5 List\u0026lt;Teacher\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); for (Teacher teacher : l1) { System.out.println(teacher); } 迭代器 iterator 1 2 3 4 5 6 7 List\u0026lt;Teacher\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); Iterator it = l1.iterator(); while (it.hasNext()) { it.next(); it.remove(); } lambda 表达式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 List\u0026lt;Teacher\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); // 调用 forEach 方法，传递一个 Consumer 接口的实现类对象 l1.forEach(new Consumer\u0026lt;Teacher\u0026gt;() { @Override public void accept(Teacher t) { System.out.println(t); } }); // 删除 new Consumer ~ accept，改用 -\u0026gt; 表示 lambda 特殊格式 l1.forEach((Teacher t) -\u0026gt;{ System.out.println(t); } ); // 省略数据类型，形参只有一个，省略()，方法体只有一行，省略{;} l1.forEach( t -\u0026gt; System.out.println(t)); // 将 lambda 替换为方法引用 l1.forEach(System.out::println); 泛型 泛型的定义 泛型：是 JDK5 引入的特性，可以在编译阶段约束操作的数据类型，并进行检查。\n泛型的格式：\u0026lt;数据类型\u0026gt;\n1 集合\u0026lt;数据类型\u0026gt; 引用名 = new 集合实现类\u0026lt;数据类型\u0026gt; (); ⭐ 注意：使用泛型约束的数据类型必须是 对象类型（引用数据类型），而不能是基本数据类型。\n1 2 3 4 5 6 7 8 9 10 ArrayList\u0026lt;String\u0026gt; list1 = new ArrayList\u0026lt;\u0026gt;(); list1.add(\u0026#34;aaa\u0026#34;); list1.add(\u0026#34;bbb\u0026#34;); list1.add(\u0026#34;ccc\u0026#34;); // 如果我想存整数，需要将 String 改为 Integer ArrayList\u0026lt;Integer\u0026gt; list2 = new ArrayList\u0026lt;\u0026gt;(); list2.add(111); list2.add(222); list2.add(333); 没有范式的时候，集合如何存储数据？\n1 2 3 4 5 6 7 8 9 10 11 12 ArrayList list = new ArrayList(); list.add(123); list.add(\u0026#34;aaa\u0026#34;); list.add(new StuTest(\u0026#34;张三\u0026#34;,18)); Iterator it = list.iterator(); while (it.hasNext()){ // 由于没有写泛型，所有对象被提升为Object类型，此时可以往集合中添加任意的数据类型 // 而Object类型在获取时是不能获取子类的特有行为的 Object obj = it.next(); // ctrl + alt + v 自动生成左边 System.out.println(obj); } 泛型的基本使用 在之前使用集合的时候，装入集合的各种类型的元素都被当作 Object 对待，而非元素自身的类型。因此从集合中取出某个元素时，就需要进行类型转换，这种做法效率低下且容易出错。\n🤔 那么如何解决这个问题呢？——可以使用泛型。\n泛型是指在定义集合的同时也定义集合中元素的类型，需要 “\u0026lt; \u0026gt;” 进行指定，其语法形式如下：\n1 集合\u0026lt;数据类型\u0026gt; 引用名 = new 集合实现类\u0026lt;数据类型\u0026gt; (); 以下代码就限制了 List 集合中只能存放 String 类型的元素。\n1 List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;String\u0026gt;(); 在 JDK1.7 之后，= 右边 \u0026lt; \u0026gt; 中的的 String 等类型也可以省略，也可以写成以下的等价形式：\n1 List\u0026lt;String\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); 在定义集合的同时使用泛型，用 “\u0026lt; \u0026gt;” 进行指定集合中元素的类型后，再从集合中取出某个元素时，就不需要进行类型转换，不仅可以提高程序的效率，也让程序更加清晰明了，易于理解。\nMap 接口 Map 接口，用于保存具有映射关系的键值对数据。Map 中的键无序，无索引，不重复。\nMap\u0026lt;K,V\u0026gt; 接口中的 key 和 value 可以是任何引用类型的数据，key 不允许重复，原因和 HashSet 一样，value 可以重复，key 和 value 都可以是 null 值。\n需要注意的是，key 为 null 只能有一个，value 为 null 可以多个，它们之间存在单向一对一关系，也就是说 通过指定存在的 key 一定找到对应的 value 值。\nMap 接口的常用方法如下：\n1 2 3 4 5 6 7 8 9 10 Object put(Object key,Object value) Map\u0026lt;String,Integer\u0026gt; m = new HashMap\u0026lt;\u0026gt;(); m.put(\u0026#34;张三\u0026#34;,19); m.put(\u0026#34;李四\u0026#34;,19); m.put(\u0026#34;张三\u0026#34;,22); System.out.println(m); m.put(\u0026#34;张三\u0026#34;,19); System.out.println(m); 将指定键值对（key 和 value）添加到 Map 集合中，如果此 Map 集合以前包含一个该键 key 的键值对，则用参数 key 和 value 替换旧值。\n1 2 3 Object get(Object key) System.out.println(m.get(\u0026#34;张三\u0026#34;)); 返回指定键 key 所对应的值，如果此 Map 集合中不包含该键 key，则返回 null。\n1 2 3 Object remove(Object key) System.out.println(m.remove(\u0026#34;王五\u0026#34;)); 如果存在指定键 key 的键值对，则将该键值对从此 Map 集合中移除。\n1 2 3 Set keySet() System.out.println(m.keySet()); 返回此 Map 集合中包含的键的 Set 集合。\n1 2 3 Collection values() System.out.println(m.values()); 返回此 Map 集合中包含的值的 Collection 集合。\n1 2 3 boolean containsKey(Object key) System.out.println(m.containsKey(\u0026#34;老王\u0026#34;)); 如果此 Map 集合包含指定键 key 的键值对，则返回 true。\n1 2 3 boolean containsValue(Object value) System.out.println(m.containsValue(19)); 如果此 Map 集合将一个或多个键映射到指定值，则返回 true。\n1 2 3 int size() System.out.println(m.size()); 返回此 Map 集合的键值对的个数。\nHashMap 类的使用 Map 接口常用的实现类有 HashMap 和 Hashtable 以及 TreeMap。\nHashMap 的特点\n① HashMap 是 Map 里面的一个实现类。\n② 没有额外需要学习的特有方法，直接使用 Map 里面的方法就可以了。\n③ 特点都是由键决定的：无序、不重复、无索引，与值无关。\n④ HashMap 跟 HashSet 底层原理是一模一样的，都是哈希表结构（数组，链表，红黑树）。\n⑤ 依赖 hashCode 方法和 equals 方法保证键的唯一\n⑥ 如果键存储的是自定义对象，需要重写 hashCode 和 equals 方法。\n⑦ 如果值存储的是自定义对象，不需要重写 hashCode 和 equals 方法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.util.HashMap; import java.util.Map; /** * HashMap 类的基本使用 */ public class TestHashMap { public static void main(String[] args) { // 使用 HashMap 存储域名和含义键值对的集合 Map\u0026lt;String, String\u0026gt; domains = new HashMap\u0026lt;\u0026gt;(); domains.put(\u0026#34;com\u0026#34;, \u0026#34;工商企业\u0026#34;); domains.put(\u0026#34;net\u0026#34;, \u0026#34;网络服务商\u0026#34;); domains.put(\u0026#34;org\u0026#34;, \u0026#34;非营利组织\u0026#34;); domains.put(\u0026#34;edu\u0026#34;, \u0026#34;教研机构\u0026#34;); domains.put(\u0026#34;gov\u0026#34;, \u0026#34;政府部门\u0026#34;); // 通过键获取值 System.out.println(\u0026#34;edu国际域名对应的含义为：\u0026#34; + domains.get(\u0026#34;edu\u0026#34;)); // 判断是否包含某个键 System.out.println(\u0026#34;domains键值对集合中是否包含gov：\u0026#34; + domains.containsKey(\u0026#34;gov\u0026#34;)); // 删除键值对 domains.remove(\u0026#34;gov\u0026#34;); System.out.println(\u0026#34;删除后集合中是否包含gov：\u0026#34; + domains.containsKey(\u0026#34;gov\u0026#34;)); // 输出全部键值对 System.out.println(domains); } } Map 映射数据的遍历 我们已经掌握了遍历 Collection 的通用方法—使用增强 for 或者迭代器 Iterator，并且知道 Collection 是单值形式元素的集合，而 Map 是键值对形式的元素集合。\n因此就能推测出，遍历 Map 的方法就是：先将 Map 集合或 Map 集合的部分元素 转换成单值集合 的形式，然后使用增强 for 或者迭代器 Iterator 遍历即可。\n简单来说就是： Map \u0026ndash;\u0026gt; 转换为单值集合 \u0026ndash;\u0026gt; 使用增强 for 或者迭代器 Iterator 遍历。\n我们可以将 Map 中的 key 全部提取出来，遍历 key，然后再根据 key 获取 value，如以下程序所示。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 package com.company.collection.map; import java.util.HashMap; import java.util.HashSet; import java.util.Objects; import java.util.Set; public class MapDemo1 { public static void main(String[] args) { HashMap\u0026lt;Student,String\u0026gt; hm = new HashMap\u0026lt;\u0026gt;(); Student s1 = new Student(\u0026#34;张三\u0026#34;,23); Student s2 = new Student(\u0026#34;李四\u0026#34;,23); Student s3 = new Student(\u0026#34;王五\u0026#34;,23); Student s4 = new Student(\u0026#34;赵六\u0026#34;,23); hm.put(s1,\u0026#34;长沙\u0026#34;); hm.put(s2,\u0026#34;上海\u0026#34;); hm.put(s3,\u0026#34;浙江\u0026#34;); hm.put(s4,\u0026#34;深圳\u0026#34;); // 遍历集合 // 使用 keySet 方法返回一个键的 Set 集合 Set\u0026lt;Student\u0026gt; k = hm.keySet(); // 增强 for 遍历该 Set 集合，得到每一个 student 对象 for (Student student : k) { // 通过 get 方法获取 student 对象对应的值 String v = hm.get(student); System.out.println(student + \u0026#34;=\u0026#34; + v); } System.out.println(\u0026#34;------------------------------------\u0026#34;); // 使用 Iterator 迭代器遍历 Iterator\u0026lt;Student\u0026gt; i = k.iterator(); while (i.hasNext()){ System.out.println(i.next() + \u0026#34;=\u0026#34; + hm.get(i.next())); } } } class Student{ private String name; private int age; public Student() { } public Student(String name, int age) { this.name = name; this.age = age; } /** * 获取 * @return name */ public String getName() { return name; } /** * 设置 * @param name */ public void setName(String name) { this.name = name; } /** * 获取 * @return age */ public int getAge() { return age; } /** * 设置 * @param age */ public void setAge(int age) { this.age = age; } public String toString() { return \u0026#34;Student{name = \u0026#34; + name + \u0026#34;, age = \u0026#34; + age + \u0026#34;}\u0026#34;; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Student student = (Student) o; return age == student.age \u0026amp;\u0026amp; Objects.equals(name, student.name); } @Override public int hashCode() { return Objects.hash(name, age); } } 另一种方式遍历：Map 中的每一组 key-value 对称为一个 entry 对象，即 entry = key + value。Map 接口提供了获取 Map 中全部 entry 对象的方法，因此就可以先获取全部的 entry 对象，然后再提取 entry 对象中的 key 和 value。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package com.company.collection.map; import java.util.HashMap; import java.util.Map; import java.util.Set; public class MapDemo2 { public static void main(String[] args) { Map\u0026lt;String, String\u0026gt; m = new HashMap\u0026lt;\u0026gt;(); m.put(\u0026#34;k1\u0026#34;, \u0026#34;v1\u0026#34;); m.put(\u0026#34;k2\u0026#34;, \u0026#34;v2\u0026#34;); m.put(\u0026#34;k3\u0026#34;, \u0026#34;v3\u0026#34;); //获取 Map 的全部 entry 对象 // m.entrySet + ctrl + alt + v Set\u0026lt;Map.Entry\u0026lt;String, String\u0026gt;\u0026gt; entries = m.entrySet(); // entries.for for (Map.Entry\u0026lt;String, String\u0026gt; entry : entries) { String k = entry.getKey(); String v = entry.getValue(); System.out.println(k + \u0026#34;,\u0026#34; + v); } } } 🏆 进阶：控制台录入一个字符串，程序经过统计最后输出这个字符串中每个字母出现的次数。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package com.company.collection.map; import java.util.HashMap; import java.util.Map; import java.util.Scanner; import java.util.Set; public class Statistics { static HashMap\u0026lt;Character, Integer\u0026gt; hashMap = new HashMap\u0026lt;\u0026gt;(); public Map statis(String str) { // 判断 map里面是否存过key=c的键 //有则 查找其value并且加1； 再存进map里面 for (char c : str.toCharArray()) { if (hashMap.containsKey(c)) { int value = hashMap.get(c); value++; hashMap.put(c, value); } else { hashMap.put(c, 1); } } return hashMap; } public static void main(String[] args) { Scanner input = new Scanner(System.in); System.out.println(\u0026#34;请输入一个字符串：\u0026#34;); String str = input.next(); //将非字母的字符去掉 String str1 = str.replaceAll(\u0026#34;[^a-zA-Z]\u0026#34;, \u0026#34;\u0026#34;); Statistics statistics = new Statistics(); statistics.statis(str1); Set\u0026lt;Character\u0026gt; set = hashMap.keySet(); for (char c : set) { int value = hashMap.get(c); System.out.println(c + \u0026#34;=\u0026#34; + value); } } } 工具类 Collections 工具类的使用 Collections 工具类，是集合对象的工具类，类中方法都是静态的，可以直接以 类名.静态方法() 的形式调用。\n该类提供了操作集合的工具方法，如排序、复制、反转和查找等方法，如下所示：\n1 boolean addAll(Collection\u0026lt;T\u0026gt; c, T ... elements) 向单列集合 c 中批量添加元素。\n1 2 3 4 5 6 void sort(List list) List\u0026lt;Integer\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); Collections.addAll(l1,11,22,33,44); System.out.println(l1); 根据数据元素的排序规则对 List 集合进行排序，其中的排序规则是通过内部比较器设置的。例如 List 中存放的是 obj 对象，那么排序规则就是根据 obj 所属类重写内部比较器 Comparable 中的 compareTo() 方法定义的。\n1 2 3 4 5 6 void sort(List list, Comparator c) Collections.addAll(l1,44,11,22,33); Collections.sort(l1); System.out.println(l1); 根据指定比较器中的规则对 List 集合进行排序。通过自定义 Comparator 比较器 c，可以实现按程序员定义的规则进行排序。\n1 2 3 4 void shuffle(List\u0026lt;?\u0026gt; list) Collections.shuffle(l1); System.out.println(l1); 对指定 List 集合进行随机排序。\n1 2 3 4 void reverse(List list) Collections.shuffle(l1); System.out.println(l1); 反转 List 集合中数据元素的顺序。\n1 2 3 4 Object max(Collection coll) Collections.reverse(l1); System.out.println(l1); 根据数据元素的自然顺序，返回给定 coll 集合中的最大元素。该方法的输入类型为 Collection 接口，而非 List 接口，因为求集合中最大元素不需要集合是有序的。\n1 Object min(Collection coll) 根据数据元素的自然顺序，返回给定 coll 集合的最小元素。\n1 int binarySearch(List list,Object o) 使用二分查找法查找 list 集合，以获得 o 数据元素的索引。如果此集合中不包含 o 元素，则返回-1。在进行此调用之前，必须根据 list 集合数据元素的自然顺序对集合进行升序排序（通过 sort(List list) 方法）。如果没有对 list 集合进行排序，则结果是不确定的。如果 list 集合中包含多个元素 “等于” 指定的 o 元素，则无法保证找到的是哪一个，这里说的 “等于” 是指通过 equals() 方法判断相等的元素。\n1 int indexOfSubList(List source,List target) 返回指定源集合 source 中第一次出现指定目标集合 target 的起始位置，换句话说，如果 target 是 source 的一个子集合，那么该方法返回 target 在 source 中第一次出现的位置。如果没有出现这种集合间的包含关系，则返回 -1。\n1 int lastIndexOfSubList(List source,List target) 返回指定源集合 source 中最后一次出现指定目标集合 target 的起始位置，如果没有出现这样的集合，则返回 -1。\n1 2 3 4 5 6 7 8 9 void copy(List dest,List src) List\u0026lt;Integer\u0026gt; l1 = new ArrayList\u0026lt;\u0026gt;(); Collections.addAll(l1, 11, 33, 22, 44); List\u0026lt;Integer\u0026gt; l2 = new ArrayList\u0026lt;\u0026gt;(); Collections.addAll(l1, 55, 77, 66, 88); Collections.copy(l1, l2); System.out.println(l1); 将所有数据元素从 src 集合复制到 dest 集合。\n1 2 3 4 void fill(List list,Object o) Collections.fill(l1, 0); System.out.println(l1); 使用 o 数据元素替换 list 集合中的所有数据元素。\n1 boolean replaceAll(List list,Object old,Object new) 使用一个指定的 new 元素替换 list 集合中出现的所有指定的 old 元素。\n1 2 3 4 void swap(List list,int i,int j) Collections.swap(l1,2,3); System.out.println(l1); 交换 List 集合中两个位置的元素。\nsort()、shuffle()、reverse()、max()、min()、binarySearch()、fill()、replaceAll()、swap() 等方法的使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import java.util.ArrayList; import java.util.Collections; import java.util.List; public class TestCollections { public static void main(String[] args) { List list = new ArrayList(); list.add(\u0026#34;w\u0026#34;); list.add(\u0026#34;o\u0026#34;); list.add(\u0026#34;r\u0026#34;); list.add(\u0026#34;l\u0026#34;); list.add(\u0026#34;d\u0026#34;); System.out.println(\u0026#34;排序前： \u0026#34; + list); System.out.println(\u0026#34;该集合中的最大值：\u0026#34; + Collections.max(list)); System.out.println(\u0026#34;该集合中的最小值：\u0026#34; + Collections.min(list)); Collections.sort(list); System.out.println(\u0026#34;sort排序后：\u0026#34; + list); //使用二分查找，查找前须保证被查找集合是自然有序排列的 System.out.println(\u0026#34;r在集合中的索引为：\u0026#34; + Collections.binarySearch(list, \u0026#34;r\u0026#34;)); Collections.shuffle(list); System.out.println(\u0026#34;再shuffle排序后：\u0026#34; + list); Collections.reverse(list); System.out.println(\u0026#34;再reverse排序后：\u0026#34; + list); Collections.swap(list, 1, 4); System.out.println(\u0026#34;索引为1、4的元素交换后：\u0026#34; + list); Collections.replaceAll(list, \u0026#34;w\u0026#34;, \u0026#34;d\u0026#34;); System.out.println(\u0026#34;把w都换成d后的结果：\u0026#34; + list); Collections.fill(list, \u0026#34;s\u0026#34;); System.out.println(\u0026#34;全部填充为s后的结果：\u0026#34; + list); } } Arrays 工具类的使用 Arrays 类是操作数组的工具类，和 Collections 工具类相似，Arrays 类主要有以下功能：\n对数组进行排序。 给数组赋值。 比较数组中元素的值是否相等。 进行二分查找。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import java.util.Arrays; /** * Arrays 工具类的使用 */ public class TestArrays { public static void output(int[] a) { for (int num : a) { System.out.print(num + \u0026#34; \u0026#34;); } System.out.println(); } public static void main(String[] args) { int[] array = new int[5]; //填充数组 Arrays.fill(array, 8); System.out.println(\u0026#34;填充数组Arrays.fill(array,8)：\u0026#34;); TestArrays.output(array); //将数组索引为1到4的元素赋值为6 Arrays.fill(array, 1, 4, 6); System.out.println(\u0026#34;将数组索引为1到4的元素赋值为6 Arrays.fill(array, 1, 4, 6)：\u0026#34;); TestArrays.output(array); int[] array1 = {12, 9, 21, 43, 15, 6, 19, 77, 18}; //对数组索引为3到7的元素进行排序 System.out.println(\u0026#34;排序前，数组的序列为：\u0026#34;); TestArrays.output(array1); Arrays.sort(array1, 3, 7); System.out.println(\u0026#34;对数组索引为3到7的元素进行排序：Arrays.sort(array1,3,7)：\u0026#34;); TestArrays.output(array1); //对数组进行自然排序 Arrays.sort(array1); System.out.println(\u0026#34;对数组进行自然排序 Arrays.sort(array1)：\u0026#34;); TestArrays.output(array1); //比较数组元素是否相等 int[] array2 = array1.clone(); System.out.println(\u0026#34;数组克隆后是否相等：Arrays.equals(array1, array2):\u0026#34; + Arrays.equals(array1, array2)); //使用二分查找法查找元素下标（数组必须是排好序的） System.out.println(\u0026#34;77在数组中的索引：Arrays.binarySearch(array1, 77)：\u0026#34; + Arrays.binarySearch(array1, 77)); } } 综合案例 某班有 40 个学生，学号为 180201-180240， 全部参加 Java 集合阶段检测，给出所有同学的成绩 （可随机产生，范围为 50-100），请编写程序将本班 各位同学成绩从高往低排序打印输出。\n注：成绩相同时学号较小的优先打印。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package entity; public class Student { public int id; String name; public int score; @Override public String toString() { return \u0026#34;学号：\u0026#34; + id + \u0026#34;, 姓名：\u0026#34; + name + \u0026#34;, 成绩：\u0026#34; + score; } public Student() { } public Student(int id, String name, int score) { this.id = id; this.name = name; this.score = score; } public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getScore() { return score; } public void setScore(int score) { this.score = score; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main; import entity.Student; import java.util.*; public class Results { public static List\u0026lt;Student\u0026gt; data = new ArrayList\u0026lt;Student\u0026gt;(); public void initData() { Random random = new Random(); int k; for (int i = 0; i \u0026lt; 40; i++) { k = i + 1; Student student = new Student(180201 + i, (\u0026#34;J\u0026#34; + k), (random.nextInt(50) + 50)); data.add(student); } } public void adjust() { Collections.sort(data, new GradeComparator()); } public void print() { for (int i = 0; i \u0026lt; data.size(); i++) { Student s = data.get(i); System.out.println(s); } } //定义一个成绩比较器 static class GradeComparator implements Comparator { @Override public int compare(Object o1, Object o2) { Student O1 = (Student) o1; Student O2 = (Student) o2; if(O2.score == O1.score){ return O1.id-O2.id; } return O2.score - O1.score; } public static void main(String[] args) { Results results = new Results(); results.initData(); results.adjust(); results.print(); } } } ","date":"2023-10-13T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9B%86%E5%90%88%E5%92%8C%E8%8C%83%E5%BC%8F/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9B%86%E5%90%88%E5%92%8C%E8%8C%83%E5%BC%8F/","title":"第六章 集合和范式"},{"content":"异常的概念及分类 什么是异常 异常就是程序出现了问题。\n以下程序哪里出了问题？\n1 2 int[] arr = {10, 20, 30}; System.out.println(arr[3]); 1 2 3 4 5 String teachers[] = {\u0026#34;张三\u0026#34;, \u0026#34;李四\u0026#34;, \u0026#34;王五\u0026#34;}; for (int i = 0; i \u0026lt; 4; i++) { System.out.println(teachers[i]); } System.out.println(\u0026#34;显示完毕！\u0026#34;); Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at com.company.expection.Demo1.main(Demo1.java:6)\n其中 ArrayIndexOutOfBoundsException 表示：数组索引越界异常。\n1 2 3 int a = 10; int b = 0; System.out.println(a / b); Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.ArithmeticException: / by zero at com.company.expection.Demo1 .main(Demo1.java:7)\n其中 ArithmeticException 表示：算数异常。\n异常结构 异常基类 所有异常都继承自 java.lang.Throwable 类\nThrowable 类有两个直接子类：Error 类和 Exception 类\n系统级错误 Error 是程序无法处理的错误，表示运行应用程序中较严重问题。\n大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM 出现的问题。\nVirtual MachineError - Java 虚拟机运行错误\nNoClassDefFoundError - 类定义错误\nOutOfMemoryError - 内存溢出错误\n异常 运行时异常\nNullPointerException - 空指针引用异常\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public String[] Arr = {\u0026#34;11\u0026#34;, \u0026#34;22\u0026#34;, null}; public static void main(String[] args) { try { Demo9 demo = new Demo9(); demo.test(0); demo.test(2); } catch (NullPointerException e) { System.out.println(\u0026#34;空指针异常\u0026#34;); } } public void test(int index) throws NullPointerException { System.out.println(\u0026#34;Arr[\u0026#34; + index + \u0026#34;]长度：\u0026#34; + Arr[index].length()); } ArithmeticException - 算术运算异常\n1 2 3 int a = 10; int b = 0; System.out.println(a / b); 编译时异常\nParseException - 数据格式转换异常\n1 2 3 4 String time = \u0026#34;2023年10月31日 08点30分33秒\u0026#34;; SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;yyyy年MM月dd日 HH点mm分ss秒\u0026#34;); Date date = sdf.parse(time); System.out.println(date); SQLException - 数据库操作异常\nFileNotFoundException - 文件找不到的异常\n1 2 FileInputStream fis = new FileInputStream(\u0026#34;a.txt\u0026#34;); fis.read(); TimeoutException - 执行超时异常\n编译时异常和运行时异常 编译时异常：\n提醒程序员检查本地信息，如果有问题就会出这个异常。\n在编译阶段，Java 不会运行代码，只会检查语法是否错误，或者做一些性能优化。\n如 int a = 2.2 ;\n运行时异常：\n代码出错导致程序出现的问题。\n异常的作用 异常可以用来作为查询 bug 的关键参考信息 1 2 Exception in thread \u0026#34;main\u0026#34; java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3 at com.company.exception.Demo8.main(Demo8.java:11) 异常可以做为方法内部的一个特殊返回值，以便于通知调用者底层的执行情况 1 2 3 4 5 6 7 8 9 10 11 public static void main(String[] args){ try { int[] arr = {10, 20, 30}; System.out.println(arr[3]); }catch (Exception e){ System.out.println(\u0026#34;程序出现了异常！\u0026#34;); System.out.println(\u0026#34;异常名为：\u0026#34;+e); System.out.println(\u0026#34;异常提示信息为：\u0026#34;+e.getMessage()); System.out.println(\u0026#34;异常堆栈信息为：\u0026#34;); e.printStackTrace(); } 异常的捕获及异常处理 捕获异常 如果自己可以处理异常，使用 try {\u0026hellip;} catch (\u0026hellip;) {\u0026hellip;} finally 结构包裹可能有异常的代码\n与 if (\u0026hellip;) {\u0026hellip;} else if (\u0026hellip;) {\u0026hellip;} else {\u0026hellip;}结构类似，但使用异常处理比选择结构更方便\n如果代码正常，则正常执行，如果有异常，则进入catch\n1 2 3 4 5 6 7 8 9 try{ // 如果代码正常，执行这段代码 }catch (Exception1 e){ // 如果代码有异常1，执行这段代码 }catch (Exception2 e){ // 如果代码有异常2，执行这段代码 }finally { // 是否发生异常都会执行这段代码 } 断点调试，分析程序运行顺序\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class Demo1 { public static void main(String[] args) { try{ // 如果代码正常，执行这段代码 // 时间格式转换 String time = \u0026#34;2023年10月31日 08点26分34秒\u0026#34;; SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;yyyy年MM月dd日 HH点mm分ss秒\u0026#34;); Date date = sdf.parse(time); System.out.println(date); // 数学计算 int a = 10; int b = 0; System.out.println(a / b); }catch (ParseException e){ // 如果代码有异常1，执行这段代码 System.out.println(\u0026#34;转换异常\u0026#34;); }catch (ArithmeticException e){ // 如果代码有异常2，执行这段代码 System.out.println(\u0026#34;算数异常\u0026#34;); }catch (Exception e){ // 如果代码有其他异常，执行这段代码 System.out.println(\u0026#34;其他异常\u0026#34;); System.out.println(e); // 打印异常的堆栈信息 e.printStackTrace(); // 打印错误位置 e.getMessage(); }finally { // 是否发生异常都会执行这段代码 System.out.println(\u0026#34;默认执行\u0026#34;); } } } 如果 try 中代码发生异常，则不再执行 try 中异常后的代码，直接跳到 catch 中执行\n不管是否有异常都执行 finally，即使遇到 return，也执行 finally\n只有虚拟机关闭，才不执行 finally，System.exit(1);\n练习：使用 Scanner 声明两个 int 类型的变量，但在录入时故意输入其他类型，使用 try \u0026hellip; catch 语句捕获异常并输出异常名。\n抛出异常 如果自己无法处理，则使用 throws 关键字，将异常抛出给上一级处理\n使用 throws 关键字包裹可能出现异常的代码， 用来声明异常\n如果一个方法内部调用其他方法，其他方法抛出一个编译/运行时异常，该方法不想处理，可以使用 throw 异常类，继续把异常往上抛 1 2 3 4 5 6 7 8 9 public static void main(String[] args) throws Exception{ test1(); } public static void test1() throws ParseException, ArithmeticException { // 向上抛出异常 String time = \u0026#34;2023年10月31日 08点26分34秒\u0026#34;; SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;yyyy年MM月dd日 HH点mm分ss秒\u0026#34;); Date date = sdf.parse(time); System.out.println(date); } 如果抛出的是 编译 时异常，必须在方法标签上，使用 throws 声明抛出什么类型异常\n如果抛出的是 运行 时异常，可以在方法标签上声明或者不声明\n如果异常类型，有父子关系，只需要写父类异常类型\nthrows后面可以接多个异常类，多个异常类使用逗号分隔\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package com.company.exception; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; import java.util.InputMismatchException; import java.util.Scanner; public class Demo2 { public static void main(String[] args) throws Exception { // 继续往上抛出异常(JVM) test1(); // 编译时异常(检查异常) try { test2(); } catch (ArithmeticException e) { System.out.println(\u0026#34;算数异常\u0026#34;); } try { test3(); } catch (InputMismatchException e) { System.out.println(\u0026#34;输入类型不匹配异常\u0026#34;); } } public static void test1() throws ParseException, ArithmeticException { // 向上抛出异常 String time = \u0026#34;2023年10月31日 08点26分34秒\u0026#34;; SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;yyyy年MM月dd日 HH点mm分ss秒\u0026#34;); Date date = sdf.parse(time); System.out.println(date); } public static void test2() throws ArithmeticException { // 向上抛出异常 int a = 10; int b = 0; System.out.println(a / b); } public static void test3() throws InputMismatchException { Scanner sc = new Scanner(System.in); int num1 = 0; int num2 = 0; System.out.print(\u0026#34;请输入num1：\u0026#34;); num1 = sc.nextInt(); System.out.print(\u0026#34;请输入num2：\u0026#34;); num2 = sc.nextInt(); System.out.println(\u0026#34;num1+num2的值为:\u0026#34; + (num1 + num2)); } } 使用 throw 关键字，抛出自定义异常\njdk 中自带了很多类型的异常，但如果这些内置的异常仍然不能满足项目需求，就需要创建自定义异常\n如何自定义异常？\n任意异常都继承自 Exception，所以需要自定义一个类继承自 Exception 1 2 3 4 5 public class MyException extends Exception { // 继承自Exception public MyException(String message) { super(message);\t// 把异常信息传到父类里 } } 使用throw声明一个自定义异常，再使用 try\u0026hellip;catch 或 throws 处理\n// 键盘录入两个整数，a，b，如果 a+b \u0026gt; 30 且 a+b \u0026lt; 100\n// 输出 运行成功，并输出 a 和 b 的值，\n// 自定义异常，如果出现异常，提示 取值范围错误\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public class Demo5 { public static void main(String[] args) { int age = -20; // 年龄不能小于等于0 if (age\u0026lt;=0){ try { // 首先声明一个异常，再使用 try...catch 或 throws 检查是否有异常 throw new MyException(\u0026#34;年龄不能小于等于0\u0026#34;); // throws NullPointerException }catch (MyException e){ e.printStackTrace(); // System.out.println(e.getMessage()); } } } } 常见的异常 RuntimeException NullPointerException —— 空指针引用异常\nArithmeticException —— 算术运算异常\nArrayIndexOutOfBoundsException —— 数组索引越界异常\nInputMismatchException —— 输入类型不匹配异常\nClassCastException —— 类转换异常\nIllegalArgumentException —— 非法参数异常\nOtherException ParseException —— 数据格式转换异常\nSQLException —— 数据库操作异常\nIOException —— 输入输出异常\nFileNotFoundException —— 文件找不到的异常\nTimeoutException —— 执行超时异常\nIllegalAccessException —— 访问权限异常\n练习 下列关于异常的描述，哪一项是错误的（ ）?\nA. 异常可以用 try {\u0026hellip;} catch (Exception e) { \u0026hellip; } 来捕获并进行处理。\nB. 异常的基类为 Throwable，所有异常都必须直接或者间接继承它。\nC. 如果某异常类继承自 RuntimeException，则该异常可以不显式的使用 “ try \u0026hellip; catch \u0026hellip; ” 或 throws 进行处理。\nD. 所有的异常，在语法上都必须用 throws 或者 try {\u0026hellip;} catch {\u0026hellip;} 处理。\n关于关于异常的含义，下列描述中最正确的一个是（ ）。\nA. 异常是程序编译错误。\nB. 异常是程序语法错误。\nC. 异常是程序自定义的异常事件。\nD. 合理的异常处理可以分离程序中的正常逻辑代码和异常处理逻辑代码，便于代码的阅读和维护。\n下列关于异常的描述，哪一项是错误的（ ）?\nA. 异常的基类是 Exception。\nB. 程序员通常不用处理 Error 类型的异常。\nC. 在使用 catch 捕获异常时，需要先捕获小范围异常，再捕获大范围异常。\nD. 对于可能发生的异常，可以使用 throws 来声明以提示调用者进行处理，或者使用 catch 捕获并建立异常处理的逻辑。\n以下哪个是检查异常（ ）？\nA. IndexOutOfBoundsException\nB. NullPointerException\nC. ClassCastException\nD. IOException\n下列（ ）异常表示向方法传递了一个不合法或不正确的参数。\nA. IllegalAccessException\nB. IllegalArgumentException\nC. ClassCastException\nD. InputMismatchException\n以下描述错误的是哪个？\nA. throw 表示方法内抛出某种异常对象。\nB. throw 抛出的异常对象是非运行时对象，则需要在方法申明时加上该异常的抛出，即需要加上 throws 语句或者在方法体内用 try…catch… 处理该异常，否则编译报错。\nC. 执行到 throw 语句则后面的语句块不再执行。\nD. 方法的定义上使用 throws 表示这个方法可能抛出某种异常，方法的调用者不必进行异常处理。\n以下程序的执行结果是什么?\nA. 程序出现异常，屏幕提示 “数组下标越界”。\nB. 程序执行，显示数组中每个元素的值，最后显示 “数组下标越界”。\nC. 程序正常执行结束，屏幕上显示数组中每个元素的值。\nD. 程序编译出错。\n1 2 3 4 5 6 7 8 9 int[] myArray = new int[3]; try { for (int i = 0; i \u0026lt;= myArray.length; i++) { myArray[i] = i * 3; System.out.println(\u0026#34;myArray 数组的第\u0026#34; + i + \u0026#34;个元素的值是\u0026#34; + myArray[i]); } } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\u0026#34;数组下标越界\u0026#34;); } ","date":"2023-10-06T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%94%E7%AB%A0-java-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/","title":"第五章 JAVA 异常处理机制"},{"content":"面向对象的基本概念 万物皆对象，客观存在的事物都是对象，大到名胜古迹，小到剪刀、钟表、信封等，所有的一切都围绕对象进行，找对象、建对象，用对象等。\n面向对象编程和面向过程编程 Java 是一门纯 面向对象 的语言（Object Oriented Program，简称OOP），在面向对象的世界里，一切皆为对象。面向对象是解决问题的一种思想，主要依靠对象之间的交互完成一件事情。用面向对象的思想来设计程序，更符合人们对事物的认知，对于大型程序的设计、扩展以及维护都非常友好。\n面向过程（Procedure Oriented Programming）就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。\n面向过程编程 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再依次调用。面向过程编程性能高，适合跟硬件联系紧密的东西，如单片机。\n面向对象编程 面向对象就是把事务分解成一个个对象， 由对象之间分工合作。面向对象编程具有灵活、代码可复用、容易维护和开发的优点，更适合多人合作的大型软件项目。\n面向对象的特性：\n**1. 封装性：** **不需要知道运作原理，直接使用即可。** **2. 继承性：** **继承已有的功能和方法，且能够扩展新方法。** **3. 多态性：** **有多种功能。** 类和对象 类是描述某一对象的统称，对象是这个类的一个实例。 有类之后就能根据这个类来产生具体的对象。一类对象所具备的共同属性和行为（方法）都在类中定义。\n在 Java 中，必须先设计类，才能获得对象。\n类的定义 定义一个 Student 类，里面的成员变量有 name 名字、age 年龄、height 身高、id 学号、gender 性别等，定义一个成员方法 study，调用该方法时在控制台打印一条语句。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 package com.company.arr; public class Student { /* public 公共的 private 私有的 定义Student类的属性，成员变量 */ private String name; public int age; private double height; private int id; private char gender; // 定义 study 方法 public static void study(){ System.out.println(\u0026#34;学习\u0026#34;); } // 生成 javabean -\u0026gt; alt + insert 键 /* 1. 空参构造函数 2. 全参构造函数 3. getter 和 setter 4. toString 方法 */ public Student(String name, int age, double height, int id, char gender) { this.name = name; this.age = age; this.height = height; this.id = id; this.gender = gender; } public Student() { } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public double getHeight() { return height; } public void setHeight(double height) { this.height = height; } public int getId() { return id; } public void setId(int id) { this.id = id; } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } @Override public String toString() { return \u0026#34;Student{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, age=\u0026#34; + age + \u0026#34;, height=\u0026#34; + height + \u0026#34;, id=\u0026#34; + id + \u0026#34;, gender=\u0026#34; + gender + \u0026#39;}\u0026#39;; } } 通过 new 关键字获取对象，语法为：类名 对象名 = new 类名(); 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.company.arr; public class Pt2 { public static void main(String[] args) { Student s1 = new Student(\u0026#34;张洼\u0026#34;, 18, 175.6, 0001, \u0026#39;男\u0026#39;); System.out.println(s1); System.out.println(s1.getName() + \u0026#34;的年龄为：\u0026#34; + s1.age + \u0026#34;岁\u0026#34;); Student s2 = new Student(\u0026#34;陈琪\u0026#34;, 21, 169.2, 0002, \u0026#39;女\u0026#39;); System.out.println(s2); // s2.study(); Student.study(); } } Javabean 类 用来描述一类事物的类，叫做：Javabean 类，在 Javabean 类中是不写 main 方法的。\n编写 main 方法的类，叫做：测试类，我们可以在测试类中创建 Javabean 类的对象并进行赋值调用。\n定义类的注意事项 类名首字母建议大写，需要见名知意，驼峰模式。\n一个 Java 文件中可以定义多个 class 类，且只能有一个类是 public 修饰的，而且 public 修饰的类名必须 成为代码文件名。实际开发中建议还是一个文件定义一个class类。\n成员变量的完整定义格式是：修饰符 数据类型 变量名称 = 初始化值；， 一般无需指定初始化值，存在默认值。\n数据类型 默认值 byte、short、int、long 0 float、double 0.0 boolean flase 类、接口、数组、String null 面向对象详解 封装 对象代表什么，就得封装对应的数据，并提供数据对应的行为。\n封装的作用 ① sun 公司已经将大量的对象封装起来，我们可以根据自己需要调用相应的方法。\n1 2 3 4 String str = \u0026#34;hello world\u0026#34;; System.out.println(str.length()); System.out.println(Arrays.toString(str.getBytes())); System.out.println(new String(str.getBytes(), \u0026#34;GBK\u0026#34;)); ② 封装可以告诉我们，如何正确的设计对象的属性和方法。\nprivate关键字\n1. 是一个权限修饰符 2. 可以修饰成员（成员变量和成员方法） 3. 被 private 修饰的成员只能在本类中才能访问 对于每一个私有化的成员变量，都需要提供 set 和 get 方法，set 方法用于给成员变量赋值，get 方法用于对外提供成员变量的值。\n练习：创建一个朋友类，自己思考，朋友有哪些属性？哪些行为？将其添加到类中。\n局部变量和成员变量 什么是成员变量 成员变量就是类中，方法外的变量。\n成员变量没有上下顺序，不过我们一般将其写在类的最上方。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package com.company.object; public class People { // javabean 类 ， 不写 main 方法 public String name; public int age; public char gender; public double height; public People() { } public People(String name, int age, char gender, double height) { this.name = name; this.age = age; this.gender = gender; this.height = height; } public static void speak() { System.out.println(\u0026#34;你好！\u0026#34;); } public static void getSum(int a, int b) { System.out.println(\u0026#34;a + b = \u0026#34; + (a + b)); } } 其中，成员变量为 name，age，gender，height 。\n什么是局部变量 局部变量就是方法里的变量。\n1 2 3 4 5 6 7 8 9 10 11 package com.company.object; public class Demo2 { public static void main(String[] args) { int sum = 0; for (int i = 0; i \u0026lt; 10; i++) { sum += i; } System.out.println(sum); } } 其中，全局变量为 sum，局部变量为 i 。\n成员变量和局部变量的区别 区别 成员变量 局部变量 类中位置不同 类中，方法外 方法内、方法申明上 初始化值不同 有默认初始化值 没有，使用之前需要完成赋值 内存位置不同 堆内存的对象里 栈内存的方法里 生命周期不同 随对象的创建而存在，对象消失就消失 随方法的调用而存在，方法运行结束就消失 作用域 整个类中有效 当前方法中有效 方法申明上指方法形参，形参也是局部变量。\nthis 关键字 就近原则 以下代码输出的结果是？\n1 2 3 4 5 6 7 8 9 10 11 package com.company.object; public class Demo2 { int a = 10; a = 20; System.out.println(a); a = 30; a = 40; System.out.println(a); } } 在给成员变量 age 赋值时，通常在 public void setAge() 方法中，通过传入参数的方式传入我们想要赋予的值，根据 java \u0026ldquo;见名知意\u0026rdquo; 的命名规则，此时我们的形参应该为 int age，形参名与成员变量名一致的情况下，如何区分？\n1 2 3 4 5 6 7 8 9 package com.company.object; public class StuTest { private int age; public void setAge(int age){ age = age; } } this 的原理 this 的作用：区分局部变量和成员变量重名。\nthis 的本质：记录所在方法调用者的地址值。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.company.object; public class Demo2 { public static void main(String[] args) { StuTest s1 = new StuTest(20); s1.method();\t// 此时方法调用者为 s1，因此 this 记录 s1 的地址值，获取 s1 中的 age } } class StuTest { private int age; public StuTest(int age) { this.age = age; } public void method(){ int age = 18; System.out.println(age);\t// 没有 this 时，触发就近原则 System.out.println(this.age); } public void setAge(int age){ this.age = age;\t// 左边表示方法调用者的 age，右边表示就近的形参里的 age } } 构造方法 构造方法概述 构造方法，又叫构造函数、构造器，能够在创建对象的时候为成员变量进行初始化。在创建对象时，构造方法自动调用，每创建一次对象，都会调用一次构造方法。\n① public 类名(形参){...} ② 方法与类名必须完全一致。 ③ 没有返回值类型，不能有 void，不能有 return。 ④ 当我们没有写构造方法时，虚拟机会为我们自动生成一个空参的构造方法。 构造方法注意事项 ① 构造方法的定义\n▷ 如果没有定义构造方法，系统将给出一个默认的无参数构造方法。\n▷ 如果定义了构造方法，系统将不再提供默认的构造方法。\n② 构造方法的重载\n▷ 带参构造方法，和无参数构造方法，两者方法名相同，但是参数不同，这叫做构造方法的重载。\n③ 推荐的使用方式\n▷ 无论是否使用，都手动书写无参数构造方法，和带全部参数的构造方法。\n回合制格斗小游戏 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 package com.company.object.PKTest; import java.util.Random; public class Character { private String name; private int blood; private char gender; private String face; String[] boyfaces = {\u0026#34;风流俊雅\u0026#34;, \u0026#34;气宇轩昂\u0026#34;, \u0026#34;相貌英俊\u0026#34;, \u0026#34;五官端正\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;一塌糊涂\u0026#34;, \u0026#34;面目狰狞\u0026#34;}; String[] girlfaces = {\u0026#34;美奂绝伦\u0026#34;, \u0026#34;沉鱼落雁\u0026#34;, \u0026#34;婷婷玉立\u0026#34;, \u0026#34;身材娇好\u0026#34;, \u0026#34;相貌平平\u0026#34;, \u0026#34;相貌简陋\u0026#34;, \u0026#34;惨不忍睹\u0026#34;}; String[] attacks_desc = { \u0026#34;%s使出了一招【背心钉】，转到对方的身后，一掌向%s背心的灵台穴拍去。\u0026#34;, \u0026#34;%s使出了一招【游空探爪】，飞起身形自半空中变掌为抓锁向%s。\u0026#34;, \u0026#34;%s大喝一声，身形下伏，一招【劈雷坠地】，捶向%s双腿。\u0026#34;, \u0026#34;%s运气于掌，一瞬间掌心变得血红，一式【掌心雷】，推向%s。\u0026#34;, \u0026#34;%s阴手翻起阳手跟进，一招【没遮拦】，结结实实的捶向%s。\u0026#34;, \u0026#34;%s上步抢身，招中套招，一招【劈挂连环】，连环攻向%s。\u0026#34; }; String[] injureds_desc = { \u0026#34;结果%s退了半步，毫发无损\u0026#34;, \u0026#34;结果给%s造成一处瘀伤\u0026#34;, \u0026#34;结果一击命中，%s痛得弯下腰\u0026#34;, \u0026#34;结果%s痛苦地闷哼了一声，显然受了点内伤\u0026#34;, \u0026#34;结果%s摇摇晃晃，一跤摔倒在地\u0026#34;, \u0026#34;结果%s脸色一下变得惨白，连退了好几步\u0026#34;, \u0026#34;结果『轰』的一声，%s口中鲜血狂喷而出\u0026#34;, \u0026#34;结果%s一声惨叫，像滩软泥般塌了下去\u0026#34; }; public Character(String name, int blood, char gender) { this.name = name; this.blood = blood; this.gender = gender; setFace(gender); } public char getGender() { return gender; } public void setGender(char gender) { this.gender = gender; } public String getFace() { return face; } private void setFace(char gender) { Random r = new Random(); if (gender == \u0026#39;男\u0026#39;) { int index = r.nextInt(boyfaces.length); this.face = boyfaces[index]; } else if (gender == \u0026#39;女\u0026#39;) { int index = r.nextInt(girlfaces.length); this.face = girlfaces[index]; } else { this.face = \u0026#34;面目狰狞\u0026#34;; } } @Override public String toString() { return \u0026#34;Character{\u0026#34; + \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#34;, blood=\u0026#34; + blood + \u0026#34;, gender=\u0026#34; + gender + \u0026#34;, face=\u0026#39;\u0026#34; + face + \u0026#39;\\\u0026#39;\u0026#39; + \u0026#39;}\u0026#39;; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getBlood() { return blood; } public void setBlood(int blood) { this.blood = blood; } public Character() { } public Character(String name, int blood) { this.name = name; this.blood = blood; } // ---------------------------------------------- public void attack(Character character) { Random r = new Random(); // 攻击招式 int index = r.nextInt(attacks_desc.length); String skill = attacks_desc[index]; System.out.printf(skill, this.getName(), character.getName()); System.out.println(); // 伤害计算 int hurt = r.nextInt(20) + 1; // 剩余血量 int remainBlood = character.blood - hurt; remainBlood = Math.max(remainBlood, 0); // 更新血量 character.setBlood(remainBlood); // 受伤描述 if (remainBlood \u0026gt; 90) { System.out.printf(injureds_desc[0], character.getName()); } else if (remainBlood \u0026gt; 80) { System.out.printf(injureds_desc[1], character.getName()); } else if (remainBlood \u0026gt; 70) { System.out.printf(injureds_desc[2], character.getName()); } else if (remainBlood \u0026gt; 60) { System.out.printf(injureds_desc[3], character.getName()); } else if (remainBlood \u0026gt; 40) { System.out.printf(injureds_desc[4], character.getName()); } else if (remainBlood \u0026gt; 20) { System.out.printf(injureds_desc[5], character.getName()); } else if (remainBlood \u0026gt; 0) { System.out.printf(injureds_desc[6], character.getName()); } else { System.out.printf(injureds_desc[7], character.getName()); } System.out.println(); } public void showInfo() { // 角色信息 System.out.println(\u0026#34;姓名：\u0026#34; + getName() + \u0026#34;，血量：\u0026#34; + getBlood() + \u0026#34;，性别：\u0026#34; + getGender() + \u0026#34;，长相：\u0026#34; + getFace()); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package com.company.object.PKTest; public class MainTest { public static void main(String[] args) { Character c1 = new Character(\u0026#34;老王\u0026#34;, 100, \u0026#39;男\u0026#39;); Character c2 = new Character(\u0026#34;老李\u0026#34;, 86, \u0026#39;男\u0026#39;); c1.showInfo(); c2.showInfo(); System.out.println(\u0026#34;==================== 决斗开始 ====================\u0026#34;); while (true) { c1.attack(c2); if (c2.getBlood() == 0) { System.out.println(\u0026#34;================= \u0026#34; + c1.getName() + \u0026#34;K.O了!\u0026#34; + c2.getName() + \u0026#34;! =================\u0026#34;); break; } c2.attack(c1); if (c1.getBlood() == 0) { System.out.println(\u0026#34;================= \u0026#34; + c2.getName() + \u0026#34;K.O了\u0026#34; + c1.getName() + \u0026#34;! =================\u0026#34;); break; } } } } ","date":"2023-09-28T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/","title":"第四章 类和对象"},{"content":"一维数组的定义与使用 一维数组的声明和创建 什么是数组 数组是一种用于存储多个 相同类型 数据的存储模型。\n声明数组：\n数据类型 [ ] 数组名；\tint[ ] a\n数据类型 数组名[ ]；\tString a[ ]\n数据类型定义了数组内元素的数据类型，可以是基本数据类型或引用数据类型；\n数组名是自定义变量名，需满足标识符命名规则；\n声明数组时，不能在方括号中直接指定数组元素个数，如 int[3] a。\n注意：声明数组后，需要创建数组，并为数组分配存储空间。\n创建一维数组 使用 new 关键字创建数组并分配存储空间。\n在声明数组 int a[]; 后，使用 a = new int[5]; 语句为数组分配存储空间，即给出数组长度。\n1 2 3 4 5 6 7 8 int a[]; a = new int[10]; // 数据类型 数组名[] = new 数据类型[数组长度]; int b[] = new int[10]; // 数据类型[] 数组名 = new 数据类型[数组长度]; int[] c = new int[10]; 注意：java中的数组必须 初始化，然后才能使用。\n所谓初始化，就是为数组中的数组元素分配内存空间，并为每个数组赋值。\n一维数组的初始化 数组的初始化分为 静态初始化 以及 动态初始化。\n静态初始化：\n在创建数组的同时，为数组的元素赋初始值，由系统决定数组的长度。\n数组元素值一开始就已经给出。\n1 2 int[] arr1 = {1, 3, 5, 7, 9}; String[] arr2 = {\u0026#34;Lily\u0026#34;, \u0026#34;Johnny\u0026#34;, \u0026#34;Peter\u0026#34;, \u0026#34;Lisa\u0026#34;}; 动态初始化：\n在创建数组后，初始化时只指定数组长度，由系统为数组分配初始值，再给数组元素赋值。 1 2 3 4 5 6 7 int[] arr1 = new int[5]; for (int i = 0; i\u0026lt; arr1.length; i++){ arr1[i] = i+1; } char[] arr2 = new char[3]; arr2[0] = \u0026#39;a\u0026#39;; arr2[2] = \u0026#39;c\u0026#39;; 练习：创建一个长度为 10 的数组，键盘录入 10 个整数为数组元素赋值。\n数组内存分配 什么是内存 内存是计算机中的重要原件，是一个临时存储区域，作用是运行程序。\n我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。\nJava中的内存分配 目前我们只需要记住两个内存，分别是：栈内存和堆内存。\n区域名称 作用 寄存器 给CPU使用，和我们开发无关。 方法区 存储可以运行的class文件。 本地方法栈 JVM在使用操作系统功能的时候使用，和我们开发无关。 堆内存 存储对象或者数组， new来创建的，都存储在堆内存 。 方法栈 方法运行时使用的内存 ，比如main方法运行，进入方法栈中执行。 变量存放在栈内存，对象存放在堆内存\n如果是 基本数据类型 直接存放在栈内的变量里，如果是 引用数据类型 就把堆内存中 地址值 存到栈内的变量里。\n1 2 3 4 String s1,s2,s3 = \u0026#34;abc\u0026#34;, s4 =\u0026#34;abc\u0026#34; ; s1 = new String(\u0026#34;abc\u0026#34;); s2 = new String(\u0026#34;abc\u0026#34;); System.out.println(s1 == s2); 一维数组的访问 索引 每一个存储到数组的元素，都会自动的拥有一个编号，从 0 开始。这个编号称为 数组索引（index），可以通过数组的索引访问到数组中的元素。\n1 2 3 4 5 6 7 8 9 10 // 数组名[索引]; int[] arr = new int[3]; //输出数组名 System.out.println(arr); //[I@880ec60 .... //输出数组中的元素 System.out.println(arr[0]); System.out.println(arr[1]); System.out.println(arr[2]); 数组遍历 所谓 遍历(Traversal) ，是指沿着某条搜索路线，依次 对树、图、集合 \u0026hellip; 中每个节点均做一次 访问。\n通过 数组名 [index] 的方法可以直接获取数组中的某一个元素，但如果想要输出一个长数组中的所有元素，通过一个个输出的方法肯定是不合适的，那么怎么输出所有元素？\n1 2 3 4 5 6 7 8 9 10 11 int[] arr1 = { 1, 2, 3, 4, 5 }; System.out.println(arr1[0]); System.out.println(arr1[1]); System.out.println(arr1[2]); System.out.println(arr1[3]); System.out.println(arr1[4]); int[] arr2 = {11, 22, 33, 44, 55}; for(int x=0; x\u0026lt;arr2.length; x++) { System.out.println(arr2[x]); } 数组索引越界异常 下列代码有什么错误？\n1 2 int[] arr = {10, 20, 30}; System.out.println(arr[3]); 1 2 3 4 5 String teachers[] = {\u0026#34;张三\u0026#34;, \u0026#34;李四\u0026#34;, \u0026#34;王五\u0026#34;}; for (int i = 0; i \u0026lt; 4; i++) { System.out.println(teachers[i]); } System.out.println(\u0026#34;显示完毕！\u0026#34;); 多维数组的定义与使用 二维数组的声明和创建 声明数组 数据类型 [ ] [ ] 数组名；\n数据类型 数组名[ ] [ ]；\n二维数组第二维的所有元素具有相同的数据类型。\n二维数组的第一维的所有元素时数组类型。\n声明二维数组时，不能在方括号中指定数组的元素个数。\n创建二维数组 使用 new 关键字创建数组并分配存储空间。\n数组名 = new 数据类型 [第一维长度] [第二维长度];\t如 a = new int [3] [2]\t表示创建 3 行 2 列的数组。\n练习 打印 0 ~ 100 的所有数字，当数字包含 7 或者是 7 的倍数的时候，改为打印 \u0026ldquo;过\u0026rdquo;。 1 2 3 4 5 6 7 8 for (int i =0;i\u0026lt;=100;i++){ if ((i % 7==0) || (i%10==7)){ System.out.println(\u0026#34;过\u0026#34;); }else { System.out.println(i); } } 键盘录入一个大于等于 2 的整数 x，计算并返回 x 的平方根。（只保留整数部分）。 1 2 3 4 5 6 7 8 9 10 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个大于等于2的整数：\u0026#34;); int x = sc.nextInt(); for (int i = 1; i \u0026lt; x; i++) { if(i*i \u0026gt; x){ System.out.println(x+\u0026#34;的平方根的整数部分是\u0026#34;+(i-1)); break; } } 键盘录入一个正整数 x，判断该整数是否是一个质数。（质数：一个整数只能被 1 和自身整除）。\n方法1：如果能被 2 ~ x-1 整除，则 flag = false（标记）。\n方法2：if(x % i == 0){count++}。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Scanner sc = new Scanner(System.in); System.out.println(\u0026#34;请输入一个正整数：\u0026#34;); int x = sc.nextInt(); boolean flag = true; for (int i = 2; i\u0026lt;x;i++){ if (x % i == 0){ flag = false; break; } } if (flag == true){ System.out.println(x+\u0026#34;是质数\u0026#34;); }else if (flag == false){ System.out.println(x+\u0026#34;不是质数\u0026#34;); } 猜数字小游戏。程序自动生成一个 1 ~ 100 之间的随机数字，使用程序猜出这个数字是多少。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Random r = new Random(); int num = r.nextInt(100)+1; Scanner sc = new Scanner(System.in); boolean a = true; System.out.println(\u0026#34;请输入猜的数字：\u0026#34;); int guess = sc.nextInt(); while (a){ if (guess\u0026lt;num){ System.out.println(\u0026#34;猜小了\u0026#34;); }else if (guess\u0026gt;num){ System.out.println(\u0026#34;猜大了\u0026#34;); }else { System.out.println(\u0026#34;猜对了\u0026#34;); a = false; } } [min,max] 随机整数 ==\u0026gt; ran.nextInt(max-min+1)+min\n创建一个数组存储 10 个随机数，求出最大值和最小值。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Random r = new Random(); int[] arr = new int[10]; for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = r.nextInt(100); } System.out.println(Arrays.toString(arr)); int max = 0; int min = 0; for (int i : arr) { if (max \u0026lt; i) { max = i; } if (min \u0026gt; i) { min = i; } } System.out.println(\u0026#34;数组中最大值为：\u0026#34; + max); System.out.println(\u0026#34;数组中最小值为：\u0026#34; + min); 生成 10 个 1 ~ 100 之间的随机数存入数组，求所有数的和，并求出平均数，最后统计数组中有多少个数比平均数小。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Random r = new Random(); int[] arr = new int[10]; int sum = 0; int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = r.nextInt(100) + 1; sum += arr[i]; } double avg = sum / 10; for (int i : arr) { if (i \u0026lt; avg) { count++; } } System.out.println(\u0026#34;数组中所有数的和为：\u0026#34; + sum); System.out.println(\u0026#34;数组中所有数的平均数为：\u0026#34; + avg); System.out.println(\u0026#34;数组中比平均数小的数有：\u0026#34; + count + \u0026#34;个\u0026#34;); 创建一个数组存储 10 个随机数，并尝试将数组中的元素颠倒。 方法1： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int arr[] = new int[10]; Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = r.nextInt(100); } int arr2[] = new int[arr.length]; for (int i = 0; i \u0026lt; arr.length; i++) { arr2[i] = arr[arr.length -(i+1)]; /* i=0, arr2[0] = arr[9] i=1, arr2[1] = arr[8] */ } System.out.println(Arrays.toString(arr)); System.out.println(Arrays.toString(arr2)); 方法2： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int arr[] = new int[10]; Random r = new Random(); for (int i = 0; i \u0026lt; arr.length; i++) { arr[i] = r.nextInt(100); } System.out.println(Arrays.toString(arr)); int num = 0; // 0 1 2 3 4 5 6 7 8 9 // [63, 86, 15, 83, 48, 20, 45, 22, 79, 80] // num = 63; arr[0] = arr[9] = 80; arr[9] = 63; for (int i = 0; i \u0026lt; arr.length / 2; i++) { num = arr[i]; arr[i] = arr[arr.length - i - 1]; arr[arr.length - i - 1] = num; } System.out.println(Arrays.toString(arr)); ","date":"2023-09-21T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E7%BB%84/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E7%BB%84/","title":"第三章 数组"},{"content":" 顺序语句：按照语句顺序从上往下依次执行，且每条语句必须以分号 “;” 结尾\n分支语句：判断条件执行不同语句\n循环语句：在满足终止循环的条件前，重复执行一条或多条语句\n跳转语句：改变程序的执行顺序\n顺序语句 1 2 3 4 5 6 7 8 int a = 10; int b = 5; int num1 = 0; num1 = a \u0026gt; b ? 100 : 20; // a\u0026gt;b ? true num1 = ((a++ + --b) \u0026gt; 15) \u0026amp;\u0026amp; ((a = 100) \u0026gt; b) ? a : b; System.out.println(num1); 分支语句 if if ( 表达式 )｛ 执行语句 ｝\n如果满足满足表达式的条件，则执行后面的语句\n1 2 3 4 int a = 10; if (a \u0026lt; 10) { System.out.println(\u0026#34;a小于10\u0026#34;); } if\u0026hellip;else 使用else｛｝表示不满足条件的情况下执行的语句，可以添加多个else\n1 2 3 4 5 6 int a = 10; if (a \u0026lt; 10) { System.out.println(\u0026#34;a小于10\u0026#34;); }else { System.out.println(\u0026#34;a大于等于10\u0026#34;); } if\u0026hellip;else if\u0026hellip;else 使用else if（）表示其他情况下执行的语句，可以添加多个else if\n1 2 3 4 5 6 7 8 int a = 10; if (a \u0026lt; 10) { System.out.println(\u0026#34;a小于10\u0026#34;); } else if (a == 10) { System.out.println(\u0026#34;a等于10\u0026#34;); } else { System.out.println(\u0026#34;a大于10\u0026#34;); } 练习：现有分段函数 y，当 x\u0026lt;0 时，y=x+10，当 x=0 时，y=x/2，当 x\u0026gt;0 时，y=x*5，编写程序，输入x的值，输出y的值。\n练习：键盘录入一个整数 x，如果 x 小于等于 100 且大于等于 0，则将 x 减 50，若结果仍大于等于 0，则输出键盘录入时 x 的值；如果 x 不在 [ 0, 100 ] 取值范围内，则输出 “ 取值范围错误 ” 。\nswitch switch（表达式）｛case 1 ：\u0026hellip;；case 2：\u0026hellip;；case 3：\u0026hellip;；｝\n表达式一般为 byte、short、int 类型，只能与常量进行比较\n每个 case 后面的值必须不同\n一个 case 后面可以有多条语句，也可以没有语句\n每执行完一个 case 后面的语句，程序会顺序往后执行下一条语句，需要使用 break 跳出语句\n当case后的值都不匹配时，设置 default 即默认情况下执行，若无 default 则退出 switch 语句\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 Scanner sc = new Scanner(System.in); System.out.print(\u0026#34;请输入年份：\u0026#34;); int year = sc.nextInt(); System.out.print(\u0026#34;请输入月份：\u0026#34;); int month = sc.nextInt(); int days = 0; switch (month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: days = 31; break; case 4: case 6: case 9: case 11: days = 30; break; case 2: if ((year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0)) { days = 29; } else { days = 28; } } System.out.println(year + \u0026#34;年\u0026#34; + month + \u0026#34;月有\u0026#34; + days + \u0026#34;天\u0026#34;); 循环语句 while while（表达式）｛语句｝\n表示如果满足表达式的条件，就执行语句，执行完后再判断是否满足条件，循环执行直到不满足条件\n1 2 3 4 5 int i = 0; while (i \u0026lt; 10) { i += 1; } System.out.println(\u0026#34;跳出while循环时，i的值为：\u0026#34; + i); 练习：键盘录入一个整数，输出 0 到这个数的和。\n练习：键盘录入三个整数，取值范围在 100~200 之间，可以等于 100 或 200，当输入的数字 不在取值范围内时，打印 “ 您输入的数字不在范围内，请重新输入 ” ，求最大值 并输出。（使用 while）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 Scanner sc = new Scanner(System.in); // -------------------------------------------------------- System.out.print(\u0026#34;请输入第一个整数：\u0026#34;); int num1 = sc.nextInt(); while (num1 \u0026gt; 200 || num1 \u0026lt; 100) { System.out.print(\u0026#34;不在取值范围内，请重新输入第一个整数：\u0026#34;); num1 = sc.nextInt(); } System.out.println(\u0026#34;第一个数的值为：\u0026#34; + num1); // -------------------------------------------------------- System.out.print(\u0026#34;请输入第二个整数：\u0026#34;); int num2 = sc.nextInt(); while (num2 \u0026gt; 200 || num2 \u0026lt; 100) { System.out.print(\u0026#34;不在取值范围内，请重新输入第二个整数：\u0026#34;); num2 = sc.nextInt(); } System.out.println(\u0026#34;第二个数的值为：\u0026#34; + num2); // -------------------------------------------------------- System.out.print(\u0026#34;请输入第三个整数：\u0026#34;); int num3 = sc.nextInt(); while (num3 \u0026gt; 200 || num3 \u0026lt; 100) { System.out.print(\u0026#34;不在取值范围内，请重新输入第三个整数：\u0026#34;); num3 = sc.nextInt(); } System.out.println(\u0026#34;第三个数的值为：\u0026#34; + num3); // -------------------------------------------------------- int max = 0; // max = num1 \u0026gt; num2 ? num1 : num2; // max = max \u0026gt; num3 ? max : num3; max = (num1 \u0026gt; num2 ? num1 : num2) \u0026gt; num3 ? (num1 \u0026gt; num2 ? num1 : num2) : num3; System.out.println(\u0026#34;三个整数中最大的是：\u0026#34; + max); do\u0026hellip;while do {语句} while (表达式)\n先执行语句，再判断是否满足表达式，如果满足，则重复执行语句，否则结束循环\n1 2 3 4 5 int i = 0; do { i += 1; }while (i \u0026lt;= 1); System.out.println(i); 注意：do\u0026hellip;while 循环先执行语句内容，再判断表达式是否成立，即使表达式不成立，也要先执行一次语句。\nfor for（表达式1；表达式2；表达式3）｛语句｝\n表达式1通常为赋值表达式，用来为循环变量赋初值\t如 int a = 0;\n表达式2通常为关系表达式或逻辑表达式，作为循环的判断条件\t如 a \u0026lt;= 10;\n表达式3通常为循环变量自增或自减表达式\t如 a++;\n1 2 3 for (int a = 0; a \u0026lt; 10; a++) { System.out.println(\u0026#34;现在a的值为\u0026#34; + a); } 练习：键盘录入一个整数，输出0到这个数的和。\n注意：for 循环的三个表达式都可以省略，但分号不能省略\n如果省略表达式1 应该在for语句之前给循环变量赋初始值\n如果省略表达式2 则不判断循环条件，一直执行语句，形成死循环，通常不省略\n如果省略表达式3 循环变量的值不发生改变，满足条件的情况下，循环语句一直执行，与 while 循环相似\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // for循环 for (int a = 0; a \u0026lt; 10; a++) { System.out.println(a);\t// 0...9 } // for循环省略表达式3 for (int b = 0; b \u0026lt; 10; ) { System.out.println(b);\t// 死循环 } // while循环 int c = 0; while (c \u0026lt; 10) { System.out.println(c);\t// 死循环 } 跳转语句 break 终止 switch 循环语句与单层循环语句\n对于多层循环语句，从内循环跳出到外循环\n1 2 3 4 5 6 7 8 9 10 11 12 int sum = 0; int count = 0; for (int i = 1; i\u0026lt;=5;i++){ for (int j = 1; j\u0026lt;=5;j++){ sum += 1;\tif (j == 3){ break; } } count += sum; } System.out.println(count); continue 在 while 或 do\u0026hellip;while 语句中，continue 后的语句不执行，直接开始下一次循环\n在 for 语句中，continue 后的语句不执行，跳转到表达式 3，开始下一次循环\n1 2 3 4 5 6 7 int sum = 0; for (int i = 0; i \u0026lt; 10; i++) { sum += 1; continue;\t// 跳转到 for 循环的表达式3 sum += i; } System.out.println(sum); 嵌套 if 循环\n1 2 3 4 5 6 7 8 int sum = 0; for (int i = 0; i \u0026lt; 10; i++) { if (i % 2 == 0) {\t// 短路，跳出循环 continue; } sum += i; } System.out.println(sum); 练习：键盘录入10个整数，分别计算正数个数、正数和、负数个数、负数和、零的个数（使用 continue）。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int a = 0, b = 0, c = 0, add = 0, minus = 0 , zero = 0; System.out.println(\u0026#34;请输入10个正整数或负整数:\u0026#34;); Scanner sc = new Scanner(System.in); for (int i = 0; i \u0026lt; 10; i++) { int num = sc.nextInt(); if (num \u0026lt; 0) { a++; minus += num; continue; }else if(num == 0){ c++; continue; } b++; add += num; } System.out.println(\u0026#34;正数有\u0026#34;+b+\u0026#34;个，和为\u0026#34;+add); System.out.println(\u0026#34;负数有\u0026#34;+a+\u0026#34;个，和为\u0026#34;+minus); System.out.println(\u0026#34;零有\u0026#34;+c+\u0026#34;个\u0026#34;); 练习 某个系统有以下11个模块： 请编写代码实现：当用户输入某个正整数时，执行该数字对应的模块（本题只要求将 \u0026ldquo;5. 计算Java工程师的月薪\u0026rdquo; 这一个模块进行具体实现，其他模块可以直接输出 \u0026ldquo;本模块功能未实现\u0026rdquo; ）。并且在每个模块执行完毕后，继续输出主界面。当用户输入 0，则退出程序。\nJava工程师月薪 = 底薪 + 底薪 × 25% × 月工作完成分数 / 100 + 15 × 月实际工作天数 - 月应扣保险数；\n下列程序运行的结果是（）\n​A. x = 6\nB. x = 5\nC. x = 2\nD. 编译失败\n1 2 3 4 5 6 7 8 9 public class Test { public static void main(String[] args) { int x = 5; while (++x \u0026lt; 4) { --x; } System.out.println(\u0026#34;x=\u0026#34; + x); } } 求出 1 ~ 300 中能被 3 整除 且 至少有一位数字为 5 的整数，打印输出。\n键盘录入一个5位数，如果不是五位数，则重新输入。判断它是不是回文数。回文数表示：个位与万位相同，十位与千位相同，即对称的数字。\n一只公鸡 5 块钱，一只母鸡 3 块钱，3 只小鸡 1 块钱，一个农夫用 100 块钱买 100 只鸡，有多少种买法？\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // 第一题 package com.company.test; import java.util.Scanner; public class JavaEngineer { public static void main(String[] args) { //用户选择的数 int userSel = -1; //使用while(true)，在单个模块功能执行结束后，重新输出主界面，继续循环 while (userSel \u0026lt; 0) { System.out.println(\u0026#34;----------------------------\u0026#34;); System.out.println(\u0026#34; 蓝桥java工程师管理系统\u0026#34;); System.out.println(\u0026#34;----------------------------\u0026#34;); System.out.println(\u0026#34;1.输入Java工程师资料\u0026#34;); System.out.println(\u0026#34;2.删除指定Java工程师资料\u0026#34;); System.out.println(\u0026#34;3.查询Java工程师资料\u0026#34;); System.out.println(\u0026#34;4.修改Java工程师资料\u0026#34;); System.out.println(\u0026#34;5.计算Java工程师的月薪\u0026#34;); System.out.println(\u0026#34;6.保存新添加的工程师资料\u0026#34;); System.out.println(\u0026#34;7.对Java工程师信息排序\u0026#34;); System.out.println(\u0026#34;8.输出所有Java工程师信息\u0026#34;); System.out.println(\u0026#34;9.清空所有Java工程师数据\u0026#34;); System.out.println(\u0026#34;10.打印Java工程师数据报表\u0026#34;); System.out.println(\u0026#34;11.从文件重新导入Java工程师数据\u0026#34;); System.out.println(\u0026#34;----------------------------\u0026#34;); System.out.print(\u0026#34;请输入您的选择：\u0026#34;); Scanner sc = new Scanner(System.in); int num = sc.nextInt(); switch (num) { case 1: case 2: case 3: case 4: case 6: case 7: case 8: case 9: case 10: case 11: System.out.println(\u0026#34;本模块未实现\u0026#34;); break; case 5: System.out.print(\u0026#34;请输入底薪：\u0026#34;); int salary = sc.nextInt(); System.out.print(\u0026#34;请月工作完成份数：\u0026#34;); int count = sc.nextInt(); System.out.print(\u0026#34;请输入月工作天数：\u0026#34;); int day = sc.nextInt(); System.out.print(\u0026#34;请输入应扣保险数：\u0026#34;); int decl = sc.nextInt(); float total = salary + salary * 0.25f * count / 100 + 15 * day - decl; System.out.println(\u0026#34;月薪为：\u0026#34; + total); break; case 0: userSel = 0; System.out.println(\u0026#34;程序结束！\u0026#34;); } } } } 1 2 3 4 5 6 7 8 // 第四题 Scanner sc = new Scanner(System.in); int num = sc.nextInt(); while (num/10000 == 0 || num/100000 != 0){ num = sc.nextInt(); } System.out.println(num); // ...... 1 2 3 4 5 6 7 8 9 10 // 第五题 for (int a = 0; a \u0026lt;= 20; a++) { for (int b = 0; b \u0026lt;= 33; b++) { for (int c = 0; c \u0026lt;= 300; c += 3) { if ((a * 5 + b * 3 + c / 3) == 100 \u0026amp;\u0026amp; (a + b + c) == 100) { System.out.println(\u0026#34;a:\u0026#34; + a + \u0026#34;,b:\u0026#34; + b + \u0026#34;,c:\u0026#34; + c); } } } } Random 在 JDK 自带的常用的 random 中有两个，这俩都是 产生随机数 的，不过一个是 util 下的 random，另外一个是Math下的。\nutil.Random 导包\n1 import java.util.Random 创建Random类型的引用\n1 Random ran = new Random(); 使用功能\n1 2 3 4 5 6 7 8 ran.nextInt() // 产生int返回内的随机整数 ran.nextInt(整数n) // 产生[0,n)范围内的int类型的随机整数 ran.nextDouble() // 产生[0.0,1.0)范围内double随机小数 常用的两个生成随机数的语句\n1）[min,max) 随机整数 ==\u0026gt; ran.nextInt(max-min)+min\n2）[min,max] 随机整数 ==\u0026gt; ran.nextInt(max-min+1)+min\n\u0026mdash;\u0026gt; [0,max-min+1)+min\n\u0026mdash;\u0026gt; [min,max+1) \u0026ndash;\u0026gt; [min,max]\nMath.random Math.random() 是令系统随机选取大于等于 0.0 且小于 1.0 的伪随机 double 值。\n1 2 3 4 5 int num = (int)(Math.random()*n);\t//返回大于等于0小于n之间的随机数 int num0 = m + (int)(Matn.randon()*n);\t//返回大于等于m小于m+n（不包括m+n）之间的随机数 ","date":"2023-09-14T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/","title":"第二章 流程控制语句"},{"content":"标识符 标识符用来表示变量、常量、类、方法、数组、文件、接口、包等元素的名字\nJava中标识符由 字母、数字、下划线、$ 组成\n区分大小写 不能以数字开头 没有长度限制，最多包含65535个字符 不能使用Java中的关键字 数据类型 数据类型分为引用数据类型和基本数据类型，另外还有特殊的空类型\n基本数据类型有：byte、short、int、long、float、double、boolean、char\n整数类型 byte\t-2^7 ~ 2^7-1 short\t-2^15 ~ 2^15-1 int\t-2^31 ~ 2^31-1 long\t-2^63 ~ 2^63-1 Java中的默认用int类整型，如果要表示更大的整数，需要在数字后面加字母L\n浮点数类型 float\t单精度浮点型\t-3.4 * 10^38 ~ 3.4 * 10^38 double\t双精度浮点型\t-1.7 * 10^308 ~ 1.7 * 10^308 用不同进制表示整数 HEX，英文全称 Hexadecimal，表示十六进制。\t使用 09 及 AF (a~f) 表示，以 0x 开头\n如 0xFFFF\t0x 7E(14)7 7+14x16^1+7x16^2\nDEC，英文全称 Decimal，表示十进制。 使用 0~9 表示\n如 772\nOCT，英文全称 Octal，表示八进制。 使用 0~7 表示，以 0 开头\n如 0777\nBIN，英文全称 Binary，表示二进制。 使用 0 或 1 表示，以0b开头\n如 0010 1011 2^0+2^1+2^3+2^5 字符类型 字符是用单引号括起来的单个符号，占用2个字节，16位\n声明一个字符：char 字符名 = 字符内容;\n布尔类型 值为 true 或 false\n数据类型转换 隐式类型转换： 范围小的可以自动转为范围大的\n强制类型转换： 范围大的赋值给小的\n任何类型遇到字符串，转换为字符串 int a = (int) 10.2;\nchar\u0026lt;int\njava默认使用Unicode编码，Unicode兼容于Ascii\n1 2 3 System.out.println(\u0026#34;\u0026#34;+10+1); System.out.println(10+\u0026#34;\u0026#34;+1); System.out.println(10+1+\u0026#34;\u0026#34;); 数据类型转换分为隐式类型转换和强制类型转换，对于隐式类型转换，有：\n取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算\nbyte、short、char三种类型的数据在运算的时候，都会先提升为int，再进行运算\n如果把一个取值范围大的数值赋值给取值范围小的变量，需要使用\t变量名 = （目标数据类型）被强转的数据\t进行强制类型转换\n键盘录入Scanner 1 2 3 4 5 import java.util.Scanner; Scanner sc = new Scanner(System.in); int num = sc.nextInt(); String str = sc.next(); // 不接收空格、回车，将空格、回车视为终止符号 String str = sc.nextLine();\t// 接收空格、回车 键盘录入年月日，并输出\n1 2 3 4 5 6 7 8 9 System.out.println(\u0026#34;请输入年份\u0026#34;); int a = sc.nextInt(); System.out.println(\u0026#34;请输入月份\u0026#34;); int b = sc.nextInt(); System.out.println(\u0026#34;请输入日\u0026#34;); int c = sc.nextInt(); System.out.println(\u0026#34;今天星期几\u0026#34;); String d = sc.next(); System.out.println(\u0026#34;今天是\u0026#34;+a+\u0026#34;年\u0026#34;+b+\u0026#34;月\u0026#34;+c+\u0026#34;日，\u0026#34;+d); 运算符和表达式 算术运算符 ​ +\t-\t*\t/\t%\t++\t\u0026ndash;\n自增、自减运算符 ++ \u0026ndash;\n如果单独写一行，++和\u0026ndash;无论写在前面还是后面，结果都是一样的\n参与运算时？\n关系运算符 ==\t\u0026gt;=\t\u0026lt;=\t\u0026gt;\t\u0026lt;\t!=\n成立结果则为true，否则为false\n！true\n逻辑运算符 \u0026amp;\t|\t\u0026amp;\u0026amp;\t||\t^\t!\n在数学中，x 大于 5 小于 10 可以写为\t5\u0026lt;x\u0026lt;10 ，但在java中需要把该式子拆开，再合并进行表达\n即 5 \u0026lt; x 和 x \u0026lt; 10 ，写为 5 \u0026lt; x \u0026amp; x \u0026lt; 10\n使用 短路逻辑运算符，提高代码效率\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 System.out.println(true || false); // 一真为真 System.out.println(true || true); System.out.println(false || false); System.out.println(true \u0026amp;\u0026amp; false); // 一假为假 System.out.println(true \u0026amp;\u0026amp; true); System.out.println(false \u0026amp;\u0026amp; false); System.out.println(true ^ false); // 相同为false System.out.println(true ^ true); System.out.println(false ^ false); System.out.println(!true); // 取反 System.out.println(!false); 练习：键盘录入两个整数，如果有一个等于6或者两数相加的和为6的倍数，则输出true\n赋值运算符 =\t+=\t-=\t/=\t*=\t%=\n将右边的数与变量原本的值进行运算后，再赋值给变量\n细节：底层隐藏了一个强制类型转换\n1 2 3 short s = 1; s += 1;\t// s = (short)(s + 1); System.out.println(s); 三元运算符 格式：关系表达式 ？ 表达式1 ：表达式2\n判断关系表达式的值，如果为 true，则结果为表达式1，否则为表达式2\n注意：三元表达式的结果必须被使用，单独写三元表达式会报错\n1 2 3 4 5 6 7 8 9 10 11 int a = 10; int b = 5; int num1 = 0; num1 = a \u0026gt; b ? 100 : 20; num1 = ((a++ + --b) \u0026gt; 15) \u0026amp;\u0026amp; ((a = 100) \u0026gt; b) ? a : b; System.out.println(num1); System.out.println(a); System.out.println(b); 练习：键盘录入三个人的身高分别为171cm，193cm，164cm，用程序输出最高身高\n运算符优先级 使用括号（）将需要先运算的语句包裹，可以提高程序的可读性\n表达式与语句 练习 进制转换\n​0b11 0101 1010\n0xFFF\n02023\n使用以下变量存储手机信息，并打印输出\n品牌\tiphone\n尺寸\t4.0\n像素\t1080*720px\n内存\t256G\n价格\t6998\n键盘录入三门科目成绩，计算三门成绩的平均分\n键盘录入长方体的长L，宽W，高H，计算长方体的体积\n键盘录入圆柱体的底面圆半径R，高H，定义常量π为P，值为3.14，计算圆柱体的体积（圆柱体体积公式 = π * R的平方 * H）\n","date":"2023-09-07T00:00:00Z","image":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/ba65e3ee473beba74e3e98dabda0662d_hu_979f531dc0654cc3.jpeg","permalink":"https://YeYingQingYu.github.io/p/%E7%AC%AC%E4%B8%80%E7%AB%A0-java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","title":"第一章 JAVA语言基础"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","permalink":"https://YeYingQingYu.github.io/p/markdown-%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/","title":"Markdown 语法示例"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://YeYingQingYu.github.io/p/katex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/","title":"KaTeX 数学公式"}]